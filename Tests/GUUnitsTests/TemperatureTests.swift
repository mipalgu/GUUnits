/*
* TemperatureTests.swift
* GUUnitsTests
*
* Created by Callum McColl on 05/06/2019.
* Copyright Â© 2019 Callum McColl. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above
*    copyright notice, this list of conditions and the following
*    disclaimer in the documentation and/or other materials
*    provided with the distribution.
*
* 3. All advertising materials mentioning features or use of this
*    software must display the following acknowledgement:
*
*        This product includes software developed by Callum McColl.
*
* 4. Neither the name of the author nor the names of contributors
*    may be used to endorse or promote products derived from this
*    software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* -----------------------------------------------------------------------
* This program is free software; you can redistribute it and/or
* modify it under the above terms or under the terms of the GNU
* General Public License as published by the Free Software Foundation;
* either version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see http://www.gnu.org/licenses/
* or write to the Free Software Foundation, Inc., 51 Franklin Street,
* Fifth Floor, Boston, MA  02110-1301, USA.
*
*/

import CGUUnits
@testable import GUUnits
import XCTest

final class CelsiusTypeTests: XCTestCase {

    func testCelsius_tEquality() {
        XCTAssertEqual(Celsius_t(5), Celsius_t(5))
    }

    func testCelsius_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Celsius_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Celsius_t.self, from: try encoder.encode(original))
        )
    }

    func testCelsius_tSelfInit() {
        let expected = Celsius_t(15)
        XCTAssertEqual(expected, Celsius_t(expected))
    }

    func testCelsius_tSelfExactlyInit() {
        let expected = Celsius_t(15)
        XCTAssertEqual(expected, Celsius_t(exactly: expected))
    }

    func testCelsius_tComparable() {
        let lhs = Celsius_t(1)
        let rhs = Celsius_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCelsius_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Celsius_t(5).magnitude, expected)
    }

    func testCelsius_tTruncatingInit() {
        let expected = Celsius_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Celsius_t(truncatingIfNeeded: expected), expected)
    }

    func testCelsius_tClampingInit() {
        let expected = Celsius_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Celsius_t(clamping: expected), expected)
    }

    func testCelsius_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Celsius_t(5).bitWidth, expected)
    }

    func testCelsius_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Celsius_t(5).leadingZeroBitCount, expected)
    }

    func testCelsius_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Celsius_t(5).nonzeroBitCount, expected)
    }

    func testCelsius_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Celsius_t(expected), Celsius_t(integerLiteral: CInt.max))
    }

    func testCelsius_tTruncatingBits() {
        let expected = Celsius_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Celsius_t(_truncatingBits: UInt.max))
    }

    func testCelsius_tAddition() {
        let expected = Celsius_t(CInt(5) + CInt(3))
        XCTAssertEqual(Celsius_t(5) + Celsius_t(3), expected)
    }

    func testCelsius_tSubtraction() {
        let expected = Celsius_t(CInt(5) - CInt(3))
        XCTAssertEqual(Celsius_t(5) - Celsius_t(3), expected)
    }

    func testCelsius_tMultiplication() {
        let expected = Celsius_t(CInt(5) * CInt(3))
        XCTAssertEqual(Celsius_t(5) * Celsius_t(3), expected)
    }

    func testCelsius_tDivision() {
        let expected = Celsius_t(CInt(6) / CInt(3))
        XCTAssertEqual(Celsius_t(6) / Celsius_t(3), expected)
    }

    func testCelsius_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Celsius_t(rawOriginal)
        let result = original.addingReportingOverflow(Celsius_t(1))
        XCTAssertEqual(result.0, Celsius_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCelsius_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Celsius_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Celsius_t(2))
        XCTAssertEqual(result.0, Celsius_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCelsius_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Celsius_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Celsius_t(1))
        XCTAssertEqual(result.0, Celsius_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCelsius_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Celsius_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Celsius_t(CInt.max))
        XCTAssertEqual(result.0, Celsius_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCelsius_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Celsius_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Celsius_t(CInt.max))
        XCTAssertEqual(result.0, Celsius_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCelsius_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Celsius_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testCelsius_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Celsius_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Celsius_t(original))
    }

    func testCelsius_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Celsius_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Celsius_t(original))
    }

    func testCelsius_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Celsius_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Celsius_t(original))
    }

    func testCelsius_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Celsius_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Celsius_t(original))
    }

    func testCelsius_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Celsius_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Celsius_t(original))
    }

    func testCelsius_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Celsius_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Celsius_t(original))
    }

    func testCelsius_tMod() {
        let original = CInt(4)
        let expected = Celsius_t(original % 2)
        XCTAssertEqual(Celsius_t(original) % 2, expected)
    }

    func testCelsius_uEquality() {
        XCTAssertEqual(Celsius_u(5), Celsius_u(5))
    }

    func testCelsius_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Celsius_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Celsius_u.self, from: try encoder.encode(original))
        )
    }

    func testCelsius_uSelfInit() {
        let expected = Celsius_u(15)
        XCTAssertEqual(expected, Celsius_u(expected))
    }

    func testCelsius_uSelfExactlyInit() {
        let expected = Celsius_u(15)
        XCTAssertEqual(expected, Celsius_u(exactly: expected))
    }

    func testCelsius_uComparable() {
        let lhs = Celsius_u(1)
        let rhs = Celsius_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCelsius_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Celsius_u(5).magnitude, expected)
    }

    func testCelsius_uTruncatingInit() {
        let expected = Celsius_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Celsius_u(truncatingIfNeeded: expected), expected)
    }

    func testCelsius_uClampingInit() {
        let expected = Celsius_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Celsius_u(clamping: expected), expected)
    }

    func testCelsius_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Celsius_u(5).bitWidth, expected)
    }

    func testCelsius_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Celsius_u(5).leadingZeroBitCount, expected)
    }

    func testCelsius_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Celsius_u(5).nonzeroBitCount, expected)
    }

    func testCelsius_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Celsius_u(expected), Celsius_u(integerLiteral: CUnsignedInt.max))
    }

    func testCelsius_uTruncatingBits() {
        let expected = Celsius_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Celsius_u(_truncatingBits: UInt.max))
    }

    func testCelsius_uAddition() {
        let expected = Celsius_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Celsius_u(5) + Celsius_u(3), expected)
    }

    func testCelsius_uSubtraction() {
        let expected = Celsius_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Celsius_u(5) - Celsius_u(3), expected)
    }

    func testCelsius_uMultiplication() {
        let expected = Celsius_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Celsius_u(5) * Celsius_u(3), expected)
    }

    func testCelsius_uDivision() {
        let expected = Celsius_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Celsius_u(6) / Celsius_u(3), expected)
    }

    func testCelsius_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Celsius_u(rawOriginal)
        let result = original.addingReportingOverflow(Celsius_u(1))
        XCTAssertEqual(result.0, Celsius_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCelsius_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Celsius_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Celsius_u(2))
        XCTAssertEqual(result.0, Celsius_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCelsius_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Celsius_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Celsius_u(1))
        XCTAssertEqual(result.0, Celsius_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCelsius_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Celsius_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Celsius_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Celsius_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCelsius_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Celsius_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Celsius_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Celsius_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCelsius_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Celsius_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testCelsius_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Celsius_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Celsius_u(original))
    }

    func testCelsius_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Celsius_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Celsius_u(original))
    }

    func testCelsius_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Celsius_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Celsius_u(original))
    }

    func testCelsius_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Celsius_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Celsius_u(original))
    }

    func testCelsius_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Celsius_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Celsius_u(original))
    }

    func testCelsius_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Celsius_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Celsius_u(original))
    }

    func testCelsius_uMod() {
        let original = CUnsignedInt(4)
        let expected = Celsius_u(original % 2)
        XCTAssertEqual(Celsius_u(original) % 2, expected)
    }

    func testCelsius_fEquality() {
        XCTAssertEqual(Celsius_f(5), Celsius_f(5))
    }

    func testCelsius_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Celsius_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Celsius_f.self, from: try encoder.encode(original))
        )
    }

    func testCelsius_fSelfInit() {
        let expected = Celsius_f(15)
        XCTAssertEqual(expected, Celsius_f(expected))
    }

    func testCelsius_fSelfExactlyInit() {
        let expected = Celsius_f(15)
        XCTAssertEqual(expected, Celsius_f(exactly: expected))
    }

    func testCelsius_fComparable() {
        let lhs = Celsius_f(1)
        let rhs = Celsius_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCelsius_fRadix() {
        XCTAssertEqual(Celsius_f.radix, Float.radix)
    }

    func testCelsius_fExponentBitCount() {
        XCTAssertEqual(Celsius_f.exponentBitCount, Float.exponentBitCount)
    }

    func testCelsius_fSignificandBitCount() {
        XCTAssertEqual(Celsius_f.significandBitCount, Float.significandBitCount)
    }

    func testCelsius_fMagnitude() {
        let expected = Celsius_f(Float(5).magnitude)
        XCTAssertEqual(Celsius_f(5).magnitude, expected)
    }

    func testCelsius_fExactlyInit() {
        let expected = Celsius_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Celsius_f(exactly: Int(5)), expected)
    }

    func testCelsius_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Celsius_f(param).isTotallyOrdered(belowOrEqualTo: Celsius_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testCelsius_fBinade() {
        let raw = Float(5)
        let expected = Celsius_f(raw.binade)
        XCTAssertEqual(Celsius_f(raw).binade, expected)
    }

    func testCelsius_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Celsius_f(raw).significandWidth, raw.significandWidth)
    }

    func testCelsius_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Celsius_f(raw).debugDescription, raw.debugDescription)
    }

    func testCelsius_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Celsius_f("5.0"), Celsius_f(raw))
    }

    func testCelsius_fStaticVars() {
        XCTAssertEqual(Celsius_f.nan.isNaN, Celsius_f(Float.nan).isNaN)
        XCTAssertEqual(
            Celsius_f.signalingNaN.isSignalingNaN,
            Celsius_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Celsius_f.infinity, Celsius_f(Float.infinity))
        XCTAssertEqual(Celsius_f.greatestFiniteMagnitude, Celsius_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Celsius_f.pi, Celsius_f(Float.pi))
        XCTAssertEqual(Celsius_f.leastNormalMagnitude, Celsius_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Celsius_f.leastNonzeroMagnitude, Celsius_f(Float.leastNonzeroMagnitude))
    }

    func testCelsius_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Celsius_f(raw).ulp, Celsius_f(raw.ulp))
    }

    func testCelsius_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Celsius_f(raw).sign, raw.sign)
    }

    func testCelsius_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Celsius_f(raw).significand, Celsius_f(raw.significand))
    }

    func testCelsius_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Celsius_f(raw).nextUp, Celsius_f(raw.nextUp))
    }

    func testCelsius_fVars() {
        XCTAssertEqual(Celsius_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Celsius_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Celsius_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Celsius_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Celsius_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Celsius_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Celsius_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Celsius_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Celsius_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Celsius_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Celsius_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Celsius_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Celsius_f(5).description, Float(5).description)
        XCTAssertEqual(Celsius_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Celsius_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Celsius_f(5).exponent, Float(5).exponent)
    }

    func testCelsius_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Celsius_f(Float(4))
        result.formRemainder(dividingBy: Celsius_f(denominator))
        XCTAssertEqual(result, Celsius_f(original))
    }

    func testCelsius_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Celsius_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Celsius_f(denominator))
        XCTAssertEqual(result, Celsius_f(original))
    }

    func testCelsius_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Celsius_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Celsius_f(original))
    }

    func testCelsius_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Celsius_f(Float(4))
        result.addProduct(Celsius_f(lhs), Celsius_f(rhs))
        XCTAssertEqual(result, Celsius_f(original))
    }

    func testCelsius_fIsEqual() {
        let this = Celsius_f(5)
        let other = Celsius_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testCelsius_fIsLess() {
        let this = Celsius_f(5)
        let other = Celsius_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testCelsius_fIsLessThanOrEqual() {
        let this = Celsius_f(5)
        let other = Celsius_f(6)
        let other2 = Celsius_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testCelsius_fOperations() {
        let lhs = Celsius_f(6)
        let rhs = Celsius_f(3)
        XCTAssertEqual(lhs + rhs, Celsius_f(9))
        XCTAssertEqual(lhs - rhs, Celsius_f(3))
        XCTAssertEqual(lhs * rhs, Celsius_f(18))
        XCTAssertEqual(lhs / rhs, Celsius_f(2))
    }

    func testCelsius_fTimesEqual() {
        var this = Celsius_f(3)
        this *= Celsius_f(4)
        XCTAssertEqual(this, Celsius_f(12))
    }

    func testCelsius_fDivideEqual() {
        var this = Celsius_f(6)
        this /= Celsius_f(3)
        XCTAssertEqual(this, Celsius_f(2))
    }

    func testCelsius_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Celsius_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Celsius_f(expected))
    }

    func testCelsius_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Celsius_f(original).distance(to: Celsius_f(other)), expected)
    }

    func testCelsius_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Celsius_f(original).advanced(by: 3), Celsius_f(expected))
    }

    func testCelsius_dEquality() {
        XCTAssertEqual(Celsius_d(5), Celsius_d(5))
    }

    func testCelsius_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Celsius_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Celsius_d.self, from: try encoder.encode(original))
        )
    }

    func testCelsius_dSelfInit() {
        let expected = Celsius_d(15)
        XCTAssertEqual(expected, Celsius_d(expected))
    }

    func testCelsius_dSelfExactlyInit() {
        let expected = Celsius_d(15)
        XCTAssertEqual(expected, Celsius_d(exactly: expected))
    }

    func testCelsius_dComparable() {
        let lhs = Celsius_d(1)
        let rhs = Celsius_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCelsius_dRadix() {
        XCTAssertEqual(Celsius_d.radix, Double.radix)
    }

    func testCelsius_dExponentBitCount() {
        XCTAssertEqual(Celsius_d.exponentBitCount, Double.exponentBitCount)
    }

    func testCelsius_dSignificandBitCount() {
        XCTAssertEqual(Celsius_d.significandBitCount, Double.significandBitCount)
    }

    func testCelsius_dMagnitude() {
        let expected = Celsius_d(Double(5).magnitude)
        XCTAssertEqual(Celsius_d(5).magnitude, expected)
    }

    func testCelsius_dExactlyInit() {
        let expected = Celsius_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Celsius_d(exactly: Int(5)), expected)
    }

    func testCelsius_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Celsius_d(param).isTotallyOrdered(belowOrEqualTo: Celsius_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testCelsius_dBinade() {
        let raw = Double(5)
        let expected = Celsius_d(raw.binade)
        XCTAssertEqual(Celsius_d(raw).binade, expected)
    }

    func testCelsius_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Celsius_d(raw).significandWidth, raw.significandWidth)
    }

    func testCelsius_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Celsius_d(raw).debugDescription, raw.debugDescription)
    }

    func testCelsius_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Celsius_d("5.0"), Celsius_d(raw))
    }

    func testCelsius_dStaticVars() {
        XCTAssertEqual(Celsius_d.nan.isNaN, Celsius_d(Double.nan).isNaN)
        XCTAssertEqual(
            Celsius_d.signalingNaN.isSignalingNaN,
            Celsius_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Celsius_d.infinity, Celsius_d(Double.infinity))
        XCTAssertEqual(Celsius_d.greatestFiniteMagnitude, Celsius_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Celsius_d.pi, Celsius_d(Double.pi))
        XCTAssertEqual(Celsius_d.leastNormalMagnitude, Celsius_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Celsius_d.leastNonzeroMagnitude, Celsius_d(Double.leastNonzeroMagnitude))
    }

    func testCelsius_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Celsius_d(raw).ulp, Celsius_d(raw.ulp))
    }

    func testCelsius_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Celsius_d(raw).sign, raw.sign)
    }

    func testCelsius_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Celsius_d(raw).significand, Celsius_d(raw.significand))
    }

    func testCelsius_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Celsius_d(raw).nextUp, Celsius_d(raw.nextUp))
    }

    func testCelsius_dVars() {
        XCTAssertEqual(Celsius_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Celsius_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Celsius_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Celsius_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Celsius_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Celsius_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Celsius_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Celsius_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Celsius_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Celsius_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Celsius_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Celsius_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Celsius_d(5).description, Double(5).description)
        XCTAssertEqual(Celsius_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Celsius_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Celsius_d(5).exponent, Double(5).exponent)
    }

    func testCelsius_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Celsius_d(Double(4))
        result.formRemainder(dividingBy: Celsius_d(denominator))
        XCTAssertEqual(result, Celsius_d(original))
    }

    func testCelsius_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Celsius_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Celsius_d(denominator))
        XCTAssertEqual(result, Celsius_d(original))
    }

    func testCelsius_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Celsius_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Celsius_d(original))
    }

    func testCelsius_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Celsius_d(Double(4))
        result.addProduct(Celsius_d(lhs), Celsius_d(rhs))
        XCTAssertEqual(result, Celsius_d(original))
    }

    func testCelsius_dIsEqual() {
        let this = Celsius_d(5)
        let other = Celsius_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testCelsius_dIsLess() {
        let this = Celsius_d(5)
        let other = Celsius_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testCelsius_dIsLessThanOrEqual() {
        let this = Celsius_d(5)
        let other = Celsius_d(6)
        let other2 = Celsius_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testCelsius_dOperations() {
        let lhs = Celsius_d(6)
        let rhs = Celsius_d(3)
        XCTAssertEqual(lhs + rhs, Celsius_d(9))
        XCTAssertEqual(lhs - rhs, Celsius_d(3))
        XCTAssertEqual(lhs * rhs, Celsius_d(18))
        XCTAssertEqual(lhs / rhs, Celsius_d(2))
    }

    func testCelsius_dTimesEqual() {
        var this = Celsius_d(3)
        this *= Celsius_d(4)
        XCTAssertEqual(this, Celsius_d(12))
    }

    func testCelsius_dDivideEqual() {
        var this = Celsius_d(6)
        this /= Celsius_d(3)
        XCTAssertEqual(this, Celsius_d(2))
    }

    func testCelsius_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Celsius_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Celsius_d(expected))
    }

    func testCelsius_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Celsius_d(original).distance(to: Celsius_d(other)), expected)
    }

    func testCelsius_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Celsius_d(original).advanced(by: 3), Celsius_d(expected))
    }

}

final class FahrenheitTypeTests: XCTestCase {

    func testFahrenheit_tEquality() {
        XCTAssertEqual(Fahrenheit_t(5), Fahrenheit_t(5))
    }

    func testFahrenheit_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Fahrenheit_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Fahrenheit_t.self, from: try encoder.encode(original))
        )
    }

    func testFahrenheit_tSelfInit() {
        let expected = Fahrenheit_t(15)
        XCTAssertEqual(expected, Fahrenheit_t(expected))
    }

    func testFahrenheit_tSelfExactlyInit() {
        let expected = Fahrenheit_t(15)
        XCTAssertEqual(expected, Fahrenheit_t(exactly: expected))
    }

    func testFahrenheit_tComparable() {
        let lhs = Fahrenheit_t(1)
        let rhs = Fahrenheit_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testFahrenheit_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Fahrenheit_t(5).magnitude, expected)
    }

    func testFahrenheit_tTruncatingInit() {
        let expected = Fahrenheit_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Fahrenheit_t(truncatingIfNeeded: expected), expected)
    }

    func testFahrenheit_tClampingInit() {
        let expected = Fahrenheit_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Fahrenheit_t(clamping: expected), expected)
    }

    func testFahrenheit_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Fahrenheit_t(5).bitWidth, expected)
    }

    func testFahrenheit_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Fahrenheit_t(5).leadingZeroBitCount, expected)
    }

    func testFahrenheit_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Fahrenheit_t(5).nonzeroBitCount, expected)
    }

    func testFahrenheit_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Fahrenheit_t(expected), Fahrenheit_t(integerLiteral: CInt.max))
    }

    func testFahrenheit_tTruncatingBits() {
        let expected = Fahrenheit_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Fahrenheit_t(_truncatingBits: UInt.max))
    }

    func testFahrenheit_tAddition() {
        let expected = Fahrenheit_t(CInt(5) + CInt(3))
        XCTAssertEqual(Fahrenheit_t(5) + Fahrenheit_t(3), expected)
    }

    func testFahrenheit_tSubtraction() {
        let expected = Fahrenheit_t(CInt(5) - CInt(3))
        XCTAssertEqual(Fahrenheit_t(5) - Fahrenheit_t(3), expected)
    }

    func testFahrenheit_tMultiplication() {
        let expected = Fahrenheit_t(CInt(5) * CInt(3))
        XCTAssertEqual(Fahrenheit_t(5) * Fahrenheit_t(3), expected)
    }

    func testFahrenheit_tDivision() {
        let expected = Fahrenheit_t(CInt(6) / CInt(3))
        XCTAssertEqual(Fahrenheit_t(6) / Fahrenheit_t(3), expected)
    }

    func testFahrenheit_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Fahrenheit_t(rawOriginal)
        let result = original.addingReportingOverflow(Fahrenheit_t(1))
        XCTAssertEqual(result.0, Fahrenheit_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testFahrenheit_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Fahrenheit_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Fahrenheit_t(2))
        XCTAssertEqual(result.0, Fahrenheit_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testFahrenheit_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Fahrenheit_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Fahrenheit_t(1))
        XCTAssertEqual(result.0, Fahrenheit_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testFahrenheit_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Fahrenheit_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Fahrenheit_t(CInt.max))
        XCTAssertEqual(result.0, Fahrenheit_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testFahrenheit_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Fahrenheit_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Fahrenheit_t(CInt.max))
        XCTAssertEqual(result.0, Fahrenheit_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testFahrenheit_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Fahrenheit_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testFahrenheit_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Fahrenheit_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Fahrenheit_t(original))
    }

    func testFahrenheit_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Fahrenheit_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Fahrenheit_t(original))
    }

    func testFahrenheit_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Fahrenheit_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Fahrenheit_t(original))
    }

    func testFahrenheit_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Fahrenheit_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Fahrenheit_t(original))
    }

    func testFahrenheit_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Fahrenheit_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Fahrenheit_t(original))
    }

    func testFahrenheit_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Fahrenheit_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Fahrenheit_t(original))
    }

    func testFahrenheit_tMod() {
        let original = CInt(4)
        let expected = Fahrenheit_t(original % 2)
        XCTAssertEqual(Fahrenheit_t(original) % 2, expected)
    }

    func testFahrenheit_uEquality() {
        XCTAssertEqual(Fahrenheit_u(5), Fahrenheit_u(5))
    }

    func testFahrenheit_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Fahrenheit_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Fahrenheit_u.self, from: try encoder.encode(original))
        )
    }

    func testFahrenheit_uSelfInit() {
        let expected = Fahrenheit_u(15)
        XCTAssertEqual(expected, Fahrenheit_u(expected))
    }

    func testFahrenheit_uSelfExactlyInit() {
        let expected = Fahrenheit_u(15)
        XCTAssertEqual(expected, Fahrenheit_u(exactly: expected))
    }

    func testFahrenheit_uComparable() {
        let lhs = Fahrenheit_u(1)
        let rhs = Fahrenheit_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testFahrenheit_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Fahrenheit_u(5).magnitude, expected)
    }

    func testFahrenheit_uTruncatingInit() {
        let expected = Fahrenheit_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Fahrenheit_u(truncatingIfNeeded: expected), expected)
    }

    func testFahrenheit_uClampingInit() {
        let expected = Fahrenheit_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Fahrenheit_u(clamping: expected), expected)
    }

    func testFahrenheit_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Fahrenheit_u(5).bitWidth, expected)
    }

    func testFahrenheit_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Fahrenheit_u(5).leadingZeroBitCount, expected)
    }

    func testFahrenheit_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Fahrenheit_u(5).nonzeroBitCount, expected)
    }

    func testFahrenheit_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Fahrenheit_u(expected), Fahrenheit_u(integerLiteral: CUnsignedInt.max))
    }

    func testFahrenheit_uTruncatingBits() {
        let expected = Fahrenheit_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Fahrenheit_u(_truncatingBits: UInt.max))
    }

    func testFahrenheit_uAddition() {
        let expected = Fahrenheit_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Fahrenheit_u(5) + Fahrenheit_u(3), expected)
    }

    func testFahrenheit_uSubtraction() {
        let expected = Fahrenheit_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Fahrenheit_u(5) - Fahrenheit_u(3), expected)
    }

    func testFahrenheit_uMultiplication() {
        let expected = Fahrenheit_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Fahrenheit_u(5) * Fahrenheit_u(3), expected)
    }

    func testFahrenheit_uDivision() {
        let expected = Fahrenheit_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Fahrenheit_u(6) / Fahrenheit_u(3), expected)
    }

    func testFahrenheit_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Fahrenheit_u(rawOriginal)
        let result = original.addingReportingOverflow(Fahrenheit_u(1))
        XCTAssertEqual(result.0, Fahrenheit_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testFahrenheit_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Fahrenheit_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Fahrenheit_u(2))
        XCTAssertEqual(result.0, Fahrenheit_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testFahrenheit_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Fahrenheit_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Fahrenheit_u(1))
        XCTAssertEqual(result.0, Fahrenheit_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testFahrenheit_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Fahrenheit_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Fahrenheit_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Fahrenheit_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testFahrenheit_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Fahrenheit_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Fahrenheit_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Fahrenheit_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testFahrenheit_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Fahrenheit_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testFahrenheit_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Fahrenheit_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Fahrenheit_u(original))
    }

    func testFahrenheit_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Fahrenheit_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Fahrenheit_u(original))
    }

    func testFahrenheit_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Fahrenheit_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Fahrenheit_u(original))
    }

    func testFahrenheit_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Fahrenheit_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Fahrenheit_u(original))
    }

    func testFahrenheit_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Fahrenheit_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Fahrenheit_u(original))
    }

    func testFahrenheit_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Fahrenheit_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Fahrenheit_u(original))
    }

    func testFahrenheit_uMod() {
        let original = CUnsignedInt(4)
        let expected = Fahrenheit_u(original % 2)
        XCTAssertEqual(Fahrenheit_u(original) % 2, expected)
    }

    func testFahrenheit_fEquality() {
        XCTAssertEqual(Fahrenheit_f(5), Fahrenheit_f(5))
    }

    func testFahrenheit_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Fahrenheit_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Fahrenheit_f.self, from: try encoder.encode(original))
        )
    }

    func testFahrenheit_fSelfInit() {
        let expected = Fahrenheit_f(15)
        XCTAssertEqual(expected, Fahrenheit_f(expected))
    }

    func testFahrenheit_fSelfExactlyInit() {
        let expected = Fahrenheit_f(15)
        XCTAssertEqual(expected, Fahrenheit_f(exactly: expected))
    }

    func testFahrenheit_fComparable() {
        let lhs = Fahrenheit_f(1)
        let rhs = Fahrenheit_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testFahrenheit_fRadix() {
        XCTAssertEqual(Fahrenheit_f.radix, Float.radix)
    }

    func testFahrenheit_fExponentBitCount() {
        XCTAssertEqual(Fahrenheit_f.exponentBitCount, Float.exponentBitCount)
    }

    func testFahrenheit_fSignificandBitCount() {
        XCTAssertEqual(Fahrenheit_f.significandBitCount, Float.significandBitCount)
    }

    func testFahrenheit_fMagnitude() {
        let expected = Fahrenheit_f(Float(5).magnitude)
        XCTAssertEqual(Fahrenheit_f(5).magnitude, expected)
    }

    func testFahrenheit_fExactlyInit() {
        let expected = Fahrenheit_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Fahrenheit_f(exactly: Int(5)), expected)
    }

    func testFahrenheit_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Fahrenheit_f(param).isTotallyOrdered(belowOrEqualTo: Fahrenheit_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testFahrenheit_fBinade() {
        let raw = Float(5)
        let expected = Fahrenheit_f(raw.binade)
        XCTAssertEqual(Fahrenheit_f(raw).binade, expected)
    }

    func testFahrenheit_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Fahrenheit_f(raw).significandWidth, raw.significandWidth)
    }

    func testFahrenheit_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Fahrenheit_f(raw).debugDescription, raw.debugDescription)
    }

    func testFahrenheit_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Fahrenheit_f("5.0"), Fahrenheit_f(raw))
    }

    func testFahrenheit_fStaticVars() {
        XCTAssertEqual(Fahrenheit_f.nan.isNaN, Fahrenheit_f(Float.nan).isNaN)
        XCTAssertEqual(
            Fahrenheit_f.signalingNaN.isSignalingNaN,
            Fahrenheit_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Fahrenheit_f.infinity, Fahrenheit_f(Float.infinity))
        XCTAssertEqual(Fahrenheit_f.greatestFiniteMagnitude, Fahrenheit_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Fahrenheit_f.pi, Fahrenheit_f(Float.pi))
        XCTAssertEqual(Fahrenheit_f.leastNormalMagnitude, Fahrenheit_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Fahrenheit_f.leastNonzeroMagnitude, Fahrenheit_f(Float.leastNonzeroMagnitude))
    }

    func testFahrenheit_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Fahrenheit_f(raw).ulp, Fahrenheit_f(raw.ulp))
    }

    func testFahrenheit_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Fahrenheit_f(raw).sign, raw.sign)
    }

    func testFahrenheit_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Fahrenheit_f(raw).significand, Fahrenheit_f(raw.significand))
    }

    func testFahrenheit_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Fahrenheit_f(raw).nextUp, Fahrenheit_f(raw.nextUp))
    }

    func testFahrenheit_fVars() {
        XCTAssertEqual(Fahrenheit_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Fahrenheit_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Fahrenheit_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Fahrenheit_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Fahrenheit_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Fahrenheit_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Fahrenheit_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Fahrenheit_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Fahrenheit_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Fahrenheit_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Fahrenheit_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Fahrenheit_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Fahrenheit_f(5).description, Float(5).description)
        XCTAssertEqual(Fahrenheit_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Fahrenheit_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Fahrenheit_f(5).exponent, Float(5).exponent)
    }

    func testFahrenheit_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Fahrenheit_f(Float(4))
        result.formRemainder(dividingBy: Fahrenheit_f(denominator))
        XCTAssertEqual(result, Fahrenheit_f(original))
    }

    func testFahrenheit_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Fahrenheit_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Fahrenheit_f(denominator))
        XCTAssertEqual(result, Fahrenheit_f(original))
    }

    func testFahrenheit_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Fahrenheit_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Fahrenheit_f(original))
    }

    func testFahrenheit_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Fahrenheit_f(Float(4))
        result.addProduct(Fahrenheit_f(lhs), Fahrenheit_f(rhs))
        XCTAssertEqual(result, Fahrenheit_f(original))
    }

    func testFahrenheit_fIsEqual() {
        let this = Fahrenheit_f(5)
        let other = Fahrenheit_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testFahrenheit_fIsLess() {
        let this = Fahrenheit_f(5)
        let other = Fahrenheit_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testFahrenheit_fIsLessThanOrEqual() {
        let this = Fahrenheit_f(5)
        let other = Fahrenheit_f(6)
        let other2 = Fahrenheit_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testFahrenheit_fOperations() {
        let lhs = Fahrenheit_f(6)
        let rhs = Fahrenheit_f(3)
        XCTAssertEqual(lhs + rhs, Fahrenheit_f(9))
        XCTAssertEqual(lhs - rhs, Fahrenheit_f(3))
        XCTAssertEqual(lhs * rhs, Fahrenheit_f(18))
        XCTAssertEqual(lhs / rhs, Fahrenheit_f(2))
    }

    func testFahrenheit_fTimesEqual() {
        var this = Fahrenheit_f(3)
        this *= Fahrenheit_f(4)
        XCTAssertEqual(this, Fahrenheit_f(12))
    }

    func testFahrenheit_fDivideEqual() {
        var this = Fahrenheit_f(6)
        this /= Fahrenheit_f(3)
        XCTAssertEqual(this, Fahrenheit_f(2))
    }

    func testFahrenheit_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Fahrenheit_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Fahrenheit_f(expected))
    }

    func testFahrenheit_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Fahrenheit_f(original).distance(to: Fahrenheit_f(other)), expected)
    }

    func testFahrenheit_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Fahrenheit_f(original).advanced(by: 3), Fahrenheit_f(expected))
    }

    func testFahrenheit_dEquality() {
        XCTAssertEqual(Fahrenheit_d(5), Fahrenheit_d(5))
    }

    func testFahrenheit_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Fahrenheit_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Fahrenheit_d.self, from: try encoder.encode(original))
        )
    }

    func testFahrenheit_dSelfInit() {
        let expected = Fahrenheit_d(15)
        XCTAssertEqual(expected, Fahrenheit_d(expected))
    }

    func testFahrenheit_dSelfExactlyInit() {
        let expected = Fahrenheit_d(15)
        XCTAssertEqual(expected, Fahrenheit_d(exactly: expected))
    }

    func testFahrenheit_dComparable() {
        let lhs = Fahrenheit_d(1)
        let rhs = Fahrenheit_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testFahrenheit_dRadix() {
        XCTAssertEqual(Fahrenheit_d.radix, Double.radix)
    }

    func testFahrenheit_dExponentBitCount() {
        XCTAssertEqual(Fahrenheit_d.exponentBitCount, Double.exponentBitCount)
    }

    func testFahrenheit_dSignificandBitCount() {
        XCTAssertEqual(Fahrenheit_d.significandBitCount, Double.significandBitCount)
    }

    func testFahrenheit_dMagnitude() {
        let expected = Fahrenheit_d(Double(5).magnitude)
        XCTAssertEqual(Fahrenheit_d(5).magnitude, expected)
    }

    func testFahrenheit_dExactlyInit() {
        let expected = Fahrenheit_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Fahrenheit_d(exactly: Int(5)), expected)
    }

    func testFahrenheit_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Fahrenheit_d(param).isTotallyOrdered(belowOrEqualTo: Fahrenheit_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testFahrenheit_dBinade() {
        let raw = Double(5)
        let expected = Fahrenheit_d(raw.binade)
        XCTAssertEqual(Fahrenheit_d(raw).binade, expected)
    }

    func testFahrenheit_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Fahrenheit_d(raw).significandWidth, raw.significandWidth)
    }

    func testFahrenheit_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Fahrenheit_d(raw).debugDescription, raw.debugDescription)
    }

    func testFahrenheit_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Fahrenheit_d("5.0"), Fahrenheit_d(raw))
    }

    func testFahrenheit_dStaticVars() {
        XCTAssertEqual(Fahrenheit_d.nan.isNaN, Fahrenheit_d(Double.nan).isNaN)
        XCTAssertEqual(
            Fahrenheit_d.signalingNaN.isSignalingNaN,
            Fahrenheit_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Fahrenheit_d.infinity, Fahrenheit_d(Double.infinity))
        XCTAssertEqual(Fahrenheit_d.greatestFiniteMagnitude, Fahrenheit_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Fahrenheit_d.pi, Fahrenheit_d(Double.pi))
        XCTAssertEqual(Fahrenheit_d.leastNormalMagnitude, Fahrenheit_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Fahrenheit_d.leastNonzeroMagnitude, Fahrenheit_d(Double.leastNonzeroMagnitude))
    }

    func testFahrenheit_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Fahrenheit_d(raw).ulp, Fahrenheit_d(raw.ulp))
    }

    func testFahrenheit_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Fahrenheit_d(raw).sign, raw.sign)
    }

    func testFahrenheit_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Fahrenheit_d(raw).significand, Fahrenheit_d(raw.significand))
    }

    func testFahrenheit_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Fahrenheit_d(raw).nextUp, Fahrenheit_d(raw.nextUp))
    }

    func testFahrenheit_dVars() {
        XCTAssertEqual(Fahrenheit_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Fahrenheit_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Fahrenheit_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Fahrenheit_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Fahrenheit_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Fahrenheit_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Fahrenheit_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Fahrenheit_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Fahrenheit_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Fahrenheit_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Fahrenheit_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Fahrenheit_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Fahrenheit_d(5).description, Double(5).description)
        XCTAssertEqual(Fahrenheit_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Fahrenheit_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Fahrenheit_d(5).exponent, Double(5).exponent)
    }

    func testFahrenheit_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Fahrenheit_d(Double(4))
        result.formRemainder(dividingBy: Fahrenheit_d(denominator))
        XCTAssertEqual(result, Fahrenheit_d(original))
    }

    func testFahrenheit_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Fahrenheit_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Fahrenheit_d(denominator))
        XCTAssertEqual(result, Fahrenheit_d(original))
    }

    func testFahrenheit_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Fahrenheit_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Fahrenheit_d(original))
    }

    func testFahrenheit_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Fahrenheit_d(Double(4))
        result.addProduct(Fahrenheit_d(lhs), Fahrenheit_d(rhs))
        XCTAssertEqual(result, Fahrenheit_d(original))
    }

    func testFahrenheit_dIsEqual() {
        let this = Fahrenheit_d(5)
        let other = Fahrenheit_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testFahrenheit_dIsLess() {
        let this = Fahrenheit_d(5)
        let other = Fahrenheit_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testFahrenheit_dIsLessThanOrEqual() {
        let this = Fahrenheit_d(5)
        let other = Fahrenheit_d(6)
        let other2 = Fahrenheit_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testFahrenheit_dOperations() {
        let lhs = Fahrenheit_d(6)
        let rhs = Fahrenheit_d(3)
        XCTAssertEqual(lhs + rhs, Fahrenheit_d(9))
        XCTAssertEqual(lhs - rhs, Fahrenheit_d(3))
        XCTAssertEqual(lhs * rhs, Fahrenheit_d(18))
        XCTAssertEqual(lhs / rhs, Fahrenheit_d(2))
    }

    func testFahrenheit_dTimesEqual() {
        var this = Fahrenheit_d(3)
        this *= Fahrenheit_d(4)
        XCTAssertEqual(this, Fahrenheit_d(12))
    }

    func testFahrenheit_dDivideEqual() {
        var this = Fahrenheit_d(6)
        this /= Fahrenheit_d(3)
        XCTAssertEqual(this, Fahrenheit_d(2))
    }

    func testFahrenheit_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Fahrenheit_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Fahrenheit_d(expected))
    }

    func testFahrenheit_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Fahrenheit_d(original).distance(to: Fahrenheit_d(other)), expected)
    }

    func testFahrenheit_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Fahrenheit_d(original).advanced(by: 3), Fahrenheit_d(expected))
    }

}

final class KelvinTypeTests: XCTestCase {

    func testKelvin_tEquality() {
        XCTAssertEqual(Kelvin_t(5), Kelvin_t(5))
    }

    func testKelvin_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Kelvin_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Kelvin_t.self, from: try encoder.encode(original))
        )
    }

    func testKelvin_tSelfInit() {
        let expected = Kelvin_t(15)
        XCTAssertEqual(expected, Kelvin_t(expected))
    }

    func testKelvin_tSelfExactlyInit() {
        let expected = Kelvin_t(15)
        XCTAssertEqual(expected, Kelvin_t(exactly: expected))
    }

    func testKelvin_tComparable() {
        let lhs = Kelvin_t(1)
        let rhs = Kelvin_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testKelvin_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Kelvin_t(5).magnitude, expected)
    }

    func testKelvin_tTruncatingInit() {
        let expected = Kelvin_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Kelvin_t(truncatingIfNeeded: expected), expected)
    }

    func testKelvin_tClampingInit() {
        let expected = Kelvin_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Kelvin_t(clamping: expected), expected)
    }

    func testKelvin_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Kelvin_t(5).bitWidth, expected)
    }

    func testKelvin_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Kelvin_t(5).leadingZeroBitCount, expected)
    }

    func testKelvin_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Kelvin_t(5).nonzeroBitCount, expected)
    }

    func testKelvin_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Kelvin_t(expected), Kelvin_t(integerLiteral: CInt.max))
    }

    func testKelvin_tTruncatingBits() {
        let expected = Kelvin_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Kelvin_t(_truncatingBits: UInt.max))
    }

    func testKelvin_tAddition() {
        let expected = Kelvin_t(CInt(5) + CInt(3))
        XCTAssertEqual(Kelvin_t(5) + Kelvin_t(3), expected)
    }

    func testKelvin_tSubtraction() {
        let expected = Kelvin_t(CInt(5) - CInt(3))
        XCTAssertEqual(Kelvin_t(5) - Kelvin_t(3), expected)
    }

    func testKelvin_tMultiplication() {
        let expected = Kelvin_t(CInt(5) * CInt(3))
        XCTAssertEqual(Kelvin_t(5) * Kelvin_t(3), expected)
    }

    func testKelvin_tDivision() {
        let expected = Kelvin_t(CInt(6) / CInt(3))
        XCTAssertEqual(Kelvin_t(6) / Kelvin_t(3), expected)
    }

    func testKelvin_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Kelvin_t(rawOriginal)
        let result = original.addingReportingOverflow(Kelvin_t(1))
        XCTAssertEqual(result.0, Kelvin_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testKelvin_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Kelvin_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Kelvin_t(2))
        XCTAssertEqual(result.0, Kelvin_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testKelvin_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Kelvin_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Kelvin_t(1))
        XCTAssertEqual(result.0, Kelvin_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testKelvin_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Kelvin_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Kelvin_t(CInt.max))
        XCTAssertEqual(result.0, Kelvin_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testKelvin_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Kelvin_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Kelvin_t(CInt.max))
        XCTAssertEqual(result.0, Kelvin_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testKelvin_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Kelvin_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testKelvin_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Kelvin_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Kelvin_t(original))
    }

    func testKelvin_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Kelvin_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Kelvin_t(original))
    }

    func testKelvin_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Kelvin_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Kelvin_t(original))
    }

    func testKelvin_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Kelvin_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Kelvin_t(original))
    }

    func testKelvin_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Kelvin_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Kelvin_t(original))
    }

    func testKelvin_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Kelvin_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Kelvin_t(original))
    }

    func testKelvin_tMod() {
        let original = CInt(4)
        let expected = Kelvin_t(original % 2)
        XCTAssertEqual(Kelvin_t(original) % 2, expected)
    }

    func testKelvin_uEquality() {
        XCTAssertEqual(Kelvin_u(5), Kelvin_u(5))
    }

    func testKelvin_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Kelvin_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Kelvin_u.self, from: try encoder.encode(original))
        )
    }

    func testKelvin_uSelfInit() {
        let expected = Kelvin_u(15)
        XCTAssertEqual(expected, Kelvin_u(expected))
    }

    func testKelvin_uSelfExactlyInit() {
        let expected = Kelvin_u(15)
        XCTAssertEqual(expected, Kelvin_u(exactly: expected))
    }

    func testKelvin_uComparable() {
        let lhs = Kelvin_u(1)
        let rhs = Kelvin_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testKelvin_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Kelvin_u(5).magnitude, expected)
    }

    func testKelvin_uTruncatingInit() {
        let expected = Kelvin_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Kelvin_u(truncatingIfNeeded: expected), expected)
    }

    func testKelvin_uClampingInit() {
        let expected = Kelvin_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Kelvin_u(clamping: expected), expected)
    }

    func testKelvin_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Kelvin_u(5).bitWidth, expected)
    }

    func testKelvin_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Kelvin_u(5).leadingZeroBitCount, expected)
    }

    func testKelvin_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Kelvin_u(5).nonzeroBitCount, expected)
    }

    func testKelvin_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Kelvin_u(expected), Kelvin_u(integerLiteral: CUnsignedInt.max))
    }

    func testKelvin_uTruncatingBits() {
        let expected = Kelvin_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Kelvin_u(_truncatingBits: UInt.max))
    }

    func testKelvin_uAddition() {
        let expected = Kelvin_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Kelvin_u(5) + Kelvin_u(3), expected)
    }

    func testKelvin_uSubtraction() {
        let expected = Kelvin_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Kelvin_u(5) - Kelvin_u(3), expected)
    }

    func testKelvin_uMultiplication() {
        let expected = Kelvin_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Kelvin_u(5) * Kelvin_u(3), expected)
    }

    func testKelvin_uDivision() {
        let expected = Kelvin_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Kelvin_u(6) / Kelvin_u(3), expected)
    }

    func testKelvin_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Kelvin_u(rawOriginal)
        let result = original.addingReportingOverflow(Kelvin_u(1))
        XCTAssertEqual(result.0, Kelvin_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testKelvin_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Kelvin_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Kelvin_u(2))
        XCTAssertEqual(result.0, Kelvin_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testKelvin_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Kelvin_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Kelvin_u(1))
        XCTAssertEqual(result.0, Kelvin_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testKelvin_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Kelvin_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Kelvin_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Kelvin_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testKelvin_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Kelvin_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Kelvin_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Kelvin_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testKelvin_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Kelvin_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testKelvin_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Kelvin_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Kelvin_u(original))
    }

    func testKelvin_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Kelvin_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Kelvin_u(original))
    }

    func testKelvin_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Kelvin_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Kelvin_u(original))
    }

    func testKelvin_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Kelvin_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Kelvin_u(original))
    }

    func testKelvin_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Kelvin_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Kelvin_u(original))
    }

    func testKelvin_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Kelvin_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Kelvin_u(original))
    }

    func testKelvin_uMod() {
        let original = CUnsignedInt(4)
        let expected = Kelvin_u(original % 2)
        XCTAssertEqual(Kelvin_u(original) % 2, expected)
    }

    func testKelvin_fEquality() {
        XCTAssertEqual(Kelvin_f(5), Kelvin_f(5))
    }

    func testKelvin_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Kelvin_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Kelvin_f.self, from: try encoder.encode(original))
        )
    }

    func testKelvin_fSelfInit() {
        let expected = Kelvin_f(15)
        XCTAssertEqual(expected, Kelvin_f(expected))
    }

    func testKelvin_fSelfExactlyInit() {
        let expected = Kelvin_f(15)
        XCTAssertEqual(expected, Kelvin_f(exactly: expected))
    }

    func testKelvin_fComparable() {
        let lhs = Kelvin_f(1)
        let rhs = Kelvin_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testKelvin_fRadix() {
        XCTAssertEqual(Kelvin_f.radix, Float.radix)
    }

    func testKelvin_fExponentBitCount() {
        XCTAssertEqual(Kelvin_f.exponentBitCount, Float.exponentBitCount)
    }

    func testKelvin_fSignificandBitCount() {
        XCTAssertEqual(Kelvin_f.significandBitCount, Float.significandBitCount)
    }

    func testKelvin_fMagnitude() {
        let expected = Kelvin_f(Float(5).magnitude)
        XCTAssertEqual(Kelvin_f(5).magnitude, expected)
    }

    func testKelvin_fExactlyInit() {
        let expected = Kelvin_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Kelvin_f(exactly: Int(5)), expected)
    }

    func testKelvin_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Kelvin_f(param).isTotallyOrdered(belowOrEqualTo: Kelvin_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testKelvin_fBinade() {
        let raw = Float(5)
        let expected = Kelvin_f(raw.binade)
        XCTAssertEqual(Kelvin_f(raw).binade, expected)
    }

    func testKelvin_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Kelvin_f(raw).significandWidth, raw.significandWidth)
    }

    func testKelvin_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Kelvin_f(raw).debugDescription, raw.debugDescription)
    }

    func testKelvin_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Kelvin_f("5.0"), Kelvin_f(raw))
    }

    func testKelvin_fStaticVars() {
        XCTAssertEqual(Kelvin_f.nan.isNaN, Kelvin_f(Float.nan).isNaN)
        XCTAssertEqual(
            Kelvin_f.signalingNaN.isSignalingNaN,
            Kelvin_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Kelvin_f.infinity, Kelvin_f(Float.infinity))
        XCTAssertEqual(Kelvin_f.greatestFiniteMagnitude, Kelvin_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Kelvin_f.pi, Kelvin_f(Float.pi))
        XCTAssertEqual(Kelvin_f.leastNormalMagnitude, Kelvin_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Kelvin_f.leastNonzeroMagnitude, Kelvin_f(Float.leastNonzeroMagnitude))
    }

    func testKelvin_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Kelvin_f(raw).ulp, Kelvin_f(raw.ulp))
    }

    func testKelvin_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Kelvin_f(raw).sign, raw.sign)
    }

    func testKelvin_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Kelvin_f(raw).significand, Kelvin_f(raw.significand))
    }

    func testKelvin_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Kelvin_f(raw).nextUp, Kelvin_f(raw.nextUp))
    }

    func testKelvin_fVars() {
        XCTAssertEqual(Kelvin_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Kelvin_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Kelvin_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Kelvin_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Kelvin_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Kelvin_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Kelvin_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Kelvin_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Kelvin_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Kelvin_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Kelvin_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Kelvin_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Kelvin_f(5).description, Float(5).description)
        XCTAssertEqual(Kelvin_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Kelvin_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Kelvin_f(5).exponent, Float(5).exponent)
    }

    func testKelvin_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Kelvin_f(Float(4))
        result.formRemainder(dividingBy: Kelvin_f(denominator))
        XCTAssertEqual(result, Kelvin_f(original))
    }

    func testKelvin_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Kelvin_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Kelvin_f(denominator))
        XCTAssertEqual(result, Kelvin_f(original))
    }

    func testKelvin_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Kelvin_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Kelvin_f(original))
    }

    func testKelvin_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Kelvin_f(Float(4))
        result.addProduct(Kelvin_f(lhs), Kelvin_f(rhs))
        XCTAssertEqual(result, Kelvin_f(original))
    }

    func testKelvin_fIsEqual() {
        let this = Kelvin_f(5)
        let other = Kelvin_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testKelvin_fIsLess() {
        let this = Kelvin_f(5)
        let other = Kelvin_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testKelvin_fIsLessThanOrEqual() {
        let this = Kelvin_f(5)
        let other = Kelvin_f(6)
        let other2 = Kelvin_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testKelvin_fOperations() {
        let lhs = Kelvin_f(6)
        let rhs = Kelvin_f(3)
        XCTAssertEqual(lhs + rhs, Kelvin_f(9))
        XCTAssertEqual(lhs - rhs, Kelvin_f(3))
        XCTAssertEqual(lhs * rhs, Kelvin_f(18))
        XCTAssertEqual(lhs / rhs, Kelvin_f(2))
    }

    func testKelvin_fTimesEqual() {
        var this = Kelvin_f(3)
        this *= Kelvin_f(4)
        XCTAssertEqual(this, Kelvin_f(12))
    }

    func testKelvin_fDivideEqual() {
        var this = Kelvin_f(6)
        this /= Kelvin_f(3)
        XCTAssertEqual(this, Kelvin_f(2))
    }

    func testKelvin_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Kelvin_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Kelvin_f(expected))
    }

    func testKelvin_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Kelvin_f(original).distance(to: Kelvin_f(other)), expected)
    }

    func testKelvin_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Kelvin_f(original).advanced(by: 3), Kelvin_f(expected))
    }

    func testKelvin_dEquality() {
        XCTAssertEqual(Kelvin_d(5), Kelvin_d(5))
    }

    func testKelvin_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Kelvin_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Kelvin_d.self, from: try encoder.encode(original))
        )
    }

    func testKelvin_dSelfInit() {
        let expected = Kelvin_d(15)
        XCTAssertEqual(expected, Kelvin_d(expected))
    }

    func testKelvin_dSelfExactlyInit() {
        let expected = Kelvin_d(15)
        XCTAssertEqual(expected, Kelvin_d(exactly: expected))
    }

    func testKelvin_dComparable() {
        let lhs = Kelvin_d(1)
        let rhs = Kelvin_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testKelvin_dRadix() {
        XCTAssertEqual(Kelvin_d.radix, Double.radix)
    }

    func testKelvin_dExponentBitCount() {
        XCTAssertEqual(Kelvin_d.exponentBitCount, Double.exponentBitCount)
    }

    func testKelvin_dSignificandBitCount() {
        XCTAssertEqual(Kelvin_d.significandBitCount, Double.significandBitCount)
    }

    func testKelvin_dMagnitude() {
        let expected = Kelvin_d(Double(5).magnitude)
        XCTAssertEqual(Kelvin_d(5).magnitude, expected)
    }

    func testKelvin_dExactlyInit() {
        let expected = Kelvin_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Kelvin_d(exactly: Int(5)), expected)
    }

    func testKelvin_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Kelvin_d(param).isTotallyOrdered(belowOrEqualTo: Kelvin_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testKelvin_dBinade() {
        let raw = Double(5)
        let expected = Kelvin_d(raw.binade)
        XCTAssertEqual(Kelvin_d(raw).binade, expected)
    }

    func testKelvin_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Kelvin_d(raw).significandWidth, raw.significandWidth)
    }

    func testKelvin_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Kelvin_d(raw).debugDescription, raw.debugDescription)
    }

    func testKelvin_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Kelvin_d("5.0"), Kelvin_d(raw))
    }

    func testKelvin_dStaticVars() {
        XCTAssertEqual(Kelvin_d.nan.isNaN, Kelvin_d(Double.nan).isNaN)
        XCTAssertEqual(
            Kelvin_d.signalingNaN.isSignalingNaN,
            Kelvin_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Kelvin_d.infinity, Kelvin_d(Double.infinity))
        XCTAssertEqual(Kelvin_d.greatestFiniteMagnitude, Kelvin_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Kelvin_d.pi, Kelvin_d(Double.pi))
        XCTAssertEqual(Kelvin_d.leastNormalMagnitude, Kelvin_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Kelvin_d.leastNonzeroMagnitude, Kelvin_d(Double.leastNonzeroMagnitude))
    }

    func testKelvin_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Kelvin_d(raw).ulp, Kelvin_d(raw.ulp))
    }

    func testKelvin_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Kelvin_d(raw).sign, raw.sign)
    }

    func testKelvin_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Kelvin_d(raw).significand, Kelvin_d(raw.significand))
    }

    func testKelvin_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Kelvin_d(raw).nextUp, Kelvin_d(raw.nextUp))
    }

    func testKelvin_dVars() {
        XCTAssertEqual(Kelvin_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Kelvin_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Kelvin_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Kelvin_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Kelvin_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Kelvin_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Kelvin_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Kelvin_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Kelvin_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Kelvin_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Kelvin_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Kelvin_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Kelvin_d(5).description, Double(5).description)
        XCTAssertEqual(Kelvin_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Kelvin_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Kelvin_d(5).exponent, Double(5).exponent)
    }

    func testKelvin_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Kelvin_d(Double(4))
        result.formRemainder(dividingBy: Kelvin_d(denominator))
        XCTAssertEqual(result, Kelvin_d(original))
    }

    func testKelvin_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Kelvin_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Kelvin_d(denominator))
        XCTAssertEqual(result, Kelvin_d(original))
    }

    func testKelvin_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Kelvin_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Kelvin_d(original))
    }

    func testKelvin_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Kelvin_d(Double(4))
        result.addProduct(Kelvin_d(lhs), Kelvin_d(rhs))
        XCTAssertEqual(result, Kelvin_d(original))
    }

    func testKelvin_dIsEqual() {
        let this = Kelvin_d(5)
        let other = Kelvin_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testKelvin_dIsLess() {
        let this = Kelvin_d(5)
        let other = Kelvin_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testKelvin_dIsLessThanOrEqual() {
        let this = Kelvin_d(5)
        let other = Kelvin_d(6)
        let other2 = Kelvin_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testKelvin_dOperations() {
        let lhs = Kelvin_d(6)
        let rhs = Kelvin_d(3)
        XCTAssertEqual(lhs + rhs, Kelvin_d(9))
        XCTAssertEqual(lhs - rhs, Kelvin_d(3))
        XCTAssertEqual(lhs * rhs, Kelvin_d(18))
        XCTAssertEqual(lhs / rhs, Kelvin_d(2))
    }

    func testKelvin_dTimesEqual() {
        var this = Kelvin_d(3)
        this *= Kelvin_d(4)
        XCTAssertEqual(this, Kelvin_d(12))
    }

    func testKelvin_dDivideEqual() {
        var this = Kelvin_d(6)
        this /= Kelvin_d(3)
        XCTAssertEqual(this, Kelvin_d(2))
    }

    func testKelvin_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Kelvin_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Kelvin_d(expected))
    }

    func testKelvin_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Kelvin_d(original).distance(to: Kelvin_d(other)), expected)
    }

    func testKelvin_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Kelvin_d(original).advanced(by: 3), Kelvin_d(expected))
    }

}

final class CelsiusConversionTests: XCTestCase {

    func testCelsius_tToCelsius_uTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testCelsius_tToCelsius_fTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testCelsius_tToCelsius_dTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testCelsius_tToFahrenheit_tTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testCelsius_tToFahrenheit_uTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testCelsius_tToFahrenheit_fTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testCelsius_tToFahrenheit_dTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testCelsius_tToKelvin_tTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testCelsius_tToKelvin_uTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testCelsius_tToKelvin_fTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testCelsius_tToKelvin_dTemperatureConversions() {
        let original = Celsius_t(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToCelsius_tConversions() {
        let ctype1 = celsius_t(5)
        let swiftType1 = Celsius_t(rawValue: ctype1)
        let ctype2 = degC_t_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testCelsius_tInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.celsius_t(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureCelsius_tInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degC_t(5)
        let expected2 = Int8(
            degC_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degC_t_to_i8(ctype))
        )
    }

    func testCelsius_tInt8RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_i8(raw)
        let expected = Celsius_t(Int8(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureInt8Init() {
        let raw = Celsius_t(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degC_t(5)
        let expected2 = Int16(
            degC_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degC_t_to_i16(ctype))
        )
    }

    func testCelsius_tInt16RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_i16(raw)
        let expected = Celsius_t(Int16(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureInt16Init() {
        let raw = Celsius_t(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_t(5)
        let expected2 = Int32(
            degC_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degC_t_to_i32(ctype))
        )
    }

    func testCelsius_tInt32RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_i32(raw)
        let expected = Celsius_t(Int32(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureInt32Init() {
        let raw = Celsius_t(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_t(5)
        let expected2 = Int64(
            degC_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degC_t_to_i64(ctype))
        )
    }

    func testCelsius_tInt64RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_i64(raw)
        let expected = Celsius_t(Int64(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureInt64Init() {
        let raw = Celsius_t(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tIntInits() {
        let raw = Int(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_t(5)
        let expected2 = Int(
            degC_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degC_t_to_i64(ctype))
        )
    }

    func testCelsius_tIntRawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_i64(raw)
        let expected = Celsius_t(Int(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureIntInit() {
        let raw = Celsius_t(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_t(5)
        let expected2 = CInt(
            degC_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degC_t_to_i32(ctype))
        )
    }

    func testCelsius_tCIntRawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_i32(raw)
        let expected = Celsius_t(CInt(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureCIntInit() {
        let raw = Celsius_t(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degC_t(5)
        let expected2 = UInt8(
            degC_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degC_t_to_u8(ctype))
        )
    }

    func testCelsius_tUInt8RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_u8(raw)
        let expected = Celsius_t(UInt8(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureUInt8Init() {
        let raw = Celsius_t(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degC_t(5)
        let expected2 = UInt16(
            degC_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degC_t_to_u16(ctype))
        )
    }

    func testCelsius_tUInt16RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_u16(raw)
        let expected = Celsius_t(UInt16(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureUInt16Init() {
        let raw = Celsius_t(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_t(5)
        let expected2 = UInt32(
            degC_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degC_t_to_u32(ctype))
        )
    }

    func testCelsius_tUInt32RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_u32(raw)
        let expected = Celsius_t(UInt32(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureUInt32Init() {
        let raw = Celsius_t(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_t(5)
        let expected2 = UInt64(
            degC_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degC_t_to_u64(ctype))
        )
    }

    func testCelsius_tUInt64RawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_u64(raw)
        let expected = Celsius_t(UInt64(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureUInt64Init() {
        let raw = Celsius_t(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_t(5)
        let expected2 = UInt(
            degC_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degC_t_to_u64(ctype))
        )
    }

    func testCelsius_tUIntRawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_u64(raw)
        let expected = Celsius_t(UInt(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureUIntInit() {
        let raw = Celsius_t(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_t(5)
        let expected2 = CUnsignedInt(
            degC_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degC_t_to_u32(ctype))
        )
    }

    func testCelsius_tCUnsignedIntRawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_u32(raw)
        let expected = Celsius_t(CUnsignedInt(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureCUnsignedIntInit() {
        let raw = Celsius_t(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tFloatInits() {
        let raw = Float(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degC_t(5)
        let expected2 = Float(
            degC_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degC_t_to_f(ctype))
        )
    }

    func testCelsius_tFloatRawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_f(raw)
        let expected = Celsius_t(Float(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureFloatInit() {
        let raw = Celsius_t(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_tDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degC_t(5)
        let expected2 = Double(
            degC_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degC_t(5)
        let expected = Celsius_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degC_t_to_d(ctype))
        )
    }

    func testCelsius_tDoubleRawValueInit() {
        let raw = celsius_t(5)
        let ctype = degC_t_to_d(raw)
        let expected = Celsius_t(Double(ctype))
        XCTAssertEqual(Celsius_t(rawValue: raw), expected)
    }

    func testCelsius_tTemperatureDoubleInit() {
        let raw = Celsius_t(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCelsius_uToCelsius_tTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testCelsius_uToCelsius_fTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testCelsius_uToCelsius_dTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testCelsius_uToFahrenheit_tTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testCelsius_uToFahrenheit_uTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testCelsius_uToFahrenheit_fTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testCelsius_uToFahrenheit_dTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testCelsius_uToKelvin_tTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testCelsius_uToKelvin_uTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testCelsius_uToKelvin_fTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testCelsius_uToKelvin_dTemperatureConversions() {
        let original = Celsius_u(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToCelsius_uConversions() {
        let ctype1 = celsius_u(5)
        let swiftType1 = Celsius_u(rawValue: ctype1)
        let ctype2 = degC_u_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testCelsius_uInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.celsius_u(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureCelsius_uInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degC_u(5)
        let expected2 = Int8(
            degC_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degC_u_to_i8(ctype))
        )
    }

    func testCelsius_uInt8RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_i8(raw)
        let expected = Celsius_u(Int8(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureInt8Init() {
        let raw = Celsius_u(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degC_u(5)
        let expected2 = Int16(
            degC_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degC_u_to_i16(ctype))
        )
    }

    func testCelsius_uInt16RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_i16(raw)
        let expected = Celsius_u(Int16(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureInt16Init() {
        let raw = Celsius_u(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_u(5)
        let expected2 = Int32(
            degC_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degC_u_to_i32(ctype))
        )
    }

    func testCelsius_uInt32RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_i32(raw)
        let expected = Celsius_u(Int32(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureInt32Init() {
        let raw = Celsius_u(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_u(5)
        let expected2 = Int64(
            degC_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degC_u_to_i64(ctype))
        )
    }

    func testCelsius_uInt64RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_i64(raw)
        let expected = Celsius_u(Int64(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureInt64Init() {
        let raw = Celsius_u(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uIntInits() {
        let raw = Int(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_u(5)
        let expected2 = Int(
            degC_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degC_u_to_i64(ctype))
        )
    }

    func testCelsius_uIntRawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_i64(raw)
        let expected = Celsius_u(Int(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureIntInit() {
        let raw = Celsius_u(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_u(5)
        let expected2 = CInt(
            degC_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degC_u_to_i32(ctype))
        )
    }

    func testCelsius_uCIntRawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_i32(raw)
        let expected = Celsius_u(CInt(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureCIntInit() {
        let raw = Celsius_u(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degC_u(5)
        let expected2 = UInt8(
            degC_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degC_u_to_u8(ctype))
        )
    }

    func testCelsius_uUInt8RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_u8(raw)
        let expected = Celsius_u(UInt8(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureUInt8Init() {
        let raw = Celsius_u(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degC_u(5)
        let expected2 = UInt16(
            degC_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degC_u_to_u16(ctype))
        )
    }

    func testCelsius_uUInt16RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_u16(raw)
        let expected = Celsius_u(UInt16(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureUInt16Init() {
        let raw = Celsius_u(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_u(5)
        let expected2 = UInt32(
            degC_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degC_u_to_u32(ctype))
        )
    }

    func testCelsius_uUInt32RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_u32(raw)
        let expected = Celsius_u(UInt32(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureUInt32Init() {
        let raw = Celsius_u(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_u(5)
        let expected2 = UInt64(
            degC_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degC_u_to_u64(ctype))
        )
    }

    func testCelsius_uUInt64RawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_u64(raw)
        let expected = Celsius_u(UInt64(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureUInt64Init() {
        let raw = Celsius_u(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_u(5)
        let expected2 = UInt(
            degC_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degC_u_to_u64(ctype))
        )
    }

    func testCelsius_uUIntRawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_u64(raw)
        let expected = Celsius_u(UInt(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureUIntInit() {
        let raw = Celsius_u(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_u(5)
        let expected2 = CUnsignedInt(
            degC_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degC_u_to_u32(ctype))
        )
    }

    func testCelsius_uCUnsignedIntRawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_u32(raw)
        let expected = Celsius_u(CUnsignedInt(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureCUnsignedIntInit() {
        let raw = Celsius_u(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uFloatInits() {
        let raw = Float(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degC_u(5)
        let expected2 = Float(
            degC_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degC_u_to_f(ctype))
        )
    }

    func testCelsius_uFloatRawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_f(raw)
        let expected = Celsius_u(Float(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureFloatInit() {
        let raw = Celsius_u(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_uDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degC_u(5)
        let expected2 = Double(
            degC_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degC_u(5)
        let expected = Celsius_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degC_u_to_d(ctype))
        )
    }

    func testCelsius_uDoubleRawValueInit() {
        let raw = celsius_u(5)
        let ctype = degC_u_to_d(raw)
        let expected = Celsius_u(Double(ctype))
        XCTAssertEqual(Celsius_u(rawValue: raw), expected)
    }

    func testCelsius_uTemperatureDoubleInit() {
        let raw = Celsius_u(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCelsius_fToCelsius_tTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testCelsius_fToCelsius_uTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testCelsius_fToCelsius_dTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testCelsius_fToFahrenheit_tTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testCelsius_fToFahrenheit_uTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testCelsius_fToFahrenheit_fTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testCelsius_fToFahrenheit_dTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testCelsius_fToKelvin_tTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testCelsius_fToKelvin_uTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testCelsius_fToKelvin_fTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testCelsius_fToKelvin_dTemperatureConversions() {
        let original = Celsius_f(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToCelsius_fConversions() {
        let ctype1 = celsius_f(5)
        let swiftType1 = Celsius_f(rawValue: ctype1)
        let ctype2 = degC_f_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testCelsius_fInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.celsius_f(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureCelsius_fInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degC_f(5)
        let expected2 = Int8(
            degC_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degC_f_to_i8(ctype))
        )
    }

    func testCelsius_fInt8RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_i8(raw)
        let expected = Celsius_f(Int8(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureInt8Init() {
        let raw = Celsius_f(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degC_f(5)
        let expected2 = Int16(
            degC_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degC_f_to_i16(ctype))
        )
    }

    func testCelsius_fInt16RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_i16(raw)
        let expected = Celsius_f(Int16(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureInt16Init() {
        let raw = Celsius_f(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_f(5)
        let expected2 = Int32(
            degC_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degC_f_to_i32(ctype))
        )
    }

    func testCelsius_fInt32RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_i32(raw)
        let expected = Celsius_f(Int32(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureInt32Init() {
        let raw = Celsius_f(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_f(5)
        let expected2 = Int64(
            degC_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degC_f_to_i64(ctype))
        )
    }

    func testCelsius_fInt64RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_i64(raw)
        let expected = Celsius_f(Int64(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureInt64Init() {
        let raw = Celsius_f(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fIntInits() {
        let raw = Int(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_f(5)
        let expected2 = Int(
            degC_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degC_f_to_i64(ctype))
        )
    }

    func testCelsius_fIntRawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_i64(raw)
        let expected = Celsius_f(Int(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureIntInit() {
        let raw = Celsius_f(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_f(5)
        let expected2 = CInt(
            degC_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degC_f_to_i32(ctype))
        )
    }

    func testCelsius_fCIntRawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_i32(raw)
        let expected = Celsius_f(CInt(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureCIntInit() {
        let raw = Celsius_f(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degC_f(5)
        let expected2 = UInt8(
            degC_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degC_f_to_u8(ctype))
        )
    }

    func testCelsius_fUInt8RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_u8(raw)
        let expected = Celsius_f(UInt8(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureUInt8Init() {
        let raw = Celsius_f(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degC_f(5)
        let expected2 = UInt16(
            degC_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degC_f_to_u16(ctype))
        )
    }

    func testCelsius_fUInt16RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_u16(raw)
        let expected = Celsius_f(UInt16(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureUInt16Init() {
        let raw = Celsius_f(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_f(5)
        let expected2 = UInt32(
            degC_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degC_f_to_u32(ctype))
        )
    }

    func testCelsius_fUInt32RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_u32(raw)
        let expected = Celsius_f(UInt32(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureUInt32Init() {
        let raw = Celsius_f(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_f(5)
        let expected2 = UInt64(
            degC_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degC_f_to_u64(ctype))
        )
    }

    func testCelsius_fUInt64RawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_u64(raw)
        let expected = Celsius_f(UInt64(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureUInt64Init() {
        let raw = Celsius_f(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_f(5)
        let expected2 = UInt(
            degC_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degC_f_to_u64(ctype))
        )
    }

    func testCelsius_fUIntRawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_u64(raw)
        let expected = Celsius_f(UInt(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureUIntInit() {
        let raw = Celsius_f(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_f(5)
        let expected2 = CUnsignedInt(
            degC_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degC_f_to_u32(ctype))
        )
    }

    func testCelsius_fCUnsignedIntRawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_u32(raw)
        let expected = Celsius_f(CUnsignedInt(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureCUnsignedIntInit() {
        let raw = Celsius_f(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fFloatInits() {
        let raw = Float(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degC_f(5)
        let expected2 = Float(
            degC_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degC_f_to_f(ctype))
        )
    }

    func testCelsius_fFloatRawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_f(raw)
        let expected = Celsius_f(Float(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureFloatInit() {
        let raw = Celsius_f(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_fDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degC_f(5)
        let expected2 = Double(
            degC_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degC_f(5)
        let expected = Celsius_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degC_f_to_d(ctype))
        )
    }

    func testCelsius_fDoubleRawValueInit() {
        let raw = celsius_f(5)
        let ctype = degC_f_to_d(raw)
        let expected = Celsius_f(Double(ctype))
        XCTAssertEqual(Celsius_f(rawValue: raw), expected)
    }

    func testCelsius_fTemperatureDoubleInit() {
        let raw = Celsius_f(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCelsius_dToCelsius_tTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testCelsius_dToCelsius_uTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testCelsius_dToCelsius_fTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testCelsius_dToFahrenheit_tTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testCelsius_dToFahrenheit_uTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testCelsius_dToFahrenheit_fTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testCelsius_dToFahrenheit_dTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testCelsius_dToKelvin_tTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testCelsius_dToKelvin_uTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testCelsius_dToKelvin_fTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testCelsius_dToKelvin_dTemperatureConversions() {
        let original = Celsius_d(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToCelsius_dConversions() {
        let ctype1 = celsius_d(5)
        let swiftType1 = Celsius_d(rawValue: ctype1)
        let ctype2 = degC_d_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testCelsius_dInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.celsius_d(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureCelsius_dInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degC_d(5)
        let expected2 = Int8(
            degC_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degC_d_to_i8(ctype))
        )
    }

    func testCelsius_dInt8RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_i8(raw)
        let expected = Celsius_d(Int8(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureInt8Init() {
        let raw = Celsius_d(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degC_d(5)
        let expected2 = Int16(
            degC_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degC_d_to_i16(ctype))
        )
    }

    func testCelsius_dInt16RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_i16(raw)
        let expected = Celsius_d(Int16(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureInt16Init() {
        let raw = Celsius_d(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_d(5)
        let expected2 = Int32(
            degC_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degC_d_to_i32(ctype))
        )
    }

    func testCelsius_dInt32RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_i32(raw)
        let expected = Celsius_d(Int32(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureInt32Init() {
        let raw = Celsius_d(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_d(5)
        let expected2 = Int64(
            degC_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degC_d_to_i64(ctype))
        )
    }

    func testCelsius_dInt64RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_i64(raw)
        let expected = Celsius_d(Int64(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureInt64Init() {
        let raw = Celsius_d(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dIntInits() {
        let raw = Int(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degC_d(5)
        let expected2 = Int(
            degC_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degC_d_to_i64(ctype))
        )
    }

    func testCelsius_dIntRawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_i64(raw)
        let expected = Celsius_d(Int(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureIntInit() {
        let raw = Celsius_d(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degC_d(5)
        let expected2 = CInt(
            degC_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degC_d_to_i32(ctype))
        )
    }

    func testCelsius_dCIntRawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_i32(raw)
        let expected = Celsius_d(CInt(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureCIntInit() {
        let raw = Celsius_d(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degC_d(5)
        let expected2 = UInt8(
            degC_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degC_d_to_u8(ctype))
        )
    }

    func testCelsius_dUInt8RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_u8(raw)
        let expected = Celsius_d(UInt8(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureUInt8Init() {
        let raw = Celsius_d(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degC_d(5)
        let expected2 = UInt16(
            degC_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degC_d_to_u16(ctype))
        )
    }

    func testCelsius_dUInt16RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_u16(raw)
        let expected = Celsius_d(UInt16(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureUInt16Init() {
        let raw = Celsius_d(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_d(5)
        let expected2 = UInt32(
            degC_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degC_d_to_u32(ctype))
        )
    }

    func testCelsius_dUInt32RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_u32(raw)
        let expected = Celsius_d(UInt32(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureUInt32Init() {
        let raw = Celsius_d(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_d(5)
        let expected2 = UInt64(
            degC_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degC_d_to_u64(ctype))
        )
    }

    func testCelsius_dUInt64RawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_u64(raw)
        let expected = Celsius_d(UInt64(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureUInt64Init() {
        let raw = Celsius_d(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degC_d(5)
        let expected2 = UInt(
            degC_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degC_d_to_u64(ctype))
        )
    }

    func testCelsius_dUIntRawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_u64(raw)
        let expected = Celsius_d(UInt(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureUIntInit() {
        let raw = Celsius_d(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degC_d(5)
        let expected2 = CUnsignedInt(
            degC_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degC_d_to_u32(ctype))
        )
    }

    func testCelsius_dCUnsignedIntRawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_u32(raw)
        let expected = Celsius_d(CUnsignedInt(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureCUnsignedIntInit() {
        let raw = Celsius_d(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dFloatInits() {
        let raw = Float(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degC_d(5)
        let expected2 = Float(
            degC_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degC_d_to_f(ctype))
        )
    }

    func testCelsius_dFloatRawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_f(raw)
        let expected = Celsius_d(Float(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureFloatInit() {
        let raw = Celsius_d(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureCelsius_dDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(celsius: raw)
        let result = Temperature.celsius(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degC_d(5)
        let expected2 = Double(
            degC_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCelsius_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degC_d(5)
        let expected = Celsius_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degC_d_to_d(ctype))
        )
    }

    func testCelsius_dDoubleRawValueInit() {
        let raw = celsius_d(5)
        let ctype = degC_d_to_d(raw)
        let expected = Celsius_d(Double(ctype))
        XCTAssertEqual(Celsius_d(rawValue: raw), expected)
    }

    func testCelsius_dTemperatureDoubleInit() {
        let raw = Celsius_d(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .celsius_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class FahrenheitConversionTests: XCTestCase {

    func testFahrenheit_tToCelsius_tTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testFahrenheit_tToCelsius_uTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testFahrenheit_tToCelsius_fTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testFahrenheit_tToCelsius_dTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testFahrenheit_tToFahrenheit_uTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testFahrenheit_tToFahrenheit_fTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testFahrenheit_tToFahrenheit_dTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testFahrenheit_tToKelvin_tTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testFahrenheit_tToKelvin_uTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testFahrenheit_tToKelvin_fTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testFahrenheit_tToKelvin_dTemperatureConversions() {
        let original = Fahrenheit_t(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToFahrenheit_tConversions() {
        let ctype1 = fahrenheit_t(5)
        let swiftType1 = Fahrenheit_t(rawValue: ctype1)
        let ctype2 = degF_t_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testFahrenheit_tInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.fahrenheit_t(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureFahrenheit_tInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degF_t(5)
        let expected2 = Int8(
            degF_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degF_t_to_i8(ctype))
        )
    }

    func testFahrenheit_tInt8RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_i8(raw)
        let expected = Fahrenheit_t(Int8(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureInt8Init() {
        let raw = Fahrenheit_t(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degF_t(5)
        let expected2 = Int16(
            degF_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degF_t_to_i16(ctype))
        )
    }

    func testFahrenheit_tInt16RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_i16(raw)
        let expected = Fahrenheit_t(Int16(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureInt16Init() {
        let raw = Fahrenheit_t(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_t(5)
        let expected2 = Int32(
            degF_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degF_t_to_i32(ctype))
        )
    }

    func testFahrenheit_tInt32RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_i32(raw)
        let expected = Fahrenheit_t(Int32(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureInt32Init() {
        let raw = Fahrenheit_t(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_t(5)
        let expected2 = Int64(
            degF_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degF_t_to_i64(ctype))
        )
    }

    func testFahrenheit_tInt64RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_i64(raw)
        let expected = Fahrenheit_t(Int64(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureInt64Init() {
        let raw = Fahrenheit_t(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tIntInits() {
        let raw = Int(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_t(5)
        let expected2 = Int(
            degF_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degF_t_to_i64(ctype))
        )
    }

    func testFahrenheit_tIntRawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_i64(raw)
        let expected = Fahrenheit_t(Int(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureIntInit() {
        let raw = Fahrenheit_t(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_t(5)
        let expected2 = CInt(
            degF_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degF_t_to_i32(ctype))
        )
    }

    func testFahrenheit_tCIntRawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_i32(raw)
        let expected = Fahrenheit_t(CInt(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureCIntInit() {
        let raw = Fahrenheit_t(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degF_t(5)
        let expected2 = UInt8(
            degF_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degF_t_to_u8(ctype))
        )
    }

    func testFahrenheit_tUInt8RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_u8(raw)
        let expected = Fahrenheit_t(UInt8(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureUInt8Init() {
        let raw = Fahrenheit_t(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degF_t(5)
        let expected2 = UInt16(
            degF_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degF_t_to_u16(ctype))
        )
    }

    func testFahrenheit_tUInt16RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_u16(raw)
        let expected = Fahrenheit_t(UInt16(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureUInt16Init() {
        let raw = Fahrenheit_t(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_t(5)
        let expected2 = UInt32(
            degF_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degF_t_to_u32(ctype))
        )
    }

    func testFahrenheit_tUInt32RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_u32(raw)
        let expected = Fahrenheit_t(UInt32(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureUInt32Init() {
        let raw = Fahrenheit_t(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_t(5)
        let expected2 = UInt64(
            degF_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degF_t_to_u64(ctype))
        )
    }

    func testFahrenheit_tUInt64RawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_u64(raw)
        let expected = Fahrenheit_t(UInt64(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureUInt64Init() {
        let raw = Fahrenheit_t(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_t(5)
        let expected2 = UInt(
            degF_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degF_t_to_u64(ctype))
        )
    }

    func testFahrenheit_tUIntRawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_u64(raw)
        let expected = Fahrenheit_t(UInt(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureUIntInit() {
        let raw = Fahrenheit_t(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_t(5)
        let expected2 = CUnsignedInt(
            degF_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degF_t_to_u32(ctype))
        )
    }

    func testFahrenheit_tCUnsignedIntRawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_u32(raw)
        let expected = Fahrenheit_t(CUnsignedInt(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureCUnsignedIntInit() {
        let raw = Fahrenheit_t(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tFloatInits() {
        let raw = Float(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degF_t(5)
        let expected2 = Float(
            degF_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degF_t_to_f(ctype))
        )
    }

    func testFahrenheit_tFloatRawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_f(raw)
        let expected = Fahrenheit_t(Float(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureFloatInit() {
        let raw = Fahrenheit_t(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_tDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degF_t(5)
        let expected2 = Double(
            degF_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degF_t(5)
        let expected = Fahrenheit_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degF_t_to_d(ctype))
        )
    }

    func testFahrenheit_tDoubleRawValueInit() {
        let raw = fahrenheit_t(5)
        let ctype = degF_t_to_d(raw)
        let expected = Fahrenheit_t(Double(ctype))
        XCTAssertEqual(Fahrenheit_t(rawValue: raw), expected)
    }

    func testFahrenheit_tTemperatureDoubleInit() {
        let raw = Fahrenheit_t(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testFahrenheit_uToCelsius_tTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testFahrenheit_uToCelsius_uTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testFahrenheit_uToCelsius_fTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testFahrenheit_uToCelsius_dTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testFahrenheit_uToFahrenheit_tTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testFahrenheit_uToFahrenheit_fTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testFahrenheit_uToFahrenheit_dTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testFahrenheit_uToKelvin_tTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testFahrenheit_uToKelvin_uTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testFahrenheit_uToKelvin_fTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testFahrenheit_uToKelvin_dTemperatureConversions() {
        let original = Fahrenheit_u(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToFahrenheit_uConversions() {
        let ctype1 = fahrenheit_u(5)
        let swiftType1 = Fahrenheit_u(rawValue: ctype1)
        let ctype2 = degF_u_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testFahrenheit_uInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.fahrenheit_u(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureFahrenheit_uInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degF_u(5)
        let expected2 = Int8(
            degF_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degF_u_to_i8(ctype))
        )
    }

    func testFahrenheit_uInt8RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_i8(raw)
        let expected = Fahrenheit_u(Int8(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureInt8Init() {
        let raw = Fahrenheit_u(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degF_u(5)
        let expected2 = Int16(
            degF_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degF_u_to_i16(ctype))
        )
    }

    func testFahrenheit_uInt16RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_i16(raw)
        let expected = Fahrenheit_u(Int16(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureInt16Init() {
        let raw = Fahrenheit_u(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_u(5)
        let expected2 = Int32(
            degF_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degF_u_to_i32(ctype))
        )
    }

    func testFahrenheit_uInt32RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_i32(raw)
        let expected = Fahrenheit_u(Int32(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureInt32Init() {
        let raw = Fahrenheit_u(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_u(5)
        let expected2 = Int64(
            degF_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degF_u_to_i64(ctype))
        )
    }

    func testFahrenheit_uInt64RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_i64(raw)
        let expected = Fahrenheit_u(Int64(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureInt64Init() {
        let raw = Fahrenheit_u(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uIntInits() {
        let raw = Int(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_u(5)
        let expected2 = Int(
            degF_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degF_u_to_i64(ctype))
        )
    }

    func testFahrenheit_uIntRawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_i64(raw)
        let expected = Fahrenheit_u(Int(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureIntInit() {
        let raw = Fahrenheit_u(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_u(5)
        let expected2 = CInt(
            degF_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degF_u_to_i32(ctype))
        )
    }

    func testFahrenheit_uCIntRawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_i32(raw)
        let expected = Fahrenheit_u(CInt(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureCIntInit() {
        let raw = Fahrenheit_u(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degF_u(5)
        let expected2 = UInt8(
            degF_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degF_u_to_u8(ctype))
        )
    }

    func testFahrenheit_uUInt8RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_u8(raw)
        let expected = Fahrenheit_u(UInt8(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureUInt8Init() {
        let raw = Fahrenheit_u(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degF_u(5)
        let expected2 = UInt16(
            degF_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degF_u_to_u16(ctype))
        )
    }

    func testFahrenheit_uUInt16RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_u16(raw)
        let expected = Fahrenheit_u(UInt16(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureUInt16Init() {
        let raw = Fahrenheit_u(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_u(5)
        let expected2 = UInt32(
            degF_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degF_u_to_u32(ctype))
        )
    }

    func testFahrenheit_uUInt32RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_u32(raw)
        let expected = Fahrenheit_u(UInt32(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureUInt32Init() {
        let raw = Fahrenheit_u(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_u(5)
        let expected2 = UInt64(
            degF_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degF_u_to_u64(ctype))
        )
    }

    func testFahrenheit_uUInt64RawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_u64(raw)
        let expected = Fahrenheit_u(UInt64(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureUInt64Init() {
        let raw = Fahrenheit_u(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_u(5)
        let expected2 = UInt(
            degF_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degF_u_to_u64(ctype))
        )
    }

    func testFahrenheit_uUIntRawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_u64(raw)
        let expected = Fahrenheit_u(UInt(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureUIntInit() {
        let raw = Fahrenheit_u(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_u(5)
        let expected2 = CUnsignedInt(
            degF_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degF_u_to_u32(ctype))
        )
    }

    func testFahrenheit_uCUnsignedIntRawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_u32(raw)
        let expected = Fahrenheit_u(CUnsignedInt(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureCUnsignedIntInit() {
        let raw = Fahrenheit_u(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uFloatInits() {
        let raw = Float(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degF_u(5)
        let expected2 = Float(
            degF_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degF_u_to_f(ctype))
        )
    }

    func testFahrenheit_uFloatRawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_f(raw)
        let expected = Fahrenheit_u(Float(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureFloatInit() {
        let raw = Fahrenheit_u(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_uDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degF_u(5)
        let expected2 = Double(
            degF_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degF_u(5)
        let expected = Fahrenheit_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degF_u_to_d(ctype))
        )
    }

    func testFahrenheit_uDoubleRawValueInit() {
        let raw = fahrenheit_u(5)
        let ctype = degF_u_to_d(raw)
        let expected = Fahrenheit_u(Double(ctype))
        XCTAssertEqual(Fahrenheit_u(rawValue: raw), expected)
    }

    func testFahrenheit_uTemperatureDoubleInit() {
        let raw = Fahrenheit_u(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testFahrenheit_fToCelsius_tTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testFahrenheit_fToCelsius_uTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testFahrenheit_fToCelsius_fTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testFahrenheit_fToCelsius_dTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testFahrenheit_fToFahrenheit_tTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testFahrenheit_fToFahrenheit_uTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testFahrenheit_fToFahrenheit_dTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testFahrenheit_fToKelvin_tTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testFahrenheit_fToKelvin_uTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testFahrenheit_fToKelvin_fTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testFahrenheit_fToKelvin_dTemperatureConversions() {
        let original = Fahrenheit_f(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToFahrenheit_fConversions() {
        let ctype1 = fahrenheit_f(5)
        let swiftType1 = Fahrenheit_f(rawValue: ctype1)
        let ctype2 = degF_f_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testFahrenheit_fInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.fahrenheit_f(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureFahrenheit_fInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degF_f(5)
        let expected2 = Int8(
            degF_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degF_f_to_i8(ctype))
        )
    }

    func testFahrenheit_fInt8RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_i8(raw)
        let expected = Fahrenheit_f(Int8(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureInt8Init() {
        let raw = Fahrenheit_f(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degF_f(5)
        let expected2 = Int16(
            degF_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degF_f_to_i16(ctype))
        )
    }

    func testFahrenheit_fInt16RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_i16(raw)
        let expected = Fahrenheit_f(Int16(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureInt16Init() {
        let raw = Fahrenheit_f(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_f(5)
        let expected2 = Int32(
            degF_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degF_f_to_i32(ctype))
        )
    }

    func testFahrenheit_fInt32RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_i32(raw)
        let expected = Fahrenheit_f(Int32(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureInt32Init() {
        let raw = Fahrenheit_f(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_f(5)
        let expected2 = Int64(
            degF_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degF_f_to_i64(ctype))
        )
    }

    func testFahrenheit_fInt64RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_i64(raw)
        let expected = Fahrenheit_f(Int64(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureInt64Init() {
        let raw = Fahrenheit_f(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fIntInits() {
        let raw = Int(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_f(5)
        let expected2 = Int(
            degF_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degF_f_to_i64(ctype))
        )
    }

    func testFahrenheit_fIntRawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_i64(raw)
        let expected = Fahrenheit_f(Int(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureIntInit() {
        let raw = Fahrenheit_f(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_f(5)
        let expected2 = CInt(
            degF_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degF_f_to_i32(ctype))
        )
    }

    func testFahrenheit_fCIntRawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_i32(raw)
        let expected = Fahrenheit_f(CInt(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureCIntInit() {
        let raw = Fahrenheit_f(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degF_f(5)
        let expected2 = UInt8(
            degF_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degF_f_to_u8(ctype))
        )
    }

    func testFahrenheit_fUInt8RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_u8(raw)
        let expected = Fahrenheit_f(UInt8(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureUInt8Init() {
        let raw = Fahrenheit_f(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degF_f(5)
        let expected2 = UInt16(
            degF_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degF_f_to_u16(ctype))
        )
    }

    func testFahrenheit_fUInt16RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_u16(raw)
        let expected = Fahrenheit_f(UInt16(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureUInt16Init() {
        let raw = Fahrenheit_f(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_f(5)
        let expected2 = UInt32(
            degF_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degF_f_to_u32(ctype))
        )
    }

    func testFahrenheit_fUInt32RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_u32(raw)
        let expected = Fahrenheit_f(UInt32(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureUInt32Init() {
        let raw = Fahrenheit_f(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_f(5)
        let expected2 = UInt64(
            degF_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degF_f_to_u64(ctype))
        )
    }

    func testFahrenheit_fUInt64RawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_u64(raw)
        let expected = Fahrenheit_f(UInt64(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureUInt64Init() {
        let raw = Fahrenheit_f(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_f(5)
        let expected2 = UInt(
            degF_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degF_f_to_u64(ctype))
        )
    }

    func testFahrenheit_fUIntRawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_u64(raw)
        let expected = Fahrenheit_f(UInt(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureUIntInit() {
        let raw = Fahrenheit_f(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_f(5)
        let expected2 = CUnsignedInt(
            degF_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degF_f_to_u32(ctype))
        )
    }

    func testFahrenheit_fCUnsignedIntRawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_u32(raw)
        let expected = Fahrenheit_f(CUnsignedInt(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureCUnsignedIntInit() {
        let raw = Fahrenheit_f(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fFloatInits() {
        let raw = Float(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degF_f(5)
        let expected2 = Float(
            degF_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degF_f_to_f(ctype))
        )
    }

    func testFahrenheit_fFloatRawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_f(raw)
        let expected = Fahrenheit_f(Float(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureFloatInit() {
        let raw = Fahrenheit_f(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_fDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degF_f(5)
        let expected2 = Double(
            degF_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degF_f(5)
        let expected = Fahrenheit_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degF_f_to_d(ctype))
        )
    }

    func testFahrenheit_fDoubleRawValueInit() {
        let raw = fahrenheit_f(5)
        let ctype = degF_f_to_d(raw)
        let expected = Fahrenheit_f(Double(ctype))
        XCTAssertEqual(Fahrenheit_f(rawValue: raw), expected)
    }

    func testFahrenheit_fTemperatureDoubleInit() {
        let raw = Fahrenheit_f(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testFahrenheit_dToCelsius_tTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testFahrenheit_dToCelsius_uTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testFahrenheit_dToCelsius_fTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testFahrenheit_dToCelsius_dTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testFahrenheit_dToFahrenheit_tTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testFahrenheit_dToFahrenheit_uTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testFahrenheit_dToFahrenheit_fTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testFahrenheit_dToKelvin_tTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testFahrenheit_dToKelvin_uTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testFahrenheit_dToKelvin_fTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testFahrenheit_dToKelvin_dTemperatureConversions() {
        let original = Fahrenheit_d(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToFahrenheit_dConversions() {
        let ctype1 = fahrenheit_d(5)
        let swiftType1 = Fahrenheit_d(rawValue: ctype1)
        let ctype2 = degF_d_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testFahrenheit_dInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.fahrenheit_d(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureFahrenheit_dInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_degF_d(5)
        let expected2 = Int8(
            degF_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(degF_d_to_i8(ctype))
        )
    }

    func testFahrenheit_dInt8RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_i8(raw)
        let expected = Fahrenheit_d(Int8(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureInt8Init() {
        let raw = Fahrenheit_d(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_degF_d(5)
        let expected2 = Int16(
            degF_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(degF_d_to_i16(ctype))
        )
    }

    func testFahrenheit_dInt16RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_i16(raw)
        let expected = Fahrenheit_d(Int16(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureInt16Init() {
        let raw = Fahrenheit_d(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_d(5)
        let expected2 = Int32(
            degF_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(degF_d_to_i32(ctype))
        )
    }

    func testFahrenheit_dInt32RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_i32(raw)
        let expected = Fahrenheit_d(Int32(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureInt32Init() {
        let raw = Fahrenheit_d(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_d(5)
        let expected2 = Int64(
            degF_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(degF_d_to_i64(ctype))
        )
    }

    func testFahrenheit_dInt64RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_i64(raw)
        let expected = Fahrenheit_d(Int64(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureInt64Init() {
        let raw = Fahrenheit_d(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dIntInits() {
        let raw = Int(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_degF_d(5)
        let expected2 = Int(
            degF_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(degF_d_to_i64(ctype))
        )
    }

    func testFahrenheit_dIntRawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_i64(raw)
        let expected = Fahrenheit_d(Int(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureIntInit() {
        let raw = Fahrenheit_d(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_degF_d(5)
        let expected2 = CInt(
            degF_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(degF_d_to_i32(ctype))
        )
    }

    func testFahrenheit_dCIntRawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_i32(raw)
        let expected = Fahrenheit_d(CInt(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureCIntInit() {
        let raw = Fahrenheit_d(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_degF_d(5)
        let expected2 = UInt8(
            degF_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(degF_d_to_u8(ctype))
        )
    }

    func testFahrenheit_dUInt8RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_u8(raw)
        let expected = Fahrenheit_d(UInt8(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureUInt8Init() {
        let raw = Fahrenheit_d(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_degF_d(5)
        let expected2 = UInt16(
            degF_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(degF_d_to_u16(ctype))
        )
    }

    func testFahrenheit_dUInt16RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_u16(raw)
        let expected = Fahrenheit_d(UInt16(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureUInt16Init() {
        let raw = Fahrenheit_d(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_d(5)
        let expected2 = UInt32(
            degF_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(degF_d_to_u32(ctype))
        )
    }

    func testFahrenheit_dUInt32RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_u32(raw)
        let expected = Fahrenheit_d(UInt32(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureUInt32Init() {
        let raw = Fahrenheit_d(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_d(5)
        let expected2 = UInt64(
            degF_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(degF_d_to_u64(ctype))
        )
    }

    func testFahrenheit_dUInt64RawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_u64(raw)
        let expected = Fahrenheit_d(UInt64(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureUInt64Init() {
        let raw = Fahrenheit_d(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_degF_d(5)
        let expected2 = UInt(
            degF_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(degF_d_to_u64(ctype))
        )
    }

    func testFahrenheit_dUIntRawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_u64(raw)
        let expected = Fahrenheit_d(UInt(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureUIntInit() {
        let raw = Fahrenheit_d(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_degF_d(5)
        let expected2 = CUnsignedInt(
            degF_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(degF_d_to_u32(ctype))
        )
    }

    func testFahrenheit_dCUnsignedIntRawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_u32(raw)
        let expected = Fahrenheit_d(CUnsignedInt(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureCUnsignedIntInit() {
        let raw = Fahrenheit_d(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dFloatInits() {
        let raw = Float(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_degF_d(5)
        let expected2 = Float(
            degF_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(degF_d_to_f(ctype))
        )
    }

    func testFahrenheit_dFloatRawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_f(raw)
        let expected = Fahrenheit_d(Float(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureFloatInit() {
        let raw = Fahrenheit_d(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureFahrenheit_dDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(fahrenheit: raw)
        let result = Temperature.fahrenheit(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_degF_d(5)
        let expected2 = Double(
            degF_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testFahrenheit_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_degF_d(5)
        let expected = Fahrenheit_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(degF_d_to_d(ctype))
        )
    }

    func testFahrenheit_dDoubleRawValueInit() {
        let raw = fahrenheit_d(5)
        let ctype = degF_d_to_d(raw)
        let expected = Fahrenheit_d(Double(ctype))
        XCTAssertEqual(Fahrenheit_d(rawValue: raw), expected)
    }

    func testFahrenheit_dTemperatureDoubleInit() {
        let raw = Fahrenheit_d(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .fahrenheit_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class KelvinConversionTests: XCTestCase {

    func testKelvin_tToCelsius_tTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testKelvin_tToCelsius_uTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testKelvin_tToCelsius_fTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testKelvin_tToCelsius_dTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testKelvin_tToFahrenheit_tTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testKelvin_tToFahrenheit_uTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testKelvin_tToFahrenheit_fTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testKelvin_tToFahrenheit_dTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testKelvin_tToKelvin_uTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testKelvin_tToKelvin_fTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testKelvin_tToKelvin_dTemperatureConversions() {
        let original = Kelvin_t(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToKelvin_tConversions() {
        let ctype1 = kelvin_t(5)
        let swiftType1 = Kelvin_t(rawValue: ctype1)
        let ctype2 = K_t_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testKelvin_tInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.kelvin_t(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureKelvin_tInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_K_t(5)
        let expected2 = Int8(
            K_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(K_t_to_i8(ctype))
        )
    }

    func testKelvin_tInt8RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_i8(raw)
        let expected = Kelvin_t(Int8(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureInt8Init() {
        let raw = Kelvin_t(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_K_t(5)
        let expected2 = Int16(
            K_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(K_t_to_i16(ctype))
        )
    }

    func testKelvin_tInt16RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_i16(raw)
        let expected = Kelvin_t(Int16(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureInt16Init() {
        let raw = Kelvin_t(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_t(5)
        let expected2 = Int32(
            K_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(K_t_to_i32(ctype))
        )
    }

    func testKelvin_tInt32RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_i32(raw)
        let expected = Kelvin_t(Int32(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureInt32Init() {
        let raw = Kelvin_t(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_t(5)
        let expected2 = Int64(
            K_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(K_t_to_i64(ctype))
        )
    }

    func testKelvin_tInt64RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_i64(raw)
        let expected = Kelvin_t(Int64(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureInt64Init() {
        let raw = Kelvin_t(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tIntInits() {
        let raw = Int(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_t(5)
        let expected2 = Int(
            K_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(K_t_to_i64(ctype))
        )
    }

    func testKelvin_tIntRawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_i64(raw)
        let expected = Kelvin_t(Int(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureIntInit() {
        let raw = Kelvin_t(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_t(5)
        let expected2 = CInt(
            K_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(K_t_to_i32(ctype))
        )
    }

    func testKelvin_tCIntRawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_i32(raw)
        let expected = Kelvin_t(CInt(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureCIntInit() {
        let raw = Kelvin_t(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_K_t(5)
        let expected2 = UInt8(
            K_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(K_t_to_u8(ctype))
        )
    }

    func testKelvin_tUInt8RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_u8(raw)
        let expected = Kelvin_t(UInt8(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureUInt8Init() {
        let raw = Kelvin_t(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_K_t(5)
        let expected2 = UInt16(
            K_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(K_t_to_u16(ctype))
        )
    }

    func testKelvin_tUInt16RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_u16(raw)
        let expected = Kelvin_t(UInt16(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureUInt16Init() {
        let raw = Kelvin_t(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_t(5)
        let expected2 = UInt32(
            K_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(K_t_to_u32(ctype))
        )
    }

    func testKelvin_tUInt32RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_u32(raw)
        let expected = Kelvin_t(UInt32(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureUInt32Init() {
        let raw = Kelvin_t(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_t(5)
        let expected2 = UInt64(
            K_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(K_t_to_u64(ctype))
        )
    }

    func testKelvin_tUInt64RawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_u64(raw)
        let expected = Kelvin_t(UInt64(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureUInt64Init() {
        let raw = Kelvin_t(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_t(5)
        let expected2 = UInt(
            K_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(K_t_to_u64(ctype))
        )
    }

    func testKelvin_tUIntRawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_u64(raw)
        let expected = Kelvin_t(UInt(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureUIntInit() {
        let raw = Kelvin_t(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_t(5)
        let expected2 = CUnsignedInt(
            K_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(K_t_to_u32(ctype))
        )
    }

    func testKelvin_tCUnsignedIntRawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_u32(raw)
        let expected = Kelvin_t(CUnsignedInt(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureCUnsignedIntInit() {
        let raw = Kelvin_t(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tFloatInits() {
        let raw = Float(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_K_t(5)
        let expected2 = Float(
            K_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(K_t_to_f(ctype))
        )
    }

    func testKelvin_tFloatRawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_f(raw)
        let expected = Kelvin_t(Float(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureFloatInit() {
        let raw = Kelvin_t(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_tDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_K_t(5)
        let expected2 = Double(
            K_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_K_t(5)
        let expected = Kelvin_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(K_t_to_d(ctype))
        )
    }

    func testKelvin_tDoubleRawValueInit() {
        let raw = kelvin_t(5)
        let ctype = K_t_to_d(raw)
        let expected = Kelvin_t(Double(ctype))
        XCTAssertEqual(Kelvin_t(rawValue: raw), expected)
    }

    func testKelvin_tTemperatureDoubleInit() {
        let raw = Kelvin_t(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testKelvin_uToCelsius_tTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testKelvin_uToCelsius_uTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testKelvin_uToCelsius_fTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testKelvin_uToCelsius_dTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testKelvin_uToFahrenheit_tTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testKelvin_uToFahrenheit_uTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testKelvin_uToFahrenheit_fTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testKelvin_uToFahrenheit_dTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testKelvin_uToKelvin_tTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testKelvin_uToKelvin_fTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testKelvin_uToKelvin_dTemperatureConversions() {
        let original = Kelvin_u(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToKelvin_uConversions() {
        let ctype1 = kelvin_u(5)
        let swiftType1 = Kelvin_u(rawValue: ctype1)
        let ctype2 = K_u_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testKelvin_uInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.kelvin_u(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureKelvin_uInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_K_u(5)
        let expected2 = Int8(
            K_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(K_u_to_i8(ctype))
        )
    }

    func testKelvin_uInt8RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_i8(raw)
        let expected = Kelvin_u(Int8(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureInt8Init() {
        let raw = Kelvin_u(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_K_u(5)
        let expected2 = Int16(
            K_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(K_u_to_i16(ctype))
        )
    }

    func testKelvin_uInt16RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_i16(raw)
        let expected = Kelvin_u(Int16(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureInt16Init() {
        let raw = Kelvin_u(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_u(5)
        let expected2 = Int32(
            K_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(K_u_to_i32(ctype))
        )
    }

    func testKelvin_uInt32RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_i32(raw)
        let expected = Kelvin_u(Int32(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureInt32Init() {
        let raw = Kelvin_u(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_u(5)
        let expected2 = Int64(
            K_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(K_u_to_i64(ctype))
        )
    }

    func testKelvin_uInt64RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_i64(raw)
        let expected = Kelvin_u(Int64(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureInt64Init() {
        let raw = Kelvin_u(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uIntInits() {
        let raw = Int(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_u(5)
        let expected2 = Int(
            K_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(K_u_to_i64(ctype))
        )
    }

    func testKelvin_uIntRawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_i64(raw)
        let expected = Kelvin_u(Int(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureIntInit() {
        let raw = Kelvin_u(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_u(5)
        let expected2 = CInt(
            K_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(K_u_to_i32(ctype))
        )
    }

    func testKelvin_uCIntRawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_i32(raw)
        let expected = Kelvin_u(CInt(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureCIntInit() {
        let raw = Kelvin_u(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_K_u(5)
        let expected2 = UInt8(
            K_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(K_u_to_u8(ctype))
        )
    }

    func testKelvin_uUInt8RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_u8(raw)
        let expected = Kelvin_u(UInt8(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureUInt8Init() {
        let raw = Kelvin_u(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_K_u(5)
        let expected2 = UInt16(
            K_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(K_u_to_u16(ctype))
        )
    }

    func testKelvin_uUInt16RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_u16(raw)
        let expected = Kelvin_u(UInt16(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureUInt16Init() {
        let raw = Kelvin_u(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_u(5)
        let expected2 = UInt32(
            K_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(K_u_to_u32(ctype))
        )
    }

    func testKelvin_uUInt32RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_u32(raw)
        let expected = Kelvin_u(UInt32(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureUInt32Init() {
        let raw = Kelvin_u(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_u(5)
        let expected2 = UInt64(
            K_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(K_u_to_u64(ctype))
        )
    }

    func testKelvin_uUInt64RawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_u64(raw)
        let expected = Kelvin_u(UInt64(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureUInt64Init() {
        let raw = Kelvin_u(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_u(5)
        let expected2 = UInt(
            K_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(K_u_to_u64(ctype))
        )
    }

    func testKelvin_uUIntRawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_u64(raw)
        let expected = Kelvin_u(UInt(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureUIntInit() {
        let raw = Kelvin_u(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_u(5)
        let expected2 = CUnsignedInt(
            K_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(K_u_to_u32(ctype))
        )
    }

    func testKelvin_uCUnsignedIntRawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_u32(raw)
        let expected = Kelvin_u(CUnsignedInt(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureCUnsignedIntInit() {
        let raw = Kelvin_u(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uFloatInits() {
        let raw = Float(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_K_u(5)
        let expected2 = Float(
            K_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(K_u_to_f(ctype))
        )
    }

    func testKelvin_uFloatRawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_f(raw)
        let expected = Kelvin_u(Float(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureFloatInit() {
        let raw = Kelvin_u(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_uDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_K_u(5)
        let expected2 = Double(
            K_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_K_u(5)
        let expected = Kelvin_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(K_u_to_d(ctype))
        )
    }

    func testKelvin_uDoubleRawValueInit() {
        let raw = kelvin_u(5)
        let ctype = K_u_to_d(raw)
        let expected = Kelvin_u(Double(ctype))
        XCTAssertEqual(Kelvin_u(rawValue: raw), expected)
    }

    func testKelvin_uTemperatureDoubleInit() {
        let raw = Kelvin_u(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testKelvin_fToCelsius_tTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testKelvin_fToCelsius_uTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testKelvin_fToCelsius_fTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testKelvin_fToCelsius_dTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testKelvin_fToFahrenheit_tTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testKelvin_fToFahrenheit_uTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testKelvin_fToFahrenheit_fTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testKelvin_fToFahrenheit_dTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testKelvin_fToKelvin_tTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testKelvin_fToKelvin_uTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testKelvin_fToKelvin_dTemperatureConversions() {
        let original = Kelvin_f(5)
        let category = Temperature(original)
        let other = category.kelvin_d
        XCTAssertEqual(other, Kelvin_d(original))
    }

    func testKelvin_dToKelvin_fConversions() {
        let ctype1 = kelvin_f(5)
        let swiftType1 = Kelvin_f(rawValue: ctype1)
        let ctype2 = K_f_to_K_d(ctype1)
        let swiftType2 = Kelvin_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_d(swiftType1))
    }

    func testKelvin_fInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.kelvin_f(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureKelvin_fInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_K_f(5)
        let expected2 = Int8(
            K_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(K_f_to_i8(ctype))
        )
    }

    func testKelvin_fInt8RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_i8(raw)
        let expected = Kelvin_f(Int8(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureInt8Init() {
        let raw = Kelvin_f(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_K_f(5)
        let expected2 = Int16(
            K_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(K_f_to_i16(ctype))
        )
    }

    func testKelvin_fInt16RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_i16(raw)
        let expected = Kelvin_f(Int16(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureInt16Init() {
        let raw = Kelvin_f(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_f(5)
        let expected2 = Int32(
            K_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(K_f_to_i32(ctype))
        )
    }

    func testKelvin_fInt32RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_i32(raw)
        let expected = Kelvin_f(Int32(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureInt32Init() {
        let raw = Kelvin_f(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_f(5)
        let expected2 = Int64(
            K_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(K_f_to_i64(ctype))
        )
    }

    func testKelvin_fInt64RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_i64(raw)
        let expected = Kelvin_f(Int64(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureInt64Init() {
        let raw = Kelvin_f(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fIntInits() {
        let raw = Int(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_f(5)
        let expected2 = Int(
            K_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(K_f_to_i64(ctype))
        )
    }

    func testKelvin_fIntRawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_i64(raw)
        let expected = Kelvin_f(Int(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureIntInit() {
        let raw = Kelvin_f(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_f(5)
        let expected2 = CInt(
            K_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(K_f_to_i32(ctype))
        )
    }

    func testKelvin_fCIntRawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_i32(raw)
        let expected = Kelvin_f(CInt(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureCIntInit() {
        let raw = Kelvin_f(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_K_f(5)
        let expected2 = UInt8(
            K_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(K_f_to_u8(ctype))
        )
    }

    func testKelvin_fUInt8RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_u8(raw)
        let expected = Kelvin_f(UInt8(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureUInt8Init() {
        let raw = Kelvin_f(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_K_f(5)
        let expected2 = UInt16(
            K_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(K_f_to_u16(ctype))
        )
    }

    func testKelvin_fUInt16RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_u16(raw)
        let expected = Kelvin_f(UInt16(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureUInt16Init() {
        let raw = Kelvin_f(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_f(5)
        let expected2 = UInt32(
            K_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(K_f_to_u32(ctype))
        )
    }

    func testKelvin_fUInt32RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_u32(raw)
        let expected = Kelvin_f(UInt32(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureUInt32Init() {
        let raw = Kelvin_f(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_f(5)
        let expected2 = UInt64(
            K_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(K_f_to_u64(ctype))
        )
    }

    func testKelvin_fUInt64RawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_u64(raw)
        let expected = Kelvin_f(UInt64(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureUInt64Init() {
        let raw = Kelvin_f(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_f(5)
        let expected2 = UInt(
            K_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(K_f_to_u64(ctype))
        )
    }

    func testKelvin_fUIntRawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_u64(raw)
        let expected = Kelvin_f(UInt(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureUIntInit() {
        let raw = Kelvin_f(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_f(5)
        let expected2 = CUnsignedInt(
            K_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(K_f_to_u32(ctype))
        )
    }

    func testKelvin_fCUnsignedIntRawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_u32(raw)
        let expected = Kelvin_f(CUnsignedInt(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureCUnsignedIntInit() {
        let raw = Kelvin_f(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fFloatInits() {
        let raw = Float(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_K_f(5)
        let expected2 = Float(
            K_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(K_f_to_f(ctype))
        )
    }

    func testKelvin_fFloatRawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_f(raw)
        let expected = Kelvin_f(Float(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureFloatInit() {
        let raw = Kelvin_f(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_fDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_K_f(5)
        let expected2 = Double(
            K_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_K_f(5)
        let expected = Kelvin_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(K_f_to_d(ctype))
        )
    }

    func testKelvin_fDoubleRawValueInit() {
        let raw = kelvin_f(5)
        let ctype = K_f_to_d(raw)
        let expected = Kelvin_f(Double(ctype))
        XCTAssertEqual(Kelvin_f(rawValue: raw), expected)
    }

    func testKelvin_fTemperatureDoubleInit() {
        let raw = Kelvin_f(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testKelvin_dToCelsius_tTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.celsius_t
        XCTAssertEqual(other, Celsius_t(original))
    }

    func testCelsius_tToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degC_t(ctype1)
        let swiftType2 = Celsius_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_t(swiftType1))
    }

    func testKelvin_dToCelsius_uTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.celsius_u
        XCTAssertEqual(other, Celsius_u(original))
    }

    func testCelsius_uToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degC_u(ctype1)
        let swiftType2 = Celsius_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_u(swiftType1))
    }

    func testKelvin_dToCelsius_fTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.celsius_f
        XCTAssertEqual(other, Celsius_f(original))
    }

    func testCelsius_fToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degC_f(ctype1)
        let swiftType2 = Celsius_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_f(swiftType1))
    }

    func testKelvin_dToCelsius_dTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.celsius_d
        XCTAssertEqual(other, Celsius_d(original))
    }

    func testCelsius_dToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degC_d(ctype1)
        let swiftType2 = Celsius_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Celsius_d(swiftType1))
    }

    func testKelvin_dToFahrenheit_tTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_t
        XCTAssertEqual(other, Fahrenheit_t(original))
    }

    func testFahrenheit_tToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degF_t(ctype1)
        let swiftType2 = Fahrenheit_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_t(swiftType1))
    }

    func testKelvin_dToFahrenheit_uTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_u
        XCTAssertEqual(other, Fahrenheit_u(original))
    }

    func testFahrenheit_uToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degF_u(ctype1)
        let swiftType2 = Fahrenheit_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_u(swiftType1))
    }

    func testKelvin_dToFahrenheit_fTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_f
        XCTAssertEqual(other, Fahrenheit_f(original))
    }

    func testFahrenheit_fToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degF_f(ctype1)
        let swiftType2 = Fahrenheit_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_f(swiftType1))
    }

    func testKelvin_dToFahrenheit_dTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.fahrenheit_d
        XCTAssertEqual(other, Fahrenheit_d(original))
    }

    func testFahrenheit_dToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_degF_d(ctype1)
        let swiftType2 = Fahrenheit_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Fahrenheit_d(swiftType1))
    }

    func testKelvin_dToKelvin_tTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.kelvin_t
        XCTAssertEqual(other, Kelvin_t(original))
    }

    func testKelvin_tToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_K_t(ctype1)
        let swiftType2 = Kelvin_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_t(swiftType1))
    }

    func testKelvin_dToKelvin_uTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.kelvin_u
        XCTAssertEqual(other, Kelvin_u(original))
    }

    func testKelvin_uToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_K_u(ctype1)
        let swiftType2 = Kelvin_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_u(swiftType1))
    }

    func testKelvin_dToKelvin_fTemperatureConversions() {
        let original = Kelvin_d(5)
        let category = Temperature(original)
        let other = category.kelvin_f
        XCTAssertEqual(other, Kelvin_f(original))
    }

    func testKelvin_fToKelvin_dConversions() {
        let ctype1 = kelvin_d(5)
        let swiftType1 = Kelvin_d(rawValue: ctype1)
        let ctype2 = K_d_to_K_f(ctype1)
        let swiftType2 = Kelvin_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Kelvin_f(swiftType1))
    }

    func testKelvin_dInitFromTypeEnum() {
        let underlyingType = Temperature.TemperatureTypes.kelvin_d(5)
        let category = Temperature(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTemperatureKelvin_dInt8Inits() {
        let raw = Int8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_K_d(5)
        let expected2 = Int8(
            K_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(K_d_to_i8(ctype))
        )
    }

    func testKelvin_dInt8RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_i8(raw)
        let expected = Kelvin_d(Int8(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureInt8Init() {
        let raw = Kelvin_d(Int8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dInt16Inits() {
        let raw = Int16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_K_d(5)
        let expected2 = Int16(
            K_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(K_d_to_i16(ctype))
        )
    }

    func testKelvin_dInt16RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_i16(raw)
        let expected = Kelvin_d(Int16(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureInt16Init() {
        let raw = Kelvin_d(Int16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dInt32Inits() {
        let raw = Int32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_d(5)
        let expected2 = Int32(
            K_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(K_d_to_i32(ctype))
        )
    }

    func testKelvin_dInt32RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_i32(raw)
        let expected = Kelvin_d(Int32(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureInt32Init() {
        let raw = Kelvin_d(Int32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dInt64Inits() {
        let raw = Int64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_d(5)
        let expected2 = Int64(
            K_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(K_d_to_i64(ctype))
        )
    }

    func testKelvin_dInt64RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_i64(raw)
        let expected = Kelvin_d(Int64(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureInt64Init() {
        let raw = Kelvin_d(Int64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dIntInits() {
        let raw = Int(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_K_d(5)
        let expected2 = Int(
            K_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(K_d_to_i64(ctype))
        )
    }

    func testKelvin_dIntRawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_i64(raw)
        let expected = Kelvin_d(Int(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureIntInit() {
        let raw = Kelvin_d(Int(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dCIntInits() {
        let raw = CInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_K_d(5)
        let expected2 = CInt(
            K_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(K_d_to_i32(ctype))
        )
    }

    func testKelvin_dCIntRawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_i32(raw)
        let expected = Kelvin_d(CInt(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureCIntInit() {
        let raw = Kelvin_d(CInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_K_d(5)
        let expected2 = UInt8(
            K_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(K_d_to_u8(ctype))
        )
    }

    func testKelvin_dUInt8RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_u8(raw)
        let expected = Kelvin_d(UInt8(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureUInt8Init() {
        let raw = Kelvin_d(UInt8(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_K_d(5)
        let expected2 = UInt16(
            K_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(K_d_to_u16(ctype))
        )
    }

    func testKelvin_dUInt16RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_u16(raw)
        let expected = Kelvin_d(UInt16(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureUInt16Init() {
        let raw = Kelvin_d(UInt16(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_d(5)
        let expected2 = UInt32(
            K_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(K_d_to_u32(ctype))
        )
    }

    func testKelvin_dUInt32RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_u32(raw)
        let expected = Kelvin_d(UInt32(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureUInt32Init() {
        let raw = Kelvin_d(UInt32(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_d(5)
        let expected2 = UInt64(
            K_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(K_d_to_u64(ctype))
        )
    }

    func testKelvin_dUInt64RawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_u64(raw)
        let expected = Kelvin_d(UInt64(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureUInt64Init() {
        let raw = Kelvin_d(UInt64(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dUIntInits() {
        let raw = UInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_K_d(5)
        let expected2 = UInt(
            K_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(K_d_to_u64(ctype))
        )
    }

    func testKelvin_dUIntRawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_u64(raw)
        let expected = Kelvin_d(UInt(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureUIntInit() {
        let raw = Kelvin_d(UInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_K_d(5)
        let expected2 = CUnsignedInt(
            K_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(K_d_to_u32(ctype))
        )
    }

    func testKelvin_dCUnsignedIntRawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_u32(raw)
        let expected = Kelvin_d(CUnsignedInt(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureCUnsignedIntInit() {
        let raw = Kelvin_d(CUnsignedInt(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dFloatInits() {
        let raw = Float(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_K_d(5)
        let expected2 = Float(
            K_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(K_d_to_f(ctype))
        )
    }

    func testKelvin_dFloatRawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_f(raw)
        let expected = Kelvin_d(Float(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureFloatInit() {
        let raw = Kelvin_d(Float(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTemperatureKelvin_dDoubleInits() {
        let raw = Double(5)
        let expected = Temperature(kelvin: raw)
        let result = Temperature.kelvin(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_K_d(5)
        let expected2 = Double(
            K_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testKelvin_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_K_d(5)
        let expected = Kelvin_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(K_d_to_d(ctype))
        )
    }

    func testKelvin_dDoubleRawValueInit() {
        let raw = kelvin_d(5)
        let ctype = K_d_to_d(raw)
        let expected = Kelvin_d(Double(ctype))
        XCTAssertEqual(Kelvin_d(rawValue: raw), expected)
    }

    func testKelvin_dTemperatureDoubleInit() {
        let raw = Kelvin_d(Double(5))
        let category = Temperature(raw)
        let expected = Temperature(rawValue: .kelvin_d(raw))
        XCTAssertEqual(category, expected)
    }

}

/// Provides celsius_t unit tests.
final class Celsius_tTests: XCTestCase {

    func testcelsius_tTofahrenheit_tUsing0Expecting32() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_degF_t(0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsing1Expecting34() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_degF_t(1)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsing25Expecting77() {
        let unit = Celsius_t(25)
        let expected = degC_t_to_degF_t(25)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsing2Expecting36() {
        let unit = Celsius_t(2)
        let expected = degC_t_to_degF_t(2)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsingNeg573ExpectingNeg999() {
        let unit = Celsius_t(-573)
        let expected = degC_t_to_degF_t(-573)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsingNeg272ExpectingNeg458() {
        let unit = Celsius_t(-272)
        let expected = degC_t_to_degF_t(-272)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsingNeg268ExpectingNeg450() {
        let unit = Celsius_t(-268)
        let expected = degC_t_to_degF_t(-268)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsingNeg273ExpectingNeg459() {
        let unit = Celsius_t(-273)
        let expected = degC_t_to_degF_t(-273)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsingNeg20ExpectingNeg4() {
        let unit = Celsius_t(-20)
        let expected = degC_t_to_degF_t(-20)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsingCInt_minExpectingfahrenheit_tCInt_min() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_degF_t(CInt.min)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_tUsingCInt_maxExpectingfahrenheit_tCInt_max() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_degF_t(CInt.max)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsing5Expecting278() {
        let unit = Celsius_t(5)
        let expected = degC_t_to_K_t(5)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsing0Expecting273() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_K_t(0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsing1Expecting274() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_K_t(1)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsingNeg272Expecting1() {
        let unit = Celsius_t(-272)
        let expected = degC_t_to_K_t(-272)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsingNeg273Expecting0() {
        let unit = Celsius_t(-273)
        let expected = degC_t_to_K_t(-273)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsingCInt_minExpectingkelvin_tCInt_min273() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_K_t(CInt.min)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsingCInt_maxExpectingkelvin_tCInt_max() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_K_t(CInt.max)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_tUsingNeg300ExpectingNeg27() {
        let unit = Celsius_t(-300)
        let expected = degC_t_to_K_t(-300)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_uUsing0Expecting0() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_degC_u(0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_uUsingcelsius_tCInt_minExpectingcelsius_uCUnsignedInt_min() {
        let unit = Celsius_t(celsius_t(CInt.min))
        let expected = degC_t_to_degC_u(celsius_t(CInt.min))
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_uUsingcelsius_tCInt_maxExpectingcelsius_uCInt_max() {
        let unit = Celsius_t(celsius_t(CInt.max))
        let expected = degC_t_to_degC_u(celsius_t(CInt.max))
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_uUsing5Expecting5() {
        let unit = Celsius_t(5)
        let expected = degC_t_to_degC_u(5)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_uUsing0Expecting32() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_degF_u(0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_uUsing1Expecting34() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_degF_u(1)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_uUsing25Expecting77() {
        let unit = Celsius_t(25)
        let expected = degC_t_to_degF_u(25)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_uUsing2Expecting36() {
        let unit = Celsius_t(2)
        let expected = degC_t_to_degF_u(2)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_uUsingCInt_minExpectingfahrenheit_uCUnsignedInt_min() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_degF_u(CInt.min)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_uUsingCInt_maxExpectingfahrenheit_uDoubleCInt_max1_832_0_rounded() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_degF_u(CInt.max)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsing5Expecting278() {
        let unit = Celsius_t(5)
        let expected = degC_t_to_K_u(5)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsing0Expecting273() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_K_u(0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsing1Expecting274() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_K_u(1)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsingNeg272Expecting1() {
        let unit = Celsius_t(-272)
        let expected = degC_t_to_K_u(-272)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsingNeg273Expecting0() {
        let unit = Celsius_t(-273)
        let expected = degC_t_to_K_u(-273)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsingCInt_maxExpectingkelvin_uCInt_max273() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_K_u(CInt.max)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsingCInt_minExpectingkelvin_uCUnsignedInt_min() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_K_u(CInt.min)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_uUsingNeg300Expecting0() {
        let unit = Celsius_t(-300)
        let expected = degC_t_to_K_u(-300)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_fUsing0Expecting0_0() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_degC_f(0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_fUsingcelsius_tCInt_minExpectingcelsius_fCInt_min() {
        let unit = Celsius_t(celsius_t(CInt.min))
        let expected = degC_t_to_degC_f(celsius_t(CInt.min))
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_fUsingcelsius_tCInt_maxExpectingcelsius_fCInt_max() {
        let unit = Celsius_t(celsius_t(CInt.max))
        let expected = degC_t_to_degC_f(celsius_t(CInt.max))
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_fUsing5Expecting5_0() {
        let unit = Celsius_t(5)
        let expected = degC_t_to_degC_f(5)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsing0Expecting32_0() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_degF_f(0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsing1Expecting33_53() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_degF_f(1)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsing25Expecting77_0() {
        let unit = Celsius_t(25)
        let expected = degC_t_to_degF_f(25)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsing2Expecting35_6() {
        let unit = Celsius_t(2)
        let expected = degC_t_to_degF_f(2)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsingNeg573ExpectingNeg999_418() {
        let unit = Celsius_t(-573)
        let expected = degC_t_to_degF_f(-573)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsingNeg272ExpectingNeg457_87() {
        let unit = Celsius_t(-272)
        let expected = degC_t_to_degF_f(-272)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsingNeg268ExpectingNeg450_40() {
        let unit = Celsius_t(-268)
        let expected = degC_t_to_degF_f(-268)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsingNeg273ExpectingNeg459_454() {
        let unit = Celsius_t(-273)
        let expected = degC_t_to_degF_f(-273)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsingNeg20ExpectingNeg4_0() {
        let unit = Celsius_t(-20)
        let expected = degC_t_to_degF_f(-20)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsingCInt_minExpectingfahrenheit_fDoubleCInt_min1_832_0() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_degF_f(CInt.min)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_fUsingCInt_maxExpectingfahrenheit_fDoubleCInt_max1_832_0() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_degF_f(CInt.max)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsing5Expecting278_15() {
        let unit = Celsius_t(5)
        let expected = degC_t_to_K_f(5)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsing0Expecting273_15() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_K_f(0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsing1Expecting274_15() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_K_f(1)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsingNeg272Expecting1_15() {
        let unit = Celsius_t(-272)
        let expected = degC_t_to_K_f(-272)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsingNeg273Expecting0_15() {
        let unit = Celsius_t(-273)
        let expected = degC_t_to_K_f(-273)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsingCInt_maxExpectingkelvin_fCInt_max273_15() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_K_f(CInt.max)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsingCInt_minExpectingkelvin_fCInt_min273_15() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_K_f(CInt.min)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_fUsingNeg300ExpectingNeg26_85() {
        let unit = Celsius_t(-300)
        let expected = degC_t_to_K_f(-300)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_dUsing0Expecting0_0() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_degC_d(0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_dUsingcelsius_tCInt_minExpectingcelsius_dCInt_min() {
        let unit = Celsius_t(celsius_t(CInt.min))
        let expected = degC_t_to_degC_d(celsius_t(CInt.min))
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_dUsingcelsius_tCInt_maxExpectingcelsius_dCInt_max() {
        let unit = Celsius_t(celsius_t(CInt.max))
        let expected = degC_t_to_degC_d(celsius_t(CInt.max))
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTocelsius_dUsing5Expecting5_0() {
        let unit = Celsius_t(5)
        let expected = degC_t_to_degC_d(5)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsing0Expecting32_0() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_degF_d(0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsing1Expecting33_53() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_degF_d(1)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsing25Expecting77_0() {
        let unit = Celsius_t(25)
        let expected = degC_t_to_degF_d(25)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsing2Expecting35_6() {
        let unit = Celsius_t(2)
        let expected = degC_t_to_degF_d(2)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsingNeg573ExpectingNeg999_418() {
        let unit = Celsius_t(-573)
        let expected = degC_t_to_degF_d(-573)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsingNeg272ExpectingNeg457_87() {
        let unit = Celsius_t(-272)
        let expected = degC_t_to_degF_d(-272)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsingNeg268ExpectingNeg450_40() {
        let unit = Celsius_t(-268)
        let expected = degC_t_to_degF_d(-268)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsingNeg273ExpectingNeg459_454() {
        let unit = Celsius_t(-273)
        let expected = degC_t_to_degF_d(-273)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsingNeg20ExpectingNeg4_0() {
        let unit = Celsius_t(-20)
        let expected = degC_t_to_degF_d(-20)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsingCInt_minExpectingfahrenheit_dDoubleCInt_min1_832_0() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_degF_d(CInt.min)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTofahrenheit_dUsingCInt_maxExpectingfahrenheit_dDoubleCInt_max1_832_0() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_degF_d(CInt.max)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsing5Expecting278_15() {
        let unit = Celsius_t(5)
        let expected = degC_t_to_K_d(5)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsing0Expecting273_15() {
        let unit = Celsius_t(0)
        let expected = degC_t_to_K_d(0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsing1Expecting274_15() {
        let unit = Celsius_t(1)
        let expected = degC_t_to_K_d(1)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsingNeg272Expecting1_15() {
        let unit = Celsius_t(-272)
        let expected = degC_t_to_K_d(-272)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsingNeg273Expecting0_15() {
        let unit = Celsius_t(-273)
        let expected = degC_t_to_K_d(-273)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsingCInt_maxExpectingkelvin_dCInt_max273_15() {
        let unit = Celsius_t(CInt.max)
        let expected = degC_t_to_K_d(CInt.max)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsingCInt_minExpectingkelvin_dCInt_min273_15() {
        let unit = Celsius_t(CInt.min)
        let expected = degC_t_to_K_d(CInt.min)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTokelvin_dUsingNeg300ExpectingNeg26_85() {
        let unit = Celsius_t(-300)
        let expected = degC_t_to_K_d(-300)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_tTointUsing0Expecting0() {
        let expected = degC_t_to_i(0)
        let result = CInt(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTointUsing5Expecting5() {
        let expected = degC_t_to_i(5)
        let result = CInt(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTointUsingcelsius_tCInt_minExpectingCIntCInt_min() {
        let expected = degC_t_to_i(celsius_t(CInt.min))
        let result = CInt(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTointUsingcelsius_tCInt_maxExpectingCIntCInt_max() {
        let expected = degC_t_to_i(celsius_t(CInt.max))
        let result = CInt(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_tUsing0Expecting0() {
        let expected = i_to_degC_t(0)
        let result = Celsius_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_tUsing5Expecting5() {
        let expected = i_to_degC_t(5)
        let result = Celsius_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint8_tUsing0Expecting0() {
        let expected = degC_t_to_i8(0)
        let result = Int8(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint8_tUsing5Expecting5() {
        let expected = degC_t_to_i8(5)
        let result = Int8(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint8_tUsingcelsius_tCInt_minExpectingInt8Int8_min() {
        let expected = degC_t_to_i8(celsius_t(CInt.min))
        let result = Int8(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint8_tUsingcelsius_tCInt_maxExpectingInt8Int8_max() {
        let expected = degC_t_to_i8(celsius_t(CInt.max))
        let result = Int8(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_tUsing0Expecting0() {
        let expected = i8_to_degC_t(0)
        let result = Celsius_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_tUsing5Expecting5() {
        let expected = i8_to_degC_t(5)
        let result = Celsius_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_tUsingInt8Int8_minExpectingcelsius_tInt8_min() {
        let expected = i8_to_degC_t(Int8(Int8.min))
        let result = Celsius_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_tUsingInt8Int8_maxExpectingcelsius_tInt8_max() {
        let expected = i8_to_degC_t(Int8(Int8.max))
        let result = Celsius_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint16_tUsing0Expecting0() {
        let expected = degC_t_to_i16(0)
        let result = Int16(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint16_tUsing5Expecting5() {
        let expected = degC_t_to_i16(5)
        let result = Int16(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint16_tUsingcelsius_tCInt_minExpectingInt16Int16_min() {
        let expected = degC_t_to_i16(celsius_t(CInt.min))
        let result = Int16(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint16_tUsingcelsius_tCInt_maxExpectingInt16Int16_max() {
        let expected = degC_t_to_i16(celsius_t(CInt.max))
        let result = Int16(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_tUsing0Expecting0() {
        let expected = i16_to_degC_t(0)
        let result = Celsius_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_tUsing5Expecting5() {
        let expected = i16_to_degC_t(5)
        let result = Celsius_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_tUsingInt16Int16_minExpectingcelsius_tInt16_min() {
        let expected = i16_to_degC_t(Int16(Int16.min))
        let result = Celsius_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_tUsingInt16Int16_maxExpectingcelsius_tInt16_max() {
        let expected = i16_to_degC_t(Int16(Int16.max))
        let result = Celsius_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint32_tUsing0Expecting0() {
        let expected = degC_t_to_i32(0)
        let result = Int32(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint32_tUsing5Expecting5() {
        let expected = degC_t_to_i32(5)
        let result = Int32(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint32_tUsingcelsius_tCInt_minExpectingInt32CInt_min() {
        let expected = degC_t_to_i32(celsius_t(CInt.min))
        let result = Int32(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint32_tUsingcelsius_tCInt_maxExpectingInt32CInt_max() {
        let expected = degC_t_to_i32(celsius_t(CInt.max))
        let result = Int32(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_tUsing0Expecting0() {
        let expected = i32_to_degC_t(0)
        let result = Celsius_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_tUsing5Expecting5() {
        let expected = i32_to_degC_t(5)
        let result = Celsius_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_tUsingInt32Int32_minExpectingcelsius_tCInt_min() {
        let expected = i32_to_degC_t(Int32(Int32.min))
        let result = Celsius_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_tUsingInt32Int32_maxExpectingcelsius_tCInt_max() {
        let expected = i32_to_degC_t(Int32(Int32.max))
        let result = Celsius_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint64_tUsing0Expecting0() {
        let expected = degC_t_to_i64(0)
        let result = Int64(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint64_tUsing5Expecting5() {
        let expected = degC_t_to_i64(5)
        let result = Int64(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint64_tUsingcelsius_tCInt_minExpectingInt64CInt_min() {
        let expected = degC_t_to_i64(celsius_t(CInt.min))
        let result = Int64(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tToint64_tUsingcelsius_tCInt_maxExpectingInt64CInt_max() {
        let expected = degC_t_to_i64(celsius_t(CInt.max))
        let result = Int64(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_tUsing0Expecting0() {
        let expected = i64_to_degC_t(0)
        let result = Celsius_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_tUsing5Expecting5() {
        let expected = i64_to_degC_t(5)
        let result = Celsius_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_tUsingInt64Int64_minExpectingcelsius_tCInt_min() {
        let expected = i64_to_degC_t(Int64(Int64.min))
        let result = Celsius_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_tUsingInt64Int64_maxExpectingcelsius_tCInt_max() {
        let expected = i64_to_degC_t(Int64(Int64.max))
        let result = Celsius_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTounsignedintUsing0Expecting0() {
        let expected = degC_t_to_u(0)
        let result = CUnsignedInt(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTounsignedintUsing5Expecting5() {
        let expected = degC_t_to_u(5)
        let result = CUnsignedInt(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTounsignedintUsingcelsius_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degC_t_to_u(celsius_t(CInt.min))
        let result = CUnsignedInt(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTounsignedintUsingcelsius_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = degC_t_to_u(celsius_t(CInt.max))
        let result = CUnsignedInt(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_tUsing0Expecting0() {
        let expected = u_to_degC_t(0)
        let result = Celsius_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_tUsing5Expecting5() {
        let expected = u_to_degC_t(5)
        let result = Celsius_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_tUsingCUnsignedIntCUnsignedInt_minExpectingcelsius_tCUnsignedInt_min() {
        let expected = u_to_degC_t(CUnsignedInt(CUnsignedInt.min))
        let result = Celsius_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_tUsingCUnsignedIntCUnsignedInt_maxExpectingcelsius_tCInt_max() {
        let expected = u_to_degC_t(CUnsignedInt(CUnsignedInt.max))
        let result = Celsius_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint8_tUsing0Expecting0() {
        let expected = degC_t_to_u8(0)
        let result = UInt8(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint8_tUsing5Expecting5() {
        let expected = degC_t_to_u8(5)
        let result = UInt8(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint8_tUsingcelsius_tCInt_minExpectingUInt8UInt8_min() {
        let expected = degC_t_to_u8(celsius_t(CInt.min))
        let result = UInt8(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint8_tUsingcelsius_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = degC_t_to_u8(celsius_t(CInt.max))
        let result = UInt8(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_tUsing0Expecting0() {
        let expected = u8_to_degC_t(0)
        let result = Celsius_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_tUsing5Expecting5() {
        let expected = u8_to_degC_t(5)
        let result = Celsius_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_tUsingUInt8UInt8_minExpectingcelsius_tUInt8_min() {
        let expected = u8_to_degC_t(UInt8(UInt8.min))
        let result = Celsius_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_tUsingUInt8UInt8_maxExpectingcelsius_tUInt8_max() {
        let expected = u8_to_degC_t(UInt8(UInt8.max))
        let result = Celsius_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint16_tUsing0Expecting0() {
        let expected = degC_t_to_u16(0)
        let result = UInt16(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint16_tUsing5Expecting5() {
        let expected = degC_t_to_u16(5)
        let result = UInt16(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint16_tUsingcelsius_tCInt_minExpectingUInt16UInt16_min() {
        let expected = degC_t_to_u16(celsius_t(CInt.min))
        let result = UInt16(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint16_tUsingcelsius_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = degC_t_to_u16(celsius_t(CInt.max))
        let result = UInt16(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_tUsing0Expecting0() {
        let expected = u16_to_degC_t(0)
        let result = Celsius_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_tUsing5Expecting5() {
        let expected = u16_to_degC_t(5)
        let result = Celsius_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_tUsingUInt16UInt16_minExpectingcelsius_tUInt16_min() {
        let expected = u16_to_degC_t(UInt16(UInt16.min))
        let result = Celsius_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_tUsingUInt16UInt16_maxExpectingcelsius_tUInt16_max() {
        let expected = u16_to_degC_t(UInt16(UInt16.max))
        let result = Celsius_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint32_tUsing0Expecting0() {
        let expected = degC_t_to_u32(0)
        let result = UInt32(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint32_tUsing5Expecting5() {
        let expected = degC_t_to_u32(5)
        let result = UInt32(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint32_tUsingcelsius_tCInt_minExpectingUInt32UInt32_min() {
        let expected = degC_t_to_u32(celsius_t(CInt.min))
        let result = UInt32(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint32_tUsingcelsius_tCInt_maxExpectingUInt32CInt_max() {
        let expected = degC_t_to_u32(celsius_t(CInt.max))
        let result = UInt32(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_tUsing0Expecting0() {
        let expected = u32_to_degC_t(0)
        let result = Celsius_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_tUsing5Expecting5() {
        let expected = u32_to_degC_t(5)
        let result = Celsius_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_tUsingUInt32UInt32_minExpectingcelsius_tUInt32_min() {
        let expected = u32_to_degC_t(UInt32(UInt32.min))
        let result = Celsius_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_tUsingUInt32UInt32_maxExpectingcelsius_tCInt_max() {
        let expected = u32_to_degC_t(UInt32(UInt32.max))
        let result = Celsius_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint64_tUsing0Expecting0() {
        let expected = degC_t_to_u64(0)
        let result = UInt64(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint64_tUsing5Expecting5() {
        let expected = degC_t_to_u64(5)
        let result = UInt64(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint64_tUsingcelsius_tCInt_minExpectingUInt64UInt64_min() {
        let expected = degC_t_to_u64(celsius_t(CInt.min))
        let result = UInt64(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTouint64_tUsingcelsius_tCInt_maxExpectingUInt64CInt_max() {
        let expected = degC_t_to_u64(celsius_t(CInt.max))
        let result = UInt64(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_tUsing0Expecting0() {
        let expected = u64_to_degC_t(0)
        let result = Celsius_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_tUsing5Expecting5() {
        let expected = u64_to_degC_t(5)
        let result = Celsius_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_tUsingUInt64UInt64_minExpectingcelsius_tUInt64_min() {
        let expected = u64_to_degC_t(UInt64(UInt64.min))
        let result = Celsius_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_tUsingUInt64UInt64_maxExpectingcelsius_tCInt_max() {
        let expected = u64_to_degC_t(UInt64(UInt64.max))
        let result = Celsius_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTofloatUsing0Expecting0_0() {
        let expected = degC_t_to_f(0)
        let result = Float(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTofloatUsing5Expecting5_0() {
        let expected = degC_t_to_f(5)
        let result = Float(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTofloatUsingcelsius_tCInt_minExpectingFloatCInt_min() {
        let expected = degC_t_to_f(celsius_t(CInt.min))
        let result = Float(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTofloatUsingcelsius_tCInt_maxExpectingFloatCInt_max() {
        let expected = degC_t_to_f(celsius_t(CInt.max))
        let result = Float(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_tUsing0_0Expecting0() {
        let expected = f_to_degC_t(0.0)
        let result = Celsius_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_tUsing5_0Expecting5() {
        let expected = f_to_degC_t(5.0)
        let result = Celsius_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingcelsius_tCInt_min() {
        let expected = f_to_degC_t(Float(-Float.greatestFiniteMagnitude))
        let result = Celsius_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_tUsingFloatFloat_greatestFiniteMagnitudeExpectingcelsius_tCInt_max() {
        let expected = f_to_degC_t(Float(Float.greatestFiniteMagnitude))
        let result = Celsius_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTodoubleUsing0Expecting0_0() {
        let expected = degC_t_to_d(0)
        let result = Double(Celsius_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTodoubleUsing5Expecting5_0() {
        let expected = degC_t_to_d(5)
        let result = Double(Celsius_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTodoubleUsingcelsius_tCInt_minExpectingDoubleCInt_min() {
        let expected = degC_t_to_d(celsius_t(CInt.min))
        let result = Double(Celsius_t(celsius_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_tTodoubleUsingcelsius_tCInt_maxExpectingDoubleCInt_max() {
        let expected = degC_t_to_d(celsius_t(CInt.max))
        let result = Double(Celsius_t(celsius_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_tUsing0_0Expecting0() {
        let expected = d_to_degC_t(0.0)
        let result = Celsius_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_tUsing5_0Expecting5() {
        let expected = d_to_degC_t(5.0)
        let result = Celsius_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingcelsius_tCInt_min() {
        let expected = d_to_degC_t(Double(-Double.greatestFiniteMagnitude))
        let result = Celsius_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingcelsius_tCInt_max() {
        let expected = d_to_degC_t(Double(Double.greatestFiniteMagnitude))
        let result = Celsius_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides celsius_u unit tests.
final class Celsius_uTests: XCTestCase {

    func testcelsius_uTocelsius_tUsing0Expecting0() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_degC_t(0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_tUsingcelsius_uCUnsignedInt_minExpectingcelsius_tCUnsignedInt_min() {
        let unit = Celsius_u(celsius_u(CUnsignedInt.min))
        let expected = degC_u_to_degC_t(celsius_u(CUnsignedInt.min))
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_tUsingcelsius_uCUnsignedInt_maxExpectingcelsius_tCInt_max() {
        let unit = Celsius_u(celsius_u(CUnsignedInt.max))
        let expected = degC_u_to_degC_t(celsius_u(CUnsignedInt.max))
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_tUsing5Expecting5() {
        let unit = Celsius_u(5)
        let expected = degC_u_to_degC_t(5)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_tUsing0Expecting32() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_degF_t(0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_tUsing1Expecting34() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_degF_t(1)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_tUsing25Expecting77() {
        let unit = Celsius_u(25)
        let expected = degC_u_to_degF_t(25)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_tUsing2Expecting36() {
        let unit = Celsius_u(2)
        let expected = degC_u_to_degF_t(2)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_tUsingCUnsignedInt_minExpectingfahrenheit_tDoubleCUnsignedInt_min1_832_0_rounded() {
        let unit = Celsius_u(CUnsignedInt.min)
        let expected = degC_u_to_degF_t(CUnsignedInt.min)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_tUsingCUnsignedInt_maxExpectingfahrenheit_tCInt_max() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_degF_t(CUnsignedInt.max)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_tUsing5Expecting278() {
        let unit = Celsius_u(5)
        let expected = degC_u_to_K_t(5)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_tUsing0Expecting273() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_K_t(0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_tUsing1Expecting274() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_K_t(1)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_tUsingCUnsignedInt_minExpectingkelvin_tCUnsignedInt_min273() {
        let unit = Celsius_u(CUnsignedInt.min)
        let expected = degC_u_to_K_t(CUnsignedInt.min)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_tUsingCUnsignedInt_maxExpectingkelvin_tCInt_max() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_K_t(CUnsignedInt.max)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_uUsing0Expecting32() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_degF_u(0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_uUsing1Expecting34() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_degF_u(1)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_uUsing25Expecting77() {
        let unit = Celsius_u(25)
        let expected = degC_u_to_degF_u(25)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_uUsing2Expecting36() {
        let unit = Celsius_u(2)
        let expected = degC_u_to_degF_u(2)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_uUsingCUnsignedInt_maxExpectingfahrenheit_uCUnsignedInt_max() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_degF_u(CUnsignedInt.max)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_uUsing5Expecting278() {
        let unit = Celsius_u(5)
        let expected = degC_u_to_K_u(5)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_uUsing0Expecting273() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_K_u(0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_uUsing1Expecting274() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_K_u(1)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_uUsingCUnsignedInt_minExpectingkelvin_uCUnsignedInt_min273() {
        let unit = Celsius_u(CUnsignedInt.min)
        let expected = degC_u_to_K_u(CUnsignedInt.min)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_uUsingCUnsignedInt_maxExpectingkelvin_uCUnsignedInt_max() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_K_u(CUnsignedInt.max)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_fUsing0Expecting0_0() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_degC_f(0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_fUsingcelsius_uCUnsignedInt_minExpectingcelsius_fCUnsignedInt_min() {
        let unit = Celsius_u(celsius_u(CUnsignedInt.min))
        let expected = degC_u_to_degC_f(celsius_u(CUnsignedInt.min))
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_fUsingcelsius_uCUnsignedInt_maxExpectingcelsius_fCUnsignedInt_max() {
        let unit = Celsius_u(celsius_u(CUnsignedInt.max))
        let expected = degC_u_to_degC_f(celsius_u(CUnsignedInt.max))
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_fUsing5Expecting5_0() {
        let unit = Celsius_u(5)
        let expected = degC_u_to_degC_f(5)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_fUsing0Expecting32_0() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_degF_f(0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_fUsing1Expecting33_53() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_degF_f(1)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_fUsing25Expecting77_0() {
        let unit = Celsius_u(25)
        let expected = degC_u_to_degF_f(25)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_fUsing2Expecting35_6() {
        let unit = Celsius_u(2)
        let expected = degC_u_to_degF_f(2)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_fUsingCUnsignedInt_minExpectingfahrenheit_fDoubleCUnsignedInt_min1_832_0() {
        let unit = Celsius_u(CUnsignedInt.min)
        let expected = degC_u_to_degF_f(CUnsignedInt.min)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_fUsingCUnsignedInt_maxExpectingfahrenheit_fDoubleCUnsignedInt_max1_832_0() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_degF_f(CUnsignedInt.max)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_fUsing5Expecting278_15() {
        let unit = Celsius_u(5)
        let expected = degC_u_to_K_f(5)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_fUsing0Expecting273_15() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_K_f(0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_fUsing1Expecting274_15() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_K_f(1)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_fUsingCUnsignedInt_minExpectingkelvin_fCUnsignedInt_min273_15() {
        let unit = Celsius_u(CUnsignedInt.min)
        let expected = degC_u_to_K_f(CUnsignedInt.min)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_fUsingCUnsignedInt_maxExpectingkelvin_fCUnsignedInt_max273_15() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_K_f(CUnsignedInt.max)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_dUsing0Expecting0_0() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_degC_d(0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_dUsingcelsius_uCUnsignedInt_minExpectingcelsius_dCUnsignedInt_min() {
        let unit = Celsius_u(celsius_u(CUnsignedInt.min))
        let expected = degC_u_to_degC_d(celsius_u(CUnsignedInt.min))
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_dUsingcelsius_uCUnsignedInt_maxExpectingcelsius_dCUnsignedInt_max() {
        let unit = Celsius_u(celsius_u(CUnsignedInt.max))
        let expected = degC_u_to_degC_d(celsius_u(CUnsignedInt.max))
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTocelsius_dUsing5Expecting5_0() {
        let unit = Celsius_u(5)
        let expected = degC_u_to_degC_d(5)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_dUsing0Expecting32_0() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_degF_d(0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_dUsing1Expecting33_53() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_degF_d(1)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_dUsing25Expecting77_0() {
        let unit = Celsius_u(25)
        let expected = degC_u_to_degF_d(25)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_dUsing2Expecting35_6() {
        let unit = Celsius_u(2)
        let expected = degC_u_to_degF_d(2)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_dUsingCUnsignedInt_minExpectingfahrenheit_dDoubleCUnsignedInt_min1_832_0() {
        let unit = Celsius_u(CUnsignedInt.min)
        let expected = degC_u_to_degF_d(CUnsignedInt.min)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTofahrenheit_dUsingCUnsignedInt_maxExpectingfahrenheit_dDoubleCUnsignedInt_max1_832_0() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_degF_d(CUnsignedInt.max)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_dUsing5Expecting278_15() {
        let unit = Celsius_u(5)
        let expected = degC_u_to_K_d(5)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_dUsing0Expecting273_15() {
        let unit = Celsius_u(0)
        let expected = degC_u_to_K_d(0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_dUsing1Expecting274_15() {
        let unit = Celsius_u(1)
        let expected = degC_u_to_K_d(1)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_dUsingCUnsignedInt_minExpectingkelvin_dCUnsignedInt_min273_15() {
        let unit = Celsius_u(CUnsignedInt.min)
        let expected = degC_u_to_K_d(CUnsignedInt.min)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTokelvin_dUsingCUnsignedInt_maxExpectingkelvin_dCUnsignedInt_max273_15() {
        let unit = Celsius_u(CUnsignedInt.max)
        let expected = degC_u_to_K_d(CUnsignedInt.max)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_uTointUsing0Expecting0() {
        let expected = degC_u_to_i(0)
        let result = CInt(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTointUsing5Expecting5() {
        let expected = degC_u_to_i(5)
        let result = CInt(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTointUsingcelsius_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = degC_u_to_i(celsius_u(CUnsignedInt.min))
        let result = CInt(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTointUsingcelsius_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = degC_u_to_i(celsius_u(CUnsignedInt.max))
        let result = CInt(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_uUsing0Expecting0() {
        let expected = i_to_degC_u(0)
        let result = Celsius_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_uUsing5Expecting5() {
        let expected = i_to_degC_u(5)
        let result = Celsius_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_uUsingCIntCInt_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = i_to_degC_u(CInt(CInt.min))
        let result = Celsius_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_uUsingCIntCInt_maxExpectingcelsius_uCInt_max() {
        let expected = i_to_degC_u(CInt(CInt.max))
        let result = Celsius_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint8_tUsing0Expecting0() {
        let expected = degC_u_to_i8(0)
        let result = Int8(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint8_tUsing5Expecting5() {
        let expected = degC_u_to_i8(5)
        let result = Int8(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint8_tUsingcelsius_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = degC_u_to_i8(celsius_u(CUnsignedInt.min))
        let result = Int8(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint8_tUsingcelsius_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = degC_u_to_i8(celsius_u(CUnsignedInt.max))
        let result = Int8(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_uUsing0Expecting0() {
        let expected = i8_to_degC_u(0)
        let result = Celsius_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_uUsing5Expecting5() {
        let expected = i8_to_degC_u(5)
        let result = Celsius_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_uUsingInt8Int8_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = i8_to_degC_u(Int8(Int8.min))
        let result = Celsius_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_uUsingInt8Int8_maxExpectingcelsius_uInt8_max() {
        let expected = i8_to_degC_u(Int8(Int8.max))
        let result = Celsius_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint16_tUsing0Expecting0() {
        let expected = degC_u_to_i16(0)
        let result = Int16(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint16_tUsing5Expecting5() {
        let expected = degC_u_to_i16(5)
        let result = Int16(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint16_tUsingcelsius_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = degC_u_to_i16(celsius_u(CUnsignedInt.min))
        let result = Int16(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint16_tUsingcelsius_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = degC_u_to_i16(celsius_u(CUnsignedInt.max))
        let result = Int16(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_uUsing0Expecting0() {
        let expected = i16_to_degC_u(0)
        let result = Celsius_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_uUsing5Expecting5() {
        let expected = i16_to_degC_u(5)
        let result = Celsius_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_uUsingInt16Int16_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = i16_to_degC_u(Int16(Int16.min))
        let result = Celsius_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_uUsingInt16Int16_maxExpectingcelsius_uInt16_max() {
        let expected = i16_to_degC_u(Int16(Int16.max))
        let result = Celsius_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint32_tUsing0Expecting0() {
        let expected = degC_u_to_i32(0)
        let result = Int32(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint32_tUsing5Expecting5() {
        let expected = degC_u_to_i32(5)
        let result = Int32(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint32_tUsingcelsius_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = degC_u_to_i32(celsius_u(CUnsignedInt.min))
        let result = Int32(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint32_tUsingcelsius_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = degC_u_to_i32(celsius_u(CUnsignedInt.max))
        let result = Int32(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_uUsing0Expecting0() {
        let expected = i32_to_degC_u(0)
        let result = Celsius_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_uUsing5Expecting5() {
        let expected = i32_to_degC_u(5)
        let result = Celsius_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_uUsingInt32Int32_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = i32_to_degC_u(Int32(Int32.min))
        let result = Celsius_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_uUsingInt32Int32_maxExpectingcelsius_uInt32_max() {
        let expected = i32_to_degC_u(Int32(Int32.max))
        let result = Celsius_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint64_tUsing0Expecting0() {
        let expected = degC_u_to_i64(0)
        let result = Int64(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint64_tUsing5Expecting5() {
        let expected = degC_u_to_i64(5)
        let result = Int64(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint64_tUsingcelsius_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = degC_u_to_i64(celsius_u(CUnsignedInt.min))
        let result = Int64(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uToint64_tUsingcelsius_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = degC_u_to_i64(celsius_u(CUnsignedInt.max))
        let result = Int64(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_uUsing0Expecting0() {
        let expected = i64_to_degC_u(0)
        let result = Celsius_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_uUsing5Expecting5() {
        let expected = i64_to_degC_u(5)
        let result = Celsius_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_uUsingInt64Int64_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = i64_to_degC_u(Int64(Int64.min))
        let result = Celsius_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_uUsingInt64Int64_maxExpectingcelsius_uCUnsignedInt_max() {
        let expected = i64_to_degC_u(Int64(Int64.max))
        let result = Celsius_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTounsignedintUsing0Expecting0() {
        let expected = degC_u_to_u(0)
        let result = CUnsignedInt(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTounsignedintUsing5Expecting5() {
        let expected = degC_u_to_u(5)
        let result = CUnsignedInt(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTounsignedintUsingcelsius_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degC_u_to_u(celsius_u(CUnsignedInt.min))
        let result = CUnsignedInt(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTounsignedintUsingcelsius_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = degC_u_to_u(celsius_u(CUnsignedInt.max))
        let result = CUnsignedInt(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_uUsing0Expecting0() {
        let expected = u_to_degC_u(0)
        let result = Celsius_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_uUsing5Expecting5() {
        let expected = u_to_degC_u(5)
        let result = Celsius_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint8_tUsing0Expecting0() {
        let expected = degC_u_to_u8(0)
        let result = UInt8(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint8_tUsing5Expecting5() {
        let expected = degC_u_to_u8(5)
        let result = UInt8(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint8_tUsingcelsius_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = degC_u_to_u8(celsius_u(CUnsignedInt.min))
        let result = UInt8(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint8_tUsingcelsius_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = degC_u_to_u8(celsius_u(CUnsignedInt.max))
        let result = UInt8(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_uUsing0Expecting0() {
        let expected = u8_to_degC_u(0)
        let result = Celsius_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_uUsing5Expecting5() {
        let expected = u8_to_degC_u(5)
        let result = Celsius_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_uUsingUInt8UInt8_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = u8_to_degC_u(UInt8(UInt8.min))
        let result = Celsius_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_uUsingUInt8UInt8_maxExpectingcelsius_uUInt8_max() {
        let expected = u8_to_degC_u(UInt8(UInt8.max))
        let result = Celsius_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint16_tUsing0Expecting0() {
        let expected = degC_u_to_u16(0)
        let result = UInt16(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint16_tUsing5Expecting5() {
        let expected = degC_u_to_u16(5)
        let result = UInt16(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint16_tUsingcelsius_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = degC_u_to_u16(celsius_u(CUnsignedInt.min))
        let result = UInt16(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint16_tUsingcelsius_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = degC_u_to_u16(celsius_u(CUnsignedInt.max))
        let result = UInt16(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_uUsing0Expecting0() {
        let expected = u16_to_degC_u(0)
        let result = Celsius_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_uUsing5Expecting5() {
        let expected = u16_to_degC_u(5)
        let result = Celsius_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_uUsingUInt16UInt16_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = u16_to_degC_u(UInt16(UInt16.min))
        let result = Celsius_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_uUsingUInt16UInt16_maxExpectingcelsius_uUInt16_max() {
        let expected = u16_to_degC_u(UInt16(UInt16.max))
        let result = Celsius_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint32_tUsing0Expecting0() {
        let expected = degC_u_to_u32(0)
        let result = UInt32(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint32_tUsing5Expecting5() {
        let expected = degC_u_to_u32(5)
        let result = UInt32(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint32_tUsingcelsius_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = degC_u_to_u32(celsius_u(CUnsignedInt.min))
        let result = UInt32(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint32_tUsingcelsius_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = degC_u_to_u32(celsius_u(CUnsignedInt.max))
        let result = UInt32(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_uUsing0Expecting0() {
        let expected = u32_to_degC_u(0)
        let result = Celsius_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_uUsing5Expecting5() {
        let expected = u32_to_degC_u(5)
        let result = Celsius_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_uUsingUInt32UInt32_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = u32_to_degC_u(UInt32(UInt32.min))
        let result = Celsius_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_uUsingUInt32UInt32_maxExpectingcelsius_uCUnsignedInt_max() {
        let expected = u32_to_degC_u(UInt32(UInt32.max))
        let result = Celsius_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint64_tUsing0Expecting0() {
        let expected = degC_u_to_u64(0)
        let result = UInt64(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint64_tUsing5Expecting5() {
        let expected = degC_u_to_u64(5)
        let result = UInt64(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint64_tUsingcelsius_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = degC_u_to_u64(celsius_u(CUnsignedInt.min))
        let result = UInt64(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTouint64_tUsingcelsius_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = degC_u_to_u64(celsius_u(CUnsignedInt.max))
        let result = UInt64(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_uUsing0Expecting0() {
        let expected = u64_to_degC_u(0)
        let result = Celsius_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_uUsing5Expecting5() {
        let expected = u64_to_degC_u(5)
        let result = Celsius_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_uUsingUInt64UInt64_minExpectingcelsius_uCUnsignedInt_min() {
        let expected = u64_to_degC_u(UInt64(UInt64.min))
        let result = Celsius_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_uUsingUInt64UInt64_maxExpectingcelsius_uCUnsignedInt_max() {
        let expected = u64_to_degC_u(UInt64(UInt64.max))
        let result = Celsius_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTofloatUsing0Expecting0_0() {
        let expected = degC_u_to_f(0)
        let result = Float(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTofloatUsing5Expecting5_0() {
        let expected = degC_u_to_f(5)
        let result = Float(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTofloatUsingcelsius_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = degC_u_to_f(celsius_u(CUnsignedInt.min))
        let result = Float(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTofloatUsingcelsius_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = degC_u_to_f(celsius_u(CUnsignedInt.max))
        let result = Float(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_uUsing0_0Expecting0() {
        let expected = f_to_degC_u(0.0)
        let result = Celsius_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_uUsing5_0Expecting5() {
        let expected = f_to_degC_u(5.0)
        let result = Celsius_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_min() {
        let expected = f_to_degC_u(Float(-Float.greatestFiniteMagnitude))
        let result = Celsius_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_uUsingFloatFloat_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_max() {
        let expected = f_to_degC_u(Float(Float.greatestFiniteMagnitude))
        let result = Celsius_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTodoubleUsing0Expecting0_0() {
        let expected = degC_u_to_d(0)
        let result = Double(Celsius_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTodoubleUsing5Expecting5_0() {
        let expected = degC_u_to_d(5)
        let result = Double(Celsius_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTodoubleUsingcelsius_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = degC_u_to_d(celsius_u(CUnsignedInt.min))
        let result = Double(Celsius_u(celsius_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_uTodoubleUsingcelsius_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = degC_u_to_d(celsius_u(CUnsignedInt.max))
        let result = Double(Celsius_u(celsius_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_uUsing0_0Expecting0() {
        let expected = d_to_degC_u(0.0)
        let result = Celsius_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_uUsing5_0Expecting5() {
        let expected = d_to_degC_u(5.0)
        let result = Celsius_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_min() {
        let expected = d_to_degC_u(Double(-Double.greatestFiniteMagnitude))
        let result = Celsius_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_max() {
        let expected = d_to_degC_u(Double(Double.greatestFiniteMagnitude))
        let result = Celsius_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides celsius_f unit tests.
final class Celsius_fTests: XCTestCase {

    func testcelsius_fTocelsius_tUsing0_0Expecting0() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_degC_t(0.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingcelsius_tCInt_min() {
        let unit = Celsius_f(celsius_f(-Float.greatestFiniteMagnitude))
        let expected = degC_f_to_degC_t(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingcelsius_tCInt_max() {
        let unit = Celsius_f(celsius_f(Float.greatestFiniteMagnitude))
        let expected = degC_f_to_degC_t(celsius_f(Float.greatestFiniteMagnitude))
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_tUsing5_0Expecting5() {
        let unit = Celsius_f(5.0)
        let expected = degC_f_to_degC_t(5.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsing0_0Expecting32() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_degF_t(0.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsing0_85Expecting34() {
        let unit = Celsius_f(0.85)
        let expected = degC_f_to_degF_t(0.85)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsing25_0Expecting77() {
        let unit = Celsius_f(25.0)
        let expected = degC_f_to_degF_t(25.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsing2_0Expecting36() {
        let unit = Celsius_f(2.0)
        let expected = degC_f_to_degF_t(2.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsingNeg573_01ExpectingNeg999() {
        let unit = Celsius_f(-573.01)
        let expected = degC_f_to_degF_t(-573.01)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsingNeg272_15ExpectingNeg458() {
        let unit = Celsius_f(-272.15)
        let expected = degC_f_to_degF_t(-272.15)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsingNeg268_0ExpectingNeg450() {
        let unit = Celsius_f(-268.0)
        let expected = degC_f_to_degF_t(-268.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsingNeg273_03ExpectingNeg459() {
        let unit = Celsius_f(-273.03)
        let expected = degC_f_to_degF_t(-273.03)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsingNeg20_0ExpectingNeg4() {
        let unit = Celsius_f(-20.0)
        let expected = degC_f_to_degF_t(-20.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsingNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_min() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_t(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_tUsingFloat_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_max() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_t(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsing5_0Expecting278() {
        let unit = Celsius_f(5.0)
        let expected = degC_f_to_K_t(5.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsing0_0Expecting273() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_K_t(0.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsing1_0Expecting274() {
        let unit = Celsius_f(1.0)
        let expected = degC_f_to_K_t(1.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsingNeg272_0Expecting1() {
        let unit = Celsius_f(-272.0)
        let expected = degC_f_to_K_t(-272.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsingNeg273_0Expecting0() {
        let unit = Celsius_f(-273.0)
        let expected = degC_f_to_K_t(-273.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsingNegFloat_greatestFiniteMagnitudeExpectingkelvin_tCInt_min() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_t(-Float.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsingFloat_greatestFiniteMagnitudeExpectingkelvin_tCInt_max() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_t(Float.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_tUsingNeg300_0ExpectingNeg27() {
        let unit = Celsius_f(-300.0)
        let expected = degC_f_to_K_t(-300.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_uUsing0_0Expecting0() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_degC_u(0.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_uUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_min() {
        let unit = Celsius_f(celsius_f(-Float.greatestFiniteMagnitude))
        let expected = degC_f_to_degC_u(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_uUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_max() {
        let unit = Celsius_f(celsius_f(Float.greatestFiniteMagnitude))
        let expected = degC_f_to_degC_u(celsius_f(Float.greatestFiniteMagnitude))
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_uUsing5_0Expecting5() {
        let unit = Celsius_f(5.0)
        let expected = degC_f_to_degC_u(5.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_uUsing0_0Expecting32() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_degF_u(0.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_uUsing0_85Expecting34() {
        let unit = Celsius_f(0.85)
        let expected = degC_f_to_degF_u(0.85)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_uUsing25_0Expecting77() {
        let unit = Celsius_f(25.0)
        let expected = degC_f_to_degF_u(25.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_uUsing2_0Expecting36() {
        let unit = Celsius_f(2.0)
        let expected = degC_f_to_degF_u(2.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_uUsingNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_min() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_u(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_uUsingFloat_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_max() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_u(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsing5_0Expecting278() {
        let unit = Celsius_f(5.0)
        let expected = degC_f_to_K_u(5.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsing0_0Expecting273() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_K_u(0.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsing1_0Expecting274() {
        let unit = Celsius_f(1.0)
        let expected = degC_f_to_K_u(1.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsingNeg272_0Expecting1() {
        let unit = Celsius_f(-272.0)
        let expected = degC_f_to_K_u(-272.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsingNeg273_0Expecting0() {
        let unit = Celsius_f(-273.0)
        let expected = degC_f_to_K_u(-273.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsingNegFloat_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_min() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_u(-Float.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsingFloat_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_max() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_u(Float.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_uUsingNeg300_0Expecting0() {
        let unit = Celsius_f(-300.0)
        let expected = degC_f_to_K_u(-300.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsing0_0Expecting32_0() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_degF_f(0.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsing0_85Expecting33_53() {
        let unit = Celsius_f(0.85)
        let expected = degC_f_to_degF_f(0.85)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsing25_0Expecting77_0() {
        let unit = Celsius_f(25.0)
        let expected = degC_f_to_degF_f(25.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsing2_0Expecting35_6() {
        let unit = Celsius_f(2.0)
        let expected = degC_f_to_degF_f(2.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsingNeg573_01ExpectingNeg999_418() {
        let unit = Celsius_f(-573.01)
        let expected = degC_f_to_degF_f(-573.01)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsingNeg272_15ExpectingNeg457_87() {
        let unit = Celsius_f(-272.15)
        let expected = degC_f_to_degF_f(-272.15)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsingNeg268_0ExpectingNeg450_40() {
        let unit = Celsius_f(-268.0)
        let expected = degC_f_to_degF_f(-268.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsingNeg273_03ExpectingNeg459_454() {
        let unit = Celsius_f(-273.03)
        let expected = degC_f_to_degF_f(-273.03)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsingNeg20_0ExpectingNeg4_0() {
        let unit = Celsius_f(-20.0)
        let expected = degC_f_to_degF_f(-20.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsingNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_fNegFloat_greatestFiniteMagnitude() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_f(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_fUsingFloat_greatestFiniteMagnitudeExpectingfahrenheit_fFloat_greatestFiniteMagnitude() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_f(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsing5_0Expecting278_15() {
        let unit = Celsius_f(5.0)
        let expected = degC_f_to_K_f(5.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsing0_0Expecting273_15() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_K_f(0.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsing1_0Expecting274_15() {
        let unit = Celsius_f(1.0)
        let expected = degC_f_to_K_f(1.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsingNeg272_0Expecting1_15() {
        let unit = Celsius_f(-272.0)
        let expected = degC_f_to_K_f(-272.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsingNeg273_0Expecting0_15() {
        let unit = Celsius_f(-273.0)
        let expected = degC_f_to_K_f(-273.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsingNegFloat_greatestFiniteMagnitudeExpectingkelvin_fNegFloat_greatestFiniteMagnitude273_15() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_f(-Float.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsingFloat_greatestFiniteMagnitudeExpectingkelvin_fFloat_greatestFiniteMagnitude() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_f(Float.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_fUsingNeg300_0ExpectingNeg26_85() {
        let unit = Celsius_f(-300.0)
        let expected = degC_f_to_K_f(-300.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_dUsing0_0Expecting0_0() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_degC_d(0.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_dUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingcelsius_dNegFloat_greatestFiniteMagnitude() {
        let unit = Celsius_f(celsius_f(-Float.greatestFiniteMagnitude))
        let expected = degC_f_to_degC_d(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_dUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingcelsius_dFloat_greatestFiniteMagnitude() {
        let unit = Celsius_f(celsius_f(Float.greatestFiniteMagnitude))
        let expected = degC_f_to_degC_d(celsius_f(Float.greatestFiniteMagnitude))
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTocelsius_dUsing5_0Expecting5_0() {
        let unit = Celsius_f(5.0)
        let expected = degC_f_to_degC_d(5.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsing0_0Expecting32_0() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_degF_d(0.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsing0_85Expecting33_53() {
        let unit = Celsius_f(0.85)
        let expected = degC_f_to_degF_d(0.85)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsing25_0Expecting77_0() {
        let unit = Celsius_f(25.0)
        let expected = degC_f_to_degF_d(25.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsing2_0Expecting35_6() {
        let unit = Celsius_f(2.0)
        let expected = degC_f_to_degF_d(2.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsingNeg573_01ExpectingNeg999_418() {
        let unit = Celsius_f(-573.01)
        let expected = degC_f_to_degF_d(-573.01)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsingNeg272_15ExpectingNeg457_87() {
        let unit = Celsius_f(-272.15)
        let expected = degC_f_to_degF_d(-272.15)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsingNeg268_0ExpectingNeg450_40() {
        let unit = Celsius_f(-268.0)
        let expected = degC_f_to_degF_d(-268.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsingNeg273_03ExpectingNeg459_454() {
        let unit = Celsius_f(-273.03)
        let expected = degC_f_to_degF_d(-273.03)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsingNeg20_0ExpectingNeg4_0() {
        let unit = Celsius_f(-20.0)
        let expected = degC_f_to_degF_d(-20.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsingNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_dDoubleNegFloat_greatestFiniteMagnitude1_832_0() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_d(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTofahrenheit_dUsingFloat_greatestFiniteMagnitudeExpectingfahrenheit_dDoubleFloat_greatestFiniteMagnitude1_832_0() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_degF_d(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsing5_0Expecting278_15() {
        let unit = Celsius_f(5.0)
        let expected = degC_f_to_K_d(5.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsing0_0Expecting273_15() {
        let unit = Celsius_f(0.0)
        let expected = degC_f_to_K_d(0.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsing1_0Expecting274_15() {
        let unit = Celsius_f(1.0)
        let expected = degC_f_to_K_d(1.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsingNeg272_0Expecting1_15() {
        let unit = Celsius_f(-272.0)
        let expected = degC_f_to_K_d(-272.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsingNeg273_0Expecting0_15() {
        let unit = Celsius_f(-273.0)
        let expected = degC_f_to_K_d(-273.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsingNegFloat_greatestFiniteMagnitudeExpectingkelvin_dNegFloat_greatestFiniteMagnitude273_15() {
        let unit = Celsius_f(-Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_d(-Float.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsingFloat_greatestFiniteMagnitudeExpectingkelvin_dFloat_greatestFiniteMagnitude273_15() {
        let unit = Celsius_f(Float.greatestFiniteMagnitude)
        let expected = degC_f_to_K_d(Float.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTokelvin_dUsingNeg300_0ExpectingNeg26_85() {
        let unit = Celsius_f(-300.0)
        let expected = degC_f_to_K_d(-300.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_fTointUsing0_0Expecting0() {
        let expected = degC_f_to_i(0.0)
        let result = CInt(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTointUsing5_0Expecting5() {
        let expected = degC_f_to_i(5.0)
        let result = CInt(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTointUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = degC_f_to_i(celsius_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTointUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = degC_f_to_i(celsius_f(Float.greatestFiniteMagnitude))
        let result = CInt(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_fUsing0Expecting0_0() {
        let expected = i_to_degC_f(0)
        let result = Celsius_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_fUsing5Expecting5_0() {
        let expected = i_to_degC_f(5)
        let result = Celsius_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_fUsingCIntCInt_minExpectingcelsius_fCInt_min() {
        let expected = i_to_degC_f(CInt(CInt.min))
        let result = Celsius_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_fUsingCIntCInt_maxExpectingcelsius_fCInt_max() {
        let expected = i_to_degC_f(CInt(CInt.max))
        let result = Celsius_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint8_tUsing0_0Expecting0() {
        let expected = degC_f_to_i8(0.0)
        let result = Int8(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint8_tUsing5_0Expecting5() {
        let expected = degC_f_to_i8(5.0)
        let result = Int8(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint8_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = degC_f_to_i8(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint8_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = degC_f_to_i8(celsius_f(Float.greatestFiniteMagnitude))
        let result = Int8(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_fUsing0Expecting0_0() {
        let expected = i8_to_degC_f(0)
        let result = Celsius_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_fUsing5Expecting5_0() {
        let expected = i8_to_degC_f(5)
        let result = Celsius_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_fUsingInt8Int8_minExpectingcelsius_fInt8_min() {
        let expected = i8_to_degC_f(Int8(Int8.min))
        let result = Celsius_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_fUsingInt8Int8_maxExpectingcelsius_fInt8_max() {
        let expected = i8_to_degC_f(Int8(Int8.max))
        let result = Celsius_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint16_tUsing0_0Expecting0() {
        let expected = degC_f_to_i16(0.0)
        let result = Int16(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint16_tUsing5_0Expecting5() {
        let expected = degC_f_to_i16(5.0)
        let result = Int16(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint16_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = degC_f_to_i16(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint16_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = degC_f_to_i16(celsius_f(Float.greatestFiniteMagnitude))
        let result = Int16(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_fUsing0Expecting0_0() {
        let expected = i16_to_degC_f(0)
        let result = Celsius_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_fUsing5Expecting5_0() {
        let expected = i16_to_degC_f(5)
        let result = Celsius_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_fUsingInt16Int16_minExpectingcelsius_fInt16_min() {
        let expected = i16_to_degC_f(Int16(Int16.min))
        let result = Celsius_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_fUsingInt16Int16_maxExpectingcelsius_fInt16_max() {
        let expected = i16_to_degC_f(Int16(Int16.max))
        let result = Celsius_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint32_tUsing0_0Expecting0() {
        let expected = degC_f_to_i32(0.0)
        let result = Int32(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint32_tUsing5_0Expecting5() {
        let expected = degC_f_to_i32(5.0)
        let result = Int32(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint32_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = degC_f_to_i32(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint32_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = degC_f_to_i32(celsius_f(Float.greatestFiniteMagnitude))
        let result = Int32(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_fUsing0Expecting0_0() {
        let expected = i32_to_degC_f(0)
        let result = Celsius_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_fUsing5Expecting5_0() {
        let expected = i32_to_degC_f(5)
        let result = Celsius_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_fUsingInt32Int32_minExpectingcelsius_fInt32_min() {
        let expected = i32_to_degC_f(Int32(Int32.min))
        let result = Celsius_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_fUsingInt32Int32_maxExpectingcelsius_fInt32_max() {
        let expected = i32_to_degC_f(Int32(Int32.max))
        let result = Celsius_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint64_tUsing0_0Expecting0() {
        let expected = degC_f_to_i64(0.0)
        let result = Int64(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint64_tUsing5_0Expecting5() {
        let expected = degC_f_to_i64(5.0)
        let result = Int64(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint64_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = degC_f_to_i64(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fToint64_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = degC_f_to_i64(celsius_f(Float.greatestFiniteMagnitude))
        let result = Int64(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_fUsing0Expecting0_0() {
        let expected = i64_to_degC_f(0)
        let result = Celsius_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_fUsing5Expecting5_0() {
        let expected = i64_to_degC_f(5)
        let result = Celsius_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_fUsingInt64Int64_minExpectingcelsius_fInt64_min() {
        let expected = i64_to_degC_f(Int64(Int64.min))
        let result = Celsius_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_fUsingInt64Int64_maxExpectingcelsius_fInt64_max() {
        let expected = i64_to_degC_f(Int64(Int64.max))
        let result = Celsius_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTounsignedintUsing0_0Expecting0() {
        let expected = degC_f_to_u(0.0)
        let result = CUnsignedInt(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTounsignedintUsing5_0Expecting5() {
        let expected = degC_f_to_u(5.0)
        let result = CUnsignedInt(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTounsignedintUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degC_f_to_u(celsius_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTounsignedintUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = degC_f_to_u(celsius_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_fUsing0Expecting0_0() {
        let expected = u_to_degC_f(0)
        let result = Celsius_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_fUsing5Expecting5_0() {
        let expected = u_to_degC_f(5)
        let result = Celsius_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_fUsingCUnsignedIntCUnsignedInt_minExpectingcelsius_fCUnsignedInt_min() {
        let expected = u_to_degC_f(CUnsignedInt(CUnsignedInt.min))
        let result = Celsius_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_fUsingCUnsignedIntCUnsignedInt_maxExpectingcelsius_fCUnsignedInt_max() {
        let expected = u_to_degC_f(CUnsignedInt(CUnsignedInt.max))
        let result = Celsius_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint8_tUsing0_0Expecting0() {
        let expected = degC_f_to_u8(0.0)
        let result = UInt8(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint8_tUsing5_0Expecting5() {
        let expected = degC_f_to_u8(5.0)
        let result = UInt8(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint8_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = degC_f_to_u8(celsius_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint8_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = degC_f_to_u8(celsius_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_fUsing0Expecting0_0() {
        let expected = u8_to_degC_f(0)
        let result = Celsius_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_fUsing5Expecting5_0() {
        let expected = u8_to_degC_f(5)
        let result = Celsius_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_fUsingUInt8UInt8_minExpectingcelsius_fUInt8_min() {
        let expected = u8_to_degC_f(UInt8(UInt8.min))
        let result = Celsius_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_fUsingUInt8UInt8_maxExpectingcelsius_fUInt8_max() {
        let expected = u8_to_degC_f(UInt8(UInt8.max))
        let result = Celsius_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint16_tUsing0_0Expecting0() {
        let expected = degC_f_to_u16(0.0)
        let result = UInt16(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint16_tUsing5_0Expecting5() {
        let expected = degC_f_to_u16(5.0)
        let result = UInt16(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint16_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = degC_f_to_u16(celsius_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint16_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = degC_f_to_u16(celsius_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_fUsing0Expecting0_0() {
        let expected = u16_to_degC_f(0)
        let result = Celsius_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_fUsing5Expecting5_0() {
        let expected = u16_to_degC_f(5)
        let result = Celsius_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_fUsingUInt16UInt16_minExpectingcelsius_fUInt16_min() {
        let expected = u16_to_degC_f(UInt16(UInt16.min))
        let result = Celsius_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_fUsingUInt16UInt16_maxExpectingcelsius_fUInt16_max() {
        let expected = u16_to_degC_f(UInt16(UInt16.max))
        let result = Celsius_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint32_tUsing0_0Expecting0() {
        let expected = degC_f_to_u32(0.0)
        let result = UInt32(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint32_tUsing5_0Expecting5() {
        let expected = degC_f_to_u32(5.0)
        let result = UInt32(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint32_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = degC_f_to_u32(celsius_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint32_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = degC_f_to_u32(celsius_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_fUsing0Expecting0_0() {
        let expected = u32_to_degC_f(0)
        let result = Celsius_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_fUsing5Expecting5_0() {
        let expected = u32_to_degC_f(5)
        let result = Celsius_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_fUsingUInt32UInt32_minExpectingcelsius_fUInt32_min() {
        let expected = u32_to_degC_f(UInt32(UInt32.min))
        let result = Celsius_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_fUsingUInt32UInt32_maxExpectingcelsius_fUInt32_max() {
        let expected = u32_to_degC_f(UInt32(UInt32.max))
        let result = Celsius_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint64_tUsing0_0Expecting0() {
        let expected = degC_f_to_u64(0.0)
        let result = UInt64(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint64_tUsing5_0Expecting5() {
        let expected = degC_f_to_u64(5.0)
        let result = UInt64(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint64_tUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = degC_f_to_u64(celsius_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTouint64_tUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = degC_f_to_u64(celsius_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_fUsing0Expecting0_0() {
        let expected = u64_to_degC_f(0)
        let result = Celsius_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_fUsing5Expecting5_0() {
        let expected = u64_to_degC_f(5)
        let result = Celsius_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_fUsingUInt64UInt64_minExpectingcelsius_fUInt64_min() {
        let expected = u64_to_degC_f(UInt64(UInt64.min))
        let result = Celsius_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_fUsingUInt64UInt64_maxExpectingcelsius_fUInt64_max() {
        let expected = u64_to_degC_f(UInt64(UInt64.max))
        let result = Celsius_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTofloatUsing0_0Expecting0_0() {
        let expected = degC_f_to_f(0.0)
        let result = Float(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTofloatUsing5_0Expecting5_0() {
        let expected = degC_f_to_f(5.0)
        let result = Float(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTofloatUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = degC_f_to_f(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Float(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTofloatUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = degC_f_to_f(celsius_f(Float.greatestFiniteMagnitude))
        let result = Float(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_fUsing0_0Expecting0_0() {
        let expected = f_to_degC_f(0.0)
        let result = Celsius_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_fUsing5_0Expecting5_0() {
        let expected = f_to_degC_f(5.0)
        let result = Celsius_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTodoubleUsing0_0Expecting0_0() {
        let expected = degC_f_to_d(0.0)
        let result = Double(Celsius_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTodoubleUsing5_0Expecting5_0() {
        let expected = degC_f_to_d(5.0)
        let result = Double(Celsius_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTodoubleUsingcelsius_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = degC_f_to_d(celsius_f(-Float.greatestFiniteMagnitude))
        let result = Double(Celsius_f(celsius_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_fTodoubleUsingcelsius_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = degC_f_to_d(celsius_f(Float.greatestFiniteMagnitude))
        let result = Double(Celsius_f(celsius_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_fUsing0_0Expecting0_0() {
        let expected = d_to_degC_f(0.0)
        let result = Celsius_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_fUsing5_0Expecting5_0() {
        let expected = d_to_degC_f(5.0)
        let result = Celsius_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingcelsius_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_degC_f(Double(-Double.greatestFiniteMagnitude))
        let result = Celsius_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingcelsius_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_degC_f(Double(Double.greatestFiniteMagnitude))
        let result = Celsius_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides celsius_d unit tests.
final class Celsius_dTests: XCTestCase {

    func testcelsius_dTocelsius_tUsing0_0Expecting0() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_degC_t(0.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingcelsius_tCInt_min() {
        let unit = Celsius_d(celsius_d(-Double.greatestFiniteMagnitude))
        let expected = degC_d_to_degC_t(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingcelsius_tCInt_max() {
        let unit = Celsius_d(celsius_d(Double.greatestFiniteMagnitude))
        let expected = degC_d_to_degC_t(celsius_d(Double.greatestFiniteMagnitude))
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_tUsing5_0Expecting5() {
        let unit = Celsius_d(5.0)
        let expected = degC_d_to_degC_t(5.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsing0_0Expecting32() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_degF_t(0.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsing0_85Expecting34() {
        let unit = Celsius_d(0.85)
        let expected = degC_d_to_degF_t(0.85)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsing25_0Expecting77() {
        let unit = Celsius_d(25.0)
        let expected = degC_d_to_degF_t(25.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsing2_0Expecting36() {
        let unit = Celsius_d(2.0)
        let expected = degC_d_to_degF_t(2.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsingNeg573_01ExpectingNeg999() {
        let unit = Celsius_d(-573.01)
        let expected = degC_d_to_degF_t(-573.01)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsingNeg272_15ExpectingNeg458() {
        let unit = Celsius_d(-272.15)
        let expected = degC_d_to_degF_t(-272.15)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsingNeg268_0ExpectingNeg450() {
        let unit = Celsius_d(-268.0)
        let expected = degC_d_to_degF_t(-268.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsingNeg273_03ExpectingNeg459() {
        let unit = Celsius_d(-273.03)
        let expected = degC_d_to_degF_t(-273.03)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsingNeg20_0ExpectingNeg4() {
        let unit = Celsius_d(-20.0)
        let expected = degC_d_to_degF_t(-20.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_tUsingNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_min() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_t(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofahrenheit_tUsingDouble_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_max() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_t(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_tUsing5_0Expecting278() {
        let unit = Celsius_d(5.0)
        let expected = degC_d_to_K_t(5.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_tUsing0_0Expecting273() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_K_t(0.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_tUsing1_0Expecting274() {
        let unit = Celsius_d(1.0)
        let expected = degC_d_to_K_t(1.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_tUsingNeg272_0Expecting1() {
        let unit = Celsius_d(-272.0)
        let expected = degC_d_to_K_t(-272.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_tUsingNeg273_0Expecting0() {
        let unit = Celsius_d(-273.0)
        let expected = degC_d_to_K_t(-273.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_tUsingNegDouble_greatestFiniteMagnitudeExpectingkelvin_tCInt_min() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_t(-Double.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_tUsingDouble_greatestFiniteMagnitudeExpectingkelvin_tCInt_max() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_t(Double.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_tUsingNeg300_0ExpectingNeg27() {
        let unit = Celsius_d(-300.0)
        let expected = degC_d_to_K_t(-300.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_uUsing0_0Expecting0() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_degC_u(0.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_uUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_min() {
        let unit = Celsius_d(celsius_d(-Double.greatestFiniteMagnitude))
        let expected = degC_d_to_degC_u(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_uUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_max() {
        let unit = Celsius_d(celsius_d(Double.greatestFiniteMagnitude))
        let expected = degC_d_to_degC_u(celsius_d(Double.greatestFiniteMagnitude))
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_uUsing5_0Expecting5() {
        let unit = Celsius_d(5.0)
        let expected = degC_d_to_degC_u(5.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_uUsing0_0Expecting32() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_degF_u(0.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_uUsing0_85Expecting34() {
        let unit = Celsius_d(0.85)
        let expected = degC_d_to_degF_u(0.85)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_uUsing25_0Expecting77() {
        let unit = Celsius_d(25.0)
        let expected = degC_d_to_degF_u(25.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_uUsing2_0Expecting36() {
        let unit = Celsius_d(2.0)
        let expected = degC_d_to_degF_u(2.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_uUsingNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_min() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_u(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofahrenheit_uUsingDouble_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_max() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_u(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_uUsing5_0Expecting278() {
        let unit = Celsius_d(5.0)
        let expected = degC_d_to_K_u(5.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_uUsing0_0Expecting273() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_K_u(0.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_uUsing1_0Expecting274() {
        let unit = Celsius_d(1.0)
        let expected = degC_d_to_K_u(1.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_uUsingNeg272_0Expecting1() {
        let unit = Celsius_d(-272.0)
        let expected = degC_d_to_K_u(-272.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_uUsingNeg273_0Expecting0() {
        let unit = Celsius_d(-273.0)
        let expected = degC_d_to_K_u(-273.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_uUsingNegDouble_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_min() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_u(-Double.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_uUsingDouble_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_max() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_u(Double.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_uUsingNeg300_0Expecting0() {
        let unit = Celsius_d(-300.0)
        let expected = degC_d_to_K_u(-300.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_fUsing0_0Expecting0_0() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_degC_f(0.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_fUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingcelsius_fNegFloat_greatestFiniteMagnitude() {
        let unit = Celsius_d(celsius_d(-Double.greatestFiniteMagnitude))
        let expected = degC_d_to_degC_f(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_fUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingcelsius_fFloat_greatestFiniteMagnitude() {
        let unit = Celsius_d(celsius_d(Double.greatestFiniteMagnitude))
        let expected = degC_d_to_degC_f(celsius_d(Double.greatestFiniteMagnitude))
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTocelsius_fUsing5_0Expecting5_0() {
        let unit = Celsius_d(5.0)
        let expected = degC_d_to_degC_f(5.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsing0_0Expecting32_0() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_degF_f(0.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsing0_85Expecting33_53() {
        let unit = Celsius_d(0.85)
        let expected = degC_d_to_degF_f(0.85)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsing25_0Expecting77_0() {
        let unit = Celsius_d(25.0)
        let expected = degC_d_to_degF_f(25.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsing2_0Expecting35_6() {
        let unit = Celsius_d(2.0)
        let expected = degC_d_to_degF_f(2.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsingNeg573_01ExpectingNeg999_418() {
        let unit = Celsius_d(-573.01)
        let expected = degC_d_to_degF_f(-573.01)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsingNeg272_15ExpectingNeg457_87() {
        let unit = Celsius_d(-272.15)
        let expected = degC_d_to_degF_f(-272.15)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsingNeg268_0ExpectingNeg450_40() {
        let unit = Celsius_d(-268.0)
        let expected = degC_d_to_degF_f(-268.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsingNeg273_03ExpectingNeg459_454() {
        let unit = Celsius_d(-273.03)
        let expected = degC_d_to_degF_f(-273.03)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsingNeg20_0ExpectingNeg4_0() {
        let unit = Celsius_d(-20.0)
        let expected = degC_d_to_degF_f(-20.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_fUsingNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_fNegFloat_greatestFiniteMagnitude() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_f(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofahrenheit_fUsingDouble_greatestFiniteMagnitudeExpectingfahrenheit_fFloat_greatestFiniteMagnitude() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_f(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_fUsing5_0Expecting278_15() {
        let unit = Celsius_d(5.0)
        let expected = degC_d_to_K_f(5.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_fUsing0_0Expecting273_15() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_K_f(0.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_fUsing1_0Expecting274_15() {
        let unit = Celsius_d(1.0)
        let expected = degC_d_to_K_f(1.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_fUsingNeg272_0Expecting1_15() {
        let unit = Celsius_d(-272.0)
        let expected = degC_d_to_K_f(-272.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_fUsingNeg273_0Expecting0_15() {
        let unit = Celsius_d(-273.0)
        let expected = degC_d_to_K_f(-273.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_fUsingNegDouble_greatestFiniteMagnitudeExpectingkelvin_fNegFloat_greatestFiniteMagnitude() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_f(-Double.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_fUsingDouble_greatestFiniteMagnitudeExpectingkelvin_fFloat_greatestFiniteMagnitude() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_f(Double.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_fUsingNeg300_0ExpectingNeg26_85() {
        let unit = Celsius_d(-300.0)
        let expected = degC_d_to_K_f(-300.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsing0_0Expecting32_0() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_degF_d(0.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsing0_85Expecting33_53() {
        let unit = Celsius_d(0.85)
        let expected = degC_d_to_degF_d(0.85)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsing25_0Expecting77_0() {
        let unit = Celsius_d(25.0)
        let expected = degC_d_to_degF_d(25.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsing2_0Expecting35_6() {
        let unit = Celsius_d(2.0)
        let expected = degC_d_to_degF_d(2.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsingNeg573_01ExpectingNeg999_418() {
        let unit = Celsius_d(-573.01)
        let expected = degC_d_to_degF_d(-573.01)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsingNeg272_15ExpectingNeg457_87() {
        let unit = Celsius_d(-272.15)
        let expected = degC_d_to_degF_d(-272.15)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsingNeg268_0ExpectingNeg450_40() {
        let unit = Celsius_d(-268.0)
        let expected = degC_d_to_degF_d(-268.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsingNeg273_03ExpectingNeg459_454() {
        let unit = Celsius_d(-273.03)
        let expected = degC_d_to_degF_d(-273.03)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsingNeg20_0ExpectingNeg4_0() {
        let unit = Celsius_d(-20.0)
        let expected = degC_d_to_degF_d(-20.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTofahrenheit_dUsingNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_dNegDouble_greatestFiniteMagnitude() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_d(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofahrenheit_dUsingDouble_greatestFiniteMagnitudeExpectingfahrenheit_dDouble_greatestFiniteMagnitude() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_degF_d(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_dUsing5_0Expecting278_15() {
        let unit = Celsius_d(5.0)
        let expected = degC_d_to_K_d(5.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_dUsing0_0Expecting273_15() {
        let unit = Celsius_d(0.0)
        let expected = degC_d_to_K_d(0.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_dUsing1_0Expecting274_15() {
        let unit = Celsius_d(1.0)
        let expected = degC_d_to_K_d(1.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_dUsingNeg272_0Expecting1_15() {
        let unit = Celsius_d(-272.0)
        let expected = degC_d_to_K_d(-272.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_dUsingNeg273_0Expecting0_15() {
        let unit = Celsius_d(-273.0)
        let expected = degC_d_to_K_d(-273.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTokelvin_dUsingNegDouble_greatestFiniteMagnitudeExpectingkelvin_dNegDouble_greatestFiniteMagnitude273_15() {
        let unit = Celsius_d(-Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_d(-Double.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_dUsingDouble_greatestFiniteMagnitudeExpectingkelvin_dDouble_greatestFiniteMagnitude() {
        let unit = Celsius_d(Double.greatestFiniteMagnitude)
        let expected = degC_d_to_K_d(Double.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTokelvin_dUsingNeg300_0ExpectingNeg26_85() {
        let unit = Celsius_d(-300.0)
        let expected = degC_d_to_K_d(-300.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcelsius_dTointUsing0_0Expecting0() {
        let expected = degC_d_to_i(0.0)
        let result = CInt(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTointUsing5_0Expecting5() {
        let expected = degC_d_to_i(5.0)
        let result = CInt(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTointUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = degC_d_to_i(celsius_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTointUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = degC_d_to_i(celsius_d(Double.greatestFiniteMagnitude))
        let result = CInt(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_dUsing0Expecting0_0() {
        let expected = i_to_degC_d(0)
        let result = Celsius_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_dUsing5Expecting5_0() {
        let expected = i_to_degC_d(5)
        let result = Celsius_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_dUsingCIntCInt_minExpectingcelsius_dCInt_min() {
        let expected = i_to_degC_d(CInt(CInt.min))
        let result = Celsius_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocelsius_dUsingCIntCInt_maxExpectingcelsius_dCInt_max() {
        let expected = i_to_degC_d(CInt(CInt.max))
        let result = Celsius_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint8_tUsing0_0Expecting0() {
        let expected = degC_d_to_i8(0.0)
        let result = Int8(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint8_tUsing5_0Expecting5() {
        let expected = degC_d_to_i8(5.0)
        let result = Int8(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint8_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = degC_d_to_i8(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint8_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = degC_d_to_i8(celsius_d(Double.greatestFiniteMagnitude))
        let result = Int8(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_dUsing0Expecting0_0() {
        let expected = i8_to_degC_d(0)
        let result = Celsius_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_dUsing5Expecting5_0() {
        let expected = i8_to_degC_d(5)
        let result = Celsius_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_dUsingInt8Int8_minExpectingcelsius_dInt8_min() {
        let expected = i8_to_degC_d(Int8(Int8.min))
        let result = Celsius_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocelsius_dUsingInt8Int8_maxExpectingcelsius_dInt8_max() {
        let expected = i8_to_degC_d(Int8(Int8.max))
        let result = Celsius_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint16_tUsing0_0Expecting0() {
        let expected = degC_d_to_i16(0.0)
        let result = Int16(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint16_tUsing5_0Expecting5() {
        let expected = degC_d_to_i16(5.0)
        let result = Int16(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint16_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = degC_d_to_i16(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint16_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = degC_d_to_i16(celsius_d(Double.greatestFiniteMagnitude))
        let result = Int16(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_dUsing0Expecting0_0() {
        let expected = i16_to_degC_d(0)
        let result = Celsius_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_dUsing5Expecting5_0() {
        let expected = i16_to_degC_d(5)
        let result = Celsius_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_dUsingInt16Int16_minExpectingcelsius_dInt16_min() {
        let expected = i16_to_degC_d(Int16(Int16.min))
        let result = Celsius_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocelsius_dUsingInt16Int16_maxExpectingcelsius_dInt16_max() {
        let expected = i16_to_degC_d(Int16(Int16.max))
        let result = Celsius_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint32_tUsing0_0Expecting0() {
        let expected = degC_d_to_i32(0.0)
        let result = Int32(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint32_tUsing5_0Expecting5() {
        let expected = degC_d_to_i32(5.0)
        let result = Int32(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint32_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = degC_d_to_i32(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint32_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = degC_d_to_i32(celsius_d(Double.greatestFiniteMagnitude))
        let result = Int32(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_dUsing0Expecting0_0() {
        let expected = i32_to_degC_d(0)
        let result = Celsius_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_dUsing5Expecting5_0() {
        let expected = i32_to_degC_d(5)
        let result = Celsius_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_dUsingInt32Int32_minExpectingcelsius_dInt32_min() {
        let expected = i32_to_degC_d(Int32(Int32.min))
        let result = Celsius_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocelsius_dUsingInt32Int32_maxExpectingcelsius_dInt32_max() {
        let expected = i32_to_degC_d(Int32(Int32.max))
        let result = Celsius_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint64_tUsing0_0Expecting0() {
        let expected = degC_d_to_i64(0.0)
        let result = Int64(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint64_tUsing5_0Expecting5() {
        let expected = degC_d_to_i64(5.0)
        let result = Int64(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint64_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = degC_d_to_i64(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dToint64_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = degC_d_to_i64(celsius_d(Double.greatestFiniteMagnitude))
        let result = Int64(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_dUsing0Expecting0_0() {
        let expected = i64_to_degC_d(0)
        let result = Celsius_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_dUsing5Expecting5_0() {
        let expected = i64_to_degC_d(5)
        let result = Celsius_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_dUsingInt64Int64_minExpectingcelsius_dInt64_min() {
        let expected = i64_to_degC_d(Int64(Int64.min))
        let result = Celsius_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocelsius_dUsingInt64Int64_maxExpectingcelsius_dInt64_max() {
        let expected = i64_to_degC_d(Int64(Int64.max))
        let result = Celsius_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTounsignedintUsing0_0Expecting0() {
        let expected = degC_d_to_u(0.0)
        let result = CUnsignedInt(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTounsignedintUsing5_0Expecting5() {
        let expected = degC_d_to_u(5.0)
        let result = CUnsignedInt(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTounsignedintUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degC_d_to_u(celsius_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTounsignedintUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = degC_d_to_u(celsius_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_dUsing0Expecting0_0() {
        let expected = u_to_degC_d(0)
        let result = Celsius_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_dUsing5Expecting5_0() {
        let expected = u_to_degC_d(5)
        let result = Celsius_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_dUsingCUnsignedIntCUnsignedInt_minExpectingcelsius_dCUnsignedInt_min() {
        let expected = u_to_degC_d(CUnsignedInt(CUnsignedInt.min))
        let result = Celsius_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocelsius_dUsingCUnsignedIntCUnsignedInt_maxExpectingcelsius_dCUnsignedInt_max() {
        let expected = u_to_degC_d(CUnsignedInt(CUnsignedInt.max))
        let result = Celsius_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint8_tUsing0_0Expecting0() {
        let expected = degC_d_to_u8(0.0)
        let result = UInt8(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint8_tUsing5_0Expecting5() {
        let expected = degC_d_to_u8(5.0)
        let result = UInt8(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint8_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = degC_d_to_u8(celsius_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint8_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = degC_d_to_u8(celsius_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_dUsing0Expecting0_0() {
        let expected = u8_to_degC_d(0)
        let result = Celsius_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_dUsing5Expecting5_0() {
        let expected = u8_to_degC_d(5)
        let result = Celsius_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_dUsingUInt8UInt8_minExpectingcelsius_dUInt8_min() {
        let expected = u8_to_degC_d(UInt8(UInt8.min))
        let result = Celsius_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocelsius_dUsingUInt8UInt8_maxExpectingcelsius_dUInt8_max() {
        let expected = u8_to_degC_d(UInt8(UInt8.max))
        let result = Celsius_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint16_tUsing0_0Expecting0() {
        let expected = degC_d_to_u16(0.0)
        let result = UInt16(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint16_tUsing5_0Expecting5() {
        let expected = degC_d_to_u16(5.0)
        let result = UInt16(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint16_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = degC_d_to_u16(celsius_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint16_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = degC_d_to_u16(celsius_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_dUsing0Expecting0_0() {
        let expected = u16_to_degC_d(0)
        let result = Celsius_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_dUsing5Expecting5_0() {
        let expected = u16_to_degC_d(5)
        let result = Celsius_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_dUsingUInt16UInt16_minExpectingcelsius_dUInt16_min() {
        let expected = u16_to_degC_d(UInt16(UInt16.min))
        let result = Celsius_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocelsius_dUsingUInt16UInt16_maxExpectingcelsius_dUInt16_max() {
        let expected = u16_to_degC_d(UInt16(UInt16.max))
        let result = Celsius_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint32_tUsing0_0Expecting0() {
        let expected = degC_d_to_u32(0.0)
        let result = UInt32(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint32_tUsing5_0Expecting5() {
        let expected = degC_d_to_u32(5.0)
        let result = UInt32(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint32_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = degC_d_to_u32(celsius_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint32_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = degC_d_to_u32(celsius_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_dUsing0Expecting0_0() {
        let expected = u32_to_degC_d(0)
        let result = Celsius_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_dUsing5Expecting5_0() {
        let expected = u32_to_degC_d(5)
        let result = Celsius_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_dUsingUInt32UInt32_minExpectingcelsius_dUInt32_min() {
        let expected = u32_to_degC_d(UInt32(UInt32.min))
        let result = Celsius_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocelsius_dUsingUInt32UInt32_maxExpectingcelsius_dUInt32_max() {
        let expected = u32_to_degC_d(UInt32(UInt32.max))
        let result = Celsius_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint64_tUsing0_0Expecting0() {
        let expected = degC_d_to_u64(0.0)
        let result = UInt64(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint64_tUsing5_0Expecting5() {
        let expected = degC_d_to_u64(5.0)
        let result = UInt64(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint64_tUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = degC_d_to_u64(celsius_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTouint64_tUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = degC_d_to_u64(celsius_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_dUsing0Expecting0_0() {
        let expected = u64_to_degC_d(0)
        let result = Celsius_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_dUsing5Expecting5_0() {
        let expected = u64_to_degC_d(5)
        let result = Celsius_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_dUsingUInt64UInt64_minExpectingcelsius_dUInt64_min() {
        let expected = u64_to_degC_d(UInt64(UInt64.min))
        let result = Celsius_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocelsius_dUsingUInt64UInt64_maxExpectingcelsius_dUInt64_max() {
        let expected = u64_to_degC_d(UInt64(UInt64.max))
        let result = Celsius_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofloatUsing0_0Expecting0_0() {
        let expected = degC_d_to_f(0.0)
        let result = Float(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofloatUsing5_0Expecting5_0() {
        let expected = degC_d_to_f(5.0)
        let result = Float(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofloatUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = degC_d_to_f(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Float(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTofloatUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = degC_d_to_f(celsius_d(Double.greatestFiniteMagnitude))
        let result = Float(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_dUsing0_0Expecting0_0() {
        let expected = f_to_degC_d(0.0)
        let result = Celsius_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_dUsing5_0Expecting5_0() {
        let expected = f_to_degC_d(5.0)
        let result = Celsius_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingcelsius_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_degC_d(Float(-Float.greatestFiniteMagnitude))
        let result = Celsius_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocelsius_dUsingFloatFloat_greatestFiniteMagnitudeExpectingcelsius_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_degC_d(Float(Float.greatestFiniteMagnitude))
        let result = Celsius_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTodoubleUsing0_0Expecting0_0() {
        let expected = degC_d_to_d(0.0)
        let result = Double(Celsius_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTodoubleUsing5_0Expecting5_0() {
        let expected = degC_d_to_d(5.0)
        let result = Double(Celsius_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTodoubleUsingcelsius_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = degC_d_to_d(celsius_d(-Double.greatestFiniteMagnitude))
        let result = Double(Celsius_d(celsius_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcelsius_dTodoubleUsingcelsius_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = degC_d_to_d(celsius_d(Double.greatestFiniteMagnitude))
        let result = Double(Celsius_d(celsius_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_dUsing0_0Expecting0_0() {
        let expected = d_to_degC_d(0.0)
        let result = Celsius_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocelsius_dUsing5_0Expecting5_0() {
        let expected = d_to_degC_d(5.0)
        let result = Celsius_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides fahrenheit_t unit tests.
final class Fahrenheit_tTests: XCTestCase {

    func testfahrenheit_tTocelsius_tUsing250Expectingcelsius_tDouble2505_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_degC_t(250)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing2500Expectingcelsius_tDouble25005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_degC_t(2500)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing25000Expectingcelsius_tDouble250005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_degC_t(25000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing250000Expectingcelsius_tDouble2500005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_degC_t(250000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing2500000Expectingcelsius_tDouble25000005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_degC_t(2500000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing32Expectingcelsius_tDouble325_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_degC_t(32)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing524Expectingcelsius_tDouble5245_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_degC_t(524)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing100Expectingcelsius_tDouble1005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_degC_t(100)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing0Expectingcelsius_tDouble05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_degC_t(0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing20Expectingcelsius_tDouble205_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(20)
        let expected = degF_t_to_degC_t(20)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing10Expectingcelsius_tDouble105_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(10)
        let expected = degF_t_to_degC_t(10)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing15Expectingcelsius_tDouble155_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(15)
        let expected = degF_t_to_degC_t(15)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing12Expectingcelsius_tDouble125_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(12)
        let expected = degF_t_to_degC_t(12)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsing25Expectingcelsius_tDouble255_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(25)
        let expected = degF_t_to_degC_t(25)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingNeg250Expectingcelsius_tDoubleNeg2505_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(-250)
        let expected = degF_t_to_degC_t(-250)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingNeg2500Expectingcelsius_tDoubleNeg25005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_degC_t(-2500)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingNeg25000Expectingcelsius_tDoubleNeg250005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_degC_t(-25000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingNeg250000Expectingcelsius_tDoubleNeg2500005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_degC_t(-250000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingNeg2500000Expectingcelsius_tDoubleNeg25000005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_degC_t(-2500000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingNeg40Expectingcelsius_tDoubleNeg405_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(-40)
        let expected = degF_t_to_degC_t(-40)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingCInt_minExpectingcelsius_tDoubleCInt_min5_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_degC_t(CInt.min)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_tUsingCInt_maxExpectingcelsius_tDoubleCInt_max5_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_degC_t(CInt.max)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing250Expectingkelvin_tDouble2505_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_K_t(250)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing2500Expectingkelvin_tDouble25005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_K_t(2500)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing25000Expectingkelvin_tDouble250005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_K_t(25000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing250000Expectingkelvin_tDouble2500005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_K_t(250000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing2500000Expectingkelvin_tDouble25000005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_K_t(2500000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing32Expectingkelvin_tDouble325_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_K_t(32)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing524Expectingkelvin_tDouble5245_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_K_t(524)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing100Expectingkelvin_tDouble1005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_K_t(100)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing0Expectingkelvin_tDouble05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_K_t(0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing20Expectingkelvin_tDouble205_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(20)
        let expected = degF_t_to_K_t(20)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing10Expectingkelvin_tDouble105_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(10)
        let expected = degF_t_to_K_t(10)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing15Expectingkelvin_tDouble155_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(15)
        let expected = degF_t_to_K_t(15)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing12Expectingkelvin_tDouble125_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(12)
        let expected = degF_t_to_K_t(12)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsing25Expectingkelvin_tDouble255_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(25)
        let expected = degF_t_to_K_t(25)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingNeg250Expectingkelvin_tDoubleNeg2505_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(-250)
        let expected = degF_t_to_K_t(-250)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingNeg2500Expectingkelvin_tDoubleNeg25005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_K_t(-2500)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingNeg25000Expectingkelvin_tDoubleNeg250005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_K_t(-25000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingNeg250000Expectingkelvin_tDoubleNeg2500005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_K_t(-250000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingNeg2500000Expectingkelvin_tDoubleNeg25000005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_K_t(-2500000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingNeg40Expectingkelvin_tDoubleNeg405_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(-40)
        let expected = degF_t_to_K_t(-40)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingCInt_minExpectingkelvin_tDoubleCInt_min5_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_K_t(CInt.min)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_tUsingCInt_maxExpectingkelvin_tDoubleCInt_max5_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_K_t(CInt.max)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing250Expectingcelsius_uDouble2505_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_degC_u(250)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing2500Expectingcelsius_uDouble25005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_degC_u(2500)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing25000Expectingcelsius_uDouble250005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_degC_u(25000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing250000Expectingcelsius_uDouble2500005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_degC_u(250000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing2500000Expectingcelsius_uDouble25000005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_degC_u(2500000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing32Expectingcelsius_uDouble325_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_degC_u(32)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing524Expectingcelsius_uDouble5245_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_degC_u(524)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsing100Expectingcelsius_uDouble1005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_degC_u(100)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingNeg250ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-250)
        let expected = degF_t_to_degC_u(-250)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingNeg2500ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_degC_u(-2500)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingNeg25000ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_degC_u(-25000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingNeg250000ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_degC_u(-250000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingNeg2500000ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_degC_u(-2500000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingNeg40ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-40)
        let expected = degF_t_to_degC_u(-40)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingCInt_minExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_degC_u(CInt.min)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_uUsingCInt_maxExpectingcelsius_uDoubleCInt_max5_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_degC_u(CInt.max)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_uUsing0Expecting0() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_degF_u(0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_uUsingfahrenheit_tCInt_minExpectingfahrenheit_uCUnsignedInt_min() {
        let unit = Fahrenheit_t(fahrenheit_t(CInt.min))
        let expected = degF_t_to_degF_u(fahrenheit_t(CInt.min))
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_uUsingfahrenheit_tCInt_maxExpectingfahrenheit_uCInt_max() {
        let unit = Fahrenheit_t(fahrenheit_t(CInt.max))
        let expected = degF_t_to_degF_u(fahrenheit_t(CInt.max))
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_uUsing5Expecting5() {
        let unit = Fahrenheit_t(5)
        let expected = degF_t_to_degF_u(5)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing250Expectingkelvin_uDouble2505_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_K_u(250)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing2500Expectingkelvin_uDouble25005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_K_u(2500)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing25000Expectingkelvin_uDouble250005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_K_u(25000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing250000Expectingkelvin_uDouble2500005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_K_u(250000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing2500000Expectingkelvin_uDouble25000005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_K_u(2500000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing32Expectingkelvin_uDouble325_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_K_u(32)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing524Expectingkelvin_uDouble5245_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_K_u(524)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsing100Expectingkelvin_uDouble1005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_K_u(100)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsingNeg2500ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_K_u(-2500)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsingNeg25000ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_K_u(-25000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsingNeg250000ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_K_u(-250000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsingNeg2500000ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_K_u(-2500000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsingCInt_minExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_K_u(CInt.min)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_uUsingCInt_maxExpectingkelvin_uDoubleCInt_max5_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_K_u(CInt.max)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing250Expectingcelsius_fDouble2505_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_degC_f(250)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing2500Expectingcelsius_fDouble25005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_degC_f(2500)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing25000Expectingcelsius_fDouble250005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_degC_f(25000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing250000Expectingcelsius_fDouble2500005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_degC_f(250000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing2500000Expectingcelsius_fDouble25000005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_degC_f(2500000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing32Expectingcelsius_fDouble325_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_degC_f(32)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing524Expectingcelsius_fDouble5245_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_degC_f(524)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing100Expectingcelsius_fDouble1005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_degC_f(100)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing0Expectingcelsius_fDouble05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_degC_f(0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing20Expectingcelsius_fDouble205_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(20)
        let expected = degF_t_to_degC_f(20)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing10Expectingcelsius_fDouble105_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(10)
        let expected = degF_t_to_degC_f(10)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing15Expectingcelsius_fDouble155_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(15)
        let expected = degF_t_to_degC_f(15)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing12Expectingcelsius_fDouble125_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(12)
        let expected = degF_t_to_degC_f(12)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsing25Expectingcelsius_fDouble255_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(25)
        let expected = degF_t_to_degC_f(25)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingNeg250Expectingcelsius_fDoubleNeg2505_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-250)
        let expected = degF_t_to_degC_f(-250)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingNeg2500Expectingcelsius_fDoubleNeg25005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_degC_f(-2500)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingNeg25000Expectingcelsius_fDoubleNeg250005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_degC_f(-25000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingNeg250000Expectingcelsius_fDoubleNeg2500005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_degC_f(-250000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingNeg2500000Expectingcelsius_fDoubleNeg25000005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_degC_f(-2500000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingNeg40Expectingcelsius_fDoubleNeg405_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-40)
        let expected = degF_t_to_degC_f(-40)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingCInt_minExpectingcelsius_fDoubleCInt_min5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_degC_f(CInt.min)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_fUsingCInt_maxExpectingcelsius_fDoubleCInt_max5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_degC_f(CInt.max)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_fUsing0Expecting0_0() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_degF_f(0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_fUsingfahrenheit_tCInt_minExpectingfahrenheit_fCInt_min() {
        let unit = Fahrenheit_t(fahrenheit_t(CInt.min))
        let expected = degF_t_to_degF_f(fahrenheit_t(CInt.min))
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_fUsingfahrenheit_tCInt_maxExpectingfahrenheit_fCInt_max() {
        let unit = Fahrenheit_t(fahrenheit_t(CInt.max))
        let expected = degF_t_to_degF_f(fahrenheit_t(CInt.max))
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_fUsing5Expecting5_0() {
        let unit = Fahrenheit_t(5)
        let expected = degF_t_to_degF_f(5)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing250Expectingkelvin_fDouble2505_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_K_f(250)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing2500Expectingkelvin_fDouble25005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_K_f(2500)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing25000Expectingkelvin_fDouble250005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_K_f(25000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing250000Expectingkelvin_fDouble2500005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_K_f(250000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing2500000Expectingkelvin_fDouble25000005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_K_f(2500000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing32Expectingkelvin_fDouble325_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_K_f(32)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing524Expectingkelvin_fDouble5245_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_K_f(524)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing100Expectingkelvin_fDouble1005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_K_f(100)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing0Expectingkelvin_fDouble05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_K_f(0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing20Expectingkelvin_fDouble205_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(20)
        let expected = degF_t_to_K_f(20)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing10Expectingkelvin_fDouble105_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(10)
        let expected = degF_t_to_K_f(10)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing15Expectingkelvin_fDouble155_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(15)
        let expected = degF_t_to_K_f(15)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing12Expectingkelvin_fDouble125_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(12)
        let expected = degF_t_to_K_f(12)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsing25Expectingkelvin_fDouble255_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(25)
        let expected = degF_t_to_K_f(25)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingNeg250Expectingkelvin_fDoubleNeg2505_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-250)
        let expected = degF_t_to_K_f(-250)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingNeg2500Expectingkelvin_fDoubleNeg25005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_K_f(-2500)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingNeg25000Expectingkelvin_fDoubleNeg250005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_K_f(-25000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingNeg250000Expectingkelvin_fDoubleNeg2500005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_K_f(-250000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingNeg2500000Expectingkelvin_fDoubleNeg25000005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_K_f(-2500000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingNeg40Expectingkelvin_fDoubleNeg405_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-40)
        let expected = degF_t_to_K_f(-40)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingCInt_minExpectingkelvin_fDoubleCInt_min5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_K_f(CInt.min)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_fUsingCInt_maxExpectingkelvin_fDoubleCInt_max5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_K_f(CInt.max)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing250Expectingcelsius_dDouble2505_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_degC_d(250)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing2500Expectingcelsius_dDouble25005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_degC_d(2500)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing25000Expectingcelsius_dDouble250005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_degC_d(25000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing250000Expectingcelsius_dDouble2500005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_degC_d(250000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing2500000Expectingcelsius_dDouble25000005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_degC_d(2500000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing32Expectingcelsius_dDouble325_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_degC_d(32)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing524Expectingcelsius_dDouble5245_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_degC_d(524)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing100Expectingcelsius_dDouble1005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_degC_d(100)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing0Expectingcelsius_dDouble05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_degC_d(0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing20Expectingcelsius_dDouble205_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(20)
        let expected = degF_t_to_degC_d(20)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing10Expectingcelsius_dDouble105_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(10)
        let expected = degF_t_to_degC_d(10)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing15Expectingcelsius_dDouble155_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(15)
        let expected = degF_t_to_degC_d(15)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing12Expectingcelsius_dDouble125_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(12)
        let expected = degF_t_to_degC_d(12)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsing25Expectingcelsius_dDouble255_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(25)
        let expected = degF_t_to_degC_d(25)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingNeg250Expectingcelsius_dDoubleNeg2505_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-250)
        let expected = degF_t_to_degC_d(-250)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingNeg2500Expectingcelsius_dDoubleNeg25005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_degC_d(-2500)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingNeg25000Expectingcelsius_dDoubleNeg250005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_degC_d(-25000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingNeg250000Expectingcelsius_dDoubleNeg2500005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_degC_d(-250000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingNeg2500000Expectingcelsius_dDoubleNeg25000005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_degC_d(-2500000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingNeg40Expectingcelsius_dDoubleNeg405_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(-40)
        let expected = degF_t_to_degC_d(-40)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingCInt_minExpectingcelsius_dDoubleCInt_min5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_degC_d(CInt.min)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTocelsius_dUsingCInt_maxExpectingcelsius_dDoubleCInt_max5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_degC_d(CInt.max)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_dUsing0Expecting0_0() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_degF_d(0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_dUsingfahrenheit_tCInt_minExpectingfahrenheit_dCInt_min() {
        let unit = Fahrenheit_t(fahrenheit_t(CInt.min))
        let expected = degF_t_to_degF_d(fahrenheit_t(CInt.min))
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_dUsingfahrenheit_tCInt_maxExpectingfahrenheit_dCInt_max() {
        let unit = Fahrenheit_t(fahrenheit_t(CInt.max))
        let expected = degF_t_to_degF_d(fahrenheit_t(CInt.max))
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTofahrenheit_dUsing5Expecting5_0() {
        let unit = Fahrenheit_t(5)
        let expected = degF_t_to_degF_d(5)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing250Expectingkelvin_dDouble2505_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(250)
        let expected = degF_t_to_K_d(250)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing2500Expectingkelvin_dDouble25005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(2500)
        let expected = degF_t_to_K_d(2500)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing25000Expectingkelvin_dDouble250005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(25000)
        let expected = degF_t_to_K_d(25000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing250000Expectingkelvin_dDouble2500005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(250000)
        let expected = degF_t_to_K_d(250000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing2500000Expectingkelvin_dDouble25000005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(2500000)
        let expected = degF_t_to_K_d(2500000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing32Expectingkelvin_dDouble325_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(32)
        let expected = degF_t_to_K_d(32)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing524Expectingkelvin_dDouble5245_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(524)
        let expected = degF_t_to_K_d(524)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing100Expectingkelvin_dDouble1005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(100)
        let expected = degF_t_to_K_d(100)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing0Expectingkelvin_dDouble05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(0)
        let expected = degF_t_to_K_d(0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing20Expectingkelvin_dDouble205_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(20)
        let expected = degF_t_to_K_d(20)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing10Expectingkelvin_dDouble105_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(10)
        let expected = degF_t_to_K_d(10)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing15Expectingkelvin_dDouble155_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(15)
        let expected = degF_t_to_K_d(15)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing12Expectingkelvin_dDouble125_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(12)
        let expected = degF_t_to_K_d(12)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsing25Expectingkelvin_dDouble255_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(25)
        let expected = degF_t_to_K_d(25)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingNeg250Expectingkelvin_dDoubleNeg2505_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-250)
        let expected = degF_t_to_K_d(-250)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingNeg2500Expectingkelvin_dDoubleNeg25005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-2500)
        let expected = degF_t_to_K_d(-2500)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingNeg25000Expectingkelvin_dDoubleNeg250005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-25000)
        let expected = degF_t_to_K_d(-25000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingNeg250000Expectingkelvin_dDoubleNeg2500005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-250000)
        let expected = degF_t_to_K_d(-250000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingNeg2500000Expectingkelvin_dDoubleNeg25000005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-2500000)
        let expected = degF_t_to_K_d(-2500000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingNeg40Expectingkelvin_dDoubleNeg405_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(-40)
        let expected = degF_t_to_K_d(-40)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingCInt_minExpectingkelvin_dDoubleCInt_min5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(CInt.min)
        let expected = degF_t_to_K_d(CInt.min)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTokelvin_dUsingCInt_maxExpectingkelvin_dDoubleCInt_max5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_t(CInt.max)
        let expected = degF_t_to_K_d(CInt.max)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_tTointUsing0Expecting0() {
        let expected = degF_t_to_i(0)
        let result = CInt(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTointUsing5Expecting5() {
        let expected = degF_t_to_i(5)
        let result = CInt(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTointUsingfahrenheit_tCInt_minExpectingCIntCInt_min() {
        let expected = degF_t_to_i(fahrenheit_t(CInt.min))
        let result = CInt(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTointUsingfahrenheit_tCInt_maxExpectingCIntCInt_max() {
        let expected = degF_t_to_i(fahrenheit_t(CInt.max))
        let result = CInt(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_tUsing0Expecting0() {
        let expected = i_to_degF_t(0)
        let result = Fahrenheit_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_tUsing5Expecting5() {
        let expected = i_to_degF_t(5)
        let result = Fahrenheit_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint8_tUsing0Expecting0() {
        let expected = degF_t_to_i8(0)
        let result = Int8(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint8_tUsing5Expecting5() {
        let expected = degF_t_to_i8(5)
        let result = Int8(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint8_tUsingfahrenheit_tCInt_minExpectingInt8Int8_min() {
        let expected = degF_t_to_i8(fahrenheit_t(CInt.min))
        let result = Int8(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint8_tUsingfahrenheit_tCInt_maxExpectingInt8Int8_max() {
        let expected = degF_t_to_i8(fahrenheit_t(CInt.max))
        let result = Int8(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_tUsing0Expecting0() {
        let expected = i8_to_degF_t(0)
        let result = Fahrenheit_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_tUsing5Expecting5() {
        let expected = i8_to_degF_t(5)
        let result = Fahrenheit_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_tUsingInt8Int8_minExpectingfahrenheit_tInt8_min() {
        let expected = i8_to_degF_t(Int8(Int8.min))
        let result = Fahrenheit_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_tUsingInt8Int8_maxExpectingfahrenheit_tInt8_max() {
        let expected = i8_to_degF_t(Int8(Int8.max))
        let result = Fahrenheit_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint16_tUsing0Expecting0() {
        let expected = degF_t_to_i16(0)
        let result = Int16(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint16_tUsing5Expecting5() {
        let expected = degF_t_to_i16(5)
        let result = Int16(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint16_tUsingfahrenheit_tCInt_minExpectingInt16Int16_min() {
        let expected = degF_t_to_i16(fahrenheit_t(CInt.min))
        let result = Int16(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint16_tUsingfahrenheit_tCInt_maxExpectingInt16Int16_max() {
        let expected = degF_t_to_i16(fahrenheit_t(CInt.max))
        let result = Int16(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_tUsing0Expecting0() {
        let expected = i16_to_degF_t(0)
        let result = Fahrenheit_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_tUsing5Expecting5() {
        let expected = i16_to_degF_t(5)
        let result = Fahrenheit_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_tUsingInt16Int16_minExpectingfahrenheit_tInt16_min() {
        let expected = i16_to_degF_t(Int16(Int16.min))
        let result = Fahrenheit_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_tUsingInt16Int16_maxExpectingfahrenheit_tInt16_max() {
        let expected = i16_to_degF_t(Int16(Int16.max))
        let result = Fahrenheit_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint32_tUsing0Expecting0() {
        let expected = degF_t_to_i32(0)
        let result = Int32(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint32_tUsing5Expecting5() {
        let expected = degF_t_to_i32(5)
        let result = Int32(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint32_tUsingfahrenheit_tCInt_minExpectingInt32CInt_min() {
        let expected = degF_t_to_i32(fahrenheit_t(CInt.min))
        let result = Int32(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint32_tUsingfahrenheit_tCInt_maxExpectingInt32CInt_max() {
        let expected = degF_t_to_i32(fahrenheit_t(CInt.max))
        let result = Int32(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_tUsing0Expecting0() {
        let expected = i32_to_degF_t(0)
        let result = Fahrenheit_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_tUsing5Expecting5() {
        let expected = i32_to_degF_t(5)
        let result = Fahrenheit_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_tUsingInt32Int32_minExpectingfahrenheit_tCInt_min() {
        let expected = i32_to_degF_t(Int32(Int32.min))
        let result = Fahrenheit_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_tUsingInt32Int32_maxExpectingfahrenheit_tCInt_max() {
        let expected = i32_to_degF_t(Int32(Int32.max))
        let result = Fahrenheit_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint64_tUsing0Expecting0() {
        let expected = degF_t_to_i64(0)
        let result = Int64(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint64_tUsing5Expecting5() {
        let expected = degF_t_to_i64(5)
        let result = Int64(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint64_tUsingfahrenheit_tCInt_minExpectingInt64CInt_min() {
        let expected = degF_t_to_i64(fahrenheit_t(CInt.min))
        let result = Int64(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tToint64_tUsingfahrenheit_tCInt_maxExpectingInt64CInt_max() {
        let expected = degF_t_to_i64(fahrenheit_t(CInt.max))
        let result = Int64(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_tUsing0Expecting0() {
        let expected = i64_to_degF_t(0)
        let result = Fahrenheit_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_tUsing5Expecting5() {
        let expected = i64_to_degF_t(5)
        let result = Fahrenheit_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_tUsingInt64Int64_minExpectingfahrenheit_tCInt_min() {
        let expected = i64_to_degF_t(Int64(Int64.min))
        let result = Fahrenheit_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_tUsingInt64Int64_maxExpectingfahrenheit_tCInt_max() {
        let expected = i64_to_degF_t(Int64(Int64.max))
        let result = Fahrenheit_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTounsignedintUsing0Expecting0() {
        let expected = degF_t_to_u(0)
        let result = CUnsignedInt(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTounsignedintUsing5Expecting5() {
        let expected = degF_t_to_u(5)
        let result = CUnsignedInt(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTounsignedintUsingfahrenheit_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degF_t_to_u(fahrenheit_t(CInt.min))
        let result = CUnsignedInt(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTounsignedintUsingfahrenheit_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = degF_t_to_u(fahrenheit_t(CInt.max))
        let result = CUnsignedInt(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_tUsing0Expecting0() {
        let expected = u_to_degF_t(0)
        let result = Fahrenheit_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_tUsing5Expecting5() {
        let expected = u_to_degF_t(5)
        let result = Fahrenheit_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_tUsingCUnsignedIntCUnsignedInt_minExpectingfahrenheit_tCUnsignedInt_min() {
        let expected = u_to_degF_t(CUnsignedInt(CUnsignedInt.min))
        let result = Fahrenheit_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_tUsingCUnsignedIntCUnsignedInt_maxExpectingfahrenheit_tCInt_max() {
        let expected = u_to_degF_t(CUnsignedInt(CUnsignedInt.max))
        let result = Fahrenheit_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint8_tUsing0Expecting0() {
        let expected = degF_t_to_u8(0)
        let result = UInt8(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint8_tUsing5Expecting5() {
        let expected = degF_t_to_u8(5)
        let result = UInt8(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint8_tUsingfahrenheit_tCInt_minExpectingUInt8UInt8_min() {
        let expected = degF_t_to_u8(fahrenheit_t(CInt.min))
        let result = UInt8(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint8_tUsingfahrenheit_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = degF_t_to_u8(fahrenheit_t(CInt.max))
        let result = UInt8(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_tUsing0Expecting0() {
        let expected = u8_to_degF_t(0)
        let result = Fahrenheit_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_tUsing5Expecting5() {
        let expected = u8_to_degF_t(5)
        let result = Fahrenheit_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_tUsingUInt8UInt8_minExpectingfahrenheit_tUInt8_min() {
        let expected = u8_to_degF_t(UInt8(UInt8.min))
        let result = Fahrenheit_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_tUsingUInt8UInt8_maxExpectingfahrenheit_tUInt8_max() {
        let expected = u8_to_degF_t(UInt8(UInt8.max))
        let result = Fahrenheit_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint16_tUsing0Expecting0() {
        let expected = degF_t_to_u16(0)
        let result = UInt16(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint16_tUsing5Expecting5() {
        let expected = degF_t_to_u16(5)
        let result = UInt16(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint16_tUsingfahrenheit_tCInt_minExpectingUInt16UInt16_min() {
        let expected = degF_t_to_u16(fahrenheit_t(CInt.min))
        let result = UInt16(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint16_tUsingfahrenheit_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = degF_t_to_u16(fahrenheit_t(CInt.max))
        let result = UInt16(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_tUsing0Expecting0() {
        let expected = u16_to_degF_t(0)
        let result = Fahrenheit_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_tUsing5Expecting5() {
        let expected = u16_to_degF_t(5)
        let result = Fahrenheit_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_tUsingUInt16UInt16_minExpectingfahrenheit_tUInt16_min() {
        let expected = u16_to_degF_t(UInt16(UInt16.min))
        let result = Fahrenheit_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_tUsingUInt16UInt16_maxExpectingfahrenheit_tUInt16_max() {
        let expected = u16_to_degF_t(UInt16(UInt16.max))
        let result = Fahrenheit_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint32_tUsing0Expecting0() {
        let expected = degF_t_to_u32(0)
        let result = UInt32(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint32_tUsing5Expecting5() {
        let expected = degF_t_to_u32(5)
        let result = UInt32(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint32_tUsingfahrenheit_tCInt_minExpectingUInt32UInt32_min() {
        let expected = degF_t_to_u32(fahrenheit_t(CInt.min))
        let result = UInt32(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint32_tUsingfahrenheit_tCInt_maxExpectingUInt32CInt_max() {
        let expected = degF_t_to_u32(fahrenheit_t(CInt.max))
        let result = UInt32(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_tUsing0Expecting0() {
        let expected = u32_to_degF_t(0)
        let result = Fahrenheit_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_tUsing5Expecting5() {
        let expected = u32_to_degF_t(5)
        let result = Fahrenheit_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_tUsingUInt32UInt32_minExpectingfahrenheit_tUInt32_min() {
        let expected = u32_to_degF_t(UInt32(UInt32.min))
        let result = Fahrenheit_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_tUsingUInt32UInt32_maxExpectingfahrenheit_tCInt_max() {
        let expected = u32_to_degF_t(UInt32(UInt32.max))
        let result = Fahrenheit_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint64_tUsing0Expecting0() {
        let expected = degF_t_to_u64(0)
        let result = UInt64(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint64_tUsing5Expecting5() {
        let expected = degF_t_to_u64(5)
        let result = UInt64(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint64_tUsingfahrenheit_tCInt_minExpectingUInt64UInt64_min() {
        let expected = degF_t_to_u64(fahrenheit_t(CInt.min))
        let result = UInt64(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTouint64_tUsingfahrenheit_tCInt_maxExpectingUInt64CInt_max() {
        let expected = degF_t_to_u64(fahrenheit_t(CInt.max))
        let result = UInt64(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_tUsing0Expecting0() {
        let expected = u64_to_degF_t(0)
        let result = Fahrenheit_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_tUsing5Expecting5() {
        let expected = u64_to_degF_t(5)
        let result = Fahrenheit_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_tUsingUInt64UInt64_minExpectingfahrenheit_tUInt64_min() {
        let expected = u64_to_degF_t(UInt64(UInt64.min))
        let result = Fahrenheit_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_tUsingUInt64UInt64_maxExpectingfahrenheit_tCInt_max() {
        let expected = u64_to_degF_t(UInt64(UInt64.max))
        let result = Fahrenheit_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTofloatUsing0Expecting0_0() {
        let expected = degF_t_to_f(0)
        let result = Float(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTofloatUsing5Expecting5_0() {
        let expected = degF_t_to_f(5)
        let result = Float(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTofloatUsingfahrenheit_tCInt_minExpectingFloatCInt_min() {
        let expected = degF_t_to_f(fahrenheit_t(CInt.min))
        let result = Float(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTofloatUsingfahrenheit_tCInt_maxExpectingFloatCInt_max() {
        let expected = degF_t_to_f(fahrenheit_t(CInt.max))
        let result = Float(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_tUsing0_0Expecting0() {
        let expected = f_to_degF_t(0.0)
        let result = Fahrenheit_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_tUsing5_0Expecting5() {
        let expected = f_to_degF_t(5.0)
        let result = Fahrenheit_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_min() {
        let expected = f_to_degF_t(Float(-Float.greatestFiniteMagnitude))
        let result = Fahrenheit_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_tUsingFloatFloat_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_max() {
        let expected = f_to_degF_t(Float(Float.greatestFiniteMagnitude))
        let result = Fahrenheit_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTodoubleUsing0Expecting0_0() {
        let expected = degF_t_to_d(0)
        let result = Double(Fahrenheit_t(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTodoubleUsing5Expecting5_0() {
        let expected = degF_t_to_d(5)
        let result = Double(Fahrenheit_t(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTodoubleUsingfahrenheit_tCInt_minExpectingDoubleCInt_min() {
        let expected = degF_t_to_d(fahrenheit_t(CInt.min))
        let result = Double(Fahrenheit_t(fahrenheit_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_tTodoubleUsingfahrenheit_tCInt_maxExpectingDoubleCInt_max() {
        let expected = degF_t_to_d(fahrenheit_t(CInt.max))
        let result = Double(Fahrenheit_t(fahrenheit_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_tUsing0_0Expecting0() {
        let expected = d_to_degF_t(0.0)
        let result = Fahrenheit_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_tUsing5_0Expecting5() {
        let expected = d_to_degF_t(5.0)
        let result = Fahrenheit_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_min() {
        let expected = d_to_degF_t(Double(-Double.greatestFiniteMagnitude))
        let result = Fahrenheit_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_max() {
        let expected = d_to_degF_t(Double(Double.greatestFiniteMagnitude))
        let result = Fahrenheit_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides fahrenheit_u unit tests.
final class Fahrenheit_uTests: XCTestCase {

    func testfahrenheit_uTocelsius_tUsing250Expectingcelsius_tDouble2505_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_degC_t(250)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing2500Expectingcelsius_tDouble25005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_degC_t(2500)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing25000Expectingcelsius_tDouble250005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_degC_t(25000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing250000Expectingcelsius_tDouble2500005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_degC_t(250000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing2500000Expectingcelsius_tDouble25000005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_degC_t(2500000)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing32Expectingcelsius_tDouble325_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_degC_t(32)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing524Expectingcelsius_tDouble5245_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_degC_t(524)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing100Expectingcelsius_tDouble1005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_degC_t(100)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing0Expectingcelsius_tDouble05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_degC_t(0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing20Expectingcelsius_tDouble205_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(20)
        let expected = degF_u_to_degC_t(20)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing10Expectingcelsius_tDouble105_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(10)
        let expected = degF_u_to_degC_t(10)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing15Expectingcelsius_tDouble155_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(15)
        let expected = degF_u_to_degC_t(15)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing12Expectingcelsius_tDouble125_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(12)
        let expected = degF_u_to_degC_t(12)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsing25Expectingcelsius_tDouble255_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(25)
        let expected = degF_u_to_degC_t(25)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsingCUnsignedInt_minExpectingcelsius_tDoubleCUnsignedInt_min5_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_degC_t(CUnsignedInt.min)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_tUsingCUnsignedInt_maxExpectingCInt_max() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_degC_t(CUnsignedInt.max)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_tUsing0Expecting0() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_degF_t(0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_tUsingfahrenheit_uCUnsignedInt_minExpectingfahrenheit_tCUnsignedInt_min() {
        let unit = Fahrenheit_u(fahrenheit_u(CUnsignedInt.min))
        let expected = degF_u_to_degF_t(fahrenheit_u(CUnsignedInt.min))
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_tUsingfahrenheit_uCUnsignedInt_maxExpectingfahrenheit_tCInt_max() {
        let unit = Fahrenheit_u(fahrenheit_u(CUnsignedInt.max))
        let expected = degF_u_to_degF_t(fahrenheit_u(CUnsignedInt.max))
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_tUsing5Expecting5() {
        let unit = Fahrenheit_u(5)
        let expected = degF_u_to_degF_t(5)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing250Expectingkelvin_tDouble2505_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_K_t(250)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing2500Expectingkelvin_tDouble25005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_K_t(2500)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing25000Expectingkelvin_tDouble250005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_K_t(25000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing250000Expectingkelvin_tDouble2500005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_K_t(250000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing2500000Expectingkelvin_tDouble25000005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_K_t(2500000)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing32Expectingkelvin_tDouble325_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_K_t(32)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing524Expectingkelvin_tDouble5245_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_K_t(524)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing100Expectingkelvin_tDouble1005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_K_t(100)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing0Expectingkelvin_tDouble05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_K_t(0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing20Expectingkelvin_tDouble205_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(20)
        let expected = degF_u_to_K_t(20)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing10Expectingkelvin_tDouble105_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(10)
        let expected = degF_u_to_K_t(10)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing15Expectingkelvin_tDouble155_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(15)
        let expected = degF_u_to_K_t(15)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing12Expectingkelvin_tDouble125_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(12)
        let expected = degF_u_to_K_t(12)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsing25Expectingkelvin_tDouble255_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(25)
        let expected = degF_u_to_K_t(25)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsingCUnsignedInt_minExpectingkelvin_tDoubleCUnsignedInt_min5_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_K_t(CUnsignedInt.min)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_tUsingCUnsignedInt_maxExpectingCInt_max() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_K_t(CUnsignedInt.max)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing250Expectingcelsius_uDouble2505_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_degC_u(250)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing2500Expectingcelsius_uDouble25005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_degC_u(2500)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing25000Expectingcelsius_uDouble250005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_degC_u(25000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing250000Expectingcelsius_uDouble2500005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_degC_u(250000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing2500000Expectingcelsius_uDouble25000005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_degC_u(2500000)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing32Expectingcelsius_uDouble325_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_degC_u(32)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing524Expectingcelsius_uDouble5245_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_degC_u(524)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsing100Expectingcelsius_uDouble1005_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_degC_u(100)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsingCUnsignedInt_minExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_degC_u(CUnsignedInt.min)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_uUsingCUnsignedInt_maxExpectingcelsius_uDoubleCUnsignedInt_max5_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_degC_u(CUnsignedInt.max)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing250Expectingkelvin_uDouble2505_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_K_u(250)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing2500Expectingkelvin_uDouble25005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_K_u(2500)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing25000Expectingkelvin_uDouble250005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_K_u(25000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing250000Expectingkelvin_uDouble2500005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_K_u(250000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing2500000Expectingkelvin_uDouble25000005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_K_u(2500000)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing32Expectingkelvin_uDouble325_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_K_u(32)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing524Expectingkelvin_uDouble5245_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_K_u(524)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsing100Expectingkelvin_uDouble1005_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_K_u(100)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsingCUnsignedInt_minExpectingkelvin_uDoubleCUnsignedInt_min5_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_K_u(CUnsignedInt.min)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_uUsingCUnsignedInt_maxExpectingkelvin_uDoubleCUnsignedInt_max5_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_K_u(CUnsignedInt.max)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing250Expectingcelsius_fDouble2505_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_degC_f(250)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing2500Expectingcelsius_fDouble25005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_degC_f(2500)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing25000Expectingcelsius_fDouble250005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_degC_f(25000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing250000Expectingcelsius_fDouble2500005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_degC_f(250000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing2500000Expectingcelsius_fDouble25000005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_degC_f(2500000)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing32Expectingcelsius_fDouble325_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_degC_f(32)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing524Expectingcelsius_fDouble5245_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_degC_f(524)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing100Expectingcelsius_fDouble1005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_degC_f(100)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing0Expectingcelsius_fDouble05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_degC_f(0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing20Expectingcelsius_fDouble205_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(20)
        let expected = degF_u_to_degC_f(20)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing10Expectingcelsius_fDouble105_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(10)
        let expected = degF_u_to_degC_f(10)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing15Expectingcelsius_fDouble155_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(15)
        let expected = degF_u_to_degC_f(15)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing12Expectingcelsius_fDouble125_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(12)
        let expected = degF_u_to_degC_f(12)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsing25Expectingcelsius_fDouble255_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(25)
        let expected = degF_u_to_degC_f(25)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsingCUnsignedInt_minExpectingcelsius_fDoubleCUnsignedInt_min5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_degC_f(CUnsignedInt.min)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_fUsingCUnsignedInt_maxExpectingcelsius_fDoubleCUnsignedInt_max5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_degC_f(CUnsignedInt.max)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_fUsing0Expecting0_0() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_degF_f(0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_fUsingfahrenheit_uCUnsignedInt_minExpectingfahrenheit_fCUnsignedInt_min() {
        let unit = Fahrenheit_u(fahrenheit_u(CUnsignedInt.min))
        let expected = degF_u_to_degF_f(fahrenheit_u(CUnsignedInt.min))
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_fUsingfahrenheit_uCUnsignedInt_maxExpectingfahrenheit_fCUnsignedInt_max() {
        let unit = Fahrenheit_u(fahrenheit_u(CUnsignedInt.max))
        let expected = degF_u_to_degF_f(fahrenheit_u(CUnsignedInt.max))
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_fUsing5Expecting5_0() {
        let unit = Fahrenheit_u(5)
        let expected = degF_u_to_degF_f(5)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing250Expectingkelvin_fDouble2505_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_K_f(250)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing2500Expectingkelvin_fDouble25005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_K_f(2500)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing25000Expectingkelvin_fDouble250005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_K_f(25000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing250000Expectingkelvin_fDouble2500005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_K_f(250000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing2500000Expectingkelvin_fDouble25000005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_K_f(2500000)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing32Expectingkelvin_fDouble325_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_K_f(32)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing524Expectingkelvin_fDouble5245_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_K_f(524)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing100Expectingkelvin_fDouble1005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_K_f(100)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing0Expectingkelvin_fDouble05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_K_f(0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing20Expectingkelvin_fDouble205_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(20)
        let expected = degF_u_to_K_f(20)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing10Expectingkelvin_fDouble105_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(10)
        let expected = degF_u_to_K_f(10)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing15Expectingkelvin_fDouble155_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(15)
        let expected = degF_u_to_K_f(15)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing12Expectingkelvin_fDouble125_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(12)
        let expected = degF_u_to_K_f(12)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsing25Expectingkelvin_fDouble255_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(25)
        let expected = degF_u_to_K_f(25)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsingCUnsignedInt_minExpectingkelvin_fDoubleCUnsignedInt_min5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_K_f(CUnsignedInt.min)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_fUsingCUnsignedInt_maxExpectingkelvin_fDoubleCUnsignedInt_max5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_K_f(CUnsignedInt.max)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing250Expectingcelsius_dDouble2505_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_degC_d(250)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing2500Expectingcelsius_dDouble25005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_degC_d(2500)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing25000Expectingcelsius_dDouble250005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_degC_d(25000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing250000Expectingcelsius_dDouble2500005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_degC_d(250000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing2500000Expectingcelsius_dDouble25000005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_degC_d(2500000)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing32Expectingcelsius_dDouble325_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_degC_d(32)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing524Expectingcelsius_dDouble5245_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_degC_d(524)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing100Expectingcelsius_dDouble1005_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_degC_d(100)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing0Expectingcelsius_dDouble05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_degC_d(0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing20Expectingcelsius_dDouble205_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(20)
        let expected = degF_u_to_degC_d(20)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing10Expectingcelsius_dDouble105_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(10)
        let expected = degF_u_to_degC_d(10)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing15Expectingcelsius_dDouble155_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(15)
        let expected = degF_u_to_degC_d(15)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing12Expectingcelsius_dDouble125_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(12)
        let expected = degF_u_to_degC_d(12)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsing25Expectingcelsius_dDouble255_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(25)
        let expected = degF_u_to_degC_d(25)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsingCUnsignedInt_minExpectingcelsius_dDoubleCUnsignedInt_min5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_degC_d(CUnsignedInt.min)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTocelsius_dUsingCUnsignedInt_maxExpectingcelsius_dDoubleCUnsignedInt_max5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_degC_d(CUnsignedInt.max)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_dUsing0Expecting0_0() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_degF_d(0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_dUsingfahrenheit_uCUnsignedInt_minExpectingfahrenheit_dCUnsignedInt_min() {
        let unit = Fahrenheit_u(fahrenheit_u(CUnsignedInt.min))
        let expected = degF_u_to_degF_d(fahrenheit_u(CUnsignedInt.min))
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_dUsingfahrenheit_uCUnsignedInt_maxExpectingfahrenheit_dCUnsignedInt_max() {
        let unit = Fahrenheit_u(fahrenheit_u(CUnsignedInt.max))
        let expected = degF_u_to_degF_d(fahrenheit_u(CUnsignedInt.max))
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTofahrenheit_dUsing5Expecting5_0() {
        let unit = Fahrenheit_u(5)
        let expected = degF_u_to_degF_d(5)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing250Expectingkelvin_dDouble2505_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(250)
        let expected = degF_u_to_K_d(250)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing2500Expectingkelvin_dDouble25005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(2500)
        let expected = degF_u_to_K_d(2500)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing25000Expectingkelvin_dDouble250005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(25000)
        let expected = degF_u_to_K_d(25000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing250000Expectingkelvin_dDouble2500005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(250000)
        let expected = degF_u_to_K_d(250000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing2500000Expectingkelvin_dDouble25000005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(2500000)
        let expected = degF_u_to_K_d(2500000)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing32Expectingkelvin_dDouble325_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(32)
        let expected = degF_u_to_K_d(32)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing524Expectingkelvin_dDouble5245_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(524)
        let expected = degF_u_to_K_d(524)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing100Expectingkelvin_dDouble1005_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(100)
        let expected = degF_u_to_K_d(100)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing0Expectingkelvin_dDouble05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(0)
        let expected = degF_u_to_K_d(0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing20Expectingkelvin_dDouble205_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(20)
        let expected = degF_u_to_K_d(20)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing10Expectingkelvin_dDouble105_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(10)
        let expected = degF_u_to_K_d(10)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing15Expectingkelvin_dDouble155_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(15)
        let expected = degF_u_to_K_d(15)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing12Expectingkelvin_dDouble125_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(12)
        let expected = degF_u_to_K_d(12)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsing25Expectingkelvin_dDouble255_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(25)
        let expected = degF_u_to_K_d(25)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsingCUnsignedInt_minExpectingkelvin_dDoubleCUnsignedInt_min5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(CUnsignedInt.min)
        let expected = degF_u_to_K_d(CUnsignedInt.min)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTokelvin_dUsingCUnsignedInt_maxExpectingkelvin_dDoubleCUnsignedInt_max5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_u(CUnsignedInt.max)
        let expected = degF_u_to_K_d(CUnsignedInt.max)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_uTointUsing0Expecting0() {
        let expected = degF_u_to_i(0)
        let result = CInt(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTointUsing5Expecting5() {
        let expected = degF_u_to_i(5)
        let result = CInt(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTointUsingfahrenheit_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = degF_u_to_i(fahrenheit_u(CUnsignedInt.min))
        let result = CInt(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTointUsingfahrenheit_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = degF_u_to_i(fahrenheit_u(CUnsignedInt.max))
        let result = CInt(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_uUsing0Expecting0() {
        let expected = i_to_degF_u(0)
        let result = Fahrenheit_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_uUsing5Expecting5() {
        let expected = i_to_degF_u(5)
        let result = Fahrenheit_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_uUsingCIntCInt_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = i_to_degF_u(CInt(CInt.min))
        let result = Fahrenheit_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_uUsingCIntCInt_maxExpectingfahrenheit_uCInt_max() {
        let expected = i_to_degF_u(CInt(CInt.max))
        let result = Fahrenheit_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint8_tUsing0Expecting0() {
        let expected = degF_u_to_i8(0)
        let result = Int8(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint8_tUsing5Expecting5() {
        let expected = degF_u_to_i8(5)
        let result = Int8(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint8_tUsingfahrenheit_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = degF_u_to_i8(fahrenheit_u(CUnsignedInt.min))
        let result = Int8(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint8_tUsingfahrenheit_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = degF_u_to_i8(fahrenheit_u(CUnsignedInt.max))
        let result = Int8(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_uUsing0Expecting0() {
        let expected = i8_to_degF_u(0)
        let result = Fahrenheit_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_uUsing5Expecting5() {
        let expected = i8_to_degF_u(5)
        let result = Fahrenheit_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_uUsingInt8Int8_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = i8_to_degF_u(Int8(Int8.min))
        let result = Fahrenheit_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_uUsingInt8Int8_maxExpectingfahrenheit_uInt8_max() {
        let expected = i8_to_degF_u(Int8(Int8.max))
        let result = Fahrenheit_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint16_tUsing0Expecting0() {
        let expected = degF_u_to_i16(0)
        let result = Int16(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint16_tUsing5Expecting5() {
        let expected = degF_u_to_i16(5)
        let result = Int16(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint16_tUsingfahrenheit_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = degF_u_to_i16(fahrenheit_u(CUnsignedInt.min))
        let result = Int16(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint16_tUsingfahrenheit_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = degF_u_to_i16(fahrenheit_u(CUnsignedInt.max))
        let result = Int16(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_uUsing0Expecting0() {
        let expected = i16_to_degF_u(0)
        let result = Fahrenheit_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_uUsing5Expecting5() {
        let expected = i16_to_degF_u(5)
        let result = Fahrenheit_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_uUsingInt16Int16_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = i16_to_degF_u(Int16(Int16.min))
        let result = Fahrenheit_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_uUsingInt16Int16_maxExpectingfahrenheit_uInt16_max() {
        let expected = i16_to_degF_u(Int16(Int16.max))
        let result = Fahrenheit_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint32_tUsing0Expecting0() {
        let expected = degF_u_to_i32(0)
        let result = Int32(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint32_tUsing5Expecting5() {
        let expected = degF_u_to_i32(5)
        let result = Int32(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint32_tUsingfahrenheit_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = degF_u_to_i32(fahrenheit_u(CUnsignedInt.min))
        let result = Int32(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint32_tUsingfahrenheit_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = degF_u_to_i32(fahrenheit_u(CUnsignedInt.max))
        let result = Int32(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_uUsing0Expecting0() {
        let expected = i32_to_degF_u(0)
        let result = Fahrenheit_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_uUsing5Expecting5() {
        let expected = i32_to_degF_u(5)
        let result = Fahrenheit_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_uUsingInt32Int32_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = i32_to_degF_u(Int32(Int32.min))
        let result = Fahrenheit_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_uUsingInt32Int32_maxExpectingfahrenheit_uInt32_max() {
        let expected = i32_to_degF_u(Int32(Int32.max))
        let result = Fahrenheit_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint64_tUsing0Expecting0() {
        let expected = degF_u_to_i64(0)
        let result = Int64(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint64_tUsing5Expecting5() {
        let expected = degF_u_to_i64(5)
        let result = Int64(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint64_tUsingfahrenheit_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = degF_u_to_i64(fahrenheit_u(CUnsignedInt.min))
        let result = Int64(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uToint64_tUsingfahrenheit_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = degF_u_to_i64(fahrenheit_u(CUnsignedInt.max))
        let result = Int64(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_uUsing0Expecting0() {
        let expected = i64_to_degF_u(0)
        let result = Fahrenheit_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_uUsing5Expecting5() {
        let expected = i64_to_degF_u(5)
        let result = Fahrenheit_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_uUsingInt64Int64_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = i64_to_degF_u(Int64(Int64.min))
        let result = Fahrenheit_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_uUsingInt64Int64_maxExpectingfahrenheit_uCUnsignedInt_max() {
        let expected = i64_to_degF_u(Int64(Int64.max))
        let result = Fahrenheit_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTounsignedintUsing0Expecting0() {
        let expected = degF_u_to_u(0)
        let result = CUnsignedInt(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTounsignedintUsing5Expecting5() {
        let expected = degF_u_to_u(5)
        let result = CUnsignedInt(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTounsignedintUsingfahrenheit_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degF_u_to_u(fahrenheit_u(CUnsignedInt.min))
        let result = CUnsignedInt(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTounsignedintUsingfahrenheit_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = degF_u_to_u(fahrenheit_u(CUnsignedInt.max))
        let result = CUnsignedInt(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_uUsing0Expecting0() {
        let expected = u_to_degF_u(0)
        let result = Fahrenheit_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_uUsing5Expecting5() {
        let expected = u_to_degF_u(5)
        let result = Fahrenheit_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint8_tUsing0Expecting0() {
        let expected = degF_u_to_u8(0)
        let result = UInt8(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint8_tUsing5Expecting5() {
        let expected = degF_u_to_u8(5)
        let result = UInt8(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint8_tUsingfahrenheit_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = degF_u_to_u8(fahrenheit_u(CUnsignedInt.min))
        let result = UInt8(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint8_tUsingfahrenheit_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = degF_u_to_u8(fahrenheit_u(CUnsignedInt.max))
        let result = UInt8(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_uUsing0Expecting0() {
        let expected = u8_to_degF_u(0)
        let result = Fahrenheit_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_uUsing5Expecting5() {
        let expected = u8_to_degF_u(5)
        let result = Fahrenheit_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_uUsingUInt8UInt8_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = u8_to_degF_u(UInt8(UInt8.min))
        let result = Fahrenheit_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_uUsingUInt8UInt8_maxExpectingfahrenheit_uUInt8_max() {
        let expected = u8_to_degF_u(UInt8(UInt8.max))
        let result = Fahrenheit_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint16_tUsing0Expecting0() {
        let expected = degF_u_to_u16(0)
        let result = UInt16(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint16_tUsing5Expecting5() {
        let expected = degF_u_to_u16(5)
        let result = UInt16(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint16_tUsingfahrenheit_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = degF_u_to_u16(fahrenheit_u(CUnsignedInt.min))
        let result = UInt16(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint16_tUsingfahrenheit_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = degF_u_to_u16(fahrenheit_u(CUnsignedInt.max))
        let result = UInt16(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_uUsing0Expecting0() {
        let expected = u16_to_degF_u(0)
        let result = Fahrenheit_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_uUsing5Expecting5() {
        let expected = u16_to_degF_u(5)
        let result = Fahrenheit_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_uUsingUInt16UInt16_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = u16_to_degF_u(UInt16(UInt16.min))
        let result = Fahrenheit_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_uUsingUInt16UInt16_maxExpectingfahrenheit_uUInt16_max() {
        let expected = u16_to_degF_u(UInt16(UInt16.max))
        let result = Fahrenheit_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint32_tUsing0Expecting0() {
        let expected = degF_u_to_u32(0)
        let result = UInt32(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint32_tUsing5Expecting5() {
        let expected = degF_u_to_u32(5)
        let result = UInt32(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint32_tUsingfahrenheit_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = degF_u_to_u32(fahrenheit_u(CUnsignedInt.min))
        let result = UInt32(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint32_tUsingfahrenheit_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = degF_u_to_u32(fahrenheit_u(CUnsignedInt.max))
        let result = UInt32(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_uUsing0Expecting0() {
        let expected = u32_to_degF_u(0)
        let result = Fahrenheit_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_uUsing5Expecting5() {
        let expected = u32_to_degF_u(5)
        let result = Fahrenheit_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_uUsingUInt32UInt32_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = u32_to_degF_u(UInt32(UInt32.min))
        let result = Fahrenheit_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_uUsingUInt32UInt32_maxExpectingfahrenheit_uCUnsignedInt_max() {
        let expected = u32_to_degF_u(UInt32(UInt32.max))
        let result = Fahrenheit_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint64_tUsing0Expecting0() {
        let expected = degF_u_to_u64(0)
        let result = UInt64(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint64_tUsing5Expecting5() {
        let expected = degF_u_to_u64(5)
        let result = UInt64(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint64_tUsingfahrenheit_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = degF_u_to_u64(fahrenheit_u(CUnsignedInt.min))
        let result = UInt64(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTouint64_tUsingfahrenheit_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = degF_u_to_u64(fahrenheit_u(CUnsignedInt.max))
        let result = UInt64(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_uUsing0Expecting0() {
        let expected = u64_to_degF_u(0)
        let result = Fahrenheit_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_uUsing5Expecting5() {
        let expected = u64_to_degF_u(5)
        let result = Fahrenheit_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_uUsingUInt64UInt64_minExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = u64_to_degF_u(UInt64(UInt64.min))
        let result = Fahrenheit_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_uUsingUInt64UInt64_maxExpectingfahrenheit_uCUnsignedInt_max() {
        let expected = u64_to_degF_u(UInt64(UInt64.max))
        let result = Fahrenheit_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTofloatUsing0Expecting0_0() {
        let expected = degF_u_to_f(0)
        let result = Float(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTofloatUsing5Expecting5_0() {
        let expected = degF_u_to_f(5)
        let result = Float(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTofloatUsingfahrenheit_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = degF_u_to_f(fahrenheit_u(CUnsignedInt.min))
        let result = Float(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTofloatUsingfahrenheit_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = degF_u_to_f(fahrenheit_u(CUnsignedInt.max))
        let result = Float(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_uUsing0_0Expecting0() {
        let expected = f_to_degF_u(0.0)
        let result = Fahrenheit_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_uUsing5_0Expecting5() {
        let expected = f_to_degF_u(5.0)
        let result = Fahrenheit_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = f_to_degF_u(Float(-Float.greatestFiniteMagnitude))
        let result = Fahrenheit_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_uUsingFloatFloat_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_max() {
        let expected = f_to_degF_u(Float(Float.greatestFiniteMagnitude))
        let result = Fahrenheit_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTodoubleUsing0Expecting0_0() {
        let expected = degF_u_to_d(0)
        let result = Double(Fahrenheit_u(0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTodoubleUsing5Expecting5_0() {
        let expected = degF_u_to_d(5)
        let result = Double(Fahrenheit_u(5))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTodoubleUsingfahrenheit_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = degF_u_to_d(fahrenheit_u(CUnsignedInt.min))
        let result = Double(Fahrenheit_u(fahrenheit_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_uTodoubleUsingfahrenheit_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = degF_u_to_d(fahrenheit_u(CUnsignedInt.max))
        let result = Double(Fahrenheit_u(fahrenheit_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_uUsing0_0Expecting0() {
        let expected = d_to_degF_u(0.0)
        let result = Fahrenheit_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_uUsing5_0Expecting5() {
        let expected = d_to_degF_u(5.0)
        let result = Fahrenheit_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_min() {
        let expected = d_to_degF_u(Double(-Double.greatestFiniteMagnitude))
        let result = Fahrenheit_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_max() {
        let expected = d_to_degF_u(Double(Double.greatestFiniteMagnitude))
        let result = Fahrenheit_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides fahrenheit_f unit tests.
final class Fahrenheit_fTests: XCTestCase {

    func testfahrenheit_fTocelsius_tUsing250_0Expectingcelsius_tDouble250_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_degC_t(250.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing2500_0Expectingcelsius_tDouble2500_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_degC_t(2500.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing25000_0Expectingcelsius_tDouble25000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_degC_t(25000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing250000_0Expectingcelsius_tDouble250000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_degC_t(250000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing2500000_0Expectingcelsius_tDouble2500000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_degC_t(2500000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing32_0Expectingcelsius_tDouble32_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_degC_t(32.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing523_67Expectingcelsius_tDouble523_675_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_degC_t(523.67)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing100_0Expectingcelsius_tDouble100_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_degC_t(100.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing0_0Expectingcelsius_tDouble0_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_degC_t(0.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing20_0Expectingcelsius_tDouble20_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(20.0)
        let expected = degF_f_to_degC_t(20.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing10_0Expectingcelsius_tDouble10_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(10.0)
        let expected = degF_f_to_degC_t(10.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing15_0Expectingcelsius_tDouble15_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(15.0)
        let expected = degF_f_to_degC_t(15.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing12_0Expectingcelsius_tDouble12_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(12.0)
        let expected = degF_f_to_degC_t(12.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsing25_0Expectingcelsius_tDouble25_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(25.0)
        let expected = degF_f_to_degC_t(25.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingNeg250_0Expectingcelsius_tDoubleNeg250_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(-250.0)
        let expected = degF_f_to_degC_t(-250.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingNeg2500_0Expectingcelsius_tDoubleNeg2500_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_degC_t(-2500.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingNeg25000_0Expectingcelsius_tDoubleNeg25000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_degC_t(-25000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingNeg250000_0Expectingcelsius_tDoubleNeg250000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_degC_t(-250000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingNeg2500000_0Expectingcelsius_tDoubleNeg2500000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_degC_t(-2500000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingNeg40_0Expectingcelsius_tDoubleNeg40_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(-40.0)
        let expected = degF_f_to_degC_t(-40.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingNegFloat_greatestFiniteMagnitudeExpectingCInt_min() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_t(-Float.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_tUsingFloat_greatestFiniteMagnitudeExpectingCInt_max() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_t(Float.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_tUsing0_0Expecting0() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_degF_t(0.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_min() {
        let unit = Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let expected = degF_f_to_degF_t(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_max() {
        let unit = Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude))
        let expected = degF_f_to_degF_t(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_tUsing5_0Expecting5() {
        let unit = Fahrenheit_f(5.0)
        let expected = degF_f_to_degF_t(5.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing250_0Expectingkelvin_tDouble250_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_K_t(250.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing2500_0Expectingkelvin_tDouble2500_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_K_t(2500.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing25000_0Expectingkelvin_tDouble25000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_K_t(25000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing250000_0Expectingkelvin_tDouble250000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_K_t(250000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing2500000_0Expectingkelvin_tDouble2500000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_K_t(2500000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing32_0Expectingkelvin_tDouble32_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_K_t(32.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing523_67Expectingkelvin_tDouble523_675_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_K_t(523.67)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing100_0Expectingkelvin_tDouble100_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_K_t(100.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing0_0Expectingkelvin_tDouble0_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_K_t(0.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing20_0Expectingkelvin_tDouble20_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(20.0)
        let expected = degF_f_to_K_t(20.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing10_0Expectingkelvin_tDouble10_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(10.0)
        let expected = degF_f_to_K_t(10.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing15_0Expectingkelvin_tDouble15_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(15.0)
        let expected = degF_f_to_K_t(15.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing12_0Expectingkelvin_tDouble12_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(12.0)
        let expected = degF_f_to_K_t(12.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsing25_0Expectingkelvin_tDouble25_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(25.0)
        let expected = degF_f_to_K_t(25.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingNeg250_0Expectingkelvin_tDoubleNeg250_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(-250.0)
        let expected = degF_f_to_K_t(-250.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingNeg2500_0Expectingkelvin_tDoubleNeg2500_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_K_t(-2500.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingNeg25000_0Expectingkelvin_tDoubleNeg25000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_K_t(-25000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingNeg250000_0Expectingkelvin_tDoubleNeg250000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_K_t(-250000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingNeg2500000_0Expectingkelvin_tDoubleNeg2500000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_K_t(-2500000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingNeg40_0Expectingkelvin_tDoubleNeg40_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(-40.0)
        let expected = degF_f_to_K_t(-40.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingNegFloat_greatestFiniteMagnitudeExpectingCInt_min() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_t(-Float.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_tUsingFloat_greatestFiniteMagnitudeExpectingCInt_max() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_t(Float.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing250_0Expectingcelsius_uDouble250_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_degC_u(250.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing2500_0Expectingcelsius_uDouble2500_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_degC_u(2500.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing25000_0Expectingcelsius_uDouble25000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_degC_u(25000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing250000_0Expectingcelsius_uDouble250000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_degC_u(250000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing2500000_0Expectingcelsius_uDouble2500000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_degC_u(2500000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing32_0Expectingcelsius_uDouble32_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_degC_u(32.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing523_67Expectingcelsius_uDouble523_675_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_degC_u(523.67)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsing100_0Expectingcelsius_uDouble100_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_degC_u(100.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingNeg250_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-250.0)
        let expected = degF_f_to_degC_u(-250.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingNeg2500_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_degC_u(-2500.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingNeg25000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_degC_u(-25000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingNeg250000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_degC_u(-250000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingNeg2500000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_degC_u(-2500000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingNeg40_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-40.0)
        let expected = degF_f_to_degC_u(-40.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingNegFloat_greatestFiniteMagnitudeExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_u(-Float.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_uUsingFloat_greatestFiniteMagnitudeExpectingCUnsignedInt_max() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_u(Float.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_uUsing0_0Expecting0() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_degF_u(0.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_uUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_min() {
        let unit = Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let expected = degF_f_to_degF_u(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_uUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_max() {
        let unit = Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude))
        let expected = degF_f_to_degF_u(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_uUsing5_0Expecting5() {
        let unit = Fahrenheit_f(5.0)
        let expected = degF_f_to_degF_u(5.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing250_0Expectingkelvin_uDouble250_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_K_u(250.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing2500_0Expectingkelvin_uDouble2500_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_K_u(2500.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing25000_0Expectingkelvin_uDouble25000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_K_u(25000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing250000_0Expectingkelvin_uDouble250000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_K_u(250000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing2500000_0Expectingkelvin_uDouble2500000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_K_u(2500000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing32_0Expectingkelvin_uDouble32_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_K_u(32.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing523_67Expectingkelvin_uDouble523_675_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_K_u(523.67)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsing100_0Expectingkelvin_uDouble100_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_K_u(100.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsingNeg2500_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_K_u(-2500.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsingNeg25000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_K_u(-25000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsingNeg250000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_K_u(-250000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsingNeg2500000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_K_u(-2500000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsingNegFloat_greatestFiniteMagnitudeExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_u(-Float.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_uUsingFloat_greatestFiniteMagnitudeExpectingCUnsignedInt_max() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_u(Float.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing250_0Expectingcelsius_fDouble250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_degC_f(250.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing2500_0Expectingcelsius_fDouble2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_degC_f(2500.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing25000_0Expectingcelsius_fDouble25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_degC_f(25000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing250000_0Expectingcelsius_fDouble250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_degC_f(250000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing2500000_0Expectingcelsius_fDouble2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_degC_f(2500000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing32_0Expectingcelsius_fDouble32_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_degC_f(32.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing523_67Expectingcelsius_fDouble523_675_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_degC_f(523.67)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing100_0Expectingcelsius_fDouble100_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_degC_f(100.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing0_0Expectingcelsius_fDouble0_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_degC_f(0.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing20_0Expectingcelsius_fDouble20_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(20.0)
        let expected = degF_f_to_degC_f(20.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing10_0Expectingcelsius_fDouble10_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(10.0)
        let expected = degF_f_to_degC_f(10.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing15_0Expectingcelsius_fDouble15_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(15.0)
        let expected = degF_f_to_degC_f(15.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing12_0Expectingcelsius_fDouble12_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(12.0)
        let expected = degF_f_to_degC_f(12.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsing25_0Expectingcelsius_fDouble25_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(25.0)
        let expected = degF_f_to_degC_f(25.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingNeg250_0Expectingcelsius_fDoubleNeg250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-250.0)
        let expected = degF_f_to_degC_f(-250.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingNeg2500_0Expectingcelsius_fDoubleNeg2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_degC_f(-2500.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingNeg25000_0Expectingcelsius_fDoubleNeg25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_degC_f(-25000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingNeg250000_0Expectingcelsius_fDoubleNeg250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_degC_f(-250000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingNeg2500000_0Expectingcelsius_fDoubleNeg2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_degC_f(-2500000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingNeg40_0Expectingcelsius_fDoubleNeg40_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-40.0)
        let expected = degF_f_to_degC_f(-40.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingNegFloat_greatestFiniteMagnitudeExpectingcelsius_fDoubleNegFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_f(-Float.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_fUsingFloat_greatestFiniteMagnitudeExpectingcelsius_fDoubleFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_f(Float.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing250_0Expectingkelvin_fDouble250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_K_f(250.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing2500_0Expectingkelvin_fDouble2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_K_f(2500.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing25000_0Expectingkelvin_fDouble25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_K_f(25000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing250000_0Expectingkelvin_fDouble250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_K_f(250000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing2500000_0Expectingkelvin_fDouble2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_K_f(2500000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing32_0Expectingkelvin_fDouble32_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_K_f(32.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing523_67Expectingkelvin_fDouble523_675_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_K_f(523.67)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing100_0Expectingkelvin_fDouble100_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_K_f(100.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing0_0Expectingkelvin_fDouble0_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_K_f(0.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing20_0Expectingkelvin_fDouble20_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(20.0)
        let expected = degF_f_to_K_f(20.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing10_0Expectingkelvin_fDouble10_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(10.0)
        let expected = degF_f_to_K_f(10.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing15_0Expectingkelvin_fDouble15_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(15.0)
        let expected = degF_f_to_K_f(15.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing12_0Expectingkelvin_fDouble12_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(12.0)
        let expected = degF_f_to_K_f(12.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsing25_0Expectingkelvin_fDouble25_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(25.0)
        let expected = degF_f_to_K_f(25.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingNeg250_0Expectingkelvin_fDoubleNeg250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-250.0)
        let expected = degF_f_to_K_f(-250.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingNeg2500_0Expectingkelvin_fDoubleNeg2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_K_f(-2500.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingNeg25000_0Expectingkelvin_fDoubleNeg25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_K_f(-25000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingNeg250000_0Expectingkelvin_fDoubleNeg250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_K_f(-250000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingNeg2500000_0Expectingkelvin_fDoubleNeg2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_K_f(-2500000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingNeg40_0Expectingkelvin_fDoubleNeg40_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-40.0)
        let expected = degF_f_to_K_f(-40.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingNegFloat_greatestFiniteMagnitudeExpectingkelvin_fDoubleNegFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_f(-Float.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_fUsingFloat_greatestFiniteMagnitudeExpectingkelvin_fDoubleFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_f(Float.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing250_0Expectingcelsius_dDouble250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_degC_d(250.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing2500_0Expectingcelsius_dDouble2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_degC_d(2500.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing25000_0Expectingcelsius_dDouble25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_degC_d(25000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing250000_0Expectingcelsius_dDouble250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_degC_d(250000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing2500000_0Expectingcelsius_dDouble2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_degC_d(2500000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing32_0Expectingcelsius_dDouble32_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_degC_d(32.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing523_67Expectingcelsius_dDouble523_675_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_degC_d(523.67)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing100_0Expectingcelsius_dDouble100_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_degC_d(100.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing0_0Expectingcelsius_dDouble0_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_degC_d(0.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing20_0Expectingcelsius_dDouble20_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(20.0)
        let expected = degF_f_to_degC_d(20.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing10_0Expectingcelsius_dDouble10_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(10.0)
        let expected = degF_f_to_degC_d(10.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing15_0Expectingcelsius_dDouble15_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(15.0)
        let expected = degF_f_to_degC_d(15.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing12_0Expectingcelsius_dDouble12_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(12.0)
        let expected = degF_f_to_degC_d(12.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsing25_0Expectingcelsius_dDouble25_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(25.0)
        let expected = degF_f_to_degC_d(25.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingNeg250_0Expectingcelsius_dDoubleNeg250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-250.0)
        let expected = degF_f_to_degC_d(-250.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingNeg2500_0Expectingcelsius_dDoubleNeg2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_degC_d(-2500.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingNeg25000_0Expectingcelsius_dDoubleNeg25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_degC_d(-25000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingNeg250000_0Expectingcelsius_dDoubleNeg250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_degC_d(-250000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingNeg2500000_0Expectingcelsius_dDoubleNeg2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_degC_d(-2500000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingNeg40_0Expectingcelsius_dDoubleNeg40_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-40.0)
        let expected = degF_f_to_degC_d(-40.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingNegFloat_greatestFiniteMagnitudeExpectingcelsius_dDoubleNegFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_d(-Float.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTocelsius_dUsingFloat_greatestFiniteMagnitudeExpectingcelsius_dDoubleFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_degC_d(Float.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_dUsing0_0Expecting0_0() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_degF_d(0.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_dUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_dNegFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let expected = degF_f_to_degF_d(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_dUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingfahrenheit_dFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude))
        let expected = degF_f_to_degF_d(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTofahrenheit_dUsing5_0Expecting5_0() {
        let unit = Fahrenheit_f(5.0)
        let expected = degF_f_to_degF_d(5.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing250_0Expectingkelvin_dDouble250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(250.0)
        let expected = degF_f_to_K_d(250.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing2500_0Expectingkelvin_dDouble2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(2500.0)
        let expected = degF_f_to_K_d(2500.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing25000_0Expectingkelvin_dDouble25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(25000.0)
        let expected = degF_f_to_K_d(25000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing250000_0Expectingkelvin_dDouble250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(250000.0)
        let expected = degF_f_to_K_d(250000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing2500000_0Expectingkelvin_dDouble2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(2500000.0)
        let expected = degF_f_to_K_d(2500000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing32_0Expectingkelvin_dDouble32_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(32.0)
        let expected = degF_f_to_K_d(32.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing523_67Expectingkelvin_dDouble523_675_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(523.67)
        let expected = degF_f_to_K_d(523.67)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing100_0Expectingkelvin_dDouble100_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(100.0)
        let expected = degF_f_to_K_d(100.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing0_0Expectingkelvin_dDouble0_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(0.0)
        let expected = degF_f_to_K_d(0.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing20_0Expectingkelvin_dDouble20_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(20.0)
        let expected = degF_f_to_K_d(20.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing10_0Expectingkelvin_dDouble10_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(10.0)
        let expected = degF_f_to_K_d(10.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing15_0Expectingkelvin_dDouble15_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(15.0)
        let expected = degF_f_to_K_d(15.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing12_0Expectingkelvin_dDouble12_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(12.0)
        let expected = degF_f_to_K_d(12.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsing25_0Expectingkelvin_dDouble25_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(25.0)
        let expected = degF_f_to_K_d(25.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingNeg250_0Expectingkelvin_dDoubleNeg250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-250.0)
        let expected = degF_f_to_K_d(-250.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingNeg2500_0Expectingkelvin_dDoubleNeg2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-2500.0)
        let expected = degF_f_to_K_d(-2500.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingNeg25000_0Expectingkelvin_dDoubleNeg25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-25000.0)
        let expected = degF_f_to_K_d(-25000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingNeg250000_0Expectingkelvin_dDoubleNeg250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-250000.0)
        let expected = degF_f_to_K_d(-250000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingNeg2500000_0Expectingkelvin_dDoubleNeg2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-2500000.0)
        let expected = degF_f_to_K_d(-2500000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingNeg40_0Expectingkelvin_dDoubleNeg40_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-40.0)
        let expected = degF_f_to_K_d(-40.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingNegFloat_greatestFiniteMagnitudeExpectingkelvin_dDoubleNegFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(-Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_d(-Float.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTokelvin_dUsingFloat_greatestFiniteMagnitudeExpectingkelvin_dDoubleFloat_greatestFiniteMagnitude5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_f(Float.greatestFiniteMagnitude)
        let expected = degF_f_to_K_d(Float.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_fTointUsing0_0Expecting0() {
        let expected = degF_f_to_i(0.0)
        let result = CInt(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTointUsing5_0Expecting5() {
        let expected = degF_f_to_i(5.0)
        let result = CInt(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTointUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = degF_f_to_i(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTointUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = degF_f_to_i(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = CInt(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_fUsing0Expecting0_0() {
        let expected = i_to_degF_f(0)
        let result = Fahrenheit_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_fUsing5Expecting5_0() {
        let expected = i_to_degF_f(5)
        let result = Fahrenheit_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_fUsingCIntCInt_minExpectingfahrenheit_fCInt_min() {
        let expected = i_to_degF_f(CInt(CInt.min))
        let result = Fahrenheit_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_fUsingCIntCInt_maxExpectingfahrenheit_fCInt_max() {
        let expected = i_to_degF_f(CInt(CInt.max))
        let result = Fahrenheit_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint8_tUsing0_0Expecting0() {
        let expected = degF_f_to_i8(0.0)
        let result = Int8(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint8_tUsing5_0Expecting5() {
        let expected = degF_f_to_i8(5.0)
        let result = Int8(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint8_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = degF_f_to_i8(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint8_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = degF_f_to_i8(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Int8(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = i8_to_degF_f(0)
        let result = Fahrenheit_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = i8_to_degF_f(5)
        let result = Fahrenheit_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_fUsingInt8Int8_minExpectingfahrenheit_fInt8_min() {
        let expected = i8_to_degF_f(Int8(Int8.min))
        let result = Fahrenheit_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_fUsingInt8Int8_maxExpectingfahrenheit_fInt8_max() {
        let expected = i8_to_degF_f(Int8(Int8.max))
        let result = Fahrenheit_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint16_tUsing0_0Expecting0() {
        let expected = degF_f_to_i16(0.0)
        let result = Int16(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint16_tUsing5_0Expecting5() {
        let expected = degF_f_to_i16(5.0)
        let result = Int16(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint16_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = degF_f_to_i16(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint16_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = degF_f_to_i16(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Int16(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = i16_to_degF_f(0)
        let result = Fahrenheit_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = i16_to_degF_f(5)
        let result = Fahrenheit_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_fUsingInt16Int16_minExpectingfahrenheit_fInt16_min() {
        let expected = i16_to_degF_f(Int16(Int16.min))
        let result = Fahrenheit_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_fUsingInt16Int16_maxExpectingfahrenheit_fInt16_max() {
        let expected = i16_to_degF_f(Int16(Int16.max))
        let result = Fahrenheit_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint32_tUsing0_0Expecting0() {
        let expected = degF_f_to_i32(0.0)
        let result = Int32(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint32_tUsing5_0Expecting5() {
        let expected = degF_f_to_i32(5.0)
        let result = Int32(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint32_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = degF_f_to_i32(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint32_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = degF_f_to_i32(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Int32(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = i32_to_degF_f(0)
        let result = Fahrenheit_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = i32_to_degF_f(5)
        let result = Fahrenheit_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_fUsingInt32Int32_minExpectingfahrenheit_fInt32_min() {
        let expected = i32_to_degF_f(Int32(Int32.min))
        let result = Fahrenheit_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_fUsingInt32Int32_maxExpectingfahrenheit_fInt32_max() {
        let expected = i32_to_degF_f(Int32(Int32.max))
        let result = Fahrenheit_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint64_tUsing0_0Expecting0() {
        let expected = degF_f_to_i64(0.0)
        let result = Int64(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint64_tUsing5_0Expecting5() {
        let expected = degF_f_to_i64(5.0)
        let result = Int64(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint64_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = degF_f_to_i64(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fToint64_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = degF_f_to_i64(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Int64(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = i64_to_degF_f(0)
        let result = Fahrenheit_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = i64_to_degF_f(5)
        let result = Fahrenheit_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_fUsingInt64Int64_minExpectingfahrenheit_fInt64_min() {
        let expected = i64_to_degF_f(Int64(Int64.min))
        let result = Fahrenheit_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_fUsingInt64Int64_maxExpectingfahrenheit_fInt64_max() {
        let expected = i64_to_degF_f(Int64(Int64.max))
        let result = Fahrenheit_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTounsignedintUsing0_0Expecting0() {
        let expected = degF_f_to_u(0.0)
        let result = CUnsignedInt(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTounsignedintUsing5_0Expecting5() {
        let expected = degF_f_to_u(5.0)
        let result = CUnsignedInt(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTounsignedintUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degF_f_to_u(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTounsignedintUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = degF_f_to_u(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_fUsing0Expecting0_0() {
        let expected = u_to_degF_f(0)
        let result = Fahrenheit_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_fUsing5Expecting5_0() {
        let expected = u_to_degF_f(5)
        let result = Fahrenheit_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_fUsingCUnsignedIntCUnsignedInt_minExpectingfahrenheit_fCUnsignedInt_min() {
        let expected = u_to_degF_f(CUnsignedInt(CUnsignedInt.min))
        let result = Fahrenheit_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_fUsingCUnsignedIntCUnsignedInt_maxExpectingfahrenheit_fCUnsignedInt_max() {
        let expected = u_to_degF_f(CUnsignedInt(CUnsignedInt.max))
        let result = Fahrenheit_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint8_tUsing0_0Expecting0() {
        let expected = degF_f_to_u8(0.0)
        let result = UInt8(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint8_tUsing5_0Expecting5() {
        let expected = degF_f_to_u8(5.0)
        let result = UInt8(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint8_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = degF_f_to_u8(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint8_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = degF_f_to_u8(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = u8_to_degF_f(0)
        let result = Fahrenheit_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = u8_to_degF_f(5)
        let result = Fahrenheit_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_fUsingUInt8UInt8_minExpectingfahrenheit_fUInt8_min() {
        let expected = u8_to_degF_f(UInt8(UInt8.min))
        let result = Fahrenheit_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_fUsingUInt8UInt8_maxExpectingfahrenheit_fUInt8_max() {
        let expected = u8_to_degF_f(UInt8(UInt8.max))
        let result = Fahrenheit_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint16_tUsing0_0Expecting0() {
        let expected = degF_f_to_u16(0.0)
        let result = UInt16(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint16_tUsing5_0Expecting5() {
        let expected = degF_f_to_u16(5.0)
        let result = UInt16(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint16_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = degF_f_to_u16(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint16_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = degF_f_to_u16(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = u16_to_degF_f(0)
        let result = Fahrenheit_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = u16_to_degF_f(5)
        let result = Fahrenheit_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_fUsingUInt16UInt16_minExpectingfahrenheit_fUInt16_min() {
        let expected = u16_to_degF_f(UInt16(UInt16.min))
        let result = Fahrenheit_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_fUsingUInt16UInt16_maxExpectingfahrenheit_fUInt16_max() {
        let expected = u16_to_degF_f(UInt16(UInt16.max))
        let result = Fahrenheit_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint32_tUsing0_0Expecting0() {
        let expected = degF_f_to_u32(0.0)
        let result = UInt32(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint32_tUsing5_0Expecting5() {
        let expected = degF_f_to_u32(5.0)
        let result = UInt32(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint32_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = degF_f_to_u32(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint32_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = degF_f_to_u32(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = u32_to_degF_f(0)
        let result = Fahrenheit_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = u32_to_degF_f(5)
        let result = Fahrenheit_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_fUsingUInt32UInt32_minExpectingfahrenheit_fUInt32_min() {
        let expected = u32_to_degF_f(UInt32(UInt32.min))
        let result = Fahrenheit_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_fUsingUInt32UInt32_maxExpectingfahrenheit_fUInt32_max() {
        let expected = u32_to_degF_f(UInt32(UInt32.max))
        let result = Fahrenheit_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint64_tUsing0_0Expecting0() {
        let expected = degF_f_to_u64(0.0)
        let result = UInt64(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint64_tUsing5_0Expecting5() {
        let expected = degF_f_to_u64(5.0)
        let result = UInt64(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint64_tUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = degF_f_to_u64(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTouint64_tUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = degF_f_to_u64(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_fUsing0Expecting0_0() {
        let expected = u64_to_degF_f(0)
        let result = Fahrenheit_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_fUsing5Expecting5_0() {
        let expected = u64_to_degF_f(5)
        let result = Fahrenheit_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_fUsingUInt64UInt64_minExpectingfahrenheit_fUInt64_min() {
        let expected = u64_to_degF_f(UInt64(UInt64.min))
        let result = Fahrenheit_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_fUsingUInt64UInt64_maxExpectingfahrenheit_fUInt64_max() {
        let expected = u64_to_degF_f(UInt64(UInt64.max))
        let result = Fahrenheit_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTofloatUsing0_0Expecting0_0() {
        let expected = degF_f_to_f(0.0)
        let result = Float(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTofloatUsing5_0Expecting5_0() {
        let expected = degF_f_to_f(5.0)
        let result = Float(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTofloatUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = degF_f_to_f(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Float(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTofloatUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = degF_f_to_f(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Float(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_fUsing0_0Expecting0_0() {
        let expected = f_to_degF_f(0.0)
        let result = Fahrenheit_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_fUsing5_0Expecting5_0() {
        let expected = f_to_degF_f(5.0)
        let result = Fahrenheit_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTodoubleUsing0_0Expecting0_0() {
        let expected = degF_f_to_d(0.0)
        let result = Double(Fahrenheit_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTodoubleUsing5_0Expecting5_0() {
        let expected = degF_f_to_d(5.0)
        let result = Double(Fahrenheit_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTodoubleUsingfahrenheit_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = degF_f_to_d(fahrenheit_f(-Float.greatestFiniteMagnitude))
        let result = Double(Fahrenheit_f(fahrenheit_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_fTodoubleUsingfahrenheit_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = degF_f_to_d(fahrenheit_f(Float.greatestFiniteMagnitude))
        let result = Double(Fahrenheit_f(fahrenheit_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_fUsing0_0Expecting0_0() {
        let expected = d_to_degF_f(0.0)
        let result = Fahrenheit_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_fUsing5_0Expecting5_0() {
        let expected = d_to_degF_f(5.0)
        let result = Fahrenheit_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_degF_f(Double(-Double.greatestFiniteMagnitude))
        let result = Fahrenheit_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingfahrenheit_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_degF_f(Double(Double.greatestFiniteMagnitude))
        let result = Fahrenheit_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides fahrenheit_d unit tests.
final class Fahrenheit_dTests: XCTestCase {

    func testfahrenheit_dTocelsius_tUsing250_0Expectingcelsius_tDouble250_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_degC_t(250.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing2500_0Expectingcelsius_tDouble2500_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_degC_t(2500.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing25000_0Expectingcelsius_tDouble25000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_degC_t(25000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing250000_0Expectingcelsius_tDouble250000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_degC_t(250000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing2500000_0Expectingcelsius_tDouble2500000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_degC_t(2500000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing32_0Expectingcelsius_tDouble32_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_degC_t(32.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing523_67Expectingcelsius_tDouble523_675_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_degC_t(523.67)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing100_0Expectingcelsius_tDouble100_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_degC_t(100.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing0_0Expectingcelsius_tDouble0_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_degC_t(0.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing20_0Expectingcelsius_tDouble20_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(20.0)
        let expected = degF_d_to_degC_t(20.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing10_0Expectingcelsius_tDouble10_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(10.0)
        let expected = degF_d_to_degC_t(10.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing15_0Expectingcelsius_tDouble15_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(15.0)
        let expected = degF_d_to_degC_t(15.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing12_0Expectingcelsius_tDouble12_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(12.0)
        let expected = degF_d_to_degC_t(12.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsing25_0Expectingcelsius_tDouble25_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(25.0)
        let expected = degF_d_to_degC_t(25.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsingNeg250_0Expectingcelsius_tDoubleNeg250_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(-250.0)
        let expected = degF_d_to_degC_t(-250.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsingNeg2500_0Expectingcelsius_tDoubleNeg2500_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_degC_t(-2500.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsingNeg25000_0Expectingcelsius_tDoubleNeg25000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_degC_t(-25000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsingNeg250000_0Expectingcelsius_tDoubleNeg250000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_degC_t(-250000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsingNeg2500000_0Expectingcelsius_tDoubleNeg2500000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_degC_t(-2500000.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsingNeg40_0Expectingcelsius_tDoubleNeg40_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(-40.0)
        let expected = degF_d_to_degC_t(-40.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_tUsingNegDouble_greatestFiniteMagnitudeExpectingCInt_min() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_t(-Double.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTocelsius_tUsingDouble_greatestFiniteMagnitudeExpectingCInt_max() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_t(Double.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTofahrenheit_tUsing0_0Expecting0() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_degF_t(0.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_min() {
        let unit = Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let expected = degF_d_to_degF_t(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingfahrenheit_tCInt_max() {
        let unit = Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude))
        let expected = degF_d_to_degF_t(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_tUsing5_0Expecting5() {
        let unit = Fahrenheit_d(5.0)
        let expected = degF_d_to_degF_t(5.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing250_0Expectingkelvin_tDouble250_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_K_t(250.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing2500_0Expectingkelvin_tDouble2500_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_K_t(2500.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing25000_0Expectingkelvin_tDouble25000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_K_t(25000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing250000_0Expectingkelvin_tDouble250000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_K_t(250000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing2500000_0Expectingkelvin_tDouble2500000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_K_t(2500000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing32_0Expectingkelvin_tDouble32_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_K_t(32.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing523_67Expectingkelvin_tDouble523_675_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_K_t(523.67)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing100_0Expectingkelvin_tDouble100_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_K_t(100.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing0_0Expectingkelvin_tDouble0_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_K_t(0.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing20_0Expectingkelvin_tDouble20_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(20.0)
        let expected = degF_d_to_K_t(20.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing10_0Expectingkelvin_tDouble10_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(10.0)
        let expected = degF_d_to_K_t(10.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing15_0Expectingkelvin_tDouble15_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(15.0)
        let expected = degF_d_to_K_t(15.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing12_0Expectingkelvin_tDouble12_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(12.0)
        let expected = degF_d_to_K_t(12.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsing25_0Expectingkelvin_tDouble25_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(25.0)
        let expected = degF_d_to_K_t(25.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsingNeg250_0Expectingkelvin_tDoubleNeg250_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(-250.0)
        let expected = degF_d_to_K_t(-250.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsingNeg2500_0Expectingkelvin_tDoubleNeg2500_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_K_t(-2500.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsingNeg25000_0Expectingkelvin_tDoubleNeg25000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_K_t(-25000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsingNeg250000_0Expectingkelvin_tDoubleNeg250000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_K_t(-250000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsingNeg2500000_0Expectingkelvin_tDoubleNeg2500000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_K_t(-2500000.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsingNeg40_0Expectingkelvin_tDoubleNeg40_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(-40.0)
        let expected = degF_d_to_K_t(-40.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_tUsingNegDouble_greatestFiniteMagnitudeExpectingCInt_min() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_t(-Double.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTokelvin_tUsingDouble_greatestFiniteMagnitudeExpectingCInt_max() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_t(Double.greatestFiniteMagnitude)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTocelsius_uUsing250_0Expectingcelsius_uDouble250_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_degC_u(250.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsing2500_0Expectingcelsius_uDouble2500_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_degC_u(2500.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsing25000_0Expectingcelsius_uDouble25000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_degC_u(25000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsing250000_0Expectingcelsius_uDouble250000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_degC_u(250000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsing2500000_0Expectingcelsius_uDouble2500000_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_degC_u(2500000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsing32_0Expectingcelsius_uDouble32_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_degC_u(32.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsing523_67Expectingcelsius_uDouble523_675_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_degC_u(523.67)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsing100_0Expectingcelsius_uDouble100_05_09_0Neg32_05_09_0_rounded() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_degC_u(100.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsingNeg250_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-250.0)
        let expected = degF_d_to_degC_u(-250.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsingNeg2500_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_degC_u(-2500.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsingNeg25000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_degC_u(-25000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsingNeg250000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_degC_u(-250000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsingNeg2500000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_degC_u(-2500000.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsingNeg40_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-40.0)
        let expected = degF_d_to_degC_u(-40.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_uUsingNegDouble_greatestFiniteMagnitudeExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_u(-Double.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTocelsius_uUsingDouble_greatestFiniteMagnitudeExpectingCUnsignedInt_max() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_u(Double.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTofahrenheit_uUsing0_0Expecting0() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_degF_u(0.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_uUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_min() {
        let unit = Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let expected = degF_d_to_degF_u(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_uUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingfahrenheit_uCUnsignedInt_max() {
        let unit = Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude))
        let expected = degF_d_to_degF_u(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_uUsing5_0Expecting5() {
        let unit = Fahrenheit_d(5.0)
        let expected = degF_d_to_degF_u(5.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing250_0Expectingkelvin_uDouble250_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_K_u(250.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing2500_0Expectingkelvin_uDouble2500_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_K_u(2500.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing25000_0Expectingkelvin_uDouble25000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_K_u(25000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing250000_0Expectingkelvin_uDouble250000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_K_u(250000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing2500000_0Expectingkelvin_uDouble2500000_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_K_u(2500000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing32_0Expectingkelvin_uDouble32_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_K_u(32.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing523_67Expectingkelvin_uDouble523_675_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_K_u(523.67)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsing100_0Expectingkelvin_uDouble100_05_09_0Neg32_05_09_0273_15_rounded() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_K_u(100.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsingNeg2500_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_K_u(-2500.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsingNeg25000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_K_u(-25000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsingNeg250000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_K_u(-250000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsingNeg2500000_0ExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_K_u(-2500000.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_uUsingNegDouble_greatestFiniteMagnitudeExpectingCUnsignedInt_min() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_u(-Double.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTokelvin_uUsingDouble_greatestFiniteMagnitudeExpectingCUnsignedInt_max() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_u(Double.greatestFiniteMagnitude)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTocelsius_fUsing250_0Expectingcelsius_fDouble250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_degC_f(250.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing2500_0Expectingcelsius_fDouble2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_degC_f(2500.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing25000_0Expectingcelsius_fDouble25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_degC_f(25000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing250000_0Expectingcelsius_fDouble250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_degC_f(250000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing2500000_0Expectingcelsius_fDouble2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_degC_f(2500000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing32_0Expectingcelsius_fDouble32_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_degC_f(32.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing523_67Expectingcelsius_fDouble523_675_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_degC_f(523.67)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing100_0Expectingcelsius_fDouble100_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_degC_f(100.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing0_0Expectingcelsius_fDouble0_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_degC_f(0.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing20_0Expectingcelsius_fDouble20_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(20.0)
        let expected = degF_d_to_degC_f(20.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing10_0Expectingcelsius_fDouble10_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(10.0)
        let expected = degF_d_to_degC_f(10.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing15_0Expectingcelsius_fDouble15_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(15.0)
        let expected = degF_d_to_degC_f(15.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing12_0Expectingcelsius_fDouble12_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(12.0)
        let expected = degF_d_to_degC_f(12.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsing25_0Expectingcelsius_fDouble25_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(25.0)
        let expected = degF_d_to_degC_f(25.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsingNeg250_0Expectingcelsius_fDoubleNeg250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-250.0)
        let expected = degF_d_to_degC_f(-250.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsingNeg2500_0Expectingcelsius_fDoubleNeg2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_degC_f(-2500.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsingNeg25000_0Expectingcelsius_fDoubleNeg25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_degC_f(-25000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsingNeg250000_0Expectingcelsius_fDoubleNeg250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_degC_f(-250000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsingNeg2500000_0Expectingcelsius_fDoubleNeg2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_degC_f(-2500000.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsingNeg40_0Expectingcelsius_fDoubleNeg40_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-40.0)
        let expected = degF_d_to_degC_f(-40.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_fUsingNegDouble_greatestFiniteMagnitudeExpectingNegFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_f(-Double.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTocelsius_fUsingDouble_greatestFiniteMagnitudeExpectingFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_f(Double.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTofahrenheit_fUsing0_0Expecting0_0() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_degF_f(0.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_fUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingfahrenheit_fNegFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let expected = degF_d_to_degF_f(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_fUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingfahrenheit_fFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude))
        let expected = degF_d_to_degF_f(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTofahrenheit_fUsing5_0Expecting5_0() {
        let unit = Fahrenheit_d(5.0)
        let expected = degF_d_to_degF_f(5.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing250_0Expectingkelvin_fDouble250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_K_f(250.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing2500_0Expectingkelvin_fDouble2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_K_f(2500.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing25000_0Expectingkelvin_fDouble25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_K_f(25000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing250000_0Expectingkelvin_fDouble250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_K_f(250000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing2500000_0Expectingkelvin_fDouble2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_K_f(2500000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing32_0Expectingkelvin_fDouble32_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_K_f(32.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing523_67Expectingkelvin_fDouble523_675_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_K_f(523.67)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing100_0Expectingkelvin_fDouble100_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_K_f(100.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing0_0Expectingkelvin_fDouble0_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_K_f(0.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing20_0Expectingkelvin_fDouble20_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(20.0)
        let expected = degF_d_to_K_f(20.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing10_0Expectingkelvin_fDouble10_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(10.0)
        let expected = degF_d_to_K_f(10.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing15_0Expectingkelvin_fDouble15_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(15.0)
        let expected = degF_d_to_K_f(15.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing12_0Expectingkelvin_fDouble12_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(12.0)
        let expected = degF_d_to_K_f(12.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsing25_0Expectingkelvin_fDouble25_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(25.0)
        let expected = degF_d_to_K_f(25.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsingNeg250_0Expectingkelvin_fDoubleNeg250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-250.0)
        let expected = degF_d_to_K_f(-250.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsingNeg2500_0Expectingkelvin_fDoubleNeg2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_K_f(-2500.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsingNeg25000_0Expectingkelvin_fDoubleNeg25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_K_f(-25000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsingNeg250000_0Expectingkelvin_fDoubleNeg250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_K_f(-250000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsingNeg2500000_0Expectingkelvin_fDoubleNeg2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_K_f(-2500000.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsingNeg40_0Expectingkelvin_fDoubleNeg40_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-40.0)
        let expected = degF_d_to_K_f(-40.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_fUsingNegDouble_greatestFiniteMagnitudeExpectingNegFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_f(-Double.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTokelvin_fUsingDouble_greatestFiniteMagnitudeExpectingFloat_greatestFiniteMagnitude() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_f(Double.greatestFiniteMagnitude)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTocelsius_dUsing250_0Expectingcelsius_dDouble250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_degC_d(250.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing2500_0Expectingcelsius_dDouble2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_degC_d(2500.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing25000_0Expectingcelsius_dDouble25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_degC_d(25000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing250000_0Expectingcelsius_dDouble250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_degC_d(250000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing2500000_0Expectingcelsius_dDouble2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_degC_d(2500000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing32_0Expectingcelsius_dDouble32_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_degC_d(32.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing523_67Expectingcelsius_dDouble523_675_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_degC_d(523.67)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing100_0Expectingcelsius_dDouble100_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_degC_d(100.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing0_0Expectingcelsius_dDouble0_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_degC_d(0.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing20_0Expectingcelsius_dDouble20_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(20.0)
        let expected = degF_d_to_degC_d(20.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing10_0Expectingcelsius_dDouble10_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(10.0)
        let expected = degF_d_to_degC_d(10.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing15_0Expectingcelsius_dDouble15_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(15.0)
        let expected = degF_d_to_degC_d(15.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing12_0Expectingcelsius_dDouble12_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(12.0)
        let expected = degF_d_to_degC_d(12.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsing25_0Expectingcelsius_dDouble25_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(25.0)
        let expected = degF_d_to_degC_d(25.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsingNeg250_0Expectingcelsius_dDoubleNeg250_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-250.0)
        let expected = degF_d_to_degC_d(-250.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsingNeg2500_0Expectingcelsius_dDoubleNeg2500_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_degC_d(-2500.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsingNeg25000_0Expectingcelsius_dDoubleNeg25000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_degC_d(-25000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsingNeg250000_0Expectingcelsius_dDoubleNeg250000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_degC_d(-250000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsingNeg2500000_0Expectingcelsius_dDoubleNeg2500000_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_degC_d(-2500000.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsingNeg40_0Expectingcelsius_dDoubleNeg40_05_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-40.0)
        let expected = degF_d_to_degC_d(-40.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTocelsius_dUsingNegDouble_greatestFiniteMagnitudeExpectingcelsius_dDoubleNegDouble_greatestFiniteMagnitude5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_d(-Double.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTocelsius_dUsingDouble_greatestFiniteMagnitudeExpectingcelsius_dDoubleDouble_greatestFiniteMagnitude5_09_0Neg32_05_09_0() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_degC_d(Double.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTokelvin_dUsing250_0Expectingkelvin_dDouble250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(250.0)
        let expected = degF_d_to_K_d(250.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing2500_0Expectingkelvin_dDouble2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(2500.0)
        let expected = degF_d_to_K_d(2500.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing25000_0Expectingkelvin_dDouble25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(25000.0)
        let expected = degF_d_to_K_d(25000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing250000_0Expectingkelvin_dDouble250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(250000.0)
        let expected = degF_d_to_K_d(250000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing2500000_0Expectingkelvin_dDouble2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(2500000.0)
        let expected = degF_d_to_K_d(2500000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing32_0Expectingkelvin_dDouble32_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(32.0)
        let expected = degF_d_to_K_d(32.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing523_67Expectingkelvin_dDouble523_675_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(523.67)
        let expected = degF_d_to_K_d(523.67)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing100_0Expectingkelvin_dDouble100_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(100.0)
        let expected = degF_d_to_K_d(100.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing0_0Expectingkelvin_dDouble0_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(0.0)
        let expected = degF_d_to_K_d(0.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing20_0Expectingkelvin_dDouble20_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(20.0)
        let expected = degF_d_to_K_d(20.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing10_0Expectingkelvin_dDouble10_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(10.0)
        let expected = degF_d_to_K_d(10.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing15_0Expectingkelvin_dDouble15_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(15.0)
        let expected = degF_d_to_K_d(15.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing12_0Expectingkelvin_dDouble12_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(12.0)
        let expected = degF_d_to_K_d(12.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsing25_0Expectingkelvin_dDouble25_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(25.0)
        let expected = degF_d_to_K_d(25.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsingNeg250_0Expectingkelvin_dDoubleNeg250_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-250.0)
        let expected = degF_d_to_K_d(-250.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsingNeg2500_0Expectingkelvin_dDoubleNeg2500_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-2500.0)
        let expected = degF_d_to_K_d(-2500.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsingNeg25000_0Expectingkelvin_dDoubleNeg25000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-25000.0)
        let expected = degF_d_to_K_d(-25000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsingNeg250000_0Expectingkelvin_dDoubleNeg250000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-250000.0)
        let expected = degF_d_to_K_d(-250000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsingNeg2500000_0Expectingkelvin_dDoubleNeg2500000_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-2500000.0)
        let expected = degF_d_to_K_d(-2500000.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsingNeg40_0Expectingkelvin_dDoubleNeg40_05_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-40.0)
        let expected = degF_d_to_K_d(-40.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testfahrenheit_dTokelvin_dUsingNegDouble_greatestFiniteMagnitudeExpectingkelvin_dDoubleNegDouble_greatestFiniteMagnitude5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(-Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_d(-Double.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTokelvin_dUsingDouble_greatestFiniteMagnitudeExpectingkelvin_dDoubleDouble_greatestFiniteMagnitude5_09_0Neg32_05_09_0273_15() {
        let unit = Fahrenheit_d(Double.greatestFiniteMagnitude)
        let expected = degF_d_to_K_d(Double.greatestFiniteMagnitude)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTointUsing0_0Expecting0() {
        let expected = degF_d_to_i(0.0)
        let result = CInt(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTointUsing5_0Expecting5() {
        let expected = degF_d_to_i(5.0)
        let result = CInt(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTointUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = degF_d_to_i(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTointUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = degF_d_to_i(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = CInt(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_dUsing0Expecting0_0() {
        let expected = i_to_degF_d(0)
        let result = Fahrenheit_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_dUsing5Expecting5_0() {
        let expected = i_to_degF_d(5)
        let result = Fahrenheit_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_dUsingCIntCInt_minExpectingfahrenheit_dCInt_min() {
        let expected = i_to_degF_d(CInt(CInt.min))
        let result = Fahrenheit_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTofahrenheit_dUsingCIntCInt_maxExpectingfahrenheit_dCInt_max() {
        let expected = i_to_degF_d(CInt(CInt.max))
        let result = Fahrenheit_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint8_tUsing0_0Expecting0() {
        let expected = degF_d_to_i8(0.0)
        let result = Int8(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint8_tUsing5_0Expecting5() {
        let expected = degF_d_to_i8(5.0)
        let result = Int8(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint8_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = degF_d_to_i8(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint8_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = degF_d_to_i8(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Int8(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = i8_to_degF_d(0)
        let result = Fahrenheit_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = i8_to_degF_d(5)
        let result = Fahrenheit_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_dUsingInt8Int8_minExpectingfahrenheit_dInt8_min() {
        let expected = i8_to_degF_d(Int8(Int8.min))
        let result = Fahrenheit_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTofahrenheit_dUsingInt8Int8_maxExpectingfahrenheit_dInt8_max() {
        let expected = i8_to_degF_d(Int8(Int8.max))
        let result = Fahrenheit_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint16_tUsing0_0Expecting0() {
        let expected = degF_d_to_i16(0.0)
        let result = Int16(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint16_tUsing5_0Expecting5() {
        let expected = degF_d_to_i16(5.0)
        let result = Int16(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint16_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = degF_d_to_i16(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint16_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = degF_d_to_i16(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Int16(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = i16_to_degF_d(0)
        let result = Fahrenheit_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = i16_to_degF_d(5)
        let result = Fahrenheit_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_dUsingInt16Int16_minExpectingfahrenheit_dInt16_min() {
        let expected = i16_to_degF_d(Int16(Int16.min))
        let result = Fahrenheit_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTofahrenheit_dUsingInt16Int16_maxExpectingfahrenheit_dInt16_max() {
        let expected = i16_to_degF_d(Int16(Int16.max))
        let result = Fahrenheit_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint32_tUsing0_0Expecting0() {
        let expected = degF_d_to_i32(0.0)
        let result = Int32(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint32_tUsing5_0Expecting5() {
        let expected = degF_d_to_i32(5.0)
        let result = Int32(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint32_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = degF_d_to_i32(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint32_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = degF_d_to_i32(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Int32(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = i32_to_degF_d(0)
        let result = Fahrenheit_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = i32_to_degF_d(5)
        let result = Fahrenheit_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_dUsingInt32Int32_minExpectingfahrenheit_dInt32_min() {
        let expected = i32_to_degF_d(Int32(Int32.min))
        let result = Fahrenheit_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTofahrenheit_dUsingInt32Int32_maxExpectingfahrenheit_dInt32_max() {
        let expected = i32_to_degF_d(Int32(Int32.max))
        let result = Fahrenheit_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint64_tUsing0_0Expecting0() {
        let expected = degF_d_to_i64(0.0)
        let result = Int64(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint64_tUsing5_0Expecting5() {
        let expected = degF_d_to_i64(5.0)
        let result = Int64(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint64_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = degF_d_to_i64(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dToint64_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = degF_d_to_i64(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Int64(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = i64_to_degF_d(0)
        let result = Fahrenheit_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = i64_to_degF_d(5)
        let result = Fahrenheit_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_dUsingInt64Int64_minExpectingfahrenheit_dInt64_min() {
        let expected = i64_to_degF_d(Int64(Int64.min))
        let result = Fahrenheit_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTofahrenheit_dUsingInt64Int64_maxExpectingfahrenheit_dInt64_max() {
        let expected = i64_to_degF_d(Int64(Int64.max))
        let result = Fahrenheit_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTounsignedintUsing0_0Expecting0() {
        let expected = degF_d_to_u(0.0)
        let result = CUnsignedInt(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTounsignedintUsing5_0Expecting5() {
        let expected = degF_d_to_u(5.0)
        let result = CUnsignedInt(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTounsignedintUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = degF_d_to_u(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTounsignedintUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = degF_d_to_u(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_dUsing0Expecting0_0() {
        let expected = u_to_degF_d(0)
        let result = Fahrenheit_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_dUsing5Expecting5_0() {
        let expected = u_to_degF_d(5)
        let result = Fahrenheit_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_dUsingCUnsignedIntCUnsignedInt_minExpectingfahrenheit_dCUnsignedInt_min() {
        let expected = u_to_degF_d(CUnsignedInt(CUnsignedInt.min))
        let result = Fahrenheit_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTofahrenheit_dUsingCUnsignedIntCUnsignedInt_maxExpectingfahrenheit_dCUnsignedInt_max() {
        let expected = u_to_degF_d(CUnsignedInt(CUnsignedInt.max))
        let result = Fahrenheit_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint8_tUsing0_0Expecting0() {
        let expected = degF_d_to_u8(0.0)
        let result = UInt8(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint8_tUsing5_0Expecting5() {
        let expected = degF_d_to_u8(5.0)
        let result = UInt8(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint8_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = degF_d_to_u8(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint8_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = degF_d_to_u8(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = u8_to_degF_d(0)
        let result = Fahrenheit_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = u8_to_degF_d(5)
        let result = Fahrenheit_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_dUsingUInt8UInt8_minExpectingfahrenheit_dUInt8_min() {
        let expected = u8_to_degF_d(UInt8(UInt8.min))
        let result = Fahrenheit_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTofahrenheit_dUsingUInt8UInt8_maxExpectingfahrenheit_dUInt8_max() {
        let expected = u8_to_degF_d(UInt8(UInt8.max))
        let result = Fahrenheit_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint16_tUsing0_0Expecting0() {
        let expected = degF_d_to_u16(0.0)
        let result = UInt16(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint16_tUsing5_0Expecting5() {
        let expected = degF_d_to_u16(5.0)
        let result = UInt16(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint16_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = degF_d_to_u16(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint16_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = degF_d_to_u16(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = u16_to_degF_d(0)
        let result = Fahrenheit_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = u16_to_degF_d(5)
        let result = Fahrenheit_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_dUsingUInt16UInt16_minExpectingfahrenheit_dUInt16_min() {
        let expected = u16_to_degF_d(UInt16(UInt16.min))
        let result = Fahrenheit_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTofahrenheit_dUsingUInt16UInt16_maxExpectingfahrenheit_dUInt16_max() {
        let expected = u16_to_degF_d(UInt16(UInt16.max))
        let result = Fahrenheit_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint32_tUsing0_0Expecting0() {
        let expected = degF_d_to_u32(0.0)
        let result = UInt32(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint32_tUsing5_0Expecting5() {
        let expected = degF_d_to_u32(5.0)
        let result = UInt32(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint32_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = degF_d_to_u32(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint32_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = degF_d_to_u32(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = u32_to_degF_d(0)
        let result = Fahrenheit_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = u32_to_degF_d(5)
        let result = Fahrenheit_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_dUsingUInt32UInt32_minExpectingfahrenheit_dUInt32_min() {
        let expected = u32_to_degF_d(UInt32(UInt32.min))
        let result = Fahrenheit_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTofahrenheit_dUsingUInt32UInt32_maxExpectingfahrenheit_dUInt32_max() {
        let expected = u32_to_degF_d(UInt32(UInt32.max))
        let result = Fahrenheit_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint64_tUsing0_0Expecting0() {
        let expected = degF_d_to_u64(0.0)
        let result = UInt64(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint64_tUsing5_0Expecting5() {
        let expected = degF_d_to_u64(5.0)
        let result = UInt64(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint64_tUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = degF_d_to_u64(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTouint64_tUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = degF_d_to_u64(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_dUsing0Expecting0_0() {
        let expected = u64_to_degF_d(0)
        let result = Fahrenheit_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_dUsing5Expecting5_0() {
        let expected = u64_to_degF_d(5)
        let result = Fahrenheit_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_dUsingUInt64UInt64_minExpectingfahrenheit_dUInt64_min() {
        let expected = u64_to_degF_d(UInt64(UInt64.min))
        let result = Fahrenheit_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTofahrenheit_dUsingUInt64UInt64_maxExpectingfahrenheit_dUInt64_max() {
        let expected = u64_to_degF_d(UInt64(UInt64.max))
        let result = Fahrenheit_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTofloatUsing0_0Expecting0_0() {
        let expected = degF_d_to_f(0.0)
        let result = Float(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTofloatUsing5_0Expecting5_0() {
        let expected = degF_d_to_f(5.0)
        let result = Float(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTofloatUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = degF_d_to_f(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Float(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTofloatUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = degF_d_to_f(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Float(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_dUsing0_0Expecting0_0() {
        let expected = f_to_degF_d(0.0)
        let result = Fahrenheit_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_dUsing5_0Expecting5_0() {
        let expected = f_to_degF_d(5.0)
        let result = Fahrenheit_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_degF_d(Float(-Float.greatestFiniteMagnitude))
        let result = Fahrenheit_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTofahrenheit_dUsingFloatFloat_greatestFiniteMagnitudeExpectingfahrenheit_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_degF_d(Float(Float.greatestFiniteMagnitude))
        let result = Fahrenheit_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTodoubleUsing0_0Expecting0_0() {
        let expected = degF_d_to_d(0.0)
        let result = Double(Fahrenheit_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTodoubleUsing5_0Expecting5_0() {
        let expected = degF_d_to_d(5.0)
        let result = Double(Fahrenheit_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTodoubleUsingfahrenheit_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = degF_d_to_d(fahrenheit_d(-Double.greatestFiniteMagnitude))
        let result = Double(Fahrenheit_d(fahrenheit_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfahrenheit_dTodoubleUsingfahrenheit_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = degF_d_to_d(fahrenheit_d(Double.greatestFiniteMagnitude))
        let result = Double(Fahrenheit_d(fahrenheit_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_dUsing0_0Expecting0_0() {
        let expected = d_to_degF_d(0.0)
        let result = Fahrenheit_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTofahrenheit_dUsing5_0Expecting5_0() {
        let expected = d_to_degF_d(5.0)
        let result = Fahrenheit_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides kelvin_t unit tests.
final class Kelvin_tTests: XCTestCase {

    func testkelvin_tTocelsius_tUsing273Expecting0() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degC_t(273)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_tUsing274Expecting1() {
        let unit = Kelvin_t(274)
        let expected = K_t_to_degC_t(274)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_tUsing1ExpectingNeg272() {
        let unit = Kelvin_t(1)
        let expected = K_t_to_degC_t(1)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_tUsing5ExpectingNeg268() {
        let unit = Kelvin_t(5)
        let expected = K_t_to_degC_t(5)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_tUsing0ExpectingNeg273() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_degC_t(0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_tUsingNeg300ExpectingNeg573() {
        let unit = Kelvin_t(-300)
        let expected = K_t_to_degC_t(-300)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_tUsingCInt_minExpectingcelsius_tCInt_min() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degC_t(CInt.min)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_tUsingCInt_maxExpectingcelsius_tCInt_maxNeg273() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degC_t(CInt.max)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing260Expectingfahrenheit_tDouble260Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(260)
        let expected = K_t_to_degF_t(260)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing2500Expectingfahrenheit_tDouble2500Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(2500)
        let expected = K_t_to_degF_t(2500)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing25000Expectingfahrenheit_tDouble25000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(25000)
        let expected = K_t_to_degF_t(25000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing250000Expectingfahrenheit_tDouble250000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(250000)
        let expected = K_t_to_degF_t(250000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing2500000Expectingfahrenheit_tDouble2500000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(2500000)
        let expected = K_t_to_degF_t(2500000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing273Expectingfahrenheit_tDouble273Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degF_t(273)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing300Expectingfahrenheit_tDouble300Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(300)
        let expected = K_t_to_degF_t(300)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing0Expectingfahrenheit_tDouble0Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_degF_t(0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing20Expectingfahrenheit_tDouble20Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(20)
        let expected = K_t_to_degF_t(20)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing10Expectingfahrenheit_tDouble10Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(10)
        let expected = K_t_to_degF_t(10)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing15Expectingfahrenheit_tDouble15Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(15)
        let expected = K_t_to_degF_t(15)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing12Expectingfahrenheit_tDouble12Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(12)
        let expected = K_t_to_degF_t(12)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsing25Expectingfahrenheit_tDouble25Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(25)
        let expected = K_t_to_degF_t(25)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingNeg250Expectingfahrenheit_tDoubleNeg250Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(-250)
        let expected = K_t_to_degF_t(-250)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingNeg2500Expectingfahrenheit_tDoubleNeg2500Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(-2500)
        let expected = K_t_to_degF_t(-2500)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingNeg25000Expectingfahrenheit_tDoubleNeg25000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(-25000)
        let expected = K_t_to_degF_t(-25000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingNeg250000Expectingfahrenheit_tDoubleNeg250000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(-250000)
        let expected = K_t_to_degF_t(-250000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingNeg2500000Expectingfahrenheit_tDoubleNeg2500000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(-2500000)
        let expected = K_t_to_degF_t(-2500000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingNeg40Expectingfahrenheit_tDoubleNeg40Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(-40)
        let expected = K_t_to_degF_t(-40)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingCInt_minExpectingCInt_min() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degF_t(CInt.min)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_tUsingCInt_maxExpectingCInt_max() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degF_t(CInt.max)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_uUsing273Expecting0() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degC_u(273)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_uUsing274Expecting1() {
        let unit = Kelvin_t(274)
        let expected = K_t_to_degC_u(274)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_uUsingCInt_minExpectingcelsius_uCUnsignedInt_min() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degC_u(CInt.min)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_uUsingCInt_maxExpectingcelsius_uCInt_maxNeg273() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degC_u(CInt.max)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsing260Expectingfahrenheit_uDouble260Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(260)
        let expected = K_t_to_degF_u(260)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsing2500Expectingfahrenheit_uDouble2500Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(2500)
        let expected = K_t_to_degF_u(2500)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsing25000Expectingfahrenheit_uDouble25000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(25000)
        let expected = K_t_to_degF_u(25000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsing250000Expectingfahrenheit_uDouble250000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(250000)
        let expected = K_t_to_degF_u(250000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsing2500000Expectingfahrenheit_uDouble2500000Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(2500000)
        let expected = K_t_to_degF_u(2500000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsing273Expectingfahrenheit_uDouble273Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degF_u(273)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsing300Expectingfahrenheit_uDouble300Neg273_151_832_0_rounded() {
        let unit = Kelvin_t(300)
        let expected = K_t_to_degF_u(300)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsingNeg2500ExpectingCUnsignedInt_min() {
        let unit = Kelvin_t(-2500)
        let expected = K_t_to_degF_u(-2500)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsingNeg25000ExpectingCUnsignedInt_min() {
        let unit = Kelvin_t(-25000)
        let expected = K_t_to_degF_u(-25000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsingNeg250000ExpectingCUnsignedInt_min() {
        let unit = Kelvin_t(-250000)
        let expected = K_t_to_degF_u(-250000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsingNeg2500000ExpectingCUnsignedInt_min() {
        let unit = Kelvin_t(-2500000)
        let expected = K_t_to_degF_u(-2500000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsingCInt_minExpectingCUnsignedInt_min() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degF_u(CInt.min)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_uUsingCInt_maxExpectingfahrenheit_uDoubleCInt_maxNeg273_151_832_0_rounded() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degF_u(CInt.max)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_uUsing0Expecting0() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_K_u(0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_uUsingkelvin_tCInt_minExpectingkelvin_uCUnsignedInt_min() {
        let unit = Kelvin_t(kelvin_t(CInt.min))
        let expected = K_t_to_K_u(kelvin_t(CInt.min))
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_uUsingkelvin_tCInt_maxExpectingkelvin_uCInt_max() {
        let unit = Kelvin_t(kelvin_t(CInt.max))
        let expected = K_t_to_K_u(kelvin_t(CInt.max))
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_uUsing5Expecting5() {
        let unit = Kelvin_t(5)
        let expected = K_t_to_K_u(5)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsing273Expecting0_0() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degC_f(273)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsing274Expecting0_85() {
        let unit = Kelvin_t(274)
        let expected = K_t_to_degC_f(274)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsing1ExpectingNeg272_15() {
        let unit = Kelvin_t(1)
        let expected = K_t_to_degC_f(1)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsing5ExpectingNeg268_15() {
        let unit = Kelvin_t(5)
        let expected = K_t_to_degC_f(5)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsing0ExpectingNeg273_15() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_degC_f(0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsingNeg300ExpectingNeg573_15() {
        let unit = Kelvin_t(-300)
        let expected = K_t_to_degC_f(-300)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsingCInt_minExpectingcelsius_fCInt_minNeg273_15() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degC_f(CInt.min)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_fUsingCInt_maxExpectingcelsius_fCInt_maxNeg273_15() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degC_f(CInt.max)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing260Expectingfahrenheit_fDouble260Neg273_151_832_0() {
        let unit = Kelvin_t(260)
        let expected = K_t_to_degF_f(260)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing2500Expectingfahrenheit_fDouble2500Neg273_151_832_0() {
        let unit = Kelvin_t(2500)
        let expected = K_t_to_degF_f(2500)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing25000Expectingfahrenheit_fDouble25000Neg273_151_832_0() {
        let unit = Kelvin_t(25000)
        let expected = K_t_to_degF_f(25000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing250000Expectingfahrenheit_fDouble250000Neg273_151_832_0() {
        let unit = Kelvin_t(250000)
        let expected = K_t_to_degF_f(250000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing2500000Expectingfahrenheit_fDouble2500000Neg273_151_832_0() {
        let unit = Kelvin_t(2500000)
        let expected = K_t_to_degF_f(2500000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing273Expectingfahrenheit_fDouble273Neg273_151_832_0() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degF_f(273)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing300Expectingfahrenheit_fDouble300Neg273_151_832_0() {
        let unit = Kelvin_t(300)
        let expected = K_t_to_degF_f(300)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing0Expectingfahrenheit_fDouble0Neg273_151_832_0() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_degF_f(0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing20Expectingfahrenheit_fDouble20Neg273_151_832_0() {
        let unit = Kelvin_t(20)
        let expected = K_t_to_degF_f(20)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing10Expectingfahrenheit_fDouble10Neg273_151_832_0() {
        let unit = Kelvin_t(10)
        let expected = K_t_to_degF_f(10)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing15Expectingfahrenheit_fDouble15Neg273_151_832_0() {
        let unit = Kelvin_t(15)
        let expected = K_t_to_degF_f(15)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing12Expectingfahrenheit_fDouble12Neg273_151_832_0() {
        let unit = Kelvin_t(12)
        let expected = K_t_to_degF_f(12)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsing25Expectingfahrenheit_fDouble25Neg273_151_832_0() {
        let unit = Kelvin_t(25)
        let expected = K_t_to_degF_f(25)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingNeg250Expectingfahrenheit_fDoubleNeg250Neg273_151_832_0() {
        let unit = Kelvin_t(-250)
        let expected = K_t_to_degF_f(-250)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingNeg2500Expectingfahrenheit_fDoubleNeg2500Neg273_151_832_0() {
        let unit = Kelvin_t(-2500)
        let expected = K_t_to_degF_f(-2500)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingNeg25000Expectingfahrenheit_fDoubleNeg25000Neg273_151_832_0() {
        let unit = Kelvin_t(-25000)
        let expected = K_t_to_degF_f(-25000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingNeg250000Expectingfahrenheit_fDoubleNeg250000Neg273_151_832_0() {
        let unit = Kelvin_t(-250000)
        let expected = K_t_to_degF_f(-250000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingNeg2500000Expectingfahrenheit_fDoubleNeg2500000Neg273_151_832_0() {
        let unit = Kelvin_t(-2500000)
        let expected = K_t_to_degF_f(-2500000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingNeg40Expectingfahrenheit_fDoubleNeg40Neg273_151_832_0() {
        let unit = Kelvin_t(-40)
        let expected = K_t_to_degF_f(-40)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingCInt_minExpectingfahrenheit_fDoubleCInt_minNeg273_151_832_0() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degF_f(CInt.min)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_fUsingCInt_maxExpectingfahrenheit_fDoubleCInt_maxNeg273_151_832_0() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degF_f(CInt.max)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_fUsing0Expecting0_0() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_K_f(0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_fUsingkelvin_tCInt_minExpectingkelvin_fCInt_min() {
        let unit = Kelvin_t(kelvin_t(CInt.min))
        let expected = K_t_to_K_f(kelvin_t(CInt.min))
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_fUsingkelvin_tCInt_maxExpectingkelvin_fCInt_max() {
        let unit = Kelvin_t(kelvin_t(CInt.max))
        let expected = K_t_to_K_f(kelvin_t(CInt.max))
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_fUsing5Expecting5_0() {
        let unit = Kelvin_t(5)
        let expected = K_t_to_K_f(5)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsing273Expecting0_0() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degC_d(273)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsing274Expecting0_85() {
        let unit = Kelvin_t(274)
        let expected = K_t_to_degC_d(274)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsing1ExpectingNeg272_15() {
        let unit = Kelvin_t(1)
        let expected = K_t_to_degC_d(1)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsing5ExpectingNeg268_15() {
        let unit = Kelvin_t(5)
        let expected = K_t_to_degC_d(5)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsing0ExpectingNeg273_15() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_degC_d(0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsingNeg300ExpectingNeg573_15() {
        let unit = Kelvin_t(-300)
        let expected = K_t_to_degC_d(-300)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsingCInt_minExpectingcelsius_dCInt_minNeg273_15() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degC_d(CInt.min)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTocelsius_dUsingCInt_maxExpectingcelsius_dCInt_maxNeg273_15() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degC_d(CInt.max)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing260Expectingfahrenheit_dDouble260Neg273_151_832_0() {
        let unit = Kelvin_t(260)
        let expected = K_t_to_degF_d(260)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing2500Expectingfahrenheit_dDouble2500Neg273_151_832_0() {
        let unit = Kelvin_t(2500)
        let expected = K_t_to_degF_d(2500)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing25000Expectingfahrenheit_dDouble25000Neg273_151_832_0() {
        let unit = Kelvin_t(25000)
        let expected = K_t_to_degF_d(25000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing250000Expectingfahrenheit_dDouble250000Neg273_151_832_0() {
        let unit = Kelvin_t(250000)
        let expected = K_t_to_degF_d(250000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing2500000Expectingfahrenheit_dDouble2500000Neg273_151_832_0() {
        let unit = Kelvin_t(2500000)
        let expected = K_t_to_degF_d(2500000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing273Expectingfahrenheit_dDouble273Neg273_151_832_0() {
        let unit = Kelvin_t(273)
        let expected = K_t_to_degF_d(273)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing300Expectingfahrenheit_dDouble300Neg273_151_832_0() {
        let unit = Kelvin_t(300)
        let expected = K_t_to_degF_d(300)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing0Expectingfahrenheit_dDouble0Neg273_151_832_0() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_degF_d(0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing20Expectingfahrenheit_dDouble20Neg273_151_832_0() {
        let unit = Kelvin_t(20)
        let expected = K_t_to_degF_d(20)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing10Expectingfahrenheit_dDouble10Neg273_151_832_0() {
        let unit = Kelvin_t(10)
        let expected = K_t_to_degF_d(10)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing15Expectingfahrenheit_dDouble15Neg273_151_832_0() {
        let unit = Kelvin_t(15)
        let expected = K_t_to_degF_d(15)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing12Expectingfahrenheit_dDouble12Neg273_151_832_0() {
        let unit = Kelvin_t(12)
        let expected = K_t_to_degF_d(12)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsing25Expectingfahrenheit_dDouble25Neg273_151_832_0() {
        let unit = Kelvin_t(25)
        let expected = K_t_to_degF_d(25)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingNeg250Expectingfahrenheit_dDoubleNeg250Neg273_151_832_0() {
        let unit = Kelvin_t(-250)
        let expected = K_t_to_degF_d(-250)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingNeg2500Expectingfahrenheit_dDoubleNeg2500Neg273_151_832_0() {
        let unit = Kelvin_t(-2500)
        let expected = K_t_to_degF_d(-2500)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingNeg25000Expectingfahrenheit_dDoubleNeg25000Neg273_151_832_0() {
        let unit = Kelvin_t(-25000)
        let expected = K_t_to_degF_d(-25000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingNeg250000Expectingfahrenheit_dDoubleNeg250000Neg273_151_832_0() {
        let unit = Kelvin_t(-250000)
        let expected = K_t_to_degF_d(-250000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingNeg2500000Expectingfahrenheit_dDoubleNeg2500000Neg273_151_832_0() {
        let unit = Kelvin_t(-2500000)
        let expected = K_t_to_degF_d(-2500000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingNeg40Expectingfahrenheit_dDoubleNeg40Neg273_151_832_0() {
        let unit = Kelvin_t(-40)
        let expected = K_t_to_degF_d(-40)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingCInt_minExpectingfahrenheit_dDoubleCInt_minNeg273_151_832_0() {
        let unit = Kelvin_t(CInt.min)
        let expected = K_t_to_degF_d(CInt.min)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTofahrenheit_dUsingCInt_maxExpectingfahrenheit_dDoubleCInt_maxNeg273_151_832_0() {
        let unit = Kelvin_t(CInt.max)
        let expected = K_t_to_degF_d(CInt.max)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_dUsing0Expecting0_0() {
        let unit = Kelvin_t(0)
        let expected = K_t_to_K_d(0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_dUsingkelvin_tCInt_minExpectingkelvin_dCInt_min() {
        let unit = Kelvin_t(kelvin_t(CInt.min))
        let expected = K_t_to_K_d(kelvin_t(CInt.min))
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_dUsingkelvin_tCInt_maxExpectingkelvin_dCInt_max() {
        let unit = Kelvin_t(kelvin_t(CInt.max))
        let expected = K_t_to_K_d(kelvin_t(CInt.max))
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTokelvin_dUsing5Expecting5_0() {
        let unit = Kelvin_t(5)
        let expected = K_t_to_K_d(5)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_tTointUsing0Expecting0() {
        let expected = K_t_to_i(0)
        let result = CInt(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTointUsing5Expecting5() {
        let expected = K_t_to_i(5)
        let result = CInt(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTointUsingkelvin_tCInt_minExpectingCIntCInt_min() {
        let expected = K_t_to_i(kelvin_t(CInt.min))
        let result = CInt(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTointUsingkelvin_tCInt_maxExpectingCIntCInt_max() {
        let expected = K_t_to_i(kelvin_t(CInt.max))
        let result = CInt(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_tUsing0Expecting0() {
        let expected = i_to_K_t(0)
        let result = Kelvin_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_tUsing5Expecting5() {
        let expected = i_to_K_t(5)
        let result = Kelvin_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint8_tUsing0Expecting0() {
        let expected = K_t_to_i8(0)
        let result = Int8(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint8_tUsing5Expecting5() {
        let expected = K_t_to_i8(5)
        let result = Int8(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint8_tUsingkelvin_tCInt_minExpectingInt8Int8_min() {
        let expected = K_t_to_i8(kelvin_t(CInt.min))
        let result = Int8(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint8_tUsingkelvin_tCInt_maxExpectingInt8Int8_max() {
        let expected = K_t_to_i8(kelvin_t(CInt.max))
        let result = Int8(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_tUsing0Expecting0() {
        let expected = i8_to_K_t(0)
        let result = Kelvin_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_tUsing5Expecting5() {
        let expected = i8_to_K_t(5)
        let result = Kelvin_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_tUsingInt8Int8_minExpectingkelvin_tInt8_min() {
        let expected = i8_to_K_t(Int8(Int8.min))
        let result = Kelvin_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_tUsingInt8Int8_maxExpectingkelvin_tInt8_max() {
        let expected = i8_to_K_t(Int8(Int8.max))
        let result = Kelvin_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint16_tUsing0Expecting0() {
        let expected = K_t_to_i16(0)
        let result = Int16(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint16_tUsing5Expecting5() {
        let expected = K_t_to_i16(5)
        let result = Int16(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint16_tUsingkelvin_tCInt_minExpectingInt16Int16_min() {
        let expected = K_t_to_i16(kelvin_t(CInt.min))
        let result = Int16(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint16_tUsingkelvin_tCInt_maxExpectingInt16Int16_max() {
        let expected = K_t_to_i16(kelvin_t(CInt.max))
        let result = Int16(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_tUsing0Expecting0() {
        let expected = i16_to_K_t(0)
        let result = Kelvin_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_tUsing5Expecting5() {
        let expected = i16_to_K_t(5)
        let result = Kelvin_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_tUsingInt16Int16_minExpectingkelvin_tInt16_min() {
        let expected = i16_to_K_t(Int16(Int16.min))
        let result = Kelvin_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_tUsingInt16Int16_maxExpectingkelvin_tInt16_max() {
        let expected = i16_to_K_t(Int16(Int16.max))
        let result = Kelvin_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint32_tUsing0Expecting0() {
        let expected = K_t_to_i32(0)
        let result = Int32(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint32_tUsing5Expecting5() {
        let expected = K_t_to_i32(5)
        let result = Int32(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint32_tUsingkelvin_tCInt_minExpectingInt32CInt_min() {
        let expected = K_t_to_i32(kelvin_t(CInt.min))
        let result = Int32(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint32_tUsingkelvin_tCInt_maxExpectingInt32CInt_max() {
        let expected = K_t_to_i32(kelvin_t(CInt.max))
        let result = Int32(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_tUsing0Expecting0() {
        let expected = i32_to_K_t(0)
        let result = Kelvin_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_tUsing5Expecting5() {
        let expected = i32_to_K_t(5)
        let result = Kelvin_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_tUsingInt32Int32_minExpectingkelvin_tCInt_min() {
        let expected = i32_to_K_t(Int32(Int32.min))
        let result = Kelvin_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_tUsingInt32Int32_maxExpectingkelvin_tCInt_max() {
        let expected = i32_to_K_t(Int32(Int32.max))
        let result = Kelvin_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint64_tUsing0Expecting0() {
        let expected = K_t_to_i64(0)
        let result = Int64(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint64_tUsing5Expecting5() {
        let expected = K_t_to_i64(5)
        let result = Int64(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint64_tUsingkelvin_tCInt_minExpectingInt64CInt_min() {
        let expected = K_t_to_i64(kelvin_t(CInt.min))
        let result = Int64(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tToint64_tUsingkelvin_tCInt_maxExpectingInt64CInt_max() {
        let expected = K_t_to_i64(kelvin_t(CInt.max))
        let result = Int64(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_tUsing0Expecting0() {
        let expected = i64_to_K_t(0)
        let result = Kelvin_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_tUsing5Expecting5() {
        let expected = i64_to_K_t(5)
        let result = Kelvin_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_tUsingInt64Int64_minExpectingkelvin_tCInt_min() {
        let expected = i64_to_K_t(Int64(Int64.min))
        let result = Kelvin_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_tUsingInt64Int64_maxExpectingkelvin_tCInt_max() {
        let expected = i64_to_K_t(Int64(Int64.max))
        let result = Kelvin_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTounsignedintUsing0Expecting0() {
        let expected = K_t_to_u(0)
        let result = CUnsignedInt(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTounsignedintUsing5Expecting5() {
        let expected = K_t_to_u(5)
        let result = CUnsignedInt(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTounsignedintUsingkelvin_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = K_t_to_u(kelvin_t(CInt.min))
        let result = CUnsignedInt(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTounsignedintUsingkelvin_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = K_t_to_u(kelvin_t(CInt.max))
        let result = CUnsignedInt(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_tUsing0Expecting0() {
        let expected = u_to_K_t(0)
        let result = Kelvin_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_tUsing5Expecting5() {
        let expected = u_to_K_t(5)
        let result = Kelvin_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_tUsingCUnsignedIntCUnsignedInt_minExpectingkelvin_tCUnsignedInt_min() {
        let expected = u_to_K_t(CUnsignedInt(CUnsignedInt.min))
        let result = Kelvin_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_tUsingCUnsignedIntCUnsignedInt_maxExpectingkelvin_tCInt_max() {
        let expected = u_to_K_t(CUnsignedInt(CUnsignedInt.max))
        let result = Kelvin_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint8_tUsing0Expecting0() {
        let expected = K_t_to_u8(0)
        let result = UInt8(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint8_tUsing5Expecting5() {
        let expected = K_t_to_u8(5)
        let result = UInt8(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint8_tUsingkelvin_tCInt_minExpectingUInt8UInt8_min() {
        let expected = K_t_to_u8(kelvin_t(CInt.min))
        let result = UInt8(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint8_tUsingkelvin_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = K_t_to_u8(kelvin_t(CInt.max))
        let result = UInt8(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_tUsing0Expecting0() {
        let expected = u8_to_K_t(0)
        let result = Kelvin_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_tUsing5Expecting5() {
        let expected = u8_to_K_t(5)
        let result = Kelvin_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_tUsingUInt8UInt8_minExpectingkelvin_tUInt8_min() {
        let expected = u8_to_K_t(UInt8(UInt8.min))
        let result = Kelvin_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_tUsingUInt8UInt8_maxExpectingkelvin_tUInt8_max() {
        let expected = u8_to_K_t(UInt8(UInt8.max))
        let result = Kelvin_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint16_tUsing0Expecting0() {
        let expected = K_t_to_u16(0)
        let result = UInt16(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint16_tUsing5Expecting5() {
        let expected = K_t_to_u16(5)
        let result = UInt16(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint16_tUsingkelvin_tCInt_minExpectingUInt16UInt16_min() {
        let expected = K_t_to_u16(kelvin_t(CInt.min))
        let result = UInt16(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint16_tUsingkelvin_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = K_t_to_u16(kelvin_t(CInt.max))
        let result = UInt16(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_tUsing0Expecting0() {
        let expected = u16_to_K_t(0)
        let result = Kelvin_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_tUsing5Expecting5() {
        let expected = u16_to_K_t(5)
        let result = Kelvin_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_tUsingUInt16UInt16_minExpectingkelvin_tUInt16_min() {
        let expected = u16_to_K_t(UInt16(UInt16.min))
        let result = Kelvin_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_tUsingUInt16UInt16_maxExpectingkelvin_tUInt16_max() {
        let expected = u16_to_K_t(UInt16(UInt16.max))
        let result = Kelvin_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint32_tUsing0Expecting0() {
        let expected = K_t_to_u32(0)
        let result = UInt32(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint32_tUsing5Expecting5() {
        let expected = K_t_to_u32(5)
        let result = UInt32(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint32_tUsingkelvin_tCInt_minExpectingUInt32UInt32_min() {
        let expected = K_t_to_u32(kelvin_t(CInt.min))
        let result = UInt32(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint32_tUsingkelvin_tCInt_maxExpectingUInt32CInt_max() {
        let expected = K_t_to_u32(kelvin_t(CInt.max))
        let result = UInt32(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_tUsing0Expecting0() {
        let expected = u32_to_K_t(0)
        let result = Kelvin_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_tUsing5Expecting5() {
        let expected = u32_to_K_t(5)
        let result = Kelvin_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_tUsingUInt32UInt32_minExpectingkelvin_tUInt32_min() {
        let expected = u32_to_K_t(UInt32(UInt32.min))
        let result = Kelvin_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_tUsingUInt32UInt32_maxExpectingkelvin_tCInt_max() {
        let expected = u32_to_K_t(UInt32(UInt32.max))
        let result = Kelvin_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint64_tUsing0Expecting0() {
        let expected = K_t_to_u64(0)
        let result = UInt64(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint64_tUsing5Expecting5() {
        let expected = K_t_to_u64(5)
        let result = UInt64(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint64_tUsingkelvin_tCInt_minExpectingUInt64UInt64_min() {
        let expected = K_t_to_u64(kelvin_t(CInt.min))
        let result = UInt64(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTouint64_tUsingkelvin_tCInt_maxExpectingUInt64CInt_max() {
        let expected = K_t_to_u64(kelvin_t(CInt.max))
        let result = UInt64(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_tUsing0Expecting0() {
        let expected = u64_to_K_t(0)
        let result = Kelvin_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_tUsing5Expecting5() {
        let expected = u64_to_K_t(5)
        let result = Kelvin_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_tUsingUInt64UInt64_minExpectingkelvin_tUInt64_min() {
        let expected = u64_to_K_t(UInt64(UInt64.min))
        let result = Kelvin_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_tUsingUInt64UInt64_maxExpectingkelvin_tCInt_max() {
        let expected = u64_to_K_t(UInt64(UInt64.max))
        let result = Kelvin_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTofloatUsing0Expecting0_0() {
        let expected = K_t_to_f(0)
        let result = Float(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTofloatUsing5Expecting5_0() {
        let expected = K_t_to_f(5)
        let result = Float(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTofloatUsingkelvin_tCInt_minExpectingFloatCInt_min() {
        let expected = K_t_to_f(kelvin_t(CInt.min))
        let result = Float(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTofloatUsingkelvin_tCInt_maxExpectingFloatCInt_max() {
        let expected = K_t_to_f(kelvin_t(CInt.max))
        let result = Float(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_tUsing0_0Expecting0() {
        let expected = f_to_K_t(0.0)
        let result = Kelvin_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_tUsing5_0Expecting5() {
        let expected = f_to_K_t(5.0)
        let result = Kelvin_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingkelvin_tCInt_min() {
        let expected = f_to_K_t(Float(-Float.greatestFiniteMagnitude))
        let result = Kelvin_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_tUsingFloatFloat_greatestFiniteMagnitudeExpectingkelvin_tCInt_max() {
        let expected = f_to_K_t(Float(Float.greatestFiniteMagnitude))
        let result = Kelvin_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTodoubleUsing0Expecting0_0() {
        let expected = K_t_to_d(0)
        let result = Double(Kelvin_t(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTodoubleUsing5Expecting5_0() {
        let expected = K_t_to_d(5)
        let result = Double(Kelvin_t(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTodoubleUsingkelvin_tCInt_minExpectingDoubleCInt_min() {
        let expected = K_t_to_d(kelvin_t(CInt.min))
        let result = Double(Kelvin_t(kelvin_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_tTodoubleUsingkelvin_tCInt_maxExpectingDoubleCInt_max() {
        let expected = K_t_to_d(kelvin_t(CInt.max))
        let result = Double(Kelvin_t(kelvin_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_tUsing0_0Expecting0() {
        let expected = d_to_K_t(0.0)
        let result = Kelvin_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_tUsing5_0Expecting5() {
        let expected = d_to_K_t(5.0)
        let result = Kelvin_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingkelvin_tCInt_min() {
        let expected = d_to_K_t(Double(-Double.greatestFiniteMagnitude))
        let result = Kelvin_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingkelvin_tCInt_max() {
        let expected = d_to_K_t(Double(Double.greatestFiniteMagnitude))
        let result = Kelvin_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides kelvin_u unit tests.
final class Kelvin_uTests: XCTestCase {

    func testkelvin_uTocelsius_tUsing273Expecting0() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degC_t(273)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_tUsing274Expecting1() {
        let unit = Kelvin_u(274)
        let expected = K_u_to_degC_t(274)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_tUsing1ExpectingNeg272() {
        let unit = Kelvin_u(1)
        let expected = K_u_to_degC_t(1)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_tUsing5ExpectingNeg268() {
        let unit = Kelvin_u(5)
        let expected = K_u_to_degC_t(5)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_tUsing0ExpectingNeg273() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_degC_t(0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_tUsingCUnsignedInt_minExpectingcelsius_tCUnsignedInt_minNeg273() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degC_t(CUnsignedInt.min)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_tUsingCUnsignedInt_maxExpectingcelsius_tCInt_max() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degC_t(CUnsignedInt.max)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing260Expectingfahrenheit_tDouble260Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(260)
        let expected = K_u_to_degF_t(260)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing2500Expectingfahrenheit_tDouble2500Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(2500)
        let expected = K_u_to_degF_t(2500)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing25000Expectingfahrenheit_tDouble25000Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(25000)
        let expected = K_u_to_degF_t(25000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing250000Expectingfahrenheit_tDouble250000Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(250000)
        let expected = K_u_to_degF_t(250000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing2500000Expectingfahrenheit_tDouble2500000Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(2500000)
        let expected = K_u_to_degF_t(2500000)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing273Expectingfahrenheit_tDouble273Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degF_t(273)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing300Expectingfahrenheit_tDouble300Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(300)
        let expected = K_u_to_degF_t(300)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing0Expectingfahrenheit_tDouble0Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_degF_t(0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing20Expectingfahrenheit_tDouble20Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(20)
        let expected = K_u_to_degF_t(20)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing10Expectingfahrenheit_tDouble10Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(10)
        let expected = K_u_to_degF_t(10)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing15Expectingfahrenheit_tDouble15Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(15)
        let expected = K_u_to_degF_t(15)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing12Expectingfahrenheit_tDouble12Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(12)
        let expected = K_u_to_degF_t(12)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsing25Expectingfahrenheit_tDouble25Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(25)
        let expected = K_u_to_degF_t(25)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsingCUnsignedInt_minExpectingfahrenheit_tDoubleCUnsignedInt_minNeg273_151_832_0_rounded() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degF_t(CUnsignedInt.min)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_tUsingCUnsignedInt_maxExpectingCInt_max() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degF_t(CUnsignedInt.max)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_tUsing0Expecting0() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_K_t(0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_tUsingkelvin_uCUnsignedInt_minExpectingkelvin_tCUnsignedInt_min() {
        let unit = Kelvin_u(kelvin_u(CUnsignedInt.min))
        let expected = K_u_to_K_t(kelvin_u(CUnsignedInt.min))
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_tUsingkelvin_uCUnsignedInt_maxExpectingkelvin_tCInt_max() {
        let unit = Kelvin_u(kelvin_u(CUnsignedInt.max))
        let expected = K_u_to_K_t(kelvin_u(CUnsignedInt.max))
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_tUsing5Expecting5() {
        let unit = Kelvin_u(5)
        let expected = K_u_to_K_t(5)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_uUsing273Expecting0() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degC_u(273)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_uUsing274Expecting1() {
        let unit = Kelvin_u(274)
        let expected = K_u_to_degC_u(274)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_uUsingCUnsignedInt_minExpectingcelsius_uCUnsignedInt_min() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degC_u(CUnsignedInt.min)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_uUsingCUnsignedInt_maxExpectingcelsius_uCUnsignedInt_maxNeg273() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degC_u(CUnsignedInt.max)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsing260Expectingfahrenheit_uDouble260Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(260)
        let expected = K_u_to_degF_u(260)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsing2500Expectingfahrenheit_uDouble2500Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(2500)
        let expected = K_u_to_degF_u(2500)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsing25000Expectingfahrenheit_uDouble25000Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(25000)
        let expected = K_u_to_degF_u(25000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsing250000Expectingfahrenheit_uDouble250000Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(250000)
        let expected = K_u_to_degF_u(250000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsing2500000Expectingfahrenheit_uDouble2500000Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(2500000)
        let expected = K_u_to_degF_u(2500000)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsing273Expectingfahrenheit_uDouble273Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degF_u(273)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsing300Expectingfahrenheit_uDouble300Neg273_151_832_0_rounded() {
        let unit = Kelvin_u(300)
        let expected = K_u_to_degF_u(300)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsingCUnsignedInt_minExpectingCUnsignedInt_min() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degF_u(CUnsignedInt.min)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_uUsingCUnsignedInt_maxExpectingCUnsignedInt_max() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degF_u(CUnsignedInt.max)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_fUsing273Expecting0_0() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degC_f(273)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_fUsing274Expecting0_85() {
        let unit = Kelvin_u(274)
        let expected = K_u_to_degC_f(274)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_fUsing1ExpectingNeg272_15() {
        let unit = Kelvin_u(1)
        let expected = K_u_to_degC_f(1)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_fUsing5ExpectingNeg268_15() {
        let unit = Kelvin_u(5)
        let expected = K_u_to_degC_f(5)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_fUsing0ExpectingNeg273_15() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_degC_f(0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_fUsingCUnsignedInt_minExpectingcelsius_fCUnsignedInt_minNeg273_15() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degC_f(CUnsignedInt.min)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_fUsingCUnsignedInt_maxExpectingcelsius_fCUnsignedInt_maxNeg273_15() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degC_f(CUnsignedInt.max)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing260Expectingfahrenheit_fDouble260Neg273_151_832_0() {
        let unit = Kelvin_u(260)
        let expected = K_u_to_degF_f(260)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing2500Expectingfahrenheit_fDouble2500Neg273_151_832_0() {
        let unit = Kelvin_u(2500)
        let expected = K_u_to_degF_f(2500)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing25000Expectingfahrenheit_fDouble25000Neg273_151_832_0() {
        let unit = Kelvin_u(25000)
        let expected = K_u_to_degF_f(25000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing250000Expectingfahrenheit_fDouble250000Neg273_151_832_0() {
        let unit = Kelvin_u(250000)
        let expected = K_u_to_degF_f(250000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing2500000Expectingfahrenheit_fDouble2500000Neg273_151_832_0() {
        let unit = Kelvin_u(2500000)
        let expected = K_u_to_degF_f(2500000)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing273Expectingfahrenheit_fDouble273Neg273_151_832_0() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degF_f(273)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing300Expectingfahrenheit_fDouble300Neg273_151_832_0() {
        let unit = Kelvin_u(300)
        let expected = K_u_to_degF_f(300)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing0Expectingfahrenheit_fDouble0Neg273_151_832_0() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_degF_f(0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing20Expectingfahrenheit_fDouble20Neg273_151_832_0() {
        let unit = Kelvin_u(20)
        let expected = K_u_to_degF_f(20)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing10Expectingfahrenheit_fDouble10Neg273_151_832_0() {
        let unit = Kelvin_u(10)
        let expected = K_u_to_degF_f(10)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing15Expectingfahrenheit_fDouble15Neg273_151_832_0() {
        let unit = Kelvin_u(15)
        let expected = K_u_to_degF_f(15)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing12Expectingfahrenheit_fDouble12Neg273_151_832_0() {
        let unit = Kelvin_u(12)
        let expected = K_u_to_degF_f(12)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsing25Expectingfahrenheit_fDouble25Neg273_151_832_0() {
        let unit = Kelvin_u(25)
        let expected = K_u_to_degF_f(25)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsingCUnsignedInt_minExpectingfahrenheit_fDoubleCUnsignedInt_minNeg273_151_832_0() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degF_f(CUnsignedInt.min)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_fUsingCUnsignedInt_maxExpectingfahrenheit_fDoubleCUnsignedInt_maxNeg273_151_832_0() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degF_f(CUnsignedInt.max)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_fUsing0Expecting0_0() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_K_f(0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_fUsingkelvin_uCUnsignedInt_minExpectingkelvin_fCUnsignedInt_min() {
        let unit = Kelvin_u(kelvin_u(CUnsignedInt.min))
        let expected = K_u_to_K_f(kelvin_u(CUnsignedInt.min))
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_fUsingkelvin_uCUnsignedInt_maxExpectingkelvin_fCUnsignedInt_max() {
        let unit = Kelvin_u(kelvin_u(CUnsignedInt.max))
        let expected = K_u_to_K_f(kelvin_u(CUnsignedInt.max))
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_fUsing5Expecting5_0() {
        let unit = Kelvin_u(5)
        let expected = K_u_to_K_f(5)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_dUsing273Expecting0_0() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degC_d(273)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_dUsing274Expecting0_85() {
        let unit = Kelvin_u(274)
        let expected = K_u_to_degC_d(274)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_dUsing1ExpectingNeg272_15() {
        let unit = Kelvin_u(1)
        let expected = K_u_to_degC_d(1)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_dUsing5ExpectingNeg268_15() {
        let unit = Kelvin_u(5)
        let expected = K_u_to_degC_d(5)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_dUsing0ExpectingNeg273_15() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_degC_d(0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_dUsingCUnsignedInt_minExpectingcelsius_dCUnsignedInt_minNeg273_15() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degC_d(CUnsignedInt.min)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTocelsius_dUsingCUnsignedInt_maxExpectingcelsius_dCUnsignedInt_maxNeg273_15() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degC_d(CUnsignedInt.max)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing260Expectingfahrenheit_dDouble260Neg273_151_832_0() {
        let unit = Kelvin_u(260)
        let expected = K_u_to_degF_d(260)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing2500Expectingfahrenheit_dDouble2500Neg273_151_832_0() {
        let unit = Kelvin_u(2500)
        let expected = K_u_to_degF_d(2500)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing25000Expectingfahrenheit_dDouble25000Neg273_151_832_0() {
        let unit = Kelvin_u(25000)
        let expected = K_u_to_degF_d(25000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing250000Expectingfahrenheit_dDouble250000Neg273_151_832_0() {
        let unit = Kelvin_u(250000)
        let expected = K_u_to_degF_d(250000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing2500000Expectingfahrenheit_dDouble2500000Neg273_151_832_0() {
        let unit = Kelvin_u(2500000)
        let expected = K_u_to_degF_d(2500000)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing273Expectingfahrenheit_dDouble273Neg273_151_832_0() {
        let unit = Kelvin_u(273)
        let expected = K_u_to_degF_d(273)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing300Expectingfahrenheit_dDouble300Neg273_151_832_0() {
        let unit = Kelvin_u(300)
        let expected = K_u_to_degF_d(300)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing0Expectingfahrenheit_dDouble0Neg273_151_832_0() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_degF_d(0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing20Expectingfahrenheit_dDouble20Neg273_151_832_0() {
        let unit = Kelvin_u(20)
        let expected = K_u_to_degF_d(20)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing10Expectingfahrenheit_dDouble10Neg273_151_832_0() {
        let unit = Kelvin_u(10)
        let expected = K_u_to_degF_d(10)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing15Expectingfahrenheit_dDouble15Neg273_151_832_0() {
        let unit = Kelvin_u(15)
        let expected = K_u_to_degF_d(15)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing12Expectingfahrenheit_dDouble12Neg273_151_832_0() {
        let unit = Kelvin_u(12)
        let expected = K_u_to_degF_d(12)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsing25Expectingfahrenheit_dDouble25Neg273_151_832_0() {
        let unit = Kelvin_u(25)
        let expected = K_u_to_degF_d(25)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsingCUnsignedInt_minExpectingfahrenheit_dDoubleCUnsignedInt_minNeg273_151_832_0() {
        let unit = Kelvin_u(CUnsignedInt.min)
        let expected = K_u_to_degF_d(CUnsignedInt.min)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTofahrenheit_dUsingCUnsignedInt_maxExpectingfahrenheit_dDoubleCUnsignedInt_maxNeg273_151_832_0() {
        let unit = Kelvin_u(CUnsignedInt.max)
        let expected = K_u_to_degF_d(CUnsignedInt.max)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_dUsing0Expecting0_0() {
        let unit = Kelvin_u(0)
        let expected = K_u_to_K_d(0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_dUsingkelvin_uCUnsignedInt_minExpectingkelvin_dCUnsignedInt_min() {
        let unit = Kelvin_u(kelvin_u(CUnsignedInt.min))
        let expected = K_u_to_K_d(kelvin_u(CUnsignedInt.min))
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_dUsingkelvin_uCUnsignedInt_maxExpectingkelvin_dCUnsignedInt_max() {
        let unit = Kelvin_u(kelvin_u(CUnsignedInt.max))
        let expected = K_u_to_K_d(kelvin_u(CUnsignedInt.max))
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTokelvin_dUsing5Expecting5_0() {
        let unit = Kelvin_u(5)
        let expected = K_u_to_K_d(5)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_uTointUsing0Expecting0() {
        let expected = K_u_to_i(0)
        let result = CInt(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTointUsing5Expecting5() {
        let expected = K_u_to_i(5)
        let result = CInt(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTointUsingkelvin_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = K_u_to_i(kelvin_u(CUnsignedInt.min))
        let result = CInt(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTointUsingkelvin_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = K_u_to_i(kelvin_u(CUnsignedInt.max))
        let result = CInt(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_uUsing0Expecting0() {
        let expected = i_to_K_u(0)
        let result = Kelvin_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_uUsing5Expecting5() {
        let expected = i_to_K_u(5)
        let result = Kelvin_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_uUsingCIntCInt_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = i_to_K_u(CInt(CInt.min))
        let result = Kelvin_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_uUsingCIntCInt_maxExpectingkelvin_uCInt_max() {
        let expected = i_to_K_u(CInt(CInt.max))
        let result = Kelvin_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint8_tUsing0Expecting0() {
        let expected = K_u_to_i8(0)
        let result = Int8(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint8_tUsing5Expecting5() {
        let expected = K_u_to_i8(5)
        let result = Int8(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint8_tUsingkelvin_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = K_u_to_i8(kelvin_u(CUnsignedInt.min))
        let result = Int8(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint8_tUsingkelvin_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = K_u_to_i8(kelvin_u(CUnsignedInt.max))
        let result = Int8(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_uUsing0Expecting0() {
        let expected = i8_to_K_u(0)
        let result = Kelvin_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_uUsing5Expecting5() {
        let expected = i8_to_K_u(5)
        let result = Kelvin_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_uUsingInt8Int8_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = i8_to_K_u(Int8(Int8.min))
        let result = Kelvin_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_uUsingInt8Int8_maxExpectingkelvin_uInt8_max() {
        let expected = i8_to_K_u(Int8(Int8.max))
        let result = Kelvin_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint16_tUsing0Expecting0() {
        let expected = K_u_to_i16(0)
        let result = Int16(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint16_tUsing5Expecting5() {
        let expected = K_u_to_i16(5)
        let result = Int16(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint16_tUsingkelvin_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = K_u_to_i16(kelvin_u(CUnsignedInt.min))
        let result = Int16(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint16_tUsingkelvin_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = K_u_to_i16(kelvin_u(CUnsignedInt.max))
        let result = Int16(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_uUsing0Expecting0() {
        let expected = i16_to_K_u(0)
        let result = Kelvin_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_uUsing5Expecting5() {
        let expected = i16_to_K_u(5)
        let result = Kelvin_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_uUsingInt16Int16_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = i16_to_K_u(Int16(Int16.min))
        let result = Kelvin_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_uUsingInt16Int16_maxExpectingkelvin_uInt16_max() {
        let expected = i16_to_K_u(Int16(Int16.max))
        let result = Kelvin_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint32_tUsing0Expecting0() {
        let expected = K_u_to_i32(0)
        let result = Int32(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint32_tUsing5Expecting5() {
        let expected = K_u_to_i32(5)
        let result = Int32(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint32_tUsingkelvin_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = K_u_to_i32(kelvin_u(CUnsignedInt.min))
        let result = Int32(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint32_tUsingkelvin_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = K_u_to_i32(kelvin_u(CUnsignedInt.max))
        let result = Int32(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_uUsing0Expecting0() {
        let expected = i32_to_K_u(0)
        let result = Kelvin_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_uUsing5Expecting5() {
        let expected = i32_to_K_u(5)
        let result = Kelvin_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_uUsingInt32Int32_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = i32_to_K_u(Int32(Int32.min))
        let result = Kelvin_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_uUsingInt32Int32_maxExpectingkelvin_uInt32_max() {
        let expected = i32_to_K_u(Int32(Int32.max))
        let result = Kelvin_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint64_tUsing0Expecting0() {
        let expected = K_u_to_i64(0)
        let result = Int64(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint64_tUsing5Expecting5() {
        let expected = K_u_to_i64(5)
        let result = Int64(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint64_tUsingkelvin_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = K_u_to_i64(kelvin_u(CUnsignedInt.min))
        let result = Int64(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uToint64_tUsingkelvin_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = K_u_to_i64(kelvin_u(CUnsignedInt.max))
        let result = Int64(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_uUsing0Expecting0() {
        let expected = i64_to_K_u(0)
        let result = Kelvin_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_uUsing5Expecting5() {
        let expected = i64_to_K_u(5)
        let result = Kelvin_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_uUsingInt64Int64_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = i64_to_K_u(Int64(Int64.min))
        let result = Kelvin_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_uUsingInt64Int64_maxExpectingkelvin_uCUnsignedInt_max() {
        let expected = i64_to_K_u(Int64(Int64.max))
        let result = Kelvin_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTounsignedintUsing0Expecting0() {
        let expected = K_u_to_u(0)
        let result = CUnsignedInt(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTounsignedintUsing5Expecting5() {
        let expected = K_u_to_u(5)
        let result = CUnsignedInt(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTounsignedintUsingkelvin_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = K_u_to_u(kelvin_u(CUnsignedInt.min))
        let result = CUnsignedInt(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTounsignedintUsingkelvin_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = K_u_to_u(kelvin_u(CUnsignedInt.max))
        let result = CUnsignedInt(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_uUsing0Expecting0() {
        let expected = u_to_K_u(0)
        let result = Kelvin_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_uUsing5Expecting5() {
        let expected = u_to_K_u(5)
        let result = Kelvin_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint8_tUsing0Expecting0() {
        let expected = K_u_to_u8(0)
        let result = UInt8(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint8_tUsing5Expecting5() {
        let expected = K_u_to_u8(5)
        let result = UInt8(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint8_tUsingkelvin_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = K_u_to_u8(kelvin_u(CUnsignedInt.min))
        let result = UInt8(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint8_tUsingkelvin_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = K_u_to_u8(kelvin_u(CUnsignedInt.max))
        let result = UInt8(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_uUsing0Expecting0() {
        let expected = u8_to_K_u(0)
        let result = Kelvin_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_uUsing5Expecting5() {
        let expected = u8_to_K_u(5)
        let result = Kelvin_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_uUsingUInt8UInt8_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = u8_to_K_u(UInt8(UInt8.min))
        let result = Kelvin_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_uUsingUInt8UInt8_maxExpectingkelvin_uUInt8_max() {
        let expected = u8_to_K_u(UInt8(UInt8.max))
        let result = Kelvin_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint16_tUsing0Expecting0() {
        let expected = K_u_to_u16(0)
        let result = UInt16(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint16_tUsing5Expecting5() {
        let expected = K_u_to_u16(5)
        let result = UInt16(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint16_tUsingkelvin_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = K_u_to_u16(kelvin_u(CUnsignedInt.min))
        let result = UInt16(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint16_tUsingkelvin_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = K_u_to_u16(kelvin_u(CUnsignedInt.max))
        let result = UInt16(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_uUsing0Expecting0() {
        let expected = u16_to_K_u(0)
        let result = Kelvin_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_uUsing5Expecting5() {
        let expected = u16_to_K_u(5)
        let result = Kelvin_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_uUsingUInt16UInt16_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = u16_to_K_u(UInt16(UInt16.min))
        let result = Kelvin_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_uUsingUInt16UInt16_maxExpectingkelvin_uUInt16_max() {
        let expected = u16_to_K_u(UInt16(UInt16.max))
        let result = Kelvin_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint32_tUsing0Expecting0() {
        let expected = K_u_to_u32(0)
        let result = UInt32(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint32_tUsing5Expecting5() {
        let expected = K_u_to_u32(5)
        let result = UInt32(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint32_tUsingkelvin_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = K_u_to_u32(kelvin_u(CUnsignedInt.min))
        let result = UInt32(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint32_tUsingkelvin_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = K_u_to_u32(kelvin_u(CUnsignedInt.max))
        let result = UInt32(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_uUsing0Expecting0() {
        let expected = u32_to_K_u(0)
        let result = Kelvin_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_uUsing5Expecting5() {
        let expected = u32_to_K_u(5)
        let result = Kelvin_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_uUsingUInt32UInt32_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = u32_to_K_u(UInt32(UInt32.min))
        let result = Kelvin_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_uUsingUInt32UInt32_maxExpectingkelvin_uCUnsignedInt_max() {
        let expected = u32_to_K_u(UInt32(UInt32.max))
        let result = Kelvin_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint64_tUsing0Expecting0() {
        let expected = K_u_to_u64(0)
        let result = UInt64(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint64_tUsing5Expecting5() {
        let expected = K_u_to_u64(5)
        let result = UInt64(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint64_tUsingkelvin_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = K_u_to_u64(kelvin_u(CUnsignedInt.min))
        let result = UInt64(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTouint64_tUsingkelvin_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = K_u_to_u64(kelvin_u(CUnsignedInt.max))
        let result = UInt64(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_uUsing0Expecting0() {
        let expected = u64_to_K_u(0)
        let result = Kelvin_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_uUsing5Expecting5() {
        let expected = u64_to_K_u(5)
        let result = Kelvin_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_uUsingUInt64UInt64_minExpectingkelvin_uCUnsignedInt_min() {
        let expected = u64_to_K_u(UInt64(UInt64.min))
        let result = Kelvin_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_uUsingUInt64UInt64_maxExpectingkelvin_uCUnsignedInt_max() {
        let expected = u64_to_K_u(UInt64(UInt64.max))
        let result = Kelvin_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTofloatUsing0Expecting0_0() {
        let expected = K_u_to_f(0)
        let result = Float(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTofloatUsing5Expecting5_0() {
        let expected = K_u_to_f(5)
        let result = Float(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTofloatUsingkelvin_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = K_u_to_f(kelvin_u(CUnsignedInt.min))
        let result = Float(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTofloatUsingkelvin_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = K_u_to_f(kelvin_u(CUnsignedInt.max))
        let result = Float(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_uUsing0_0Expecting0() {
        let expected = f_to_K_u(0.0)
        let result = Kelvin_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_uUsing5_0Expecting5() {
        let expected = f_to_K_u(5.0)
        let result = Kelvin_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_min() {
        let expected = f_to_K_u(Float(-Float.greatestFiniteMagnitude))
        let result = Kelvin_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_uUsingFloatFloat_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_max() {
        let expected = f_to_K_u(Float(Float.greatestFiniteMagnitude))
        let result = Kelvin_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTodoubleUsing0Expecting0_0() {
        let expected = K_u_to_d(0)
        let result = Double(Kelvin_u(0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTodoubleUsing5Expecting5_0() {
        let expected = K_u_to_d(5)
        let result = Double(Kelvin_u(5))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTodoubleUsingkelvin_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = K_u_to_d(kelvin_u(CUnsignedInt.min))
        let result = Double(Kelvin_u(kelvin_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_uTodoubleUsingkelvin_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = K_u_to_d(kelvin_u(CUnsignedInt.max))
        let result = Double(Kelvin_u(kelvin_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_uUsing0_0Expecting0() {
        let expected = d_to_K_u(0.0)
        let result = Kelvin_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_uUsing5_0Expecting5() {
        let expected = d_to_K_u(5.0)
        let result = Kelvin_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_min() {
        let expected = d_to_K_u(Double(-Double.greatestFiniteMagnitude))
        let result = Kelvin_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_max() {
        let expected = d_to_K_u(Double(Double.greatestFiniteMagnitude))
        let result = Kelvin_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides kelvin_f unit tests.
final class Kelvin_fTests: XCTestCase {

    func testkelvin_fTocelsius_tUsing273_15Expecting0() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degC_t(273.15)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_tUsing274_0Expecting1() {
        let unit = Kelvin_f(274.0)
        let expected = K_f_to_degC_t(274.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_tUsing1_0ExpectingNeg272() {
        let unit = Kelvin_f(1.0)
        let expected = K_f_to_degC_t(1.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_tUsing5_0ExpectingNeg268() {
        let unit = Kelvin_f(5.0)
        let expected = K_f_to_degC_t(5.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_tUsing0_0ExpectingNeg273() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_degC_t(0.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_tUsingNeg300_0ExpectingNeg573() {
        let unit = Kelvin_f(-300.0)
        let expected = K_f_to_degC_t(-300.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_tUsingNegFloat_greatestFiniteMagnitudeExpectingcelsius_tCInt_min() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_t(-Float.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_tUsingFloat_greatestFiniteMagnitudeExpectingcelsius_tCInt_max() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_t(Float.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing260_0Expectingfahrenheit_tDouble260_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(260.0)
        let expected = K_f_to_degF_t(260.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing2500_0Expectingfahrenheit_tDouble2500_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(2500.0)
        let expected = K_f_to_degF_t(2500.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing25000_0Expectingfahrenheit_tDouble25000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(25000.0)
        let expected = K_f_to_degF_t(25000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing250000_0Expectingfahrenheit_tDouble250000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(250000.0)
        let expected = K_f_to_degF_t(250000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing2500000_0Expectingfahrenheit_tDouble2500000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(2500000.0)
        let expected = K_f_to_degF_t(2500000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing273_15Expectingfahrenheit_tDouble273_15Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degF_t(273.15)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing300_0Expectingfahrenheit_tDouble300_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(300.0)
        let expected = K_f_to_degF_t(300.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing0_0Expectingfahrenheit_tDouble0_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_degF_t(0.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing20_0Expectingfahrenheit_tDouble20_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(20.0)
        let expected = K_f_to_degF_t(20.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing10_0Expectingfahrenheit_tDouble10_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(10.0)
        let expected = K_f_to_degF_t(10.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing15_0Expectingfahrenheit_tDouble15_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(15.0)
        let expected = K_f_to_degF_t(15.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing12_0Expectingfahrenheit_tDouble12_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(12.0)
        let expected = K_f_to_degF_t(12.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsing25_0Expectingfahrenheit_tDouble25_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(25.0)
        let expected = K_f_to_degF_t(25.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingNeg250_0Expectingfahrenheit_tDoubleNeg250_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(-250.0)
        let expected = K_f_to_degF_t(-250.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingNeg2500_0Expectingfahrenheit_tDoubleNeg2500_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(-2500.0)
        let expected = K_f_to_degF_t(-2500.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingNeg25000_0Expectingfahrenheit_tDoubleNeg25000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(-25000.0)
        let expected = K_f_to_degF_t(-25000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingNeg250000_0Expectingfahrenheit_tDoubleNeg250000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(-250000.0)
        let expected = K_f_to_degF_t(-250000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingNeg2500000_0Expectingfahrenheit_tDoubleNeg2500000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(-2500000.0)
        let expected = K_f_to_degF_t(-2500000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingNeg40_0Expectingfahrenheit_tDoubleNeg40_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(-40.0)
        let expected = K_f_to_degF_t(-40.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingNegFloat_greatestFiniteMagnitudeExpectingCInt_min() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_t(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_tUsingFloat_greatestFiniteMagnitudeExpectingCInt_max() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_t(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_tUsing0_0Expecting0() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_K_t(0.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingkelvin_tCInt_min() {
        let unit = Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude))
        let expected = K_f_to_K_t(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingkelvin_tCInt_max() {
        let unit = Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude))
        let expected = K_f_to_K_t(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_tUsing5_0Expecting5() {
        let unit = Kelvin_f(5.0)
        let expected = K_f_to_K_t(5.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_uUsing273_15Expecting0() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degC_u(273.15)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_uUsing274_0Expecting1() {
        let unit = Kelvin_f(274.0)
        let expected = K_f_to_degC_u(274.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_uUsingNegFloat_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_min() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_u(-Float.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_uUsingFloat_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_max() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_u(Float.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsing260_0Expectingfahrenheit_uDouble260_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(260.0)
        let expected = K_f_to_degF_u(260.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsing2500_0Expectingfahrenheit_uDouble2500_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(2500.0)
        let expected = K_f_to_degF_u(2500.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsing25000_0Expectingfahrenheit_uDouble25000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(25000.0)
        let expected = K_f_to_degF_u(25000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsing250000_0Expectingfahrenheit_uDouble250000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(250000.0)
        let expected = K_f_to_degF_u(250000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsing2500000_0Expectingfahrenheit_uDouble2500000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(2500000.0)
        let expected = K_f_to_degF_u(2500000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsing273_15Expectingfahrenheit_uDouble273_15Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degF_u(273.15)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsing300_0Expectingfahrenheit_uDouble300_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_f(300.0)
        let expected = K_f_to_degF_u(300.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsingNeg2500_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_f(-2500.0)
        let expected = K_f_to_degF_u(-2500.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsingNeg25000_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_f(-25000.0)
        let expected = K_f_to_degF_u(-25000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsingNeg250000_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_f(-250000.0)
        let expected = K_f_to_degF_u(-250000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsingNeg2500000_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_f(-2500000.0)
        let expected = K_f_to_degF_u(-2500000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsingNegFloat_greatestFiniteMagnitudeExpectingCUnsignedInt_min() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_u(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_uUsingFloat_greatestFiniteMagnitudeExpectingCUnsignedInt_max() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_u(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_uUsing0_0Expecting0() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_K_u(0.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_uUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_min() {
        let unit = Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude))
        let expected = K_f_to_K_u(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_uUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_max() {
        let unit = Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude))
        let expected = K_f_to_K_u(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_uUsing5_0Expecting5() {
        let unit = Kelvin_f(5.0)
        let expected = K_f_to_K_u(5.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsing273_15Expecting0_0() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degC_f(273.15)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsing274_0Expecting0_85() {
        let unit = Kelvin_f(274.0)
        let expected = K_f_to_degC_f(274.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsing1_0ExpectingNeg272_15() {
        let unit = Kelvin_f(1.0)
        let expected = K_f_to_degC_f(1.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsing5_0ExpectingNeg268_15() {
        let unit = Kelvin_f(5.0)
        let expected = K_f_to_degC_f(5.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsing0_0ExpectingNeg273_15() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_degC_f(0.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsingNeg300_0ExpectingNeg573_15() {
        let unit = Kelvin_f(-300.0)
        let expected = K_f_to_degC_f(-300.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsingNegFloat_greatestFiniteMagnitudeExpectingcelsius_fNegFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_f(-Float.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_fUsingFloat_greatestFiniteMagnitudeExpectingcelsius_fFloat_greatestFiniteMagnitudeNeg273_15() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_f(Float.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing260_0Expectingfahrenheit_fDouble260_0Neg273_151_832_0() {
        let unit = Kelvin_f(260.0)
        let expected = K_f_to_degF_f(260.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing2500_0Expectingfahrenheit_fDouble2500_0Neg273_151_832_0() {
        let unit = Kelvin_f(2500.0)
        let expected = K_f_to_degF_f(2500.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing25000_0Expectingfahrenheit_fDouble25000_0Neg273_151_832_0() {
        let unit = Kelvin_f(25000.0)
        let expected = K_f_to_degF_f(25000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing250000_0Expectingfahrenheit_fDouble250000_0Neg273_151_832_0() {
        let unit = Kelvin_f(250000.0)
        let expected = K_f_to_degF_f(250000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing2500000_0Expectingfahrenheit_fDouble2500000_0Neg273_151_832_0() {
        let unit = Kelvin_f(2500000.0)
        let expected = K_f_to_degF_f(2500000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing273_15Expectingfahrenheit_fDouble273_15Neg273_151_832_0() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degF_f(273.15)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing300_0Expectingfahrenheit_fDouble300_0Neg273_151_832_0() {
        let unit = Kelvin_f(300.0)
        let expected = K_f_to_degF_f(300.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing0_0Expectingfahrenheit_fDouble0_0Neg273_151_832_0() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_degF_f(0.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing20_0Expectingfahrenheit_fDouble20_0Neg273_151_832_0() {
        let unit = Kelvin_f(20.0)
        let expected = K_f_to_degF_f(20.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing10_0Expectingfahrenheit_fDouble10_0Neg273_151_832_0() {
        let unit = Kelvin_f(10.0)
        let expected = K_f_to_degF_f(10.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing15_0Expectingfahrenheit_fDouble15_0Neg273_151_832_0() {
        let unit = Kelvin_f(15.0)
        let expected = K_f_to_degF_f(15.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing12_0Expectingfahrenheit_fDouble12_0Neg273_151_832_0() {
        let unit = Kelvin_f(12.0)
        let expected = K_f_to_degF_f(12.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsing25_0Expectingfahrenheit_fDouble25_0Neg273_151_832_0() {
        let unit = Kelvin_f(25.0)
        let expected = K_f_to_degF_f(25.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingNeg250_0Expectingfahrenheit_fDoubleNeg250_0Neg273_151_832_0() {
        let unit = Kelvin_f(-250.0)
        let expected = K_f_to_degF_f(-250.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingNeg2500_0Expectingfahrenheit_fDoubleNeg2500_0Neg273_151_832_0() {
        let unit = Kelvin_f(-2500.0)
        let expected = K_f_to_degF_f(-2500.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingNeg25000_0Expectingfahrenheit_fDoubleNeg25000_0Neg273_151_832_0() {
        let unit = Kelvin_f(-25000.0)
        let expected = K_f_to_degF_f(-25000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingNeg250000_0Expectingfahrenheit_fDoubleNeg250000_0Neg273_151_832_0() {
        let unit = Kelvin_f(-250000.0)
        let expected = K_f_to_degF_f(-250000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingNeg2500000_0Expectingfahrenheit_fDoubleNeg2500000_0Neg273_151_832_0() {
        let unit = Kelvin_f(-2500000.0)
        let expected = K_f_to_degF_f(-2500000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingNeg40_0Expectingfahrenheit_fDoubleNeg40_0Neg273_151_832_0() {
        let unit = Kelvin_f(-40.0)
        let expected = K_f_to_degF_f(-40.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingNegFloat_greatestFiniteMagnitudeExpectingNegFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_f(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_fUsingFloat_greatestFiniteMagnitudeExpectingFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_f(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsing273_15Expecting0_0() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degC_d(273.15)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsing274_0Expecting0_85() {
        let unit = Kelvin_f(274.0)
        let expected = K_f_to_degC_d(274.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsing1_0ExpectingNeg272_15() {
        let unit = Kelvin_f(1.0)
        let expected = K_f_to_degC_d(1.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsing5_0ExpectingNeg268_15() {
        let unit = Kelvin_f(5.0)
        let expected = K_f_to_degC_d(5.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsing0_0ExpectingNeg273_15() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_degC_d(0.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsingNeg300_0ExpectingNeg573_15() {
        let unit = Kelvin_f(-300.0)
        let expected = K_f_to_degC_d(-300.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsingNegFloat_greatestFiniteMagnitudeExpectingcelsius_dNegFloat_greatestFiniteMagnitudeNeg273_15() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_d(-Float.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTocelsius_dUsingFloat_greatestFiniteMagnitudeExpectingcelsius_dFloat_greatestFiniteMagnitudeNeg273_15() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degC_d(Float.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing260_0Expectingfahrenheit_dDouble260_0Neg273_151_832_0() {
        let unit = Kelvin_f(260.0)
        let expected = K_f_to_degF_d(260.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing2500_0Expectingfahrenheit_dDouble2500_0Neg273_151_832_0() {
        let unit = Kelvin_f(2500.0)
        let expected = K_f_to_degF_d(2500.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing25000_0Expectingfahrenheit_dDouble25000_0Neg273_151_832_0() {
        let unit = Kelvin_f(25000.0)
        let expected = K_f_to_degF_d(25000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing250000_0Expectingfahrenheit_dDouble250000_0Neg273_151_832_0() {
        let unit = Kelvin_f(250000.0)
        let expected = K_f_to_degF_d(250000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing2500000_0Expectingfahrenheit_dDouble2500000_0Neg273_151_832_0() {
        let unit = Kelvin_f(2500000.0)
        let expected = K_f_to_degF_d(2500000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing273_15Expectingfahrenheit_dDouble273_15Neg273_151_832_0() {
        let unit = Kelvin_f(273.15)
        let expected = K_f_to_degF_d(273.15)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing300_0Expectingfahrenheit_dDouble300_0Neg273_151_832_0() {
        let unit = Kelvin_f(300.0)
        let expected = K_f_to_degF_d(300.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing0_0Expectingfahrenheit_dDouble0_0Neg273_151_832_0() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_degF_d(0.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing20_0Expectingfahrenheit_dDouble20_0Neg273_151_832_0() {
        let unit = Kelvin_f(20.0)
        let expected = K_f_to_degF_d(20.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing10_0Expectingfahrenheit_dDouble10_0Neg273_151_832_0() {
        let unit = Kelvin_f(10.0)
        let expected = K_f_to_degF_d(10.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing15_0Expectingfahrenheit_dDouble15_0Neg273_151_832_0() {
        let unit = Kelvin_f(15.0)
        let expected = K_f_to_degF_d(15.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing12_0Expectingfahrenheit_dDouble12_0Neg273_151_832_0() {
        let unit = Kelvin_f(12.0)
        let expected = K_f_to_degF_d(12.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsing25_0Expectingfahrenheit_dDouble25_0Neg273_151_832_0() {
        let unit = Kelvin_f(25.0)
        let expected = K_f_to_degF_d(25.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingNeg250_0Expectingfahrenheit_dDoubleNeg250_0Neg273_151_832_0() {
        let unit = Kelvin_f(-250.0)
        let expected = K_f_to_degF_d(-250.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingNeg2500_0Expectingfahrenheit_dDoubleNeg2500_0Neg273_151_832_0() {
        let unit = Kelvin_f(-2500.0)
        let expected = K_f_to_degF_d(-2500.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingNeg25000_0Expectingfahrenheit_dDoubleNeg25000_0Neg273_151_832_0() {
        let unit = Kelvin_f(-25000.0)
        let expected = K_f_to_degF_d(-25000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingNeg250000_0Expectingfahrenheit_dDoubleNeg250000_0Neg273_151_832_0() {
        let unit = Kelvin_f(-250000.0)
        let expected = K_f_to_degF_d(-250000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingNeg2500000_0Expectingfahrenheit_dDoubleNeg2500000_0Neg273_151_832_0() {
        let unit = Kelvin_f(-2500000.0)
        let expected = K_f_to_degF_d(-2500000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingNeg40_0Expectingfahrenheit_dDoubleNeg40_0Neg273_151_832_0() {
        let unit = Kelvin_f(-40.0)
        let expected = K_f_to_degF_d(-40.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingNegFloat_greatestFiniteMagnitudeExpectingfahrenheit_dDoubleNegFloat_greatestFiniteMagnitudeNeg273_151_832_0() {
        let unit = Kelvin_f(-Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_d(-Float.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTofahrenheit_dUsingFloat_greatestFiniteMagnitudeExpectingfahrenheit_dDoubleFloat_greatestFiniteMagnitudeNeg273_151_832_0() {
        let unit = Kelvin_f(Float.greatestFiniteMagnitude)
        let expected = K_f_to_degF_d(Float.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_dUsing0_0Expecting0_0() {
        let unit = Kelvin_f(0.0)
        let expected = K_f_to_K_d(0.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_dUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingkelvin_dNegFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude))
        let expected = K_f_to_K_d(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_dUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingkelvin_dFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude))
        let expected = K_f_to_K_d(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTokelvin_dUsing5_0Expecting5_0() {
        let unit = Kelvin_f(5.0)
        let expected = K_f_to_K_d(5.0)
        let result = Kelvin_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_d = 1.0
        let categoryResult = Temperature(unit).kelvin_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_fTointUsing0_0Expecting0() {
        let expected = K_f_to_i(0.0)
        let result = CInt(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTointUsing5_0Expecting5() {
        let expected = K_f_to_i(5.0)
        let result = CInt(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTointUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = K_f_to_i(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTointUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = K_f_to_i(kelvin_f(Float.greatestFiniteMagnitude))
        let result = CInt(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_fUsing0Expecting0_0() {
        let expected = i_to_K_f(0)
        let result = Kelvin_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_fUsing5Expecting5_0() {
        let expected = i_to_K_f(5)
        let result = Kelvin_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_fUsingCIntCInt_minExpectingkelvin_fCInt_min() {
        let expected = i_to_K_f(CInt(CInt.min))
        let result = Kelvin_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_fUsingCIntCInt_maxExpectingkelvin_fCInt_max() {
        let expected = i_to_K_f(CInt(CInt.max))
        let result = Kelvin_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint8_tUsing0_0Expecting0() {
        let expected = K_f_to_i8(0.0)
        let result = Int8(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint8_tUsing5_0Expecting5() {
        let expected = K_f_to_i8(5.0)
        let result = Int8(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint8_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = K_f_to_i8(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint8_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = K_f_to_i8(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Int8(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_fUsing0Expecting0_0() {
        let expected = i8_to_K_f(0)
        let result = Kelvin_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_fUsing5Expecting5_0() {
        let expected = i8_to_K_f(5)
        let result = Kelvin_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_fUsingInt8Int8_minExpectingkelvin_fInt8_min() {
        let expected = i8_to_K_f(Int8(Int8.min))
        let result = Kelvin_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_fUsingInt8Int8_maxExpectingkelvin_fInt8_max() {
        let expected = i8_to_K_f(Int8(Int8.max))
        let result = Kelvin_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint16_tUsing0_0Expecting0() {
        let expected = K_f_to_i16(0.0)
        let result = Int16(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint16_tUsing5_0Expecting5() {
        let expected = K_f_to_i16(5.0)
        let result = Int16(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint16_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = K_f_to_i16(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint16_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = K_f_to_i16(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Int16(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_fUsing0Expecting0_0() {
        let expected = i16_to_K_f(0)
        let result = Kelvin_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_fUsing5Expecting5_0() {
        let expected = i16_to_K_f(5)
        let result = Kelvin_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_fUsingInt16Int16_minExpectingkelvin_fInt16_min() {
        let expected = i16_to_K_f(Int16(Int16.min))
        let result = Kelvin_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_fUsingInt16Int16_maxExpectingkelvin_fInt16_max() {
        let expected = i16_to_K_f(Int16(Int16.max))
        let result = Kelvin_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint32_tUsing0_0Expecting0() {
        let expected = K_f_to_i32(0.0)
        let result = Int32(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint32_tUsing5_0Expecting5() {
        let expected = K_f_to_i32(5.0)
        let result = Int32(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint32_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = K_f_to_i32(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint32_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = K_f_to_i32(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Int32(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_fUsing0Expecting0_0() {
        let expected = i32_to_K_f(0)
        let result = Kelvin_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_fUsing5Expecting5_0() {
        let expected = i32_to_K_f(5)
        let result = Kelvin_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_fUsingInt32Int32_minExpectingkelvin_fInt32_min() {
        let expected = i32_to_K_f(Int32(Int32.min))
        let result = Kelvin_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_fUsingInt32Int32_maxExpectingkelvin_fInt32_max() {
        let expected = i32_to_K_f(Int32(Int32.max))
        let result = Kelvin_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint64_tUsing0_0Expecting0() {
        let expected = K_f_to_i64(0.0)
        let result = Int64(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint64_tUsing5_0Expecting5() {
        let expected = K_f_to_i64(5.0)
        let result = Int64(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint64_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = K_f_to_i64(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fToint64_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = K_f_to_i64(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Int64(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_fUsing0Expecting0_0() {
        let expected = i64_to_K_f(0)
        let result = Kelvin_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_fUsing5Expecting5_0() {
        let expected = i64_to_K_f(5)
        let result = Kelvin_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_fUsingInt64Int64_minExpectingkelvin_fInt64_min() {
        let expected = i64_to_K_f(Int64(Int64.min))
        let result = Kelvin_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_fUsingInt64Int64_maxExpectingkelvin_fInt64_max() {
        let expected = i64_to_K_f(Int64(Int64.max))
        let result = Kelvin_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTounsignedintUsing0_0Expecting0() {
        let expected = K_f_to_u(0.0)
        let result = CUnsignedInt(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTounsignedintUsing5_0Expecting5() {
        let expected = K_f_to_u(5.0)
        let result = CUnsignedInt(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTounsignedintUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = K_f_to_u(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTounsignedintUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = K_f_to_u(kelvin_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_fUsing0Expecting0_0() {
        let expected = u_to_K_f(0)
        let result = Kelvin_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_fUsing5Expecting5_0() {
        let expected = u_to_K_f(5)
        let result = Kelvin_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_fUsingCUnsignedIntCUnsignedInt_minExpectingkelvin_fCUnsignedInt_min() {
        let expected = u_to_K_f(CUnsignedInt(CUnsignedInt.min))
        let result = Kelvin_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_fUsingCUnsignedIntCUnsignedInt_maxExpectingkelvin_fCUnsignedInt_max() {
        let expected = u_to_K_f(CUnsignedInt(CUnsignedInt.max))
        let result = Kelvin_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint8_tUsing0_0Expecting0() {
        let expected = K_f_to_u8(0.0)
        let result = UInt8(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint8_tUsing5_0Expecting5() {
        let expected = K_f_to_u8(5.0)
        let result = UInt8(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint8_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = K_f_to_u8(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint8_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = K_f_to_u8(kelvin_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_fUsing0Expecting0_0() {
        let expected = u8_to_K_f(0)
        let result = Kelvin_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_fUsing5Expecting5_0() {
        let expected = u8_to_K_f(5)
        let result = Kelvin_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_fUsingUInt8UInt8_minExpectingkelvin_fUInt8_min() {
        let expected = u8_to_K_f(UInt8(UInt8.min))
        let result = Kelvin_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_fUsingUInt8UInt8_maxExpectingkelvin_fUInt8_max() {
        let expected = u8_to_K_f(UInt8(UInt8.max))
        let result = Kelvin_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint16_tUsing0_0Expecting0() {
        let expected = K_f_to_u16(0.0)
        let result = UInt16(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint16_tUsing5_0Expecting5() {
        let expected = K_f_to_u16(5.0)
        let result = UInt16(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint16_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = K_f_to_u16(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint16_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = K_f_to_u16(kelvin_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_fUsing0Expecting0_0() {
        let expected = u16_to_K_f(0)
        let result = Kelvin_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_fUsing5Expecting5_0() {
        let expected = u16_to_K_f(5)
        let result = Kelvin_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_fUsingUInt16UInt16_minExpectingkelvin_fUInt16_min() {
        let expected = u16_to_K_f(UInt16(UInt16.min))
        let result = Kelvin_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_fUsingUInt16UInt16_maxExpectingkelvin_fUInt16_max() {
        let expected = u16_to_K_f(UInt16(UInt16.max))
        let result = Kelvin_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint32_tUsing0_0Expecting0() {
        let expected = K_f_to_u32(0.0)
        let result = UInt32(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint32_tUsing5_0Expecting5() {
        let expected = K_f_to_u32(5.0)
        let result = UInt32(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint32_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = K_f_to_u32(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint32_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = K_f_to_u32(kelvin_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_fUsing0Expecting0_0() {
        let expected = u32_to_K_f(0)
        let result = Kelvin_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_fUsing5Expecting5_0() {
        let expected = u32_to_K_f(5)
        let result = Kelvin_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_fUsingUInt32UInt32_minExpectingkelvin_fUInt32_min() {
        let expected = u32_to_K_f(UInt32(UInt32.min))
        let result = Kelvin_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_fUsingUInt32UInt32_maxExpectingkelvin_fUInt32_max() {
        let expected = u32_to_K_f(UInt32(UInt32.max))
        let result = Kelvin_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint64_tUsing0_0Expecting0() {
        let expected = K_f_to_u64(0.0)
        let result = UInt64(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint64_tUsing5_0Expecting5() {
        let expected = K_f_to_u64(5.0)
        let result = UInt64(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint64_tUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = K_f_to_u64(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTouint64_tUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = K_f_to_u64(kelvin_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_fUsing0Expecting0_0() {
        let expected = u64_to_K_f(0)
        let result = Kelvin_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_fUsing5Expecting5_0() {
        let expected = u64_to_K_f(5)
        let result = Kelvin_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_fUsingUInt64UInt64_minExpectingkelvin_fUInt64_min() {
        let expected = u64_to_K_f(UInt64(UInt64.min))
        let result = Kelvin_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_fUsingUInt64UInt64_maxExpectingkelvin_fUInt64_max() {
        let expected = u64_to_K_f(UInt64(UInt64.max))
        let result = Kelvin_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTofloatUsing0_0Expecting0_0() {
        let expected = K_f_to_f(0.0)
        let result = Float(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTofloatUsing5_0Expecting5_0() {
        let expected = K_f_to_f(5.0)
        let result = Float(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTofloatUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = K_f_to_f(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Float(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTofloatUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = K_f_to_f(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Float(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_fUsing0_0Expecting0_0() {
        let expected = f_to_K_f(0.0)
        let result = Kelvin_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_fUsing5_0Expecting5_0() {
        let expected = f_to_K_f(5.0)
        let result = Kelvin_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTodoubleUsing0_0Expecting0_0() {
        let expected = K_f_to_d(0.0)
        let result = Double(Kelvin_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTodoubleUsing5_0Expecting5_0() {
        let expected = K_f_to_d(5.0)
        let result = Double(Kelvin_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTodoubleUsingkelvin_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = K_f_to_d(kelvin_f(-Float.greatestFiniteMagnitude))
        let result = Double(Kelvin_f(kelvin_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_fTodoubleUsingkelvin_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = K_f_to_d(kelvin_f(Float.greatestFiniteMagnitude))
        let result = Double(Kelvin_f(kelvin_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_fUsing0_0Expecting0_0() {
        let expected = d_to_K_f(0.0)
        let result = Kelvin_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_fUsing5_0Expecting5_0() {
        let expected = d_to_K_f(5.0)
        let result = Kelvin_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingkelvin_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_K_f(Double(-Double.greatestFiniteMagnitude))
        let result = Kelvin_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingkelvin_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_K_f(Double(Double.greatestFiniteMagnitude))
        let result = Kelvin_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides kelvin_d unit tests.
final class Kelvin_dTests: XCTestCase {

    func testkelvin_dTocelsius_tUsing273_15Expecting0() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degC_t(273.15)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_tUsing274_0Expecting1() {
        let unit = Kelvin_d(274.0)
        let expected = K_d_to_degC_t(274.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_tUsing1_0ExpectingNeg272() {
        let unit = Kelvin_d(1.0)
        let expected = K_d_to_degC_t(1.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_tUsing5_0ExpectingNeg268() {
        let unit = Kelvin_d(5.0)
        let expected = K_d_to_degC_t(5.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_tUsing0_0ExpectingNeg273() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_degC_t(0.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_tUsingNeg300_0ExpectingNeg573() {
        let unit = Kelvin_d(-300.0)
        let expected = K_d_to_degC_t(-300.0)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_t = 1
        let categoryResult = Temperature(unit).celsius_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_tUsingNegDouble_greatestFiniteMagnitudeExpectingcelsius_tCInt_min() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_t(-Double.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTocelsius_tUsingDouble_greatestFiniteMagnitudeExpectingcelsius_tCInt_max() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_t(Double.greatestFiniteMagnitude)
        let result = Celsius_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_tUsing260_0Expectingfahrenheit_tDouble260_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(260.0)
        let expected = K_d_to_degF_t(260.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing2500_0Expectingfahrenheit_tDouble2500_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(2500.0)
        let expected = K_d_to_degF_t(2500.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing25000_0Expectingfahrenheit_tDouble25000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(25000.0)
        let expected = K_d_to_degF_t(25000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing250000_0Expectingfahrenheit_tDouble250000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(250000.0)
        let expected = K_d_to_degF_t(250000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing2500000_0Expectingfahrenheit_tDouble2500000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(2500000.0)
        let expected = K_d_to_degF_t(2500000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing273_15Expectingfahrenheit_tDouble273_15Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degF_t(273.15)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing300_0Expectingfahrenheit_tDouble300_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(300.0)
        let expected = K_d_to_degF_t(300.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing0_0Expectingfahrenheit_tDouble0_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_degF_t(0.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing20_0Expectingfahrenheit_tDouble20_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(20.0)
        let expected = K_d_to_degF_t(20.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing10_0Expectingfahrenheit_tDouble10_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(10.0)
        let expected = K_d_to_degF_t(10.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing15_0Expectingfahrenheit_tDouble15_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(15.0)
        let expected = K_d_to_degF_t(15.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing12_0Expectingfahrenheit_tDouble12_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(12.0)
        let expected = K_d_to_degF_t(12.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsing25_0Expectingfahrenheit_tDouble25_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(25.0)
        let expected = K_d_to_degF_t(25.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsingNeg250_0Expectingfahrenheit_tDoubleNeg250_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(-250.0)
        let expected = K_d_to_degF_t(-250.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsingNeg2500_0Expectingfahrenheit_tDoubleNeg2500_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(-2500.0)
        let expected = K_d_to_degF_t(-2500.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsingNeg25000_0Expectingfahrenheit_tDoubleNeg25000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(-25000.0)
        let expected = K_d_to_degF_t(-25000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsingNeg250000_0Expectingfahrenheit_tDoubleNeg250000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(-250000.0)
        let expected = K_d_to_degF_t(-250000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsingNeg2500000_0Expectingfahrenheit_tDoubleNeg2500000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(-2500000.0)
        let expected = K_d_to_degF_t(-2500000.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsingNeg40_0Expectingfahrenheit_tDoubleNeg40_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(-40.0)
        let expected = K_d_to_degF_t(-40.0)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_t = 1
        let categoryResult = Temperature(unit).fahrenheit_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_tUsingNegDouble_greatestFiniteMagnitudeExpectingCInt_min() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_t(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_tUsingDouble_greatestFiniteMagnitudeExpectingCInt_max() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_t(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTokelvin_tUsing0_0Expecting0() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_K_t(0.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingkelvin_tCInt_min() {
        let unit = Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude))
        let expected = K_d_to_K_t(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingkelvin_tCInt_max() {
        let unit = Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude))
        let expected = K_d_to_K_t(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_tUsing5_0Expecting5() {
        let unit = Kelvin_d(5.0)
        let expected = K_d_to_K_t(5.0)
        let result = Kelvin_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_t = 1
        let categoryResult = Temperature(unit).kelvin_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_uUsing273_15Expecting0() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degC_u(273.15)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_uUsing274_0Expecting1() {
        let unit = Kelvin_d(274.0)
        let expected = K_d_to_degC_u(274.0)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_u = 1
        let categoryResult = Temperature(unit).celsius_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_uUsingNegDouble_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_min() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_u(-Double.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTocelsius_uUsingDouble_greatestFiniteMagnitudeExpectingcelsius_uCUnsignedInt_max() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_u(Double.greatestFiniteMagnitude)
        let result = Celsius_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_uUsing260_0Expectingfahrenheit_uDouble260_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(260.0)
        let expected = K_d_to_degF_u(260.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsing2500_0Expectingfahrenheit_uDouble2500_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(2500.0)
        let expected = K_d_to_degF_u(2500.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsing25000_0Expectingfahrenheit_uDouble25000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(25000.0)
        let expected = K_d_to_degF_u(25000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsing250000_0Expectingfahrenheit_uDouble250000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(250000.0)
        let expected = K_d_to_degF_u(250000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsing2500000_0Expectingfahrenheit_uDouble2500000_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(2500000.0)
        let expected = K_d_to_degF_u(2500000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsing273_15Expectingfahrenheit_uDouble273_15Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degF_u(273.15)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsing300_0Expectingfahrenheit_uDouble300_0Neg273_151_832_0_rounded() {
        let unit = Kelvin_d(300.0)
        let expected = K_d_to_degF_u(300.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsingNeg2500_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_d(-2500.0)
        let expected = K_d_to_degF_u(-2500.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsingNeg25000_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_d(-25000.0)
        let expected = K_d_to_degF_u(-25000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsingNeg250000_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_d(-250000.0)
        let expected = K_d_to_degF_u(-250000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsingNeg2500000_0ExpectingCUnsignedInt_min() {
        let unit = Kelvin_d(-2500000.0)
        let expected = K_d_to_degF_u(-2500000.0)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_u = 1
        let categoryResult = Temperature(unit).fahrenheit_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_uUsingNegDouble_greatestFiniteMagnitudeExpectingCUnsignedInt_min() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_u(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_uUsingDouble_greatestFiniteMagnitudeExpectingCUnsignedInt_max() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_u(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTokelvin_uUsing0_0Expecting0() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_K_u(0.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_uUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_min() {
        let unit = Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude))
        let expected = K_d_to_K_u(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_uUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingkelvin_uCUnsignedInt_max() {
        let unit = Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude))
        let expected = K_d_to_K_u(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_uUsing5_0Expecting5() {
        let unit = Kelvin_d(5.0)
        let expected = K_d_to_K_u(5.0)
        let result = Kelvin_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_u = 1
        let categoryResult = Temperature(unit).kelvin_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_fUsing273_15Expecting0_0() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degC_f(273.15)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_fUsing274_0Expecting0_85() {
        let unit = Kelvin_d(274.0)
        let expected = K_d_to_degC_f(274.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_fUsing1_0ExpectingNeg272_15() {
        let unit = Kelvin_d(1.0)
        let expected = K_d_to_degC_f(1.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_fUsing5_0ExpectingNeg268_15() {
        let unit = Kelvin_d(5.0)
        let expected = K_d_to_degC_f(5.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_fUsing0_0ExpectingNeg273_15() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_degC_f(0.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_fUsingNeg300_0ExpectingNeg573_15() {
        let unit = Kelvin_d(-300.0)
        let expected = K_d_to_degC_f(-300.0)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_f = 1.0
        let categoryResult = Temperature(unit).celsius_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_fUsingNegDouble_greatestFiniteMagnitudeExpectingcelsius_fNegFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_f(-Double.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTocelsius_fUsingDouble_greatestFiniteMagnitudeExpectingcelsius_fFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_f(Double.greatestFiniteMagnitude)
        let result = Celsius_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_fUsing260_0Expectingfahrenheit_fDouble260_0Neg273_151_832_0() {
        let unit = Kelvin_d(260.0)
        let expected = K_d_to_degF_f(260.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing2500_0Expectingfahrenheit_fDouble2500_0Neg273_151_832_0() {
        let unit = Kelvin_d(2500.0)
        let expected = K_d_to_degF_f(2500.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing25000_0Expectingfahrenheit_fDouble25000_0Neg273_151_832_0() {
        let unit = Kelvin_d(25000.0)
        let expected = K_d_to_degF_f(25000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing250000_0Expectingfahrenheit_fDouble250000_0Neg273_151_832_0() {
        let unit = Kelvin_d(250000.0)
        let expected = K_d_to_degF_f(250000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing2500000_0Expectingfahrenheit_fDouble2500000_0Neg273_151_832_0() {
        let unit = Kelvin_d(2500000.0)
        let expected = K_d_to_degF_f(2500000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing273_15Expectingfahrenheit_fDouble273_15Neg273_151_832_0() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degF_f(273.15)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing300_0Expectingfahrenheit_fDouble300_0Neg273_151_832_0() {
        let unit = Kelvin_d(300.0)
        let expected = K_d_to_degF_f(300.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing0_0Expectingfahrenheit_fDouble0_0Neg273_151_832_0() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_degF_f(0.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing20_0Expectingfahrenheit_fDouble20_0Neg273_151_832_0() {
        let unit = Kelvin_d(20.0)
        let expected = K_d_to_degF_f(20.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing10_0Expectingfahrenheit_fDouble10_0Neg273_151_832_0() {
        let unit = Kelvin_d(10.0)
        let expected = K_d_to_degF_f(10.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing15_0Expectingfahrenheit_fDouble15_0Neg273_151_832_0() {
        let unit = Kelvin_d(15.0)
        let expected = K_d_to_degF_f(15.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing12_0Expectingfahrenheit_fDouble12_0Neg273_151_832_0() {
        let unit = Kelvin_d(12.0)
        let expected = K_d_to_degF_f(12.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsing25_0Expectingfahrenheit_fDouble25_0Neg273_151_832_0() {
        let unit = Kelvin_d(25.0)
        let expected = K_d_to_degF_f(25.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsingNeg250_0Expectingfahrenheit_fDoubleNeg250_0Neg273_151_832_0() {
        let unit = Kelvin_d(-250.0)
        let expected = K_d_to_degF_f(-250.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsingNeg2500_0Expectingfahrenheit_fDoubleNeg2500_0Neg273_151_832_0() {
        let unit = Kelvin_d(-2500.0)
        let expected = K_d_to_degF_f(-2500.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsingNeg25000_0Expectingfahrenheit_fDoubleNeg25000_0Neg273_151_832_0() {
        let unit = Kelvin_d(-25000.0)
        let expected = K_d_to_degF_f(-25000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsingNeg250000_0Expectingfahrenheit_fDoubleNeg250000_0Neg273_151_832_0() {
        let unit = Kelvin_d(-250000.0)
        let expected = K_d_to_degF_f(-250000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsingNeg2500000_0Expectingfahrenheit_fDoubleNeg2500000_0Neg273_151_832_0() {
        let unit = Kelvin_d(-2500000.0)
        let expected = K_d_to_degF_f(-2500000.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsingNeg40_0Expectingfahrenheit_fDoubleNeg40_0Neg273_151_832_0() {
        let unit = Kelvin_d(-40.0)
        let expected = K_d_to_degF_f(-40.0)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_f = 1.0
        let categoryResult = Temperature(unit).fahrenheit_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_fUsingNegDouble_greatestFiniteMagnitudeExpectingNegFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_f(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_fUsingDouble_greatestFiniteMagnitudeExpectingFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_f(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTokelvin_fUsing0_0Expecting0_0() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_K_f(0.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_fUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingkelvin_fNegFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude))
        let expected = K_d_to_K_f(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_fUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingkelvin_fFloat_greatestFiniteMagnitude() {
        let unit = Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude))
        let expected = K_d_to_K_f(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTokelvin_fUsing5_0Expecting5_0() {
        let unit = Kelvin_d(5.0)
        let expected = K_d_to_K_f(5.0)
        let result = Kelvin_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: kelvin_f = 1.0
        let categoryResult = Temperature(unit).kelvin_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_dUsing273_15Expecting0_0() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degC_d(273.15)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_dUsing274_0Expecting0_85() {
        let unit = Kelvin_d(274.0)
        let expected = K_d_to_degC_d(274.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_dUsing1_0ExpectingNeg272_15() {
        let unit = Kelvin_d(1.0)
        let expected = K_d_to_degC_d(1.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_dUsing5_0ExpectingNeg268_15() {
        let unit = Kelvin_d(5.0)
        let expected = K_d_to_degC_d(5.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_dUsing0_0ExpectingNeg273_15() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_degC_d(0.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_dUsingNeg300_0ExpectingNeg573_15() {
        let unit = Kelvin_d(-300.0)
        let expected = K_d_to_degC_d(-300.0)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: celsius_d = 1.0
        let categoryResult = Temperature(unit).celsius_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTocelsius_dUsingNegDouble_greatestFiniteMagnitudeExpectingcelsius_dNegDouble_greatestFiniteMagnitude() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_d(-Double.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTocelsius_dUsingDouble_greatestFiniteMagnitudeExpectingcelsius_dDouble_greatestFiniteMagnitudeNeg273_15() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degC_d(Double.greatestFiniteMagnitude)
        let result = Celsius_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_dUsing260_0Expectingfahrenheit_dDouble260_0Neg273_151_832_0() {
        let unit = Kelvin_d(260.0)
        let expected = K_d_to_degF_d(260.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing2500_0Expectingfahrenheit_dDouble2500_0Neg273_151_832_0() {
        let unit = Kelvin_d(2500.0)
        let expected = K_d_to_degF_d(2500.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing25000_0Expectingfahrenheit_dDouble25000_0Neg273_151_832_0() {
        let unit = Kelvin_d(25000.0)
        let expected = K_d_to_degF_d(25000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing250000_0Expectingfahrenheit_dDouble250000_0Neg273_151_832_0() {
        let unit = Kelvin_d(250000.0)
        let expected = K_d_to_degF_d(250000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing2500000_0Expectingfahrenheit_dDouble2500000_0Neg273_151_832_0() {
        let unit = Kelvin_d(2500000.0)
        let expected = K_d_to_degF_d(2500000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing273_15Expectingfahrenheit_dDouble273_15Neg273_151_832_0() {
        let unit = Kelvin_d(273.15)
        let expected = K_d_to_degF_d(273.15)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing300_0Expectingfahrenheit_dDouble300_0Neg273_151_832_0() {
        let unit = Kelvin_d(300.0)
        let expected = K_d_to_degF_d(300.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing0_0Expectingfahrenheit_dDouble0_0Neg273_151_832_0() {
        let unit = Kelvin_d(0.0)
        let expected = K_d_to_degF_d(0.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing20_0Expectingfahrenheit_dDouble20_0Neg273_151_832_0() {
        let unit = Kelvin_d(20.0)
        let expected = K_d_to_degF_d(20.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing10_0Expectingfahrenheit_dDouble10_0Neg273_151_832_0() {
        let unit = Kelvin_d(10.0)
        let expected = K_d_to_degF_d(10.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing15_0Expectingfahrenheit_dDouble15_0Neg273_151_832_0() {
        let unit = Kelvin_d(15.0)
        let expected = K_d_to_degF_d(15.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing12_0Expectingfahrenheit_dDouble12_0Neg273_151_832_0() {
        let unit = Kelvin_d(12.0)
        let expected = K_d_to_degF_d(12.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsing25_0Expectingfahrenheit_dDouble25_0Neg273_151_832_0() {
        let unit = Kelvin_d(25.0)
        let expected = K_d_to_degF_d(25.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsingNeg250_0Expectingfahrenheit_dDoubleNeg250_0Neg273_151_832_0() {
        let unit = Kelvin_d(-250.0)
        let expected = K_d_to_degF_d(-250.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsingNeg2500_0Expectingfahrenheit_dDoubleNeg2500_0Neg273_151_832_0() {
        let unit = Kelvin_d(-2500.0)
        let expected = K_d_to_degF_d(-2500.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsingNeg25000_0Expectingfahrenheit_dDoubleNeg25000_0Neg273_151_832_0() {
        let unit = Kelvin_d(-25000.0)
        let expected = K_d_to_degF_d(-25000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsingNeg250000_0Expectingfahrenheit_dDoubleNeg250000_0Neg273_151_832_0() {
        let unit = Kelvin_d(-250000.0)
        let expected = K_d_to_degF_d(-250000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsingNeg2500000_0Expectingfahrenheit_dDoubleNeg2500000_0Neg273_151_832_0() {
        let unit = Kelvin_d(-2500000.0)
        let expected = K_d_to_degF_d(-2500000.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsingNeg40_0Expectingfahrenheit_dDoubleNeg40_0Neg273_151_832_0() {
        let unit = Kelvin_d(-40.0)
        let expected = K_d_to_degF_d(-40.0)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: fahrenheit_d = 1.0
        let categoryResult = Temperature(unit).fahrenheit_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testkelvin_dTofahrenheit_dUsingNegDouble_greatestFiniteMagnitudeExpectingNegDouble_greatestFiniteMagnitude() {
        let unit = Kelvin_d(-Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_d(-Double.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofahrenheit_dUsingDouble_greatestFiniteMagnitudeExpectingDouble_greatestFiniteMagnitude() {
        let unit = Kelvin_d(Double.greatestFiniteMagnitude)
        let expected = K_d_to_degF_d(Double.greatestFiniteMagnitude)
        let result = Fahrenheit_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTointUsing0_0Expecting0() {
        let expected = K_d_to_i(0.0)
        let result = CInt(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTointUsing5_0Expecting5() {
        let expected = K_d_to_i(5.0)
        let result = CInt(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTointUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = K_d_to_i(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTointUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = K_d_to_i(kelvin_d(Double.greatestFiniteMagnitude))
        let result = CInt(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_dUsing0Expecting0_0() {
        let expected = i_to_K_d(0)
        let result = Kelvin_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_dUsing5Expecting5_0() {
        let expected = i_to_K_d(5)
        let result = Kelvin_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_dUsingCIntCInt_minExpectingkelvin_dCInt_min() {
        let expected = i_to_K_d(CInt(CInt.min))
        let result = Kelvin_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTokelvin_dUsingCIntCInt_maxExpectingkelvin_dCInt_max() {
        let expected = i_to_K_d(CInt(CInt.max))
        let result = Kelvin_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint8_tUsing0_0Expecting0() {
        let expected = K_d_to_i8(0.0)
        let result = Int8(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint8_tUsing5_0Expecting5() {
        let expected = K_d_to_i8(5.0)
        let result = Int8(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint8_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = K_d_to_i8(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint8_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = K_d_to_i8(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Int8(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_dUsing0Expecting0_0() {
        let expected = i8_to_K_d(0)
        let result = Kelvin_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_dUsing5Expecting5_0() {
        let expected = i8_to_K_d(5)
        let result = Kelvin_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_dUsingInt8Int8_minExpectingkelvin_dInt8_min() {
        let expected = i8_to_K_d(Int8(Int8.min))
        let result = Kelvin_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTokelvin_dUsingInt8Int8_maxExpectingkelvin_dInt8_max() {
        let expected = i8_to_K_d(Int8(Int8.max))
        let result = Kelvin_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint16_tUsing0_0Expecting0() {
        let expected = K_d_to_i16(0.0)
        let result = Int16(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint16_tUsing5_0Expecting5() {
        let expected = K_d_to_i16(5.0)
        let result = Int16(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint16_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = K_d_to_i16(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint16_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = K_d_to_i16(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Int16(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_dUsing0Expecting0_0() {
        let expected = i16_to_K_d(0)
        let result = Kelvin_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_dUsing5Expecting5_0() {
        let expected = i16_to_K_d(5)
        let result = Kelvin_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_dUsingInt16Int16_minExpectingkelvin_dInt16_min() {
        let expected = i16_to_K_d(Int16(Int16.min))
        let result = Kelvin_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTokelvin_dUsingInt16Int16_maxExpectingkelvin_dInt16_max() {
        let expected = i16_to_K_d(Int16(Int16.max))
        let result = Kelvin_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint32_tUsing0_0Expecting0() {
        let expected = K_d_to_i32(0.0)
        let result = Int32(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint32_tUsing5_0Expecting5() {
        let expected = K_d_to_i32(5.0)
        let result = Int32(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint32_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = K_d_to_i32(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint32_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = K_d_to_i32(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Int32(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_dUsing0Expecting0_0() {
        let expected = i32_to_K_d(0)
        let result = Kelvin_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_dUsing5Expecting5_0() {
        let expected = i32_to_K_d(5)
        let result = Kelvin_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_dUsingInt32Int32_minExpectingkelvin_dInt32_min() {
        let expected = i32_to_K_d(Int32(Int32.min))
        let result = Kelvin_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTokelvin_dUsingInt32Int32_maxExpectingkelvin_dInt32_max() {
        let expected = i32_to_K_d(Int32(Int32.max))
        let result = Kelvin_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint64_tUsing0_0Expecting0() {
        let expected = K_d_to_i64(0.0)
        let result = Int64(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint64_tUsing5_0Expecting5() {
        let expected = K_d_to_i64(5.0)
        let result = Int64(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint64_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = K_d_to_i64(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dToint64_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = K_d_to_i64(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Int64(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_dUsing0Expecting0_0() {
        let expected = i64_to_K_d(0)
        let result = Kelvin_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_dUsing5Expecting5_0() {
        let expected = i64_to_K_d(5)
        let result = Kelvin_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_dUsingInt64Int64_minExpectingkelvin_dInt64_min() {
        let expected = i64_to_K_d(Int64(Int64.min))
        let result = Kelvin_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTokelvin_dUsingInt64Int64_maxExpectingkelvin_dInt64_max() {
        let expected = i64_to_K_d(Int64(Int64.max))
        let result = Kelvin_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTounsignedintUsing0_0Expecting0() {
        let expected = K_d_to_u(0.0)
        let result = CUnsignedInt(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTounsignedintUsing5_0Expecting5() {
        let expected = K_d_to_u(5.0)
        let result = CUnsignedInt(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTounsignedintUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = K_d_to_u(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTounsignedintUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = K_d_to_u(kelvin_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_dUsing0Expecting0_0() {
        let expected = u_to_K_d(0)
        let result = Kelvin_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_dUsing5Expecting5_0() {
        let expected = u_to_K_d(5)
        let result = Kelvin_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_dUsingCUnsignedIntCUnsignedInt_minExpectingkelvin_dCUnsignedInt_min() {
        let expected = u_to_K_d(CUnsignedInt(CUnsignedInt.min))
        let result = Kelvin_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTokelvin_dUsingCUnsignedIntCUnsignedInt_maxExpectingkelvin_dCUnsignedInt_max() {
        let expected = u_to_K_d(CUnsignedInt(CUnsignedInt.max))
        let result = Kelvin_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint8_tUsing0_0Expecting0() {
        let expected = K_d_to_u8(0.0)
        let result = UInt8(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint8_tUsing5_0Expecting5() {
        let expected = K_d_to_u8(5.0)
        let result = UInt8(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint8_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = K_d_to_u8(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint8_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = K_d_to_u8(kelvin_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_dUsing0Expecting0_0() {
        let expected = u8_to_K_d(0)
        let result = Kelvin_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_dUsing5Expecting5_0() {
        let expected = u8_to_K_d(5)
        let result = Kelvin_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_dUsingUInt8UInt8_minExpectingkelvin_dUInt8_min() {
        let expected = u8_to_K_d(UInt8(UInt8.min))
        let result = Kelvin_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTokelvin_dUsingUInt8UInt8_maxExpectingkelvin_dUInt8_max() {
        let expected = u8_to_K_d(UInt8(UInt8.max))
        let result = Kelvin_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint16_tUsing0_0Expecting0() {
        let expected = K_d_to_u16(0.0)
        let result = UInt16(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint16_tUsing5_0Expecting5() {
        let expected = K_d_to_u16(5.0)
        let result = UInt16(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint16_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = K_d_to_u16(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint16_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = K_d_to_u16(kelvin_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_dUsing0Expecting0_0() {
        let expected = u16_to_K_d(0)
        let result = Kelvin_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_dUsing5Expecting5_0() {
        let expected = u16_to_K_d(5)
        let result = Kelvin_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_dUsingUInt16UInt16_minExpectingkelvin_dUInt16_min() {
        let expected = u16_to_K_d(UInt16(UInt16.min))
        let result = Kelvin_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTokelvin_dUsingUInt16UInt16_maxExpectingkelvin_dUInt16_max() {
        let expected = u16_to_K_d(UInt16(UInt16.max))
        let result = Kelvin_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint32_tUsing0_0Expecting0() {
        let expected = K_d_to_u32(0.0)
        let result = UInt32(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint32_tUsing5_0Expecting5() {
        let expected = K_d_to_u32(5.0)
        let result = UInt32(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint32_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = K_d_to_u32(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint32_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = K_d_to_u32(kelvin_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_dUsing0Expecting0_0() {
        let expected = u32_to_K_d(0)
        let result = Kelvin_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_dUsing5Expecting5_0() {
        let expected = u32_to_K_d(5)
        let result = Kelvin_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_dUsingUInt32UInt32_minExpectingkelvin_dUInt32_min() {
        let expected = u32_to_K_d(UInt32(UInt32.min))
        let result = Kelvin_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTokelvin_dUsingUInt32UInt32_maxExpectingkelvin_dUInt32_max() {
        let expected = u32_to_K_d(UInt32(UInt32.max))
        let result = Kelvin_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint64_tUsing0_0Expecting0() {
        let expected = K_d_to_u64(0.0)
        let result = UInt64(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint64_tUsing5_0Expecting5() {
        let expected = K_d_to_u64(5.0)
        let result = UInt64(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint64_tUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = K_d_to_u64(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTouint64_tUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = K_d_to_u64(kelvin_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_dUsing0Expecting0_0() {
        let expected = u64_to_K_d(0)
        let result = Kelvin_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_dUsing5Expecting5_0() {
        let expected = u64_to_K_d(5)
        let result = Kelvin_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_dUsingUInt64UInt64_minExpectingkelvin_dUInt64_min() {
        let expected = u64_to_K_d(UInt64(UInt64.min))
        let result = Kelvin_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTokelvin_dUsingUInt64UInt64_maxExpectingkelvin_dUInt64_max() {
        let expected = u64_to_K_d(UInt64(UInt64.max))
        let result = Kelvin_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofloatUsing0_0Expecting0_0() {
        let expected = K_d_to_f(0.0)
        let result = Float(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofloatUsing5_0Expecting5_0() {
        let expected = K_d_to_f(5.0)
        let result = Float(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofloatUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = K_d_to_f(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Float(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTofloatUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = K_d_to_f(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Float(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_dUsing0_0Expecting0_0() {
        let expected = f_to_K_d(0.0)
        let result = Kelvin_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_dUsing5_0Expecting5_0() {
        let expected = f_to_K_d(5.0)
        let result = Kelvin_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingkelvin_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_K_d(Float(-Float.greatestFiniteMagnitude))
        let result = Kelvin_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTokelvin_dUsingFloatFloat_greatestFiniteMagnitudeExpectingkelvin_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_K_d(Float(Float.greatestFiniteMagnitude))
        let result = Kelvin_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTodoubleUsing0_0Expecting0_0() {
        let expected = K_d_to_d(0.0)
        let result = Double(Kelvin_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTodoubleUsing5_0Expecting5_0() {
        let expected = K_d_to_d(5.0)
        let result = Double(Kelvin_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTodoubleUsingkelvin_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = K_d_to_d(kelvin_d(-Double.greatestFiniteMagnitude))
        let result = Double(Kelvin_d(kelvin_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testkelvin_dTodoubleUsingkelvin_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = K_d_to_d(kelvin_d(Double.greatestFiniteMagnitude))
        let result = Double(Kelvin_d(kelvin_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_dUsing0_0Expecting0_0() {
        let expected = d_to_K_d(0.0)
        let result = Kelvin_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTokelvin_dUsing5_0Expecting5_0() {
        let expected = d_to_K_d(5.0)
        let result = Kelvin_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}
