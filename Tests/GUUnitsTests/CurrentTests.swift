/*
* CurrentTests.swift
* GUUnitsTests
*
* Created by Callum McColl on 05/06/2019.
* Copyright Â© 2019 Callum McColl. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above
*    copyright notice, this list of conditions and the following
*    disclaimer in the documentation and/or other materials
*    provided with the distribution.
*
* 3. All advertising materials mentioning features or use of this
*    software must display the following acknowledgement:
*
*        This product includes software developed by Callum McColl.
*
* 4. Neither the name of the author nor the names of contributors
*    may be used to endorse or promote products derived from this
*    software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* -----------------------------------------------------------------------
* This program is free software; you can redistribute it and/or
* modify it under the above terms or under the terms of the GNU
* General Public License as published by the Free Software Foundation;
* either version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see http://www.gnu.org/licenses/
* or write to the Free Software Foundation, Inc., 51 Franklin Street,
* Fifth Floor, Boston, MA  02110-1301, USA.
*
*/

import CGUUnits
@testable import GUUnits
import XCTest

final class MicroamperesTypeTests: XCTestCase {

    func testMicroamperes_tEquality() {
        XCTAssertEqual(Microamperes_t(5), Microamperes_t(5))
    }

    func testMicroamperes_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microamperes_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microamperes_t.self, from: try encoder.encode(original))
        )
    }

    func testMicroamperes_tSelfInit() {
        let expected = Microamperes_t(15)
        XCTAssertEqual(expected, Microamperes_t(expected))
    }

    func testMicroamperes_tSelfExactlyInit() {
        let expected = Microamperes_t(15)
        XCTAssertEqual(expected, Microamperes_t(exactly: expected))
    }

    func testMicroamperes_tComparable() {
        let lhs = Microamperes_t(1)
        let rhs = Microamperes_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroamperes_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Microamperes_t(5).magnitude, expected)
    }

    func testMicroamperes_tTruncatingInit() {
        let expected = Microamperes_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Microamperes_t(truncatingIfNeeded: expected), expected)
    }

    func testMicroamperes_tClampingInit() {
        let expected = Microamperes_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Microamperes_t(clamping: expected), expected)
    }

    func testMicroamperes_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Microamperes_t(5).bitWidth, expected)
    }

    func testMicroamperes_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Microamperes_t(5).leadingZeroBitCount, expected)
    }

    func testMicroamperes_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Microamperes_t(5).nonzeroBitCount, expected)
    }

    func testMicroamperes_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Microamperes_t(expected), Microamperes_t(integerLiteral: CInt.max))
    }

    func testMicroamperes_tTruncatingBits() {
        let expected = Microamperes_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Microamperes_t(_truncatingBits: UInt.max))
    }

    func testMicroamperes_tAddition() {
        let expected = Microamperes_t(CInt(5) + CInt(3))
        XCTAssertEqual(Microamperes_t(5) + Microamperes_t(3), expected)
    }

    func testMicroamperes_tSubtraction() {
        let expected = Microamperes_t(CInt(5) - CInt(3))
        XCTAssertEqual(Microamperes_t(5) - Microamperes_t(3), expected)
    }

    func testMicroamperes_tMultiplication() {
        let expected = Microamperes_t(CInt(5) * CInt(3))
        XCTAssertEqual(Microamperes_t(5) * Microamperes_t(3), expected)
    }

    func testMicroamperes_tDivision() {
        let expected = Microamperes_t(CInt(6) / CInt(3))
        XCTAssertEqual(Microamperes_t(6) / Microamperes_t(3), expected)
    }

    func testMicroamperes_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Microamperes_t(rawOriginal)
        let result = original.addingReportingOverflow(Microamperes_t(1))
        XCTAssertEqual(result.0, Microamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroamperes_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Microamperes_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Microamperes_t(2))
        XCTAssertEqual(result.0, Microamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroamperes_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Microamperes_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Microamperes_t(1))
        XCTAssertEqual(result.0, Microamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroamperes_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Microamperes_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Microamperes_t(CInt.max))
        XCTAssertEqual(result.0, Microamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroamperes_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Microamperes_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Microamperes_t(CInt.max))
        XCTAssertEqual(result.0, Microamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroamperes_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Microamperes_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMicroamperes_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Microamperes_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Microamperes_t(original))
    }

    func testMicroamperes_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Microamperes_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Microamperes_t(original))
    }

    func testMicroamperes_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Microamperes_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Microamperes_t(original))
    }

    func testMicroamperes_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Microamperes_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Microamperes_t(original))
    }

    func testMicroamperes_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Microamperes_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Microamperes_t(original))
    }

    func testMicroamperes_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Microamperes_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Microamperes_t(original))
    }

    func testMicroamperes_tMod() {
        let original = CInt(4)
        let expected = Microamperes_t(original % 2)
        XCTAssertEqual(Microamperes_t(original) % 2, expected)
    }

    func testMicroamperes_uEquality() {
        XCTAssertEqual(Microamperes_u(5), Microamperes_u(5))
    }

    func testMicroamperes_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microamperes_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microamperes_u.self, from: try encoder.encode(original))
        )
    }

    func testMicroamperes_uSelfInit() {
        let expected = Microamperes_u(15)
        XCTAssertEqual(expected, Microamperes_u(expected))
    }

    func testMicroamperes_uSelfExactlyInit() {
        let expected = Microamperes_u(15)
        XCTAssertEqual(expected, Microamperes_u(exactly: expected))
    }

    func testMicroamperes_uComparable() {
        let lhs = Microamperes_u(1)
        let rhs = Microamperes_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroamperes_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Microamperes_u(5).magnitude, expected)
    }

    func testMicroamperes_uTruncatingInit() {
        let expected = Microamperes_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Microamperes_u(truncatingIfNeeded: expected), expected)
    }

    func testMicroamperes_uClampingInit() {
        let expected = Microamperes_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Microamperes_u(clamping: expected), expected)
    }

    func testMicroamperes_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Microamperes_u(5).bitWidth, expected)
    }

    func testMicroamperes_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Microamperes_u(5).leadingZeroBitCount, expected)
    }

    func testMicroamperes_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Microamperes_u(5).nonzeroBitCount, expected)
    }

    func testMicroamperes_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Microamperes_u(expected), Microamperes_u(integerLiteral: CUnsignedInt.max))
    }

    func testMicroamperes_uTruncatingBits() {
        let expected = Microamperes_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Microamperes_u(_truncatingBits: UInt.max))
    }

    func testMicroamperes_uAddition() {
        let expected = Microamperes_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Microamperes_u(5) + Microamperes_u(3), expected)
    }

    func testMicroamperes_uSubtraction() {
        let expected = Microamperes_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Microamperes_u(5) - Microamperes_u(3), expected)
    }

    func testMicroamperes_uMultiplication() {
        let expected = Microamperes_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Microamperes_u(5) * Microamperes_u(3), expected)
    }

    func testMicroamperes_uDivision() {
        let expected = Microamperes_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Microamperes_u(6) / Microamperes_u(3), expected)
    }

    func testMicroamperes_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Microamperes_u(rawOriginal)
        let result = original.addingReportingOverflow(Microamperes_u(1))
        XCTAssertEqual(result.0, Microamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroamperes_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Microamperes_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Microamperes_u(2))
        XCTAssertEqual(result.0, Microamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroamperes_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Microamperes_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Microamperes_u(1))
        XCTAssertEqual(result.0, Microamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroamperes_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Microamperes_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Microamperes_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Microamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroamperes_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Microamperes_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Microamperes_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Microamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroamperes_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Microamperes_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMicroamperes_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Microamperes_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Microamperes_u(original))
    }

    func testMicroamperes_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Microamperes_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Microamperes_u(original))
    }

    func testMicroamperes_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Microamperes_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Microamperes_u(original))
    }

    func testMicroamperes_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Microamperes_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Microamperes_u(original))
    }

    func testMicroamperes_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Microamperes_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Microamperes_u(original))
    }

    func testMicroamperes_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Microamperes_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Microamperes_u(original))
    }

    func testMicroamperes_uMod() {
        let original = CUnsignedInt(4)
        let expected = Microamperes_u(original % 2)
        XCTAssertEqual(Microamperes_u(original) % 2, expected)
    }

    func testMicroamperes_fEquality() {
        XCTAssertEqual(Microamperes_f(5), Microamperes_f(5))
    }

    func testMicroamperes_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microamperes_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microamperes_f.self, from: try encoder.encode(original))
        )
    }

    func testMicroamperes_fSelfInit() {
        let expected = Microamperes_f(15)
        XCTAssertEqual(expected, Microamperes_f(expected))
    }

    func testMicroamperes_fSelfExactlyInit() {
        let expected = Microamperes_f(15)
        XCTAssertEqual(expected, Microamperes_f(exactly: expected))
    }

    func testMicroamperes_fComparable() {
        let lhs = Microamperes_f(1)
        let rhs = Microamperes_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroamperes_fRadix() {
        XCTAssertEqual(Microamperes_f.radix, Float.radix)
    }

    func testMicroamperes_fExponentBitCount() {
        XCTAssertEqual(Microamperes_f.exponentBitCount, Float.exponentBitCount)
    }

    func testMicroamperes_fSignificandBitCount() {
        XCTAssertEqual(Microamperes_f.significandBitCount, Float.significandBitCount)
    }

    func testMicroamperes_fMagnitude() {
        let expected = Microamperes_f(Float(5).magnitude)
        XCTAssertEqual(Microamperes_f(5).magnitude, expected)
    }

    func testMicroamperes_fExactlyInit() {
        let expected = Microamperes_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Microamperes_f(exactly: Int(5)), expected)
    }

    func testMicroamperes_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Microamperes_f(param).isTotallyOrdered(belowOrEqualTo: Microamperes_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMicroamperes_fBinade() {
        let raw = Float(5)
        let expected = Microamperes_f(raw.binade)
        XCTAssertEqual(Microamperes_f(raw).binade, expected)
    }

    func testMicroamperes_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Microamperes_f(raw).significandWidth, raw.significandWidth)
    }

    func testMicroamperes_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Microamperes_f(raw).debugDescription, raw.debugDescription)
    }

    func testMicroamperes_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Microamperes_f("5.0"), Microamperes_f(raw))
    }

    func testMicroamperes_fStaticVars() {
        XCTAssertEqual(Microamperes_f.nan.isNaN, Microamperes_f(Float.nan).isNaN)
        XCTAssertEqual(
            Microamperes_f.signalingNaN.isSignalingNaN,
            Microamperes_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Microamperes_f.infinity, Microamperes_f(Float.infinity))
        XCTAssertEqual(Microamperes_f.greatestFiniteMagnitude, Microamperes_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Microamperes_f.pi, Microamperes_f(Float.pi))
        XCTAssertEqual(Microamperes_f.leastNormalMagnitude, Microamperes_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Microamperes_f.leastNonzeroMagnitude, Microamperes_f(Float.leastNonzeroMagnitude))
    }

    func testMicroamperes_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Microamperes_f(raw).ulp, Microamperes_f(raw.ulp))
    }

    func testMicroamperes_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Microamperes_f(raw).sign, raw.sign)
    }

    func testMicroamperes_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Microamperes_f(raw).significand, Microamperes_f(raw.significand))
    }

    func testMicroamperes_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Microamperes_f(raw).nextUp, Microamperes_f(raw.nextUp))
    }

    func testMicroamperes_fVars() {
        XCTAssertEqual(Microamperes_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Microamperes_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Microamperes_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Microamperes_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Microamperes_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Microamperes_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Microamperes_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Microamperes_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Microamperes_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Microamperes_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Microamperes_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Microamperes_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Microamperes_f(5).description, Float(5).description)
        XCTAssertEqual(Microamperes_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Microamperes_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Microamperes_f(5).exponent, Float(5).exponent)
    }

    func testMicroamperes_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Microamperes_f(Float(4))
        result.formRemainder(dividingBy: Microamperes_f(denominator))
        XCTAssertEqual(result, Microamperes_f(original))
    }

    func testMicroamperes_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Microamperes_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Microamperes_f(denominator))
        XCTAssertEqual(result, Microamperes_f(original))
    }

    func testMicroamperes_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Microamperes_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Microamperes_f(original))
    }

    func testMicroamperes_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Microamperes_f(Float(4))
        result.addProduct(Microamperes_f(lhs), Microamperes_f(rhs))
        XCTAssertEqual(result, Microamperes_f(original))
    }

    func testMicroamperes_fIsEqual() {
        let this = Microamperes_f(5)
        let other = Microamperes_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMicroamperes_fIsLess() {
        let this = Microamperes_f(5)
        let other = Microamperes_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMicroamperes_fIsLessThanOrEqual() {
        let this = Microamperes_f(5)
        let other = Microamperes_f(6)
        let other2 = Microamperes_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMicroamperes_fOperations() {
        let lhs = Microamperes_f(6)
        let rhs = Microamperes_f(3)
        XCTAssertEqual(lhs + rhs, Microamperes_f(9))
        XCTAssertEqual(lhs - rhs, Microamperes_f(3))
        XCTAssertEqual(lhs * rhs, Microamperes_f(18))
        XCTAssertEqual(lhs / rhs, Microamperes_f(2))
    }

    func testMicroamperes_fTimesEqual() {
        var this = Microamperes_f(3)
        this *= Microamperes_f(4)
        XCTAssertEqual(this, Microamperes_f(12))
    }

    func testMicroamperes_fDivideEqual() {
        var this = Microamperes_f(6)
        this /= Microamperes_f(3)
        XCTAssertEqual(this, Microamperes_f(2))
    }

    func testMicroamperes_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Microamperes_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Microamperes_f(expected))
    }

    func testMicroamperes_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Microamperes_f(original).distance(to: Microamperes_f(other)), expected)
    }

    func testMicroamperes_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Microamperes_f(original).advanced(by: 3), Microamperes_f(expected))
    }

    func testMicroamperes_dEquality() {
        XCTAssertEqual(Microamperes_d(5), Microamperes_d(5))
    }

    func testMicroamperes_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microamperes_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microamperes_d.self, from: try encoder.encode(original))
        )
    }

    func testMicroamperes_dSelfInit() {
        let expected = Microamperes_d(15)
        XCTAssertEqual(expected, Microamperes_d(expected))
    }

    func testMicroamperes_dSelfExactlyInit() {
        let expected = Microamperes_d(15)
        XCTAssertEqual(expected, Microamperes_d(exactly: expected))
    }

    func testMicroamperes_dComparable() {
        let lhs = Microamperes_d(1)
        let rhs = Microamperes_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroamperes_dRadix() {
        XCTAssertEqual(Microamperes_d.radix, Double.radix)
    }

    func testMicroamperes_dExponentBitCount() {
        XCTAssertEqual(Microamperes_d.exponentBitCount, Double.exponentBitCount)
    }

    func testMicroamperes_dSignificandBitCount() {
        XCTAssertEqual(Microamperes_d.significandBitCount, Double.significandBitCount)
    }

    func testMicroamperes_dMagnitude() {
        let expected = Microamperes_d(Double(5).magnitude)
        XCTAssertEqual(Microamperes_d(5).magnitude, expected)
    }

    func testMicroamperes_dExactlyInit() {
        let expected = Microamperes_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Microamperes_d(exactly: Int(5)), expected)
    }

    func testMicroamperes_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Microamperes_d(param).isTotallyOrdered(belowOrEqualTo: Microamperes_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMicroamperes_dBinade() {
        let raw = Double(5)
        let expected = Microamperes_d(raw.binade)
        XCTAssertEqual(Microamperes_d(raw).binade, expected)
    }

    func testMicroamperes_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Microamperes_d(raw).significandWidth, raw.significandWidth)
    }

    func testMicroamperes_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Microamperes_d(raw).debugDescription, raw.debugDescription)
    }

    func testMicroamperes_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Microamperes_d("5.0"), Microamperes_d(raw))
    }

    func testMicroamperes_dStaticVars() {
        XCTAssertEqual(Microamperes_d.nan.isNaN, Microamperes_d(Double.nan).isNaN)
        XCTAssertEqual(
            Microamperes_d.signalingNaN.isSignalingNaN,
            Microamperes_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Microamperes_d.infinity, Microamperes_d(Double.infinity))
        XCTAssertEqual(Microamperes_d.greatestFiniteMagnitude, Microamperes_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Microamperes_d.pi, Microamperes_d(Double.pi))
        XCTAssertEqual(Microamperes_d.leastNormalMagnitude, Microamperes_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Microamperes_d.leastNonzeroMagnitude, Microamperes_d(Double.leastNonzeroMagnitude))
    }

    func testMicroamperes_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Microamperes_d(raw).ulp, Microamperes_d(raw.ulp))
    }

    func testMicroamperes_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Microamperes_d(raw).sign, raw.sign)
    }

    func testMicroamperes_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Microamperes_d(raw).significand, Microamperes_d(raw.significand))
    }

    func testMicroamperes_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Microamperes_d(raw).nextUp, Microamperes_d(raw.nextUp))
    }

    func testMicroamperes_dVars() {
        XCTAssertEqual(Microamperes_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Microamperes_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Microamperes_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Microamperes_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Microamperes_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Microamperes_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Microamperes_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Microamperes_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Microamperes_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Microamperes_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Microamperes_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Microamperes_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Microamperes_d(5).description, Double(5).description)
        XCTAssertEqual(Microamperes_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Microamperes_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Microamperes_d(5).exponent, Double(5).exponent)
    }

    func testMicroamperes_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Microamperes_d(Double(4))
        result.formRemainder(dividingBy: Microamperes_d(denominator))
        XCTAssertEqual(result, Microamperes_d(original))
    }

    func testMicroamperes_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Microamperes_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Microamperes_d(denominator))
        XCTAssertEqual(result, Microamperes_d(original))
    }

    func testMicroamperes_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Microamperes_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Microamperes_d(original))
    }

    func testMicroamperes_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Microamperes_d(Double(4))
        result.addProduct(Microamperes_d(lhs), Microamperes_d(rhs))
        XCTAssertEqual(result, Microamperes_d(original))
    }

    func testMicroamperes_dIsEqual() {
        let this = Microamperes_d(5)
        let other = Microamperes_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMicroamperes_dIsLess() {
        let this = Microamperes_d(5)
        let other = Microamperes_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMicroamperes_dIsLessThanOrEqual() {
        let this = Microamperes_d(5)
        let other = Microamperes_d(6)
        let other2 = Microamperes_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMicroamperes_dOperations() {
        let lhs = Microamperes_d(6)
        let rhs = Microamperes_d(3)
        XCTAssertEqual(lhs + rhs, Microamperes_d(9))
        XCTAssertEqual(lhs - rhs, Microamperes_d(3))
        XCTAssertEqual(lhs * rhs, Microamperes_d(18))
        XCTAssertEqual(lhs / rhs, Microamperes_d(2))
    }

    func testMicroamperes_dTimesEqual() {
        var this = Microamperes_d(3)
        this *= Microamperes_d(4)
        XCTAssertEqual(this, Microamperes_d(12))
    }

    func testMicroamperes_dDivideEqual() {
        var this = Microamperes_d(6)
        this /= Microamperes_d(3)
        XCTAssertEqual(this, Microamperes_d(2))
    }

    func testMicroamperes_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Microamperes_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Microamperes_d(expected))
    }

    func testMicroamperes_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Microamperes_d(original).distance(to: Microamperes_d(other)), expected)
    }

    func testMicroamperes_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Microamperes_d(original).advanced(by: 3), Microamperes_d(expected))
    }

}

final class MilliamperesTypeTests: XCTestCase {

    func testMilliamperes_tEquality() {
        XCTAssertEqual(Milliamperes_t(5), Milliamperes_t(5))
    }

    func testMilliamperes_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliamperes_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliamperes_t.self, from: try encoder.encode(original))
        )
    }

    func testMilliamperes_tSelfInit() {
        let expected = Milliamperes_t(15)
        XCTAssertEqual(expected, Milliamperes_t(expected))
    }

    func testMilliamperes_tSelfExactlyInit() {
        let expected = Milliamperes_t(15)
        XCTAssertEqual(expected, Milliamperes_t(exactly: expected))
    }

    func testMilliamperes_tComparable() {
        let lhs = Milliamperes_t(1)
        let rhs = Milliamperes_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliamperes_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Milliamperes_t(5).magnitude, expected)
    }

    func testMilliamperes_tTruncatingInit() {
        let expected = Milliamperes_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Milliamperes_t(truncatingIfNeeded: expected), expected)
    }

    func testMilliamperes_tClampingInit() {
        let expected = Milliamperes_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Milliamperes_t(clamping: expected), expected)
    }

    func testMilliamperes_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Milliamperes_t(5).bitWidth, expected)
    }

    func testMilliamperes_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Milliamperes_t(5).leadingZeroBitCount, expected)
    }

    func testMilliamperes_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Milliamperes_t(5).nonzeroBitCount, expected)
    }

    func testMilliamperes_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Milliamperes_t(expected), Milliamperes_t(integerLiteral: CInt.max))
    }

    func testMilliamperes_tTruncatingBits() {
        let expected = Milliamperes_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Milliamperes_t(_truncatingBits: UInt.max))
    }

    func testMilliamperes_tAddition() {
        let expected = Milliamperes_t(CInt(5) + CInt(3))
        XCTAssertEqual(Milliamperes_t(5) + Milliamperes_t(3), expected)
    }

    func testMilliamperes_tSubtraction() {
        let expected = Milliamperes_t(CInt(5) - CInt(3))
        XCTAssertEqual(Milliamperes_t(5) - Milliamperes_t(3), expected)
    }

    func testMilliamperes_tMultiplication() {
        let expected = Milliamperes_t(CInt(5) * CInt(3))
        XCTAssertEqual(Milliamperes_t(5) * Milliamperes_t(3), expected)
    }

    func testMilliamperes_tDivision() {
        let expected = Milliamperes_t(CInt(6) / CInt(3))
        XCTAssertEqual(Milliamperes_t(6) / Milliamperes_t(3), expected)
    }

    func testMilliamperes_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Milliamperes_t(rawOriginal)
        let result = original.addingReportingOverflow(Milliamperes_t(1))
        XCTAssertEqual(result.0, Milliamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliamperes_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Milliamperes_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Milliamperes_t(2))
        XCTAssertEqual(result.0, Milliamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliamperes_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Milliamperes_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Milliamperes_t(1))
        XCTAssertEqual(result.0, Milliamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliamperes_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Milliamperes_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Milliamperes_t(CInt.max))
        XCTAssertEqual(result.0, Milliamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliamperes_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Milliamperes_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Milliamperes_t(CInt.max))
        XCTAssertEqual(result.0, Milliamperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliamperes_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Milliamperes_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMilliamperes_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Milliamperes_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Milliamperes_t(original))
    }

    func testMilliamperes_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Milliamperes_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Milliamperes_t(original))
    }

    func testMilliamperes_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Milliamperes_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Milliamperes_t(original))
    }

    func testMilliamperes_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Milliamperes_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Milliamperes_t(original))
    }

    func testMilliamperes_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Milliamperes_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Milliamperes_t(original))
    }

    func testMilliamperes_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Milliamperes_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Milliamperes_t(original))
    }

    func testMilliamperes_tMod() {
        let original = CInt(4)
        let expected = Milliamperes_t(original % 2)
        XCTAssertEqual(Milliamperes_t(original) % 2, expected)
    }

    func testMilliamperes_uEquality() {
        XCTAssertEqual(Milliamperes_u(5), Milliamperes_u(5))
    }

    func testMilliamperes_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliamperes_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliamperes_u.self, from: try encoder.encode(original))
        )
    }

    func testMilliamperes_uSelfInit() {
        let expected = Milliamperes_u(15)
        XCTAssertEqual(expected, Milliamperes_u(expected))
    }

    func testMilliamperes_uSelfExactlyInit() {
        let expected = Milliamperes_u(15)
        XCTAssertEqual(expected, Milliamperes_u(exactly: expected))
    }

    func testMilliamperes_uComparable() {
        let lhs = Milliamperes_u(1)
        let rhs = Milliamperes_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliamperes_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Milliamperes_u(5).magnitude, expected)
    }

    func testMilliamperes_uTruncatingInit() {
        let expected = Milliamperes_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Milliamperes_u(truncatingIfNeeded: expected), expected)
    }

    func testMilliamperes_uClampingInit() {
        let expected = Milliamperes_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Milliamperes_u(clamping: expected), expected)
    }

    func testMilliamperes_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Milliamperes_u(5).bitWidth, expected)
    }

    func testMilliamperes_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Milliamperes_u(5).leadingZeroBitCount, expected)
    }

    func testMilliamperes_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Milliamperes_u(5).nonzeroBitCount, expected)
    }

    func testMilliamperes_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Milliamperes_u(expected), Milliamperes_u(integerLiteral: CUnsignedInt.max))
    }

    func testMilliamperes_uTruncatingBits() {
        let expected = Milliamperes_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Milliamperes_u(_truncatingBits: UInt.max))
    }

    func testMilliamperes_uAddition() {
        let expected = Milliamperes_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Milliamperes_u(5) + Milliamperes_u(3), expected)
    }

    func testMilliamperes_uSubtraction() {
        let expected = Milliamperes_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Milliamperes_u(5) - Milliamperes_u(3), expected)
    }

    func testMilliamperes_uMultiplication() {
        let expected = Milliamperes_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Milliamperes_u(5) * Milliamperes_u(3), expected)
    }

    func testMilliamperes_uDivision() {
        let expected = Milliamperes_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Milliamperes_u(6) / Milliamperes_u(3), expected)
    }

    func testMilliamperes_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Milliamperes_u(rawOriginal)
        let result = original.addingReportingOverflow(Milliamperes_u(1))
        XCTAssertEqual(result.0, Milliamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliamperes_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Milliamperes_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Milliamperes_u(2))
        XCTAssertEqual(result.0, Milliamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliamperes_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Milliamperes_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Milliamperes_u(1))
        XCTAssertEqual(result.0, Milliamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliamperes_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Milliamperes_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Milliamperes_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Milliamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliamperes_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Milliamperes_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Milliamperes_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Milliamperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliamperes_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Milliamperes_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMilliamperes_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Milliamperes_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Milliamperes_u(original))
    }

    func testMilliamperes_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Milliamperes_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Milliamperes_u(original))
    }

    func testMilliamperes_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Milliamperes_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Milliamperes_u(original))
    }

    func testMilliamperes_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Milliamperes_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Milliamperes_u(original))
    }

    func testMilliamperes_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Milliamperes_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Milliamperes_u(original))
    }

    func testMilliamperes_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Milliamperes_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Milliamperes_u(original))
    }

    func testMilliamperes_uMod() {
        let original = CUnsignedInt(4)
        let expected = Milliamperes_u(original % 2)
        XCTAssertEqual(Milliamperes_u(original) % 2, expected)
    }

    func testMilliamperes_fEquality() {
        XCTAssertEqual(Milliamperes_f(5), Milliamperes_f(5))
    }

    func testMilliamperes_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliamperes_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliamperes_f.self, from: try encoder.encode(original))
        )
    }

    func testMilliamperes_fSelfInit() {
        let expected = Milliamperes_f(15)
        XCTAssertEqual(expected, Milliamperes_f(expected))
    }

    func testMilliamperes_fSelfExactlyInit() {
        let expected = Milliamperes_f(15)
        XCTAssertEqual(expected, Milliamperes_f(exactly: expected))
    }

    func testMilliamperes_fComparable() {
        let lhs = Milliamperes_f(1)
        let rhs = Milliamperes_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliamperes_fRadix() {
        XCTAssertEqual(Milliamperes_f.radix, Float.radix)
    }

    func testMilliamperes_fExponentBitCount() {
        XCTAssertEqual(Milliamperes_f.exponentBitCount, Float.exponentBitCount)
    }

    func testMilliamperes_fSignificandBitCount() {
        XCTAssertEqual(Milliamperes_f.significandBitCount, Float.significandBitCount)
    }

    func testMilliamperes_fMagnitude() {
        let expected = Milliamperes_f(Float(5).magnitude)
        XCTAssertEqual(Milliamperes_f(5).magnitude, expected)
    }

    func testMilliamperes_fExactlyInit() {
        let expected = Milliamperes_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Milliamperes_f(exactly: Int(5)), expected)
    }

    func testMilliamperes_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Milliamperes_f(param).isTotallyOrdered(belowOrEqualTo: Milliamperes_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMilliamperes_fBinade() {
        let raw = Float(5)
        let expected = Milliamperes_f(raw.binade)
        XCTAssertEqual(Milliamperes_f(raw).binade, expected)
    }

    func testMilliamperes_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Milliamperes_f(raw).significandWidth, raw.significandWidth)
    }

    func testMilliamperes_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Milliamperes_f(raw).debugDescription, raw.debugDescription)
    }

    func testMilliamperes_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Milliamperes_f("5.0"), Milliamperes_f(raw))
    }

    func testMilliamperes_fStaticVars() {
        XCTAssertEqual(Milliamperes_f.nan.isNaN, Milliamperes_f(Float.nan).isNaN)
        XCTAssertEqual(
            Milliamperes_f.signalingNaN.isSignalingNaN,
            Milliamperes_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Milliamperes_f.infinity, Milliamperes_f(Float.infinity))
        XCTAssertEqual(Milliamperes_f.greatestFiniteMagnitude, Milliamperes_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Milliamperes_f.pi, Milliamperes_f(Float.pi))
        XCTAssertEqual(Milliamperes_f.leastNormalMagnitude, Milliamperes_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Milliamperes_f.leastNonzeroMagnitude, Milliamperes_f(Float.leastNonzeroMagnitude))
    }

    func testMilliamperes_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Milliamperes_f(raw).ulp, Milliamperes_f(raw.ulp))
    }

    func testMilliamperes_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Milliamperes_f(raw).sign, raw.sign)
    }

    func testMilliamperes_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Milliamperes_f(raw).significand, Milliamperes_f(raw.significand))
    }

    func testMilliamperes_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Milliamperes_f(raw).nextUp, Milliamperes_f(raw.nextUp))
    }

    func testMilliamperes_fVars() {
        XCTAssertEqual(Milliamperes_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Milliamperes_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Milliamperes_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Milliamperes_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Milliamperes_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Milliamperes_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Milliamperes_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Milliamperes_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Milliamperes_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Milliamperes_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Milliamperes_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Milliamperes_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Milliamperes_f(5).description, Float(5).description)
        XCTAssertEqual(Milliamperes_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Milliamperes_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Milliamperes_f(5).exponent, Float(5).exponent)
    }

    func testMilliamperes_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Milliamperes_f(Float(4))
        result.formRemainder(dividingBy: Milliamperes_f(denominator))
        XCTAssertEqual(result, Milliamperes_f(original))
    }

    func testMilliamperes_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Milliamperes_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Milliamperes_f(denominator))
        XCTAssertEqual(result, Milliamperes_f(original))
    }

    func testMilliamperes_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Milliamperes_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Milliamperes_f(original))
    }

    func testMilliamperes_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Milliamperes_f(Float(4))
        result.addProduct(Milliamperes_f(lhs), Milliamperes_f(rhs))
        XCTAssertEqual(result, Milliamperes_f(original))
    }

    func testMilliamperes_fIsEqual() {
        let this = Milliamperes_f(5)
        let other = Milliamperes_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMilliamperes_fIsLess() {
        let this = Milliamperes_f(5)
        let other = Milliamperes_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMilliamperes_fIsLessThanOrEqual() {
        let this = Milliamperes_f(5)
        let other = Milliamperes_f(6)
        let other2 = Milliamperes_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMilliamperes_fOperations() {
        let lhs = Milliamperes_f(6)
        let rhs = Milliamperes_f(3)
        XCTAssertEqual(lhs + rhs, Milliamperes_f(9))
        XCTAssertEqual(lhs - rhs, Milliamperes_f(3))
        XCTAssertEqual(lhs * rhs, Milliamperes_f(18))
        XCTAssertEqual(lhs / rhs, Milliamperes_f(2))
    }

    func testMilliamperes_fTimesEqual() {
        var this = Milliamperes_f(3)
        this *= Milliamperes_f(4)
        XCTAssertEqual(this, Milliamperes_f(12))
    }

    func testMilliamperes_fDivideEqual() {
        var this = Milliamperes_f(6)
        this /= Milliamperes_f(3)
        XCTAssertEqual(this, Milliamperes_f(2))
    }

    func testMilliamperes_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Milliamperes_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Milliamperes_f(expected))
    }

    func testMilliamperes_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Milliamperes_f(original).distance(to: Milliamperes_f(other)), expected)
    }

    func testMilliamperes_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Milliamperes_f(original).advanced(by: 3), Milliamperes_f(expected))
    }

    func testMilliamperes_dEquality() {
        XCTAssertEqual(Milliamperes_d(5), Milliamperes_d(5))
    }

    func testMilliamperes_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliamperes_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliamperes_d.self, from: try encoder.encode(original))
        )
    }

    func testMilliamperes_dSelfInit() {
        let expected = Milliamperes_d(15)
        XCTAssertEqual(expected, Milliamperes_d(expected))
    }

    func testMilliamperes_dSelfExactlyInit() {
        let expected = Milliamperes_d(15)
        XCTAssertEqual(expected, Milliamperes_d(exactly: expected))
    }

    func testMilliamperes_dComparable() {
        let lhs = Milliamperes_d(1)
        let rhs = Milliamperes_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliamperes_dRadix() {
        XCTAssertEqual(Milliamperes_d.radix, Double.radix)
    }

    func testMilliamperes_dExponentBitCount() {
        XCTAssertEqual(Milliamperes_d.exponentBitCount, Double.exponentBitCount)
    }

    func testMilliamperes_dSignificandBitCount() {
        XCTAssertEqual(Milliamperes_d.significandBitCount, Double.significandBitCount)
    }

    func testMilliamperes_dMagnitude() {
        let expected = Milliamperes_d(Double(5).magnitude)
        XCTAssertEqual(Milliamperes_d(5).magnitude, expected)
    }

    func testMilliamperes_dExactlyInit() {
        let expected = Milliamperes_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Milliamperes_d(exactly: Int(5)), expected)
    }

    func testMilliamperes_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Milliamperes_d(param).isTotallyOrdered(belowOrEqualTo: Milliamperes_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMilliamperes_dBinade() {
        let raw = Double(5)
        let expected = Milliamperes_d(raw.binade)
        XCTAssertEqual(Milliamperes_d(raw).binade, expected)
    }

    func testMilliamperes_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Milliamperes_d(raw).significandWidth, raw.significandWidth)
    }

    func testMilliamperes_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Milliamperes_d(raw).debugDescription, raw.debugDescription)
    }

    func testMilliamperes_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Milliamperes_d("5.0"), Milliamperes_d(raw))
    }

    func testMilliamperes_dStaticVars() {
        XCTAssertEqual(Milliamperes_d.nan.isNaN, Milliamperes_d(Double.nan).isNaN)
        XCTAssertEqual(
            Milliamperes_d.signalingNaN.isSignalingNaN,
            Milliamperes_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Milliamperes_d.infinity, Milliamperes_d(Double.infinity))
        XCTAssertEqual(Milliamperes_d.greatestFiniteMagnitude, Milliamperes_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Milliamperes_d.pi, Milliamperes_d(Double.pi))
        XCTAssertEqual(Milliamperes_d.leastNormalMagnitude, Milliamperes_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Milliamperes_d.leastNonzeroMagnitude, Milliamperes_d(Double.leastNonzeroMagnitude))
    }

    func testMilliamperes_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Milliamperes_d(raw).ulp, Milliamperes_d(raw.ulp))
    }

    func testMilliamperes_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Milliamperes_d(raw).sign, raw.sign)
    }

    func testMilliamperes_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Milliamperes_d(raw).significand, Milliamperes_d(raw.significand))
    }

    func testMilliamperes_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Milliamperes_d(raw).nextUp, Milliamperes_d(raw.nextUp))
    }

    func testMilliamperes_dVars() {
        XCTAssertEqual(Milliamperes_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Milliamperes_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Milliamperes_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Milliamperes_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Milliamperes_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Milliamperes_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Milliamperes_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Milliamperes_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Milliamperes_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Milliamperes_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Milliamperes_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Milliamperes_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Milliamperes_d(5).description, Double(5).description)
        XCTAssertEqual(Milliamperes_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Milliamperes_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Milliamperes_d(5).exponent, Double(5).exponent)
    }

    func testMilliamperes_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Milliamperes_d(Double(4))
        result.formRemainder(dividingBy: Milliamperes_d(denominator))
        XCTAssertEqual(result, Milliamperes_d(original))
    }

    func testMilliamperes_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Milliamperes_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Milliamperes_d(denominator))
        XCTAssertEqual(result, Milliamperes_d(original))
    }

    func testMilliamperes_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Milliamperes_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Milliamperes_d(original))
    }

    func testMilliamperes_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Milliamperes_d(Double(4))
        result.addProduct(Milliamperes_d(lhs), Milliamperes_d(rhs))
        XCTAssertEqual(result, Milliamperes_d(original))
    }

    func testMilliamperes_dIsEqual() {
        let this = Milliamperes_d(5)
        let other = Milliamperes_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMilliamperes_dIsLess() {
        let this = Milliamperes_d(5)
        let other = Milliamperes_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMilliamperes_dIsLessThanOrEqual() {
        let this = Milliamperes_d(5)
        let other = Milliamperes_d(6)
        let other2 = Milliamperes_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMilliamperes_dOperations() {
        let lhs = Milliamperes_d(6)
        let rhs = Milliamperes_d(3)
        XCTAssertEqual(lhs + rhs, Milliamperes_d(9))
        XCTAssertEqual(lhs - rhs, Milliamperes_d(3))
        XCTAssertEqual(lhs * rhs, Milliamperes_d(18))
        XCTAssertEqual(lhs / rhs, Milliamperes_d(2))
    }

    func testMilliamperes_dTimesEqual() {
        var this = Milliamperes_d(3)
        this *= Milliamperes_d(4)
        XCTAssertEqual(this, Milliamperes_d(12))
    }

    func testMilliamperes_dDivideEqual() {
        var this = Milliamperes_d(6)
        this /= Milliamperes_d(3)
        XCTAssertEqual(this, Milliamperes_d(2))
    }

    func testMilliamperes_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Milliamperes_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Milliamperes_d(expected))
    }

    func testMilliamperes_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Milliamperes_d(original).distance(to: Milliamperes_d(other)), expected)
    }

    func testMilliamperes_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Milliamperes_d(original).advanced(by: 3), Milliamperes_d(expected))
    }

}

final class AmperesTypeTests: XCTestCase {

    func testAmperes_tEquality() {
        XCTAssertEqual(Amperes_t(5), Amperes_t(5))
    }

    func testAmperes_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Amperes_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Amperes_t.self, from: try encoder.encode(original))
        )
    }

    func testAmperes_tSelfInit() {
        let expected = Amperes_t(15)
        XCTAssertEqual(expected, Amperes_t(expected))
    }

    func testAmperes_tSelfExactlyInit() {
        let expected = Amperes_t(15)
        XCTAssertEqual(expected, Amperes_t(exactly: expected))
    }

    func testAmperes_tComparable() {
        let lhs = Amperes_t(1)
        let rhs = Amperes_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testAmperes_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Amperes_t(5).magnitude, expected)
    }

    func testAmperes_tTruncatingInit() {
        let expected = Amperes_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Amperes_t(truncatingIfNeeded: expected), expected)
    }

    func testAmperes_tClampingInit() {
        let expected = Amperes_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Amperes_t(clamping: expected), expected)
    }

    func testAmperes_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Amperes_t(5).bitWidth, expected)
    }

    func testAmperes_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Amperes_t(5).leadingZeroBitCount, expected)
    }

    func testAmperes_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Amperes_t(5).nonzeroBitCount, expected)
    }

    func testAmperes_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Amperes_t(expected), Amperes_t(integerLiteral: CInt.max))
    }

    func testAmperes_tTruncatingBits() {
        let expected = Amperes_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Amperes_t(_truncatingBits: UInt.max))
    }

    func testAmperes_tAddition() {
        let expected = Amperes_t(CInt(5) + CInt(3))
        XCTAssertEqual(Amperes_t(5) + Amperes_t(3), expected)
    }

    func testAmperes_tSubtraction() {
        let expected = Amperes_t(CInt(5) - CInt(3))
        XCTAssertEqual(Amperes_t(5) - Amperes_t(3), expected)
    }

    func testAmperes_tMultiplication() {
        let expected = Amperes_t(CInt(5) * CInt(3))
        XCTAssertEqual(Amperes_t(5) * Amperes_t(3), expected)
    }

    func testAmperes_tDivision() {
        let expected = Amperes_t(CInt(6) / CInt(3))
        XCTAssertEqual(Amperes_t(6) / Amperes_t(3), expected)
    }

    func testAmperes_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Amperes_t(rawOriginal)
        let result = original.addingReportingOverflow(Amperes_t(1))
        XCTAssertEqual(result.0, Amperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testAmperes_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Amperes_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Amperes_t(2))
        XCTAssertEqual(result.0, Amperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testAmperes_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Amperes_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Amperes_t(1))
        XCTAssertEqual(result.0, Amperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testAmperes_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Amperes_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Amperes_t(CInt.max))
        XCTAssertEqual(result.0, Amperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testAmperes_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Amperes_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Amperes_t(CInt.max))
        XCTAssertEqual(result.0, Amperes_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testAmperes_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Amperes_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testAmperes_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Amperes_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Amperes_t(original))
    }

    func testAmperes_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Amperes_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Amperes_t(original))
    }

    func testAmperes_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Amperes_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Amperes_t(original))
    }

    func testAmperes_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Amperes_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Amperes_t(original))
    }

    func testAmperes_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Amperes_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Amperes_t(original))
    }

    func testAmperes_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Amperes_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Amperes_t(original))
    }

    func testAmperes_tMod() {
        let original = CInt(4)
        let expected = Amperes_t(original % 2)
        XCTAssertEqual(Amperes_t(original) % 2, expected)
    }

    func testAmperes_uEquality() {
        XCTAssertEqual(Amperes_u(5), Amperes_u(5))
    }

    func testAmperes_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Amperes_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Amperes_u.self, from: try encoder.encode(original))
        )
    }

    func testAmperes_uSelfInit() {
        let expected = Amperes_u(15)
        XCTAssertEqual(expected, Amperes_u(expected))
    }

    func testAmperes_uSelfExactlyInit() {
        let expected = Amperes_u(15)
        XCTAssertEqual(expected, Amperes_u(exactly: expected))
    }

    func testAmperes_uComparable() {
        let lhs = Amperes_u(1)
        let rhs = Amperes_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testAmperes_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Amperes_u(5).magnitude, expected)
    }

    func testAmperes_uTruncatingInit() {
        let expected = Amperes_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Amperes_u(truncatingIfNeeded: expected), expected)
    }

    func testAmperes_uClampingInit() {
        let expected = Amperes_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Amperes_u(clamping: expected), expected)
    }

    func testAmperes_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Amperes_u(5).bitWidth, expected)
    }

    func testAmperes_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Amperes_u(5).leadingZeroBitCount, expected)
    }

    func testAmperes_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Amperes_u(5).nonzeroBitCount, expected)
    }

    func testAmperes_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Amperes_u(expected), Amperes_u(integerLiteral: CUnsignedInt.max))
    }

    func testAmperes_uTruncatingBits() {
        let expected = Amperes_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Amperes_u(_truncatingBits: UInt.max))
    }

    func testAmperes_uAddition() {
        let expected = Amperes_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Amperes_u(5) + Amperes_u(3), expected)
    }

    func testAmperes_uSubtraction() {
        let expected = Amperes_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Amperes_u(5) - Amperes_u(3), expected)
    }

    func testAmperes_uMultiplication() {
        let expected = Amperes_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Amperes_u(5) * Amperes_u(3), expected)
    }

    func testAmperes_uDivision() {
        let expected = Amperes_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Amperes_u(6) / Amperes_u(3), expected)
    }

    func testAmperes_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Amperes_u(rawOriginal)
        let result = original.addingReportingOverflow(Amperes_u(1))
        XCTAssertEqual(result.0, Amperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testAmperes_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Amperes_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Amperes_u(2))
        XCTAssertEqual(result.0, Amperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testAmperes_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Amperes_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Amperes_u(1))
        XCTAssertEqual(result.0, Amperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testAmperes_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Amperes_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Amperes_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Amperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testAmperes_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Amperes_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Amperes_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Amperes_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testAmperes_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Amperes_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testAmperes_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Amperes_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Amperes_u(original))
    }

    func testAmperes_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Amperes_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Amperes_u(original))
    }

    func testAmperes_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Amperes_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Amperes_u(original))
    }

    func testAmperes_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Amperes_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Amperes_u(original))
    }

    func testAmperes_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Amperes_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Amperes_u(original))
    }

    func testAmperes_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Amperes_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Amperes_u(original))
    }

    func testAmperes_uMod() {
        let original = CUnsignedInt(4)
        let expected = Amperes_u(original % 2)
        XCTAssertEqual(Amperes_u(original) % 2, expected)
    }

    func testAmperes_fEquality() {
        XCTAssertEqual(Amperes_f(5), Amperes_f(5))
    }

    func testAmperes_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Amperes_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Amperes_f.self, from: try encoder.encode(original))
        )
    }

    func testAmperes_fSelfInit() {
        let expected = Amperes_f(15)
        XCTAssertEqual(expected, Amperes_f(expected))
    }

    func testAmperes_fSelfExactlyInit() {
        let expected = Amperes_f(15)
        XCTAssertEqual(expected, Amperes_f(exactly: expected))
    }

    func testAmperes_fComparable() {
        let lhs = Amperes_f(1)
        let rhs = Amperes_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testAmperes_fRadix() {
        XCTAssertEqual(Amperes_f.radix, Float.radix)
    }

    func testAmperes_fExponentBitCount() {
        XCTAssertEqual(Amperes_f.exponentBitCount, Float.exponentBitCount)
    }

    func testAmperes_fSignificandBitCount() {
        XCTAssertEqual(Amperes_f.significandBitCount, Float.significandBitCount)
    }

    func testAmperes_fMagnitude() {
        let expected = Amperes_f(Float(5).magnitude)
        XCTAssertEqual(Amperes_f(5).magnitude, expected)
    }

    func testAmperes_fExactlyInit() {
        let expected = Amperes_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Amperes_f(exactly: Int(5)), expected)
    }

    func testAmperes_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Amperes_f(param).isTotallyOrdered(belowOrEqualTo: Amperes_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testAmperes_fBinade() {
        let raw = Float(5)
        let expected = Amperes_f(raw.binade)
        XCTAssertEqual(Amperes_f(raw).binade, expected)
    }

    func testAmperes_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Amperes_f(raw).significandWidth, raw.significandWidth)
    }

    func testAmperes_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Amperes_f(raw).debugDescription, raw.debugDescription)
    }

    func testAmperes_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Amperes_f("5.0"), Amperes_f(raw))
    }

    func testAmperes_fStaticVars() {
        XCTAssertEqual(Amperes_f.nan.isNaN, Amperes_f(Float.nan).isNaN)
        XCTAssertEqual(
            Amperes_f.signalingNaN.isSignalingNaN,
            Amperes_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Amperes_f.infinity, Amperes_f(Float.infinity))
        XCTAssertEqual(Amperes_f.greatestFiniteMagnitude, Amperes_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Amperes_f.pi, Amperes_f(Float.pi))
        XCTAssertEqual(Amperes_f.leastNormalMagnitude, Amperes_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Amperes_f.leastNonzeroMagnitude, Amperes_f(Float.leastNonzeroMagnitude))
    }

    func testAmperes_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Amperes_f(raw).ulp, Amperes_f(raw.ulp))
    }

    func testAmperes_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Amperes_f(raw).sign, raw.sign)
    }

    func testAmperes_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Amperes_f(raw).significand, Amperes_f(raw.significand))
    }

    func testAmperes_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Amperes_f(raw).nextUp, Amperes_f(raw.nextUp))
    }

    func testAmperes_fVars() {
        XCTAssertEqual(Amperes_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Amperes_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Amperes_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Amperes_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Amperes_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Amperes_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Amperes_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Amperes_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Amperes_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Amperes_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Amperes_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Amperes_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Amperes_f(5).description, Float(5).description)
        XCTAssertEqual(Amperes_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Amperes_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Amperes_f(5).exponent, Float(5).exponent)
    }

    func testAmperes_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Amperes_f(Float(4))
        result.formRemainder(dividingBy: Amperes_f(denominator))
        XCTAssertEqual(result, Amperes_f(original))
    }

    func testAmperes_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Amperes_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Amperes_f(denominator))
        XCTAssertEqual(result, Amperes_f(original))
    }

    func testAmperes_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Amperes_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Amperes_f(original))
    }

    func testAmperes_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Amperes_f(Float(4))
        result.addProduct(Amperes_f(lhs), Amperes_f(rhs))
        XCTAssertEqual(result, Amperes_f(original))
    }

    func testAmperes_fIsEqual() {
        let this = Amperes_f(5)
        let other = Amperes_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testAmperes_fIsLess() {
        let this = Amperes_f(5)
        let other = Amperes_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testAmperes_fIsLessThanOrEqual() {
        let this = Amperes_f(5)
        let other = Amperes_f(6)
        let other2 = Amperes_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testAmperes_fOperations() {
        let lhs = Amperes_f(6)
        let rhs = Amperes_f(3)
        XCTAssertEqual(lhs + rhs, Amperes_f(9))
        XCTAssertEqual(lhs - rhs, Amperes_f(3))
        XCTAssertEqual(lhs * rhs, Amperes_f(18))
        XCTAssertEqual(lhs / rhs, Amperes_f(2))
    }

    func testAmperes_fTimesEqual() {
        var this = Amperes_f(3)
        this *= Amperes_f(4)
        XCTAssertEqual(this, Amperes_f(12))
    }

    func testAmperes_fDivideEqual() {
        var this = Amperes_f(6)
        this /= Amperes_f(3)
        XCTAssertEqual(this, Amperes_f(2))
    }

    func testAmperes_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Amperes_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Amperes_f(expected))
    }

    func testAmperes_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Amperes_f(original).distance(to: Amperes_f(other)), expected)
    }

    func testAmperes_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Amperes_f(original).advanced(by: 3), Amperes_f(expected))
    }

    func testAmperes_dEquality() {
        XCTAssertEqual(Amperes_d(5), Amperes_d(5))
    }

    func testAmperes_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Amperes_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Amperes_d.self, from: try encoder.encode(original))
        )
    }

    func testAmperes_dSelfInit() {
        let expected = Amperes_d(15)
        XCTAssertEqual(expected, Amperes_d(expected))
    }

    func testAmperes_dSelfExactlyInit() {
        let expected = Amperes_d(15)
        XCTAssertEqual(expected, Amperes_d(exactly: expected))
    }

    func testAmperes_dComparable() {
        let lhs = Amperes_d(1)
        let rhs = Amperes_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testAmperes_dRadix() {
        XCTAssertEqual(Amperes_d.radix, Double.radix)
    }

    func testAmperes_dExponentBitCount() {
        XCTAssertEqual(Amperes_d.exponentBitCount, Double.exponentBitCount)
    }

    func testAmperes_dSignificandBitCount() {
        XCTAssertEqual(Amperes_d.significandBitCount, Double.significandBitCount)
    }

    func testAmperes_dMagnitude() {
        let expected = Amperes_d(Double(5).magnitude)
        XCTAssertEqual(Amperes_d(5).magnitude, expected)
    }

    func testAmperes_dExactlyInit() {
        let expected = Amperes_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Amperes_d(exactly: Int(5)), expected)
    }

    func testAmperes_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Amperes_d(param).isTotallyOrdered(belowOrEqualTo: Amperes_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testAmperes_dBinade() {
        let raw = Double(5)
        let expected = Amperes_d(raw.binade)
        XCTAssertEqual(Amperes_d(raw).binade, expected)
    }

    func testAmperes_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Amperes_d(raw).significandWidth, raw.significandWidth)
    }

    func testAmperes_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Amperes_d(raw).debugDescription, raw.debugDescription)
    }

    func testAmperes_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Amperes_d("5.0"), Amperes_d(raw))
    }

    func testAmperes_dStaticVars() {
        XCTAssertEqual(Amperes_d.nan.isNaN, Amperes_d(Double.nan).isNaN)
        XCTAssertEqual(
            Amperes_d.signalingNaN.isSignalingNaN,
            Amperes_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Amperes_d.infinity, Amperes_d(Double.infinity))
        XCTAssertEqual(Amperes_d.greatestFiniteMagnitude, Amperes_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Amperes_d.pi, Amperes_d(Double.pi))
        XCTAssertEqual(Amperes_d.leastNormalMagnitude, Amperes_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Amperes_d.leastNonzeroMagnitude, Amperes_d(Double.leastNonzeroMagnitude))
    }

    func testAmperes_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Amperes_d(raw).ulp, Amperes_d(raw.ulp))
    }

    func testAmperes_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Amperes_d(raw).sign, raw.sign)
    }

    func testAmperes_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Amperes_d(raw).significand, Amperes_d(raw.significand))
    }

    func testAmperes_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Amperes_d(raw).nextUp, Amperes_d(raw.nextUp))
    }

    func testAmperes_dVars() {
        XCTAssertEqual(Amperes_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Amperes_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Amperes_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Amperes_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Amperes_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Amperes_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Amperes_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Amperes_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Amperes_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Amperes_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Amperes_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Amperes_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Amperes_d(5).description, Double(5).description)
        XCTAssertEqual(Amperes_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Amperes_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Amperes_d(5).exponent, Double(5).exponent)
    }

    func testAmperes_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Amperes_d(Double(4))
        result.formRemainder(dividingBy: Amperes_d(denominator))
        XCTAssertEqual(result, Amperes_d(original))
    }

    func testAmperes_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Amperes_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Amperes_d(denominator))
        XCTAssertEqual(result, Amperes_d(original))
    }

    func testAmperes_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Amperes_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Amperes_d(original))
    }

    func testAmperes_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Amperes_d(Double(4))
        result.addProduct(Amperes_d(lhs), Amperes_d(rhs))
        XCTAssertEqual(result, Amperes_d(original))
    }

    func testAmperes_dIsEqual() {
        let this = Amperes_d(5)
        let other = Amperes_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testAmperes_dIsLess() {
        let this = Amperes_d(5)
        let other = Amperes_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testAmperes_dIsLessThanOrEqual() {
        let this = Amperes_d(5)
        let other = Amperes_d(6)
        let other2 = Amperes_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testAmperes_dOperations() {
        let lhs = Amperes_d(6)
        let rhs = Amperes_d(3)
        XCTAssertEqual(lhs + rhs, Amperes_d(9))
        XCTAssertEqual(lhs - rhs, Amperes_d(3))
        XCTAssertEqual(lhs * rhs, Amperes_d(18))
        XCTAssertEqual(lhs / rhs, Amperes_d(2))
    }

    func testAmperes_dTimesEqual() {
        var this = Amperes_d(3)
        this *= Amperes_d(4)
        XCTAssertEqual(this, Amperes_d(12))
    }

    func testAmperes_dDivideEqual() {
        var this = Amperes_d(6)
        this /= Amperes_d(3)
        XCTAssertEqual(this, Amperes_d(2))
    }

    func testAmperes_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Amperes_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Amperes_d(expected))
    }

    func testAmperes_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Amperes_d(original).distance(to: Amperes_d(other)), expected)
    }

    func testAmperes_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Amperes_d(original).advanced(by: 3), Amperes_d(expected))
    }

}

final class MicroamperesConversionTests: XCTestCase {

    func testMicroamperes_tToMicroamperes_uCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testMicroamperes_tToMicroamperes_fCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testMicroamperes_tToMicroamperes_dCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testMicroamperes_tToMilliamperes_tCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testMicroamperes_tToMilliamperes_uCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testMicroamperes_tToMilliamperes_fCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testMicroamperes_tToMilliamperes_dCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testMicroamperes_tToAmperes_tCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMicroamperes_tToAmperes_uCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMicroamperes_tToAmperes_fCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMicroamperes_tToAmperes_dCurrentConversions() {
        let original = Microamperes_t(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMicroamperes_tConversions() {
        let ctype1 = microamperes_t(5)
        let swiftType1 = Microamperes_t(rawValue: ctype1)
        let ctype2 = uA_t_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMicroamperes_tInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.microamperes_t(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMicroamperes_tInt8Inits() {
        let raw = Int8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_uA_t(5)
        let expected2 = Int8(
            uA_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(uA_t_to_i8(ctype))
        )
    }

    func testMicroamperes_tInt8RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_i8(raw)
        let expected = Microamperes_t(Int8(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentInt8Init() {
        let raw = Microamperes_t(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tInt16Inits() {
        let raw = Int16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_uA_t(5)
        let expected2 = Int16(
            uA_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(uA_t_to_i16(ctype))
        )
    }

    func testMicroamperes_tInt16RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_i16(raw)
        let expected = Microamperes_t(Int16(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentInt16Init() {
        let raw = Microamperes_t(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tInt32Inits() {
        let raw = Int32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_t(5)
        let expected2 = Int32(
            uA_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(uA_t_to_i32(ctype))
        )
    }

    func testMicroamperes_tInt32RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_i32(raw)
        let expected = Microamperes_t(Int32(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentInt32Init() {
        let raw = Microamperes_t(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tInt64Inits() {
        let raw = Int64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_t(5)
        let expected2 = Int64(
            uA_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(uA_t_to_i64(ctype))
        )
    }

    func testMicroamperes_tInt64RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_i64(raw)
        let expected = Microamperes_t(Int64(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentInt64Init() {
        let raw = Microamperes_t(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tIntInits() {
        let raw = Int(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_t(5)
        let expected2 = Int(
            uA_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(uA_t_to_i64(ctype))
        )
    }

    func testMicroamperes_tIntRawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_i64(raw)
        let expected = Microamperes_t(Int(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentIntInit() {
        let raw = Microamperes_t(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tCIntInits() {
        let raw = CInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_t(5)
        let expected2 = CInt(
            uA_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(uA_t_to_i32(ctype))
        )
    }

    func testMicroamperes_tCIntRawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_i32(raw)
        let expected = Microamperes_t(CInt(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentCIntInit() {
        let raw = Microamperes_t(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_uA_t(5)
        let expected2 = UInt8(
            uA_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(uA_t_to_u8(ctype))
        )
    }

    func testMicroamperes_tUInt8RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_u8(raw)
        let expected = Microamperes_t(UInt8(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentUInt8Init() {
        let raw = Microamperes_t(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_uA_t(5)
        let expected2 = UInt16(
            uA_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(uA_t_to_u16(ctype))
        )
    }

    func testMicroamperes_tUInt16RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_u16(raw)
        let expected = Microamperes_t(UInt16(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentUInt16Init() {
        let raw = Microamperes_t(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_t(5)
        let expected2 = UInt32(
            uA_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(uA_t_to_u32(ctype))
        )
    }

    func testMicroamperes_tUInt32RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_u32(raw)
        let expected = Microamperes_t(UInt32(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentUInt32Init() {
        let raw = Microamperes_t(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_t(5)
        let expected2 = UInt64(
            uA_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(uA_t_to_u64(ctype))
        )
    }

    func testMicroamperes_tUInt64RawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_u64(raw)
        let expected = Microamperes_t(UInt64(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentUInt64Init() {
        let raw = Microamperes_t(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tUIntInits() {
        let raw = UInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_t(5)
        let expected2 = UInt(
            uA_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(uA_t_to_u64(ctype))
        )
    }

    func testMicroamperes_tUIntRawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_u64(raw)
        let expected = Microamperes_t(UInt(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentUIntInit() {
        let raw = Microamperes_t(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_t(5)
        let expected2 = CUnsignedInt(
            uA_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(uA_t_to_u32(ctype))
        )
    }

    func testMicroamperes_tCUnsignedIntRawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_u32(raw)
        let expected = Microamperes_t(CUnsignedInt(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentCUnsignedIntInit() {
        let raw = Microamperes_t(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tFloatInits() {
        let raw = Float(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_uA_t(5)
        let expected2 = Float(
            uA_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(uA_t_to_f(ctype))
        )
    }

    func testMicroamperes_tFloatRawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_f(raw)
        let expected = Microamperes_t(Float(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentFloatInit() {
        let raw = Microamperes_t(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_tDoubleInits() {
        let raw = Double(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_uA_t(5)
        let expected2 = Double(
            uA_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_uA_t(5)
        let expected = Microamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(uA_t_to_d(ctype))
        )
    }

    func testMicroamperes_tDoubleRawValueInit() {
        let raw = microamperes_t(5)
        let ctype = uA_t_to_d(raw)
        let expected = Microamperes_t(Double(ctype))
        XCTAssertEqual(Microamperes_t(rawValue: raw), expected)
    }

    func testMicroamperes_tCurrentDoubleInit() {
        let raw = Microamperes_t(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testMicroamperes_uToMicroamperes_tCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testMicroamperes_uToMicroamperes_fCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testMicroamperes_uToMicroamperes_dCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testMicroamperes_uToMilliamperes_tCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testMicroamperes_uToMilliamperes_uCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testMicroamperes_uToMilliamperes_fCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testMicroamperes_uToMilliamperes_dCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testMicroamperes_uToAmperes_tCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMicroamperes_uToAmperes_uCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMicroamperes_uToAmperes_fCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMicroamperes_uToAmperes_dCurrentConversions() {
        let original = Microamperes_u(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMicroamperes_uConversions() {
        let ctype1 = microamperes_u(5)
        let swiftType1 = Microamperes_u(rawValue: ctype1)
        let ctype2 = uA_u_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMicroamperes_uInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.microamperes_u(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMicroamperes_uInt8Inits() {
        let raw = Int8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_uA_u(5)
        let expected2 = Int8(
            uA_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(uA_u_to_i8(ctype))
        )
    }

    func testMicroamperes_uInt8RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_i8(raw)
        let expected = Microamperes_u(Int8(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentInt8Init() {
        let raw = Microamperes_u(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uInt16Inits() {
        let raw = Int16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_uA_u(5)
        let expected2 = Int16(
            uA_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(uA_u_to_i16(ctype))
        )
    }

    func testMicroamperes_uInt16RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_i16(raw)
        let expected = Microamperes_u(Int16(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentInt16Init() {
        let raw = Microamperes_u(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uInt32Inits() {
        let raw = Int32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_u(5)
        let expected2 = Int32(
            uA_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(uA_u_to_i32(ctype))
        )
    }

    func testMicroamperes_uInt32RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_i32(raw)
        let expected = Microamperes_u(Int32(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentInt32Init() {
        let raw = Microamperes_u(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uInt64Inits() {
        let raw = Int64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_u(5)
        let expected2 = Int64(
            uA_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(uA_u_to_i64(ctype))
        )
    }

    func testMicroamperes_uInt64RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_i64(raw)
        let expected = Microamperes_u(Int64(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentInt64Init() {
        let raw = Microamperes_u(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uIntInits() {
        let raw = Int(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_u(5)
        let expected2 = Int(
            uA_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(uA_u_to_i64(ctype))
        )
    }

    func testMicroamperes_uIntRawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_i64(raw)
        let expected = Microamperes_u(Int(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentIntInit() {
        let raw = Microamperes_u(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uCIntInits() {
        let raw = CInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_u(5)
        let expected2 = CInt(
            uA_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(uA_u_to_i32(ctype))
        )
    }

    func testMicroamperes_uCIntRawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_i32(raw)
        let expected = Microamperes_u(CInt(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentCIntInit() {
        let raw = Microamperes_u(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_uA_u(5)
        let expected2 = UInt8(
            uA_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(uA_u_to_u8(ctype))
        )
    }

    func testMicroamperes_uUInt8RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_u8(raw)
        let expected = Microamperes_u(UInt8(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentUInt8Init() {
        let raw = Microamperes_u(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_uA_u(5)
        let expected2 = UInt16(
            uA_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(uA_u_to_u16(ctype))
        )
    }

    func testMicroamperes_uUInt16RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_u16(raw)
        let expected = Microamperes_u(UInt16(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentUInt16Init() {
        let raw = Microamperes_u(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_u(5)
        let expected2 = UInt32(
            uA_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(uA_u_to_u32(ctype))
        )
    }

    func testMicroamperes_uUInt32RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_u32(raw)
        let expected = Microamperes_u(UInt32(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentUInt32Init() {
        let raw = Microamperes_u(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_u(5)
        let expected2 = UInt64(
            uA_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(uA_u_to_u64(ctype))
        )
    }

    func testMicroamperes_uUInt64RawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_u64(raw)
        let expected = Microamperes_u(UInt64(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentUInt64Init() {
        let raw = Microamperes_u(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uUIntInits() {
        let raw = UInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_u(5)
        let expected2 = UInt(
            uA_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(uA_u_to_u64(ctype))
        )
    }

    func testMicroamperes_uUIntRawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_u64(raw)
        let expected = Microamperes_u(UInt(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentUIntInit() {
        let raw = Microamperes_u(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_u(5)
        let expected2 = CUnsignedInt(
            uA_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(uA_u_to_u32(ctype))
        )
    }

    func testMicroamperes_uCUnsignedIntRawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_u32(raw)
        let expected = Microamperes_u(CUnsignedInt(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentCUnsignedIntInit() {
        let raw = Microamperes_u(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uFloatInits() {
        let raw = Float(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_uA_u(5)
        let expected2 = Float(
            uA_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(uA_u_to_f(ctype))
        )
    }

    func testMicroamperes_uFloatRawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_f(raw)
        let expected = Microamperes_u(Float(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentFloatInit() {
        let raw = Microamperes_u(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_uDoubleInits() {
        let raw = Double(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_uA_u(5)
        let expected2 = Double(
            uA_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_uA_u(5)
        let expected = Microamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(uA_u_to_d(ctype))
        )
    }

    func testMicroamperes_uDoubleRawValueInit() {
        let raw = microamperes_u(5)
        let ctype = uA_u_to_d(raw)
        let expected = Microamperes_u(Double(ctype))
        XCTAssertEqual(Microamperes_u(rawValue: raw), expected)
    }

    func testMicroamperes_uCurrentDoubleInit() {
        let raw = Microamperes_u(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testMicroamperes_fToMicroamperes_tCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testMicroamperes_fToMicroamperes_uCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testMicroamperes_fToMicroamperes_dCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testMicroamperes_fToMilliamperes_tCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testMicroamperes_fToMilliamperes_uCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testMicroamperes_fToMilliamperes_fCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testMicroamperes_fToMilliamperes_dCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testMicroamperes_fToAmperes_tCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMicroamperes_fToAmperes_uCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMicroamperes_fToAmperes_fCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMicroamperes_fToAmperes_dCurrentConversions() {
        let original = Microamperes_f(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMicroamperes_fConversions() {
        let ctype1 = microamperes_f(5)
        let swiftType1 = Microamperes_f(rawValue: ctype1)
        let ctype2 = uA_f_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMicroamperes_fInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.microamperes_f(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMicroamperes_fInt8Inits() {
        let raw = Int8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_uA_f(5)
        let expected2 = Int8(
            uA_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(uA_f_to_i8(ctype))
        )
    }

    func testMicroamperes_fInt8RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_i8(raw)
        let expected = Microamperes_f(Int8(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentInt8Init() {
        let raw = Microamperes_f(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fInt16Inits() {
        let raw = Int16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_uA_f(5)
        let expected2 = Int16(
            uA_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(uA_f_to_i16(ctype))
        )
    }

    func testMicroamperes_fInt16RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_i16(raw)
        let expected = Microamperes_f(Int16(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentInt16Init() {
        let raw = Microamperes_f(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fInt32Inits() {
        let raw = Int32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_f(5)
        let expected2 = Int32(
            uA_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(uA_f_to_i32(ctype))
        )
    }

    func testMicroamperes_fInt32RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_i32(raw)
        let expected = Microamperes_f(Int32(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentInt32Init() {
        let raw = Microamperes_f(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fInt64Inits() {
        let raw = Int64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_f(5)
        let expected2 = Int64(
            uA_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(uA_f_to_i64(ctype))
        )
    }

    func testMicroamperes_fInt64RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_i64(raw)
        let expected = Microamperes_f(Int64(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentInt64Init() {
        let raw = Microamperes_f(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fIntInits() {
        let raw = Int(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_f(5)
        let expected2 = Int(
            uA_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(uA_f_to_i64(ctype))
        )
    }

    func testMicroamperes_fIntRawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_i64(raw)
        let expected = Microamperes_f(Int(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentIntInit() {
        let raw = Microamperes_f(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fCIntInits() {
        let raw = CInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_f(5)
        let expected2 = CInt(
            uA_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(uA_f_to_i32(ctype))
        )
    }

    func testMicroamperes_fCIntRawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_i32(raw)
        let expected = Microamperes_f(CInt(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentCIntInit() {
        let raw = Microamperes_f(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_uA_f(5)
        let expected2 = UInt8(
            uA_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(uA_f_to_u8(ctype))
        )
    }

    func testMicroamperes_fUInt8RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_u8(raw)
        let expected = Microamperes_f(UInt8(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentUInt8Init() {
        let raw = Microamperes_f(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_uA_f(5)
        let expected2 = UInt16(
            uA_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(uA_f_to_u16(ctype))
        )
    }

    func testMicroamperes_fUInt16RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_u16(raw)
        let expected = Microamperes_f(UInt16(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentUInt16Init() {
        let raw = Microamperes_f(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_f(5)
        let expected2 = UInt32(
            uA_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(uA_f_to_u32(ctype))
        )
    }

    func testMicroamperes_fUInt32RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_u32(raw)
        let expected = Microamperes_f(UInt32(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentUInt32Init() {
        let raw = Microamperes_f(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_f(5)
        let expected2 = UInt64(
            uA_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(uA_f_to_u64(ctype))
        )
    }

    func testMicroamperes_fUInt64RawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_u64(raw)
        let expected = Microamperes_f(UInt64(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentUInt64Init() {
        let raw = Microamperes_f(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fUIntInits() {
        let raw = UInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_f(5)
        let expected2 = UInt(
            uA_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(uA_f_to_u64(ctype))
        )
    }

    func testMicroamperes_fUIntRawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_u64(raw)
        let expected = Microamperes_f(UInt(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentUIntInit() {
        let raw = Microamperes_f(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_f(5)
        let expected2 = CUnsignedInt(
            uA_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(uA_f_to_u32(ctype))
        )
    }

    func testMicroamperes_fCUnsignedIntRawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_u32(raw)
        let expected = Microamperes_f(CUnsignedInt(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentCUnsignedIntInit() {
        let raw = Microamperes_f(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fFloatInits() {
        let raw = Float(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_uA_f(5)
        let expected2 = Float(
            uA_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(uA_f_to_f(ctype))
        )
    }

    func testMicroamperes_fFloatRawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_f(raw)
        let expected = Microamperes_f(Float(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentFloatInit() {
        let raw = Microamperes_f(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_fDoubleInits() {
        let raw = Double(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_uA_f(5)
        let expected2 = Double(
            uA_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_uA_f(5)
        let expected = Microamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(uA_f_to_d(ctype))
        )
    }

    func testMicroamperes_fDoubleRawValueInit() {
        let raw = microamperes_f(5)
        let ctype = uA_f_to_d(raw)
        let expected = Microamperes_f(Double(ctype))
        XCTAssertEqual(Microamperes_f(rawValue: raw), expected)
    }

    func testMicroamperes_fCurrentDoubleInit() {
        let raw = Microamperes_f(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testMicroamperes_dToMicroamperes_tCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testMicroamperes_dToMicroamperes_uCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testMicroamperes_dToMicroamperes_fCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testMicroamperes_dToMilliamperes_tCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testMicroamperes_dToMilliamperes_uCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testMicroamperes_dToMilliamperes_fCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testMicroamperes_dToMilliamperes_dCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testMicroamperes_dToAmperes_tCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMicroamperes_dToAmperes_uCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMicroamperes_dToAmperes_fCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMicroamperes_dToAmperes_dCurrentConversions() {
        let original = Microamperes_d(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMicroamperes_dConversions() {
        let ctype1 = microamperes_d(5)
        let swiftType1 = Microamperes_d(rawValue: ctype1)
        let ctype2 = uA_d_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMicroamperes_dInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.microamperes_d(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMicroamperes_dInt8Inits() {
        let raw = Int8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_uA_d(5)
        let expected2 = Int8(
            uA_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(uA_d_to_i8(ctype))
        )
    }

    func testMicroamperes_dInt8RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_i8(raw)
        let expected = Microamperes_d(Int8(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentInt8Init() {
        let raw = Microamperes_d(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dInt16Inits() {
        let raw = Int16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_uA_d(5)
        let expected2 = Int16(
            uA_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(uA_d_to_i16(ctype))
        )
    }

    func testMicroamperes_dInt16RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_i16(raw)
        let expected = Microamperes_d(Int16(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentInt16Init() {
        let raw = Microamperes_d(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dInt32Inits() {
        let raw = Int32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_d(5)
        let expected2 = Int32(
            uA_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(uA_d_to_i32(ctype))
        )
    }

    func testMicroamperes_dInt32RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_i32(raw)
        let expected = Microamperes_d(Int32(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentInt32Init() {
        let raw = Microamperes_d(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dInt64Inits() {
        let raw = Int64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_d(5)
        let expected2 = Int64(
            uA_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(uA_d_to_i64(ctype))
        )
    }

    func testMicroamperes_dInt64RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_i64(raw)
        let expected = Microamperes_d(Int64(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentInt64Init() {
        let raw = Microamperes_d(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dIntInits() {
        let raw = Int(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_uA_d(5)
        let expected2 = Int(
            uA_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(uA_d_to_i64(ctype))
        )
    }

    func testMicroamperes_dIntRawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_i64(raw)
        let expected = Microamperes_d(Int(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentIntInit() {
        let raw = Microamperes_d(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dCIntInits() {
        let raw = CInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_uA_d(5)
        let expected2 = CInt(
            uA_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(uA_d_to_i32(ctype))
        )
    }

    func testMicroamperes_dCIntRawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_i32(raw)
        let expected = Microamperes_d(CInt(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentCIntInit() {
        let raw = Microamperes_d(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_uA_d(5)
        let expected2 = UInt8(
            uA_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(uA_d_to_u8(ctype))
        )
    }

    func testMicroamperes_dUInt8RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_u8(raw)
        let expected = Microamperes_d(UInt8(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentUInt8Init() {
        let raw = Microamperes_d(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_uA_d(5)
        let expected2 = UInt16(
            uA_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(uA_d_to_u16(ctype))
        )
    }

    func testMicroamperes_dUInt16RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_u16(raw)
        let expected = Microamperes_d(UInt16(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentUInt16Init() {
        let raw = Microamperes_d(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_d(5)
        let expected2 = UInt32(
            uA_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(uA_d_to_u32(ctype))
        )
    }

    func testMicroamperes_dUInt32RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_u32(raw)
        let expected = Microamperes_d(UInt32(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentUInt32Init() {
        let raw = Microamperes_d(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_d(5)
        let expected2 = UInt64(
            uA_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(uA_d_to_u64(ctype))
        )
    }

    func testMicroamperes_dUInt64RawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_u64(raw)
        let expected = Microamperes_d(UInt64(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentUInt64Init() {
        let raw = Microamperes_d(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dUIntInits() {
        let raw = UInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_uA_d(5)
        let expected2 = UInt(
            uA_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(uA_d_to_u64(ctype))
        )
    }

    func testMicroamperes_dUIntRawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_u64(raw)
        let expected = Microamperes_d(UInt(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentUIntInit() {
        let raw = Microamperes_d(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_uA_d(5)
        let expected2 = CUnsignedInt(
            uA_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(uA_d_to_u32(ctype))
        )
    }

    func testMicroamperes_dCUnsignedIntRawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_u32(raw)
        let expected = Microamperes_d(CUnsignedInt(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentCUnsignedIntInit() {
        let raw = Microamperes_d(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dFloatInits() {
        let raw = Float(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_uA_d(5)
        let expected2 = Float(
            uA_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(uA_d_to_f(ctype))
        )
    }

    func testMicroamperes_dFloatRawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_f(raw)
        let expected = Microamperes_d(Float(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentFloatInit() {
        let raw = Microamperes_d(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMicroamperes_dDoubleInits() {
        let raw = Double(5)
        let expected = Current(microamperes: raw)
        let result = Current.microamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_uA_d(5)
        let expected2 = Double(
            uA_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroamperes_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_uA_d(5)
        let expected = Microamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(uA_d_to_d(ctype))
        )
    }

    func testMicroamperes_dDoubleRawValueInit() {
        let raw = microamperes_d(5)
        let ctype = uA_d_to_d(raw)
        let expected = Microamperes_d(Double(ctype))
        XCTAssertEqual(Microamperes_d(rawValue: raw), expected)
    }

    func testMicroamperes_dCurrentDoubleInit() {
        let raw = Microamperes_d(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .microamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class MilliamperesConversionTests: XCTestCase {

    func testMilliamperes_tToMicroamperes_tCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testMilliamperes_tToMicroamperes_uCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testMilliamperes_tToMicroamperes_fCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testMilliamperes_tToMicroamperes_dCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testMilliamperes_tToMilliamperes_uCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testMilliamperes_tToMilliamperes_fCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testMilliamperes_tToMilliamperes_dCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testMilliamperes_tToAmperes_tCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMilliamperes_tToAmperes_uCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMilliamperes_tToAmperes_fCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMilliamperes_tToAmperes_dCurrentConversions() {
        let original = Milliamperes_t(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMilliamperes_tConversions() {
        let ctype1 = milliamperes_t(5)
        let swiftType1 = Milliamperes_t(rawValue: ctype1)
        let ctype2 = mA_t_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMilliamperes_tInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.milliamperes_t(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMilliamperes_tInt8Inits() {
        let raw = Int8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mA_t(5)
        let expected2 = Int8(
            mA_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mA_t_to_i8(ctype))
        )
    }

    func testMilliamperes_tInt8RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_i8(raw)
        let expected = Milliamperes_t(Int8(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentInt8Init() {
        let raw = Milliamperes_t(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tInt16Inits() {
        let raw = Int16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mA_t(5)
        let expected2 = Int16(
            mA_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mA_t_to_i16(ctype))
        )
    }

    func testMilliamperes_tInt16RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_i16(raw)
        let expected = Milliamperes_t(Int16(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentInt16Init() {
        let raw = Milliamperes_t(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tInt32Inits() {
        let raw = Int32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_t(5)
        let expected2 = Int32(
            mA_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mA_t_to_i32(ctype))
        )
    }

    func testMilliamperes_tInt32RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_i32(raw)
        let expected = Milliamperes_t(Int32(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentInt32Init() {
        let raw = Milliamperes_t(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tInt64Inits() {
        let raw = Int64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_t(5)
        let expected2 = Int64(
            mA_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mA_t_to_i64(ctype))
        )
    }

    func testMilliamperes_tInt64RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_i64(raw)
        let expected = Milliamperes_t(Int64(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentInt64Init() {
        let raw = Milliamperes_t(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tIntInits() {
        let raw = Int(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_t(5)
        let expected2 = Int(
            mA_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mA_t_to_i64(ctype))
        )
    }

    func testMilliamperes_tIntRawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_i64(raw)
        let expected = Milliamperes_t(Int(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentIntInit() {
        let raw = Milliamperes_t(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tCIntInits() {
        let raw = CInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_t(5)
        let expected2 = CInt(
            mA_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mA_t_to_i32(ctype))
        )
    }

    func testMilliamperes_tCIntRawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_i32(raw)
        let expected = Milliamperes_t(CInt(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentCIntInit() {
        let raw = Milliamperes_t(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mA_t(5)
        let expected2 = UInt8(
            mA_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mA_t_to_u8(ctype))
        )
    }

    func testMilliamperes_tUInt8RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_u8(raw)
        let expected = Milliamperes_t(UInt8(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentUInt8Init() {
        let raw = Milliamperes_t(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mA_t(5)
        let expected2 = UInt16(
            mA_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mA_t_to_u16(ctype))
        )
    }

    func testMilliamperes_tUInt16RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_u16(raw)
        let expected = Milliamperes_t(UInt16(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentUInt16Init() {
        let raw = Milliamperes_t(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_t(5)
        let expected2 = UInt32(
            mA_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mA_t_to_u32(ctype))
        )
    }

    func testMilliamperes_tUInt32RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_u32(raw)
        let expected = Milliamperes_t(UInt32(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentUInt32Init() {
        let raw = Milliamperes_t(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_t(5)
        let expected2 = UInt64(
            mA_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mA_t_to_u64(ctype))
        )
    }

    func testMilliamperes_tUInt64RawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_u64(raw)
        let expected = Milliamperes_t(UInt64(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentUInt64Init() {
        let raw = Milliamperes_t(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tUIntInits() {
        let raw = UInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_t(5)
        let expected2 = UInt(
            mA_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mA_t_to_u64(ctype))
        )
    }

    func testMilliamperes_tUIntRawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_u64(raw)
        let expected = Milliamperes_t(UInt(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentUIntInit() {
        let raw = Milliamperes_t(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_t(5)
        let expected2 = CUnsignedInt(
            mA_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mA_t_to_u32(ctype))
        )
    }

    func testMilliamperes_tCUnsignedIntRawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_u32(raw)
        let expected = Milliamperes_t(CUnsignedInt(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentCUnsignedIntInit() {
        let raw = Milliamperes_t(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tFloatInits() {
        let raw = Float(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mA_t(5)
        let expected2 = Float(
            mA_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mA_t_to_f(ctype))
        )
    }

    func testMilliamperes_tFloatRawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_f(raw)
        let expected = Milliamperes_t(Float(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentFloatInit() {
        let raw = Milliamperes_t(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_tDoubleInits() {
        let raw = Double(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mA_t(5)
        let expected2 = Double(
            mA_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mA_t(5)
        let expected = Milliamperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mA_t_to_d(ctype))
        )
    }

    func testMilliamperes_tDoubleRawValueInit() {
        let raw = milliamperes_t(5)
        let ctype = mA_t_to_d(raw)
        let expected = Milliamperes_t(Double(ctype))
        XCTAssertEqual(Milliamperes_t(rawValue: raw), expected)
    }

    func testMilliamperes_tCurrentDoubleInit() {
        let raw = Milliamperes_t(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testMilliamperes_uToMicroamperes_tCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testMilliamperes_uToMicroamperes_uCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testMilliamperes_uToMicroamperes_fCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testMilliamperes_uToMicroamperes_dCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testMilliamperes_uToMilliamperes_tCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testMilliamperes_uToMilliamperes_fCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testMilliamperes_uToMilliamperes_dCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testMilliamperes_uToAmperes_tCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMilliamperes_uToAmperes_uCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMilliamperes_uToAmperes_fCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMilliamperes_uToAmperes_dCurrentConversions() {
        let original = Milliamperes_u(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMilliamperes_uConversions() {
        let ctype1 = milliamperes_u(5)
        let swiftType1 = Milliamperes_u(rawValue: ctype1)
        let ctype2 = mA_u_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMilliamperes_uInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.milliamperes_u(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMilliamperes_uInt8Inits() {
        let raw = Int8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mA_u(5)
        let expected2 = Int8(
            mA_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mA_u_to_i8(ctype))
        )
    }

    func testMilliamperes_uInt8RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_i8(raw)
        let expected = Milliamperes_u(Int8(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentInt8Init() {
        let raw = Milliamperes_u(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uInt16Inits() {
        let raw = Int16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mA_u(5)
        let expected2 = Int16(
            mA_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mA_u_to_i16(ctype))
        )
    }

    func testMilliamperes_uInt16RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_i16(raw)
        let expected = Milliamperes_u(Int16(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentInt16Init() {
        let raw = Milliamperes_u(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uInt32Inits() {
        let raw = Int32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_u(5)
        let expected2 = Int32(
            mA_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mA_u_to_i32(ctype))
        )
    }

    func testMilliamperes_uInt32RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_i32(raw)
        let expected = Milliamperes_u(Int32(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentInt32Init() {
        let raw = Milliamperes_u(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uInt64Inits() {
        let raw = Int64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_u(5)
        let expected2 = Int64(
            mA_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mA_u_to_i64(ctype))
        )
    }

    func testMilliamperes_uInt64RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_i64(raw)
        let expected = Milliamperes_u(Int64(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentInt64Init() {
        let raw = Milliamperes_u(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uIntInits() {
        let raw = Int(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_u(5)
        let expected2 = Int(
            mA_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mA_u_to_i64(ctype))
        )
    }

    func testMilliamperes_uIntRawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_i64(raw)
        let expected = Milliamperes_u(Int(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentIntInit() {
        let raw = Milliamperes_u(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uCIntInits() {
        let raw = CInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_u(5)
        let expected2 = CInt(
            mA_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mA_u_to_i32(ctype))
        )
    }

    func testMilliamperes_uCIntRawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_i32(raw)
        let expected = Milliamperes_u(CInt(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentCIntInit() {
        let raw = Milliamperes_u(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mA_u(5)
        let expected2 = UInt8(
            mA_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mA_u_to_u8(ctype))
        )
    }

    func testMilliamperes_uUInt8RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_u8(raw)
        let expected = Milliamperes_u(UInt8(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentUInt8Init() {
        let raw = Milliamperes_u(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mA_u(5)
        let expected2 = UInt16(
            mA_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mA_u_to_u16(ctype))
        )
    }

    func testMilliamperes_uUInt16RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_u16(raw)
        let expected = Milliamperes_u(UInt16(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentUInt16Init() {
        let raw = Milliamperes_u(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_u(5)
        let expected2 = UInt32(
            mA_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mA_u_to_u32(ctype))
        )
    }

    func testMilliamperes_uUInt32RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_u32(raw)
        let expected = Milliamperes_u(UInt32(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentUInt32Init() {
        let raw = Milliamperes_u(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_u(5)
        let expected2 = UInt64(
            mA_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mA_u_to_u64(ctype))
        )
    }

    func testMilliamperes_uUInt64RawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_u64(raw)
        let expected = Milliamperes_u(UInt64(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentUInt64Init() {
        let raw = Milliamperes_u(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uUIntInits() {
        let raw = UInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_u(5)
        let expected2 = UInt(
            mA_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mA_u_to_u64(ctype))
        )
    }

    func testMilliamperes_uUIntRawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_u64(raw)
        let expected = Milliamperes_u(UInt(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentUIntInit() {
        let raw = Milliamperes_u(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_u(5)
        let expected2 = CUnsignedInt(
            mA_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mA_u_to_u32(ctype))
        )
    }

    func testMilliamperes_uCUnsignedIntRawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_u32(raw)
        let expected = Milliamperes_u(CUnsignedInt(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentCUnsignedIntInit() {
        let raw = Milliamperes_u(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uFloatInits() {
        let raw = Float(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mA_u(5)
        let expected2 = Float(
            mA_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mA_u_to_f(ctype))
        )
    }

    func testMilliamperes_uFloatRawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_f(raw)
        let expected = Milliamperes_u(Float(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentFloatInit() {
        let raw = Milliamperes_u(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_uDoubleInits() {
        let raw = Double(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mA_u(5)
        let expected2 = Double(
            mA_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mA_u(5)
        let expected = Milliamperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mA_u_to_d(ctype))
        )
    }

    func testMilliamperes_uDoubleRawValueInit() {
        let raw = milliamperes_u(5)
        let ctype = mA_u_to_d(raw)
        let expected = Milliamperes_u(Double(ctype))
        XCTAssertEqual(Milliamperes_u(rawValue: raw), expected)
    }

    func testMilliamperes_uCurrentDoubleInit() {
        let raw = Milliamperes_u(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testMilliamperes_fToMicroamperes_tCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testMilliamperes_fToMicroamperes_uCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testMilliamperes_fToMicroamperes_fCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testMilliamperes_fToMicroamperes_dCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testMilliamperes_fToMilliamperes_tCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testMilliamperes_fToMilliamperes_uCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testMilliamperes_fToMilliamperes_dCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testMilliamperes_fToAmperes_tCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMilliamperes_fToAmperes_uCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMilliamperes_fToAmperes_fCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMilliamperes_fToAmperes_dCurrentConversions() {
        let original = Milliamperes_f(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMilliamperes_fConversions() {
        let ctype1 = milliamperes_f(5)
        let swiftType1 = Milliamperes_f(rawValue: ctype1)
        let ctype2 = mA_f_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMilliamperes_fInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.milliamperes_f(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMilliamperes_fInt8Inits() {
        let raw = Int8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mA_f(5)
        let expected2 = Int8(
            mA_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mA_f_to_i8(ctype))
        )
    }

    func testMilliamperes_fInt8RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_i8(raw)
        let expected = Milliamperes_f(Int8(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentInt8Init() {
        let raw = Milliamperes_f(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fInt16Inits() {
        let raw = Int16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mA_f(5)
        let expected2 = Int16(
            mA_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mA_f_to_i16(ctype))
        )
    }

    func testMilliamperes_fInt16RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_i16(raw)
        let expected = Milliamperes_f(Int16(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentInt16Init() {
        let raw = Milliamperes_f(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fInt32Inits() {
        let raw = Int32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_f(5)
        let expected2 = Int32(
            mA_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mA_f_to_i32(ctype))
        )
    }

    func testMilliamperes_fInt32RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_i32(raw)
        let expected = Milliamperes_f(Int32(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentInt32Init() {
        let raw = Milliamperes_f(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fInt64Inits() {
        let raw = Int64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_f(5)
        let expected2 = Int64(
            mA_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mA_f_to_i64(ctype))
        )
    }

    func testMilliamperes_fInt64RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_i64(raw)
        let expected = Milliamperes_f(Int64(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentInt64Init() {
        let raw = Milliamperes_f(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fIntInits() {
        let raw = Int(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_f(5)
        let expected2 = Int(
            mA_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mA_f_to_i64(ctype))
        )
    }

    func testMilliamperes_fIntRawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_i64(raw)
        let expected = Milliamperes_f(Int(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentIntInit() {
        let raw = Milliamperes_f(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fCIntInits() {
        let raw = CInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_f(5)
        let expected2 = CInt(
            mA_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mA_f_to_i32(ctype))
        )
    }

    func testMilliamperes_fCIntRawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_i32(raw)
        let expected = Milliamperes_f(CInt(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentCIntInit() {
        let raw = Milliamperes_f(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mA_f(5)
        let expected2 = UInt8(
            mA_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mA_f_to_u8(ctype))
        )
    }

    func testMilliamperes_fUInt8RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_u8(raw)
        let expected = Milliamperes_f(UInt8(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentUInt8Init() {
        let raw = Milliamperes_f(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mA_f(5)
        let expected2 = UInt16(
            mA_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mA_f_to_u16(ctype))
        )
    }

    func testMilliamperes_fUInt16RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_u16(raw)
        let expected = Milliamperes_f(UInt16(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentUInt16Init() {
        let raw = Milliamperes_f(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_f(5)
        let expected2 = UInt32(
            mA_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mA_f_to_u32(ctype))
        )
    }

    func testMilliamperes_fUInt32RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_u32(raw)
        let expected = Milliamperes_f(UInt32(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentUInt32Init() {
        let raw = Milliamperes_f(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_f(5)
        let expected2 = UInt64(
            mA_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mA_f_to_u64(ctype))
        )
    }

    func testMilliamperes_fUInt64RawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_u64(raw)
        let expected = Milliamperes_f(UInt64(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentUInt64Init() {
        let raw = Milliamperes_f(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fUIntInits() {
        let raw = UInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_f(5)
        let expected2 = UInt(
            mA_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mA_f_to_u64(ctype))
        )
    }

    func testMilliamperes_fUIntRawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_u64(raw)
        let expected = Milliamperes_f(UInt(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentUIntInit() {
        let raw = Milliamperes_f(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_f(5)
        let expected2 = CUnsignedInt(
            mA_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mA_f_to_u32(ctype))
        )
    }

    func testMilliamperes_fCUnsignedIntRawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_u32(raw)
        let expected = Milliamperes_f(CUnsignedInt(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentCUnsignedIntInit() {
        let raw = Milliamperes_f(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fFloatInits() {
        let raw = Float(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mA_f(5)
        let expected2 = Float(
            mA_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mA_f_to_f(ctype))
        )
    }

    func testMilliamperes_fFloatRawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_f(raw)
        let expected = Milliamperes_f(Float(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentFloatInit() {
        let raw = Milliamperes_f(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_fDoubleInits() {
        let raw = Double(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mA_f(5)
        let expected2 = Double(
            mA_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mA_f(5)
        let expected = Milliamperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mA_f_to_d(ctype))
        )
    }

    func testMilliamperes_fDoubleRawValueInit() {
        let raw = milliamperes_f(5)
        let ctype = mA_f_to_d(raw)
        let expected = Milliamperes_f(Double(ctype))
        XCTAssertEqual(Milliamperes_f(rawValue: raw), expected)
    }

    func testMilliamperes_fCurrentDoubleInit() {
        let raw = Milliamperes_f(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testMilliamperes_dToMicroamperes_tCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testMilliamperes_dToMicroamperes_uCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testMilliamperes_dToMicroamperes_fCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testMilliamperes_dToMicroamperes_dCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testMilliamperes_dToMilliamperes_tCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testMilliamperes_dToMilliamperes_uCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testMilliamperes_dToMilliamperes_fCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testMilliamperes_dToAmperes_tCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testMilliamperes_dToAmperes_uCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testMilliamperes_dToAmperes_fCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testMilliamperes_dToAmperes_dCurrentConversions() {
        let original = Milliamperes_d(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToMilliamperes_dConversions() {
        let ctype1 = milliamperes_d(5)
        let swiftType1 = Milliamperes_d(rawValue: ctype1)
        let ctype2 = mA_d_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testMilliamperes_dInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.milliamperes_d(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentMilliamperes_dInt8Inits() {
        let raw = Int8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mA_d(5)
        let expected2 = Int8(
            mA_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mA_d_to_i8(ctype))
        )
    }

    func testMilliamperes_dInt8RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_i8(raw)
        let expected = Milliamperes_d(Int8(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentInt8Init() {
        let raw = Milliamperes_d(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dInt16Inits() {
        let raw = Int16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mA_d(5)
        let expected2 = Int16(
            mA_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mA_d_to_i16(ctype))
        )
    }

    func testMilliamperes_dInt16RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_i16(raw)
        let expected = Milliamperes_d(Int16(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentInt16Init() {
        let raw = Milliamperes_d(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dInt32Inits() {
        let raw = Int32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_d(5)
        let expected2 = Int32(
            mA_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mA_d_to_i32(ctype))
        )
    }

    func testMilliamperes_dInt32RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_i32(raw)
        let expected = Milliamperes_d(Int32(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentInt32Init() {
        let raw = Milliamperes_d(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dInt64Inits() {
        let raw = Int64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_d(5)
        let expected2 = Int64(
            mA_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mA_d_to_i64(ctype))
        )
    }

    func testMilliamperes_dInt64RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_i64(raw)
        let expected = Milliamperes_d(Int64(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentInt64Init() {
        let raw = Milliamperes_d(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dIntInits() {
        let raw = Int(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mA_d(5)
        let expected2 = Int(
            mA_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mA_d_to_i64(ctype))
        )
    }

    func testMilliamperes_dIntRawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_i64(raw)
        let expected = Milliamperes_d(Int(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentIntInit() {
        let raw = Milliamperes_d(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dCIntInits() {
        let raw = CInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mA_d(5)
        let expected2 = CInt(
            mA_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mA_d_to_i32(ctype))
        )
    }

    func testMilliamperes_dCIntRawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_i32(raw)
        let expected = Milliamperes_d(CInt(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentCIntInit() {
        let raw = Milliamperes_d(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mA_d(5)
        let expected2 = UInt8(
            mA_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mA_d_to_u8(ctype))
        )
    }

    func testMilliamperes_dUInt8RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_u8(raw)
        let expected = Milliamperes_d(UInt8(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentUInt8Init() {
        let raw = Milliamperes_d(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mA_d(5)
        let expected2 = UInt16(
            mA_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mA_d_to_u16(ctype))
        )
    }

    func testMilliamperes_dUInt16RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_u16(raw)
        let expected = Milliamperes_d(UInt16(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentUInt16Init() {
        let raw = Milliamperes_d(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_d(5)
        let expected2 = UInt32(
            mA_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mA_d_to_u32(ctype))
        )
    }

    func testMilliamperes_dUInt32RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_u32(raw)
        let expected = Milliamperes_d(UInt32(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentUInt32Init() {
        let raw = Milliamperes_d(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_d(5)
        let expected2 = UInt64(
            mA_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mA_d_to_u64(ctype))
        )
    }

    func testMilliamperes_dUInt64RawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_u64(raw)
        let expected = Milliamperes_d(UInt64(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentUInt64Init() {
        let raw = Milliamperes_d(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dUIntInits() {
        let raw = UInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mA_d(5)
        let expected2 = UInt(
            mA_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mA_d_to_u64(ctype))
        )
    }

    func testMilliamperes_dUIntRawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_u64(raw)
        let expected = Milliamperes_d(UInt(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentUIntInit() {
        let raw = Milliamperes_d(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mA_d(5)
        let expected2 = CUnsignedInt(
            mA_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mA_d_to_u32(ctype))
        )
    }

    func testMilliamperes_dCUnsignedIntRawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_u32(raw)
        let expected = Milliamperes_d(CUnsignedInt(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentCUnsignedIntInit() {
        let raw = Milliamperes_d(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dFloatInits() {
        let raw = Float(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mA_d(5)
        let expected2 = Float(
            mA_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mA_d_to_f(ctype))
        )
    }

    func testMilliamperes_dFloatRawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_f(raw)
        let expected = Milliamperes_d(Float(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentFloatInit() {
        let raw = Milliamperes_d(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentMilliamperes_dDoubleInits() {
        let raw = Double(5)
        let expected = Current(milliamperes: raw)
        let result = Current.milliamperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mA_d(5)
        let expected2 = Double(
            mA_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliamperes_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mA_d(5)
        let expected = Milliamperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mA_d_to_d(ctype))
        )
    }

    func testMilliamperes_dDoubleRawValueInit() {
        let raw = milliamperes_d(5)
        let ctype = mA_d_to_d(raw)
        let expected = Milliamperes_d(Double(ctype))
        XCTAssertEqual(Milliamperes_d(rawValue: raw), expected)
    }

    func testMilliamperes_dCurrentDoubleInit() {
        let raw = Milliamperes_d(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .milliamperes_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class AmperesConversionTests: XCTestCase {

    func testAmperes_tToMicroamperes_tCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testAmperes_tToMicroamperes_uCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testAmperes_tToMicroamperes_fCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testAmperes_tToMicroamperes_dCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testAmperes_tToMilliamperes_tCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testAmperes_tToMilliamperes_uCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testAmperes_tToMilliamperes_fCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testAmperes_tToMilliamperes_dCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testAmperes_tToAmperes_uCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testAmperes_tToAmperes_fCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testAmperes_tToAmperes_dCurrentConversions() {
        let original = Amperes_t(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToAmperes_tConversions() {
        let ctype1 = amperes_t(5)
        let swiftType1 = Amperes_t(rawValue: ctype1)
        let ctype2 = A_t_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testAmperes_tInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.amperes_t(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentAmperes_tInt8Inits() {
        let raw = Int8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_A_t(5)
        let expected2 = Int8(
            A_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(A_t_to_i8(ctype))
        )
    }

    func testAmperes_tInt8RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_i8(raw)
        let expected = Amperes_t(Int8(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentInt8Init() {
        let raw = Amperes_t(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tInt16Inits() {
        let raw = Int16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_A_t(5)
        let expected2 = Int16(
            A_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(A_t_to_i16(ctype))
        )
    }

    func testAmperes_tInt16RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_i16(raw)
        let expected = Amperes_t(Int16(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentInt16Init() {
        let raw = Amperes_t(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tInt32Inits() {
        let raw = Int32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_t(5)
        let expected2 = Int32(
            A_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(A_t_to_i32(ctype))
        )
    }

    func testAmperes_tInt32RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_i32(raw)
        let expected = Amperes_t(Int32(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentInt32Init() {
        let raw = Amperes_t(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tInt64Inits() {
        let raw = Int64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_t(5)
        let expected2 = Int64(
            A_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(A_t_to_i64(ctype))
        )
    }

    func testAmperes_tInt64RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_i64(raw)
        let expected = Amperes_t(Int64(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentInt64Init() {
        let raw = Amperes_t(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tIntInits() {
        let raw = Int(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_t(5)
        let expected2 = Int(
            A_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(A_t_to_i64(ctype))
        )
    }

    func testAmperes_tIntRawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_i64(raw)
        let expected = Amperes_t(Int(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentIntInit() {
        let raw = Amperes_t(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tCIntInits() {
        let raw = CInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_t(5)
        let expected2 = CInt(
            A_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(A_t_to_i32(ctype))
        )
    }

    func testAmperes_tCIntRawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_i32(raw)
        let expected = Amperes_t(CInt(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentCIntInit() {
        let raw = Amperes_t(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_A_t(5)
        let expected2 = UInt8(
            A_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(A_t_to_u8(ctype))
        )
    }

    func testAmperes_tUInt8RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_u8(raw)
        let expected = Amperes_t(UInt8(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentUInt8Init() {
        let raw = Amperes_t(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_A_t(5)
        let expected2 = UInt16(
            A_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(A_t_to_u16(ctype))
        )
    }

    func testAmperes_tUInt16RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_u16(raw)
        let expected = Amperes_t(UInt16(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentUInt16Init() {
        let raw = Amperes_t(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_t(5)
        let expected2 = UInt32(
            A_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(A_t_to_u32(ctype))
        )
    }

    func testAmperes_tUInt32RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_u32(raw)
        let expected = Amperes_t(UInt32(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentUInt32Init() {
        let raw = Amperes_t(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_t(5)
        let expected2 = UInt64(
            A_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(A_t_to_u64(ctype))
        )
    }

    func testAmperes_tUInt64RawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_u64(raw)
        let expected = Amperes_t(UInt64(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentUInt64Init() {
        let raw = Amperes_t(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tUIntInits() {
        let raw = UInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_t(5)
        let expected2 = UInt(
            A_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(A_t_to_u64(ctype))
        )
    }

    func testAmperes_tUIntRawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_u64(raw)
        let expected = Amperes_t(UInt(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentUIntInit() {
        let raw = Amperes_t(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_t(5)
        let expected2 = CUnsignedInt(
            A_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(A_t_to_u32(ctype))
        )
    }

    func testAmperes_tCUnsignedIntRawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_u32(raw)
        let expected = Amperes_t(CUnsignedInt(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentCUnsignedIntInit() {
        let raw = Amperes_t(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tFloatInits() {
        let raw = Float(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_A_t(5)
        let expected2 = Float(
            A_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(A_t_to_f(ctype))
        )
    }

    func testAmperes_tFloatRawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_f(raw)
        let expected = Amperes_t(Float(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentFloatInit() {
        let raw = Amperes_t(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_tDoubleInits() {
        let raw = Double(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_A_t(5)
        let expected2 = Double(
            A_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_A_t(5)
        let expected = Amperes_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(A_t_to_d(ctype))
        )
    }

    func testAmperes_tDoubleRawValueInit() {
        let raw = amperes_t(5)
        let ctype = A_t_to_d(raw)
        let expected = Amperes_t(Double(ctype))
        XCTAssertEqual(Amperes_t(rawValue: raw), expected)
    }

    func testAmperes_tCurrentDoubleInit() {
        let raw = Amperes_t(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testAmperes_uToMicroamperes_tCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testAmperes_uToMicroamperes_uCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testAmperes_uToMicroamperes_fCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testAmperes_uToMicroamperes_dCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testAmperes_uToMilliamperes_tCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testAmperes_uToMilliamperes_uCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testAmperes_uToMilliamperes_fCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testAmperes_uToMilliamperes_dCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testAmperes_uToAmperes_tCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testAmperes_uToAmperes_fCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testAmperes_uToAmperes_dCurrentConversions() {
        let original = Amperes_u(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToAmperes_uConversions() {
        let ctype1 = amperes_u(5)
        let swiftType1 = Amperes_u(rawValue: ctype1)
        let ctype2 = A_u_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testAmperes_uInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.amperes_u(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentAmperes_uInt8Inits() {
        let raw = Int8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_A_u(5)
        let expected2 = Int8(
            A_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(A_u_to_i8(ctype))
        )
    }

    func testAmperes_uInt8RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_i8(raw)
        let expected = Amperes_u(Int8(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentInt8Init() {
        let raw = Amperes_u(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uInt16Inits() {
        let raw = Int16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_A_u(5)
        let expected2 = Int16(
            A_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(A_u_to_i16(ctype))
        )
    }

    func testAmperes_uInt16RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_i16(raw)
        let expected = Amperes_u(Int16(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentInt16Init() {
        let raw = Amperes_u(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uInt32Inits() {
        let raw = Int32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_u(5)
        let expected2 = Int32(
            A_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(A_u_to_i32(ctype))
        )
    }

    func testAmperes_uInt32RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_i32(raw)
        let expected = Amperes_u(Int32(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentInt32Init() {
        let raw = Amperes_u(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uInt64Inits() {
        let raw = Int64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_u(5)
        let expected2 = Int64(
            A_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(A_u_to_i64(ctype))
        )
    }

    func testAmperes_uInt64RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_i64(raw)
        let expected = Amperes_u(Int64(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentInt64Init() {
        let raw = Amperes_u(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uIntInits() {
        let raw = Int(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_u(5)
        let expected2 = Int(
            A_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(A_u_to_i64(ctype))
        )
    }

    func testAmperes_uIntRawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_i64(raw)
        let expected = Amperes_u(Int(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentIntInit() {
        let raw = Amperes_u(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uCIntInits() {
        let raw = CInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_u(5)
        let expected2 = CInt(
            A_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(A_u_to_i32(ctype))
        )
    }

    func testAmperes_uCIntRawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_i32(raw)
        let expected = Amperes_u(CInt(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentCIntInit() {
        let raw = Amperes_u(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_A_u(5)
        let expected2 = UInt8(
            A_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(A_u_to_u8(ctype))
        )
    }

    func testAmperes_uUInt8RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_u8(raw)
        let expected = Amperes_u(UInt8(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentUInt8Init() {
        let raw = Amperes_u(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_A_u(5)
        let expected2 = UInt16(
            A_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(A_u_to_u16(ctype))
        )
    }

    func testAmperes_uUInt16RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_u16(raw)
        let expected = Amperes_u(UInt16(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentUInt16Init() {
        let raw = Amperes_u(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_u(5)
        let expected2 = UInt32(
            A_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(A_u_to_u32(ctype))
        )
    }

    func testAmperes_uUInt32RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_u32(raw)
        let expected = Amperes_u(UInt32(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentUInt32Init() {
        let raw = Amperes_u(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_u(5)
        let expected2 = UInt64(
            A_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(A_u_to_u64(ctype))
        )
    }

    func testAmperes_uUInt64RawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_u64(raw)
        let expected = Amperes_u(UInt64(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentUInt64Init() {
        let raw = Amperes_u(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uUIntInits() {
        let raw = UInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_u(5)
        let expected2 = UInt(
            A_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(A_u_to_u64(ctype))
        )
    }

    func testAmperes_uUIntRawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_u64(raw)
        let expected = Amperes_u(UInt(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentUIntInit() {
        let raw = Amperes_u(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_u(5)
        let expected2 = CUnsignedInt(
            A_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(A_u_to_u32(ctype))
        )
    }

    func testAmperes_uCUnsignedIntRawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_u32(raw)
        let expected = Amperes_u(CUnsignedInt(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentCUnsignedIntInit() {
        let raw = Amperes_u(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uFloatInits() {
        let raw = Float(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_A_u(5)
        let expected2 = Float(
            A_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(A_u_to_f(ctype))
        )
    }

    func testAmperes_uFloatRawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_f(raw)
        let expected = Amperes_u(Float(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentFloatInit() {
        let raw = Amperes_u(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_uDoubleInits() {
        let raw = Double(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_A_u(5)
        let expected2 = Double(
            A_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_A_u(5)
        let expected = Amperes_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(A_u_to_d(ctype))
        )
    }

    func testAmperes_uDoubleRawValueInit() {
        let raw = amperes_u(5)
        let ctype = A_u_to_d(raw)
        let expected = Amperes_u(Double(ctype))
        XCTAssertEqual(Amperes_u(rawValue: raw), expected)
    }

    func testAmperes_uCurrentDoubleInit() {
        let raw = Amperes_u(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testAmperes_fToMicroamperes_tCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testAmperes_fToMicroamperes_uCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testAmperes_fToMicroamperes_fCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testAmperes_fToMicroamperes_dCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testAmperes_fToMilliamperes_tCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testAmperes_fToMilliamperes_uCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testAmperes_fToMilliamperes_fCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testAmperes_fToMilliamperes_dCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testAmperes_fToAmperes_tCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testAmperes_fToAmperes_uCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testAmperes_fToAmperes_dCurrentConversions() {
        let original = Amperes_f(5)
        let category = Current(original)
        let other = category.amperes_d
        XCTAssertEqual(other, Amperes_d(original))
    }

    func testAmperes_dToAmperes_fConversions() {
        let ctype1 = amperes_f(5)
        let swiftType1 = Amperes_f(rawValue: ctype1)
        let ctype2 = A_f_to_A_d(ctype1)
        let swiftType2 = Amperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_d(swiftType1))
    }

    func testAmperes_fInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.amperes_f(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentAmperes_fInt8Inits() {
        let raw = Int8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_A_f(5)
        let expected2 = Int8(
            A_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(A_f_to_i8(ctype))
        )
    }

    func testAmperes_fInt8RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_i8(raw)
        let expected = Amperes_f(Int8(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentInt8Init() {
        let raw = Amperes_f(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fInt16Inits() {
        let raw = Int16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_A_f(5)
        let expected2 = Int16(
            A_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(A_f_to_i16(ctype))
        )
    }

    func testAmperes_fInt16RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_i16(raw)
        let expected = Amperes_f(Int16(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentInt16Init() {
        let raw = Amperes_f(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fInt32Inits() {
        let raw = Int32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_f(5)
        let expected2 = Int32(
            A_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(A_f_to_i32(ctype))
        )
    }

    func testAmperes_fInt32RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_i32(raw)
        let expected = Amperes_f(Int32(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentInt32Init() {
        let raw = Amperes_f(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fInt64Inits() {
        let raw = Int64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_f(5)
        let expected2 = Int64(
            A_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(A_f_to_i64(ctype))
        )
    }

    func testAmperes_fInt64RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_i64(raw)
        let expected = Amperes_f(Int64(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentInt64Init() {
        let raw = Amperes_f(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fIntInits() {
        let raw = Int(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_f(5)
        let expected2 = Int(
            A_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(A_f_to_i64(ctype))
        )
    }

    func testAmperes_fIntRawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_i64(raw)
        let expected = Amperes_f(Int(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentIntInit() {
        let raw = Amperes_f(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fCIntInits() {
        let raw = CInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_f(5)
        let expected2 = CInt(
            A_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(A_f_to_i32(ctype))
        )
    }

    func testAmperes_fCIntRawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_i32(raw)
        let expected = Amperes_f(CInt(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentCIntInit() {
        let raw = Amperes_f(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_A_f(5)
        let expected2 = UInt8(
            A_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(A_f_to_u8(ctype))
        )
    }

    func testAmperes_fUInt8RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_u8(raw)
        let expected = Amperes_f(UInt8(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentUInt8Init() {
        let raw = Amperes_f(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_A_f(5)
        let expected2 = UInt16(
            A_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(A_f_to_u16(ctype))
        )
    }

    func testAmperes_fUInt16RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_u16(raw)
        let expected = Amperes_f(UInt16(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentUInt16Init() {
        let raw = Amperes_f(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_f(5)
        let expected2 = UInt32(
            A_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(A_f_to_u32(ctype))
        )
    }

    func testAmperes_fUInt32RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_u32(raw)
        let expected = Amperes_f(UInt32(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentUInt32Init() {
        let raw = Amperes_f(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_f(5)
        let expected2 = UInt64(
            A_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(A_f_to_u64(ctype))
        )
    }

    func testAmperes_fUInt64RawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_u64(raw)
        let expected = Amperes_f(UInt64(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentUInt64Init() {
        let raw = Amperes_f(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fUIntInits() {
        let raw = UInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_f(5)
        let expected2 = UInt(
            A_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(A_f_to_u64(ctype))
        )
    }

    func testAmperes_fUIntRawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_u64(raw)
        let expected = Amperes_f(UInt(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentUIntInit() {
        let raw = Amperes_f(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_f(5)
        let expected2 = CUnsignedInt(
            A_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(A_f_to_u32(ctype))
        )
    }

    func testAmperes_fCUnsignedIntRawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_u32(raw)
        let expected = Amperes_f(CUnsignedInt(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentCUnsignedIntInit() {
        let raw = Amperes_f(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fFloatInits() {
        let raw = Float(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_A_f(5)
        let expected2 = Float(
            A_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(A_f_to_f(ctype))
        )
    }

    func testAmperes_fFloatRawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_f(raw)
        let expected = Amperes_f(Float(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentFloatInit() {
        let raw = Amperes_f(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_fDoubleInits() {
        let raw = Double(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_A_f(5)
        let expected2 = Double(
            A_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_A_f(5)
        let expected = Amperes_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(A_f_to_d(ctype))
        )
    }

    func testAmperes_fDoubleRawValueInit() {
        let raw = amperes_f(5)
        let ctype = A_f_to_d(raw)
        let expected = Amperes_f(Double(ctype))
        XCTAssertEqual(Amperes_f(rawValue: raw), expected)
    }

    func testAmperes_fCurrentDoubleInit() {
        let raw = Amperes_f(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testAmperes_dToMicroamperes_tCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.microamperes_t
        XCTAssertEqual(other, Microamperes_t(original))
    }

    func testMicroamperes_tToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_uA_t(ctype1)
        let swiftType2 = Microamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_t(swiftType1))
    }

    func testAmperes_dToMicroamperes_uCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.microamperes_u
        XCTAssertEqual(other, Microamperes_u(original))
    }

    func testMicroamperes_uToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_uA_u(ctype1)
        let swiftType2 = Microamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_u(swiftType1))
    }

    func testAmperes_dToMicroamperes_fCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.microamperes_f
        XCTAssertEqual(other, Microamperes_f(original))
    }

    func testMicroamperes_fToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_uA_f(ctype1)
        let swiftType2 = Microamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_f(swiftType1))
    }

    func testAmperes_dToMicroamperes_dCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.microamperes_d
        XCTAssertEqual(other, Microamperes_d(original))
    }

    func testMicroamperes_dToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_uA_d(ctype1)
        let swiftType2 = Microamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microamperes_d(swiftType1))
    }

    func testAmperes_dToMilliamperes_tCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_t
        XCTAssertEqual(other, Milliamperes_t(original))
    }

    func testMilliamperes_tToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_mA_t(ctype1)
        let swiftType2 = Milliamperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_t(swiftType1))
    }

    func testAmperes_dToMilliamperes_uCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_u
        XCTAssertEqual(other, Milliamperes_u(original))
    }

    func testMilliamperes_uToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_mA_u(ctype1)
        let swiftType2 = Milliamperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_u(swiftType1))
    }

    func testAmperes_dToMilliamperes_fCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_f
        XCTAssertEqual(other, Milliamperes_f(original))
    }

    func testMilliamperes_fToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_mA_f(ctype1)
        let swiftType2 = Milliamperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_f(swiftType1))
    }

    func testAmperes_dToMilliamperes_dCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.milliamperes_d
        XCTAssertEqual(other, Milliamperes_d(original))
    }

    func testMilliamperes_dToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_mA_d(ctype1)
        let swiftType2 = Milliamperes_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliamperes_d(swiftType1))
    }

    func testAmperes_dToAmperes_tCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.amperes_t
        XCTAssertEqual(other, Amperes_t(original))
    }

    func testAmperes_tToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_A_t(ctype1)
        let swiftType2 = Amperes_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_t(swiftType1))
    }

    func testAmperes_dToAmperes_uCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.amperes_u
        XCTAssertEqual(other, Amperes_u(original))
    }

    func testAmperes_uToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_A_u(ctype1)
        let swiftType2 = Amperes_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_u(swiftType1))
    }

    func testAmperes_dToAmperes_fCurrentConversions() {
        let original = Amperes_d(5)
        let category = Current(original)
        let other = category.amperes_f
        XCTAssertEqual(other, Amperes_f(original))
    }

    func testAmperes_fToAmperes_dConversions() {
        let ctype1 = amperes_d(5)
        let swiftType1 = Amperes_d(rawValue: ctype1)
        let ctype2 = A_d_to_A_f(ctype1)
        let swiftType2 = Amperes_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Amperes_f(swiftType1))
    }

    func testAmperes_dInitFromTypeEnum() {
        let underlyingType = Current.CurrentTypes.amperes_d(5)
        let category = Current(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testCurrentAmperes_dInt8Inits() {
        let raw = Int8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_A_d(5)
        let expected2 = Int8(
            A_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(A_d_to_i8(ctype))
        )
    }

    func testAmperes_dInt8RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_i8(raw)
        let expected = Amperes_d(Int8(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentInt8Init() {
        let raw = Amperes_d(Int8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dInt16Inits() {
        let raw = Int16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_A_d(5)
        let expected2 = Int16(
            A_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(A_d_to_i16(ctype))
        )
    }

    func testAmperes_dInt16RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_i16(raw)
        let expected = Amperes_d(Int16(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentInt16Init() {
        let raw = Amperes_d(Int16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dInt32Inits() {
        let raw = Int32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_d(5)
        let expected2 = Int32(
            A_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(A_d_to_i32(ctype))
        )
    }

    func testAmperes_dInt32RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_i32(raw)
        let expected = Amperes_d(Int32(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentInt32Init() {
        let raw = Amperes_d(Int32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dInt64Inits() {
        let raw = Int64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_d(5)
        let expected2 = Int64(
            A_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(A_d_to_i64(ctype))
        )
    }

    func testAmperes_dInt64RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_i64(raw)
        let expected = Amperes_d(Int64(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentInt64Init() {
        let raw = Amperes_d(Int64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dIntInits() {
        let raw = Int(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_A_d(5)
        let expected2 = Int(
            A_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(A_d_to_i64(ctype))
        )
    }

    func testAmperes_dIntRawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_i64(raw)
        let expected = Amperes_d(Int(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentIntInit() {
        let raw = Amperes_d(Int(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dCIntInits() {
        let raw = CInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_A_d(5)
        let expected2 = CInt(
            A_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(A_d_to_i32(ctype))
        )
    }

    func testAmperes_dCIntRawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_i32(raw)
        let expected = Amperes_d(CInt(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentCIntInit() {
        let raw = Amperes_d(CInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_A_d(5)
        let expected2 = UInt8(
            A_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(A_d_to_u8(ctype))
        )
    }

    func testAmperes_dUInt8RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_u8(raw)
        let expected = Amperes_d(UInt8(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentUInt8Init() {
        let raw = Amperes_d(UInt8(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_A_d(5)
        let expected2 = UInt16(
            A_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(A_d_to_u16(ctype))
        )
    }

    func testAmperes_dUInt16RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_u16(raw)
        let expected = Amperes_d(UInt16(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentUInt16Init() {
        let raw = Amperes_d(UInt16(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_d(5)
        let expected2 = UInt32(
            A_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(A_d_to_u32(ctype))
        )
    }

    func testAmperes_dUInt32RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_u32(raw)
        let expected = Amperes_d(UInt32(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentUInt32Init() {
        let raw = Amperes_d(UInt32(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_d(5)
        let expected2 = UInt64(
            A_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(A_d_to_u64(ctype))
        )
    }

    func testAmperes_dUInt64RawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_u64(raw)
        let expected = Amperes_d(UInt64(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentUInt64Init() {
        let raw = Amperes_d(UInt64(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dUIntInits() {
        let raw = UInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_A_d(5)
        let expected2 = UInt(
            A_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(A_d_to_u64(ctype))
        )
    }

    func testAmperes_dUIntRawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_u64(raw)
        let expected = Amperes_d(UInt(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentUIntInit() {
        let raw = Amperes_d(UInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_A_d(5)
        let expected2 = CUnsignedInt(
            A_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(A_d_to_u32(ctype))
        )
    }

    func testAmperes_dCUnsignedIntRawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_u32(raw)
        let expected = Amperes_d(CUnsignedInt(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentCUnsignedIntInit() {
        let raw = Amperes_d(CUnsignedInt(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dFloatInits() {
        let raw = Float(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_A_d(5)
        let expected2 = Float(
            A_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(A_d_to_f(ctype))
        )
    }

    func testAmperes_dFloatRawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_f(raw)
        let expected = Amperes_d(Float(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentFloatInit() {
        let raw = Amperes_d(Float(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testCurrentAmperes_dDoubleInits() {
        let raw = Double(5)
        let expected = Current(amperes: raw)
        let result = Current.amperes(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_A_d(5)
        let expected2 = Double(
            A_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testAmperes_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_A_d(5)
        let expected = Amperes_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(A_d_to_d(ctype))
        )
    }

    func testAmperes_dDoubleRawValueInit() {
        let raw = amperes_d(5)
        let ctype = A_d_to_d(raw)
        let expected = Amperes_d(Double(ctype))
        XCTAssertEqual(Amperes_d(rawValue: raw), expected)
    }

    func testAmperes_dCurrentDoubleInit() {
        let raw = Amperes_d(Double(5))
        let category = Current(raw)
        let expected = Current(rawValue: .amperes_d(raw))
        XCTAssertEqual(category, expected)
    }

}

/// Provides microamperes_t unit tests.
final class Microamperes_tTests: XCTestCase {

    func testmicroamperes_tTomilliamperes_tUsing15Expectingmilliamperes_t151000() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_mA_t(15)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsing25Expectingmilliamperes_t251000() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_mA_t(25)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsing250Expectingmilliamperes_t2501000() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_mA_t(250)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsing0Expectingmilliamperes_t01000() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_mA_t(0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsing2500Expectingmilliamperes_t25001000() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_mA_t(2500)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsing25000Expectingmilliamperes_t250001000() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_mA_t(25000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsing250000Expectingmilliamperes_t2500001000() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_mA_t(250000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsing2500000Expectingmilliamperes_t25000001000() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_mA_t(2500000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsingNeg323Expectingmilliamperes_tNeg3231000() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_mA_t(-323)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsingNeg10Expectingmilliamperes_tNeg101000() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_mA_t(-10)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsingNeg1000Expectingmilliamperes_tNeg10001000() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_mA_t(-1000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsingNeg5Expectingmilliamperes_tNeg51000() {
        let unit = Microamperes_t(-5)
        let expected = uA_t_to_mA_t(-5)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsingCInt_minExpectingmilliamperes_tCInt_min1000() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_mA_t(CInt.min)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_tUsingCInt_maxExpectingmilliamperes_tCInt_max1000() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_mA_t(CInt.max)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing15Expectingamperes_t151000000() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_A_t(15)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing25Expectingamperes_t251000000() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_A_t(25)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing250Expectingamperes_t2501000000() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_A_t(250)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing0Expectingamperes_t01000000() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_A_t(0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing2500Expectingamperes_t25001000000() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_A_t(2500)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing25000Expectingamperes_t250001000000() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_A_t(25000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing250000Expectingamperes_t2500001000000() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_A_t(250000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsing2500000Expectingamperes_t25000001000000() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_A_t(2500000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsingNeg323Expectingamperes_tNeg3231000000() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_A_t(-323)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsingNeg10Expectingamperes_tNeg101000000() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_A_t(-10)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsingNeg1000Expectingamperes_tNeg10001000000() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_A_t(-1000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsingNeg5Expectingamperes_tNeg51000000() {
        let unit = Microamperes_t(-5)
        let expected = uA_t_to_A_t(-5)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsingCInt_minExpectingamperes_tCInt_min1000000() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_A_t(CInt.min)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_tUsingCInt_maxExpectingamperes_tCInt_max1000000() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_A_t(CInt.max)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_uUsing0Expecting0() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_uA_u(0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_uUsingmicroamperes_tCInt_minExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Microamperes_t(microamperes_t(CInt.min))
        let expected = uA_t_to_uA_u(microamperes_t(CInt.min))
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_uUsingmicroamperes_tCInt_maxExpectingmicroamperes_uCInt_max() {
        let unit = Microamperes_t(microamperes_t(CInt.max))
        let expected = uA_t_to_uA_u(microamperes_t(CInt.max))
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_uUsing5Expecting5() {
        let unit = Microamperes_t(5)
        let expected = uA_t_to_uA_u(5)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing15Expectingmilliamperes_u151000() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_mA_u(15)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing25Expectingmilliamperes_u251000() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_mA_u(25)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing250Expectingmilliamperes_u2501000() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_mA_u(250)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing0Expectingmilliamperes_u01000() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_mA_u(0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing2500Expectingmilliamperes_u25001000() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_mA_u(2500)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing25000Expectingmilliamperes_u250001000() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_mA_u(25000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing250000Expectingmilliamperes_u2500001000() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_mA_u(250000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsing2500000Expectingmilliamperes_u25000001000() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_mA_u(2500000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsingNeg323Expecting0() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_mA_u(-323)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsingNeg10Expecting0() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_mA_u(-10)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsingNeg1000Expecting0() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_mA_u(-1000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsingNeg6Expecting0() {
        let unit = Microamperes_t(-6)
        let expected = uA_t_to_mA_u(-6)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsingCInt_minExpecting0() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_mA_u(CInt.min)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_uUsingCInt_maxExpectingmilliamperes_uCInt_max1000() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_mA_u(CInt.max)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing15Expectingamperes_u151000000() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_A_u(15)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing25Expectingamperes_u251000000() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_A_u(25)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing250Expectingamperes_u2501000000() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_A_u(250)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing0Expectingamperes_u01000000() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_A_u(0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing2500Expectingamperes_u25001000000() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_A_u(2500)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing25000Expectingamperes_u250001000000() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_A_u(25000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing250000Expectingamperes_u2500001000000() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_A_u(250000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsing2500000Expectingamperes_u25000001000000() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_A_u(2500000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsingNeg323Expecting0() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_A_u(-323)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsingNeg10Expecting0() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_A_u(-10)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsingNeg1000Expecting0() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_A_u(-1000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsingNeg6Expecting0() {
        let unit = Microamperes_t(-6)
        let expected = uA_t_to_A_u(-6)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsingCInt_minExpecting0() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_A_u(CInt.min)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_uUsingCInt_maxExpectingamperes_uCInt_max1000000() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_A_u(CInt.max)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_fUsing0Expecting0_0() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_uA_f(0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_fUsingmicroamperes_tCInt_minExpectingmicroamperes_fCInt_min() {
        let unit = Microamperes_t(microamperes_t(CInt.min))
        let expected = uA_t_to_uA_f(microamperes_t(CInt.min))
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_fUsingmicroamperes_tCInt_maxExpectingmicroamperes_fCInt_max() {
        let unit = Microamperes_t(microamperes_t(CInt.max))
        let expected = uA_t_to_uA_f(microamperes_t(CInt.max))
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_fUsing5Expecting5_0() {
        let unit = Microamperes_t(5)
        let expected = uA_t_to_uA_f(5)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing15Expectingmilliamperes_f15_01000_0() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_mA_f(15)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing25Expectingmilliamperes_f25_01000_0() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_mA_f(25)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing250Expectingmilliamperes_f250_01000_0() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_mA_f(250)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing0Expectingmilliamperes_f0_01000_0() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_mA_f(0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing2500Expectingmilliamperes_f2500_01000_0() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_mA_f(2500)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing25000Expectingmilliamperes_f25000_01000_0() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_mA_f(25000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing250000Expectingmilliamperes_f250000_01000_0() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_mA_f(250000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsing2500000Expectingmilliamperes_f2500000_01000_0() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_mA_f(2500000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsingNeg323Expectingmilliamperes_fNeg323_01000_0() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_mA_f(-323)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsingNeg10Expectingmilliamperes_fNeg10_01000_0() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_mA_f(-10)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsingNeg1000Expectingmilliamperes_fNeg1000_01000_0() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_mA_f(-1000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsingNeg5Expectingmilliamperes_fNeg5_01000_0() {
        let unit = Microamperes_t(-5)
        let expected = uA_t_to_mA_f(-5)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsingCInt_minExpectingmilliamperes_fCInt_min1000_0() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_mA_f(CInt.min)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_fUsingCInt_maxExpectingmilliamperes_fCInt_max1000_0() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_mA_f(CInt.max)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing15Expectingamperes_f15_01000000_0() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_A_f(15)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing25Expectingamperes_f25_01000000_0() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_A_f(25)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing250Expectingamperes_f250_01000000_0() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_A_f(250)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing0Expectingamperes_f0_01000000_0() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_A_f(0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing2500Expectingamperes_f2500_01000000_0() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_A_f(2500)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing25000Expectingamperes_f25000_01000000_0() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_A_f(25000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing250000Expectingamperes_f250000_01000000_0() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_A_f(250000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsing2500000Expectingamperes_f2500000_01000000_0() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_A_f(2500000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsingNeg323Expectingamperes_fNeg323_01000000_0() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_A_f(-323)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsingNeg10Expectingamperes_fNeg10_01000000_0() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_A_f(-10)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsingNeg1000Expectingamperes_fNeg1000_01000000_0() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_A_f(-1000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsingNeg5Expectingamperes_fNeg5_01000000_0() {
        let unit = Microamperes_t(-5)
        let expected = uA_t_to_A_f(-5)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsingCInt_minExpectingamperes_fCInt_min1000000_0() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_A_f(CInt.min)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_fUsingCInt_maxExpectingamperes_fCInt_max1000000_0() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_A_f(CInt.max)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_dUsing0Expecting0_0() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_uA_d(0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_dUsingmicroamperes_tCInt_minExpectingmicroamperes_dCInt_min() {
        let unit = Microamperes_t(microamperes_t(CInt.min))
        let expected = uA_t_to_uA_d(microamperes_t(CInt.min))
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_dUsingmicroamperes_tCInt_maxExpectingmicroamperes_dCInt_max() {
        let unit = Microamperes_t(microamperes_t(CInt.max))
        let expected = uA_t_to_uA_d(microamperes_t(CInt.max))
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomicroamperes_dUsing5Expecting5_0() {
        let unit = Microamperes_t(5)
        let expected = uA_t_to_uA_d(5)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing15Expectingmilliamperes_d15_01000_0() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_mA_d(15)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing25Expectingmilliamperes_d25_01000_0() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_mA_d(25)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing250Expectingmilliamperes_d250_01000_0() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_mA_d(250)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing0Expectingmilliamperes_d0_01000_0() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_mA_d(0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing2500Expectingmilliamperes_d2500_01000_0() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_mA_d(2500)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing25000Expectingmilliamperes_d25000_01000_0() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_mA_d(25000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing250000Expectingmilliamperes_d250000_01000_0() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_mA_d(250000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsing2500000Expectingmilliamperes_d2500000_01000_0() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_mA_d(2500000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsingNeg323Expectingmilliamperes_dNeg323_01000_0() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_mA_d(-323)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsingNeg10Expectingmilliamperes_dNeg10_01000_0() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_mA_d(-10)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsingNeg1000Expectingmilliamperes_dNeg1000_01000_0() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_mA_d(-1000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsingNeg5Expectingmilliamperes_dNeg5_01000_0() {
        let unit = Microamperes_t(-5)
        let expected = uA_t_to_mA_d(-5)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsingCInt_minExpectingmilliamperes_dCInt_min1000_0() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_mA_d(CInt.min)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTomilliamperes_dUsingCInt_maxExpectingmilliamperes_dCInt_max1000_0() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_mA_d(CInt.max)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing15Expectingamperes_d15_01000000_0() {
        let unit = Microamperes_t(15)
        let expected = uA_t_to_A_d(15)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing25Expectingamperes_d25_01000000_0() {
        let unit = Microamperes_t(25)
        let expected = uA_t_to_A_d(25)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing250Expectingamperes_d250_01000000_0() {
        let unit = Microamperes_t(250)
        let expected = uA_t_to_A_d(250)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing0Expectingamperes_d0_01000000_0() {
        let unit = Microamperes_t(0)
        let expected = uA_t_to_A_d(0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing2500Expectingamperes_d2500_01000000_0() {
        let unit = Microamperes_t(2500)
        let expected = uA_t_to_A_d(2500)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing25000Expectingamperes_d25000_01000000_0() {
        let unit = Microamperes_t(25000)
        let expected = uA_t_to_A_d(25000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing250000Expectingamperes_d250000_01000000_0() {
        let unit = Microamperes_t(250000)
        let expected = uA_t_to_A_d(250000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsing2500000Expectingamperes_d2500000_01000000_0() {
        let unit = Microamperes_t(2500000)
        let expected = uA_t_to_A_d(2500000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsingNeg323Expectingamperes_dNeg323_01000000_0() {
        let unit = Microamperes_t(-323)
        let expected = uA_t_to_A_d(-323)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsingNeg10Expectingamperes_dNeg10_01000000_0() {
        let unit = Microamperes_t(-10)
        let expected = uA_t_to_A_d(-10)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsingNeg1000Expectingamperes_dNeg1000_01000000_0() {
        let unit = Microamperes_t(-1000)
        let expected = uA_t_to_A_d(-1000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsingNeg5Expectingamperes_dNeg5_01000000_0() {
        let unit = Microamperes_t(-5)
        let expected = uA_t_to_A_d(-5)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsingCInt_minExpectingamperes_dCInt_min1000000_0() {
        let unit = Microamperes_t(CInt.min)
        let expected = uA_t_to_A_d(CInt.min)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tToamperes_dUsingCInt_maxExpectingamperes_dCInt_max1000000_0() {
        let unit = Microamperes_t(CInt.max)
        let expected = uA_t_to_A_d(CInt.max)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_tTointUsing0Expecting0() {
        let expected = uA_t_to_i(0)
        let result = CInt(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTointUsing5Expecting5() {
        let expected = uA_t_to_i(5)
        let result = CInt(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTointUsingmicroamperes_tCInt_minExpectingCIntCInt_min() {
        let expected = uA_t_to_i(microamperes_t(CInt.min))
        let result = CInt(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTointUsingmicroamperes_tCInt_maxExpectingCIntCInt_max() {
        let expected = uA_t_to_i(microamperes_t(CInt.max))
        let result = CInt(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_tUsing0Expecting0() {
        let expected = i_to_uA_t(0)
        let result = Microamperes_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_tUsing5Expecting5() {
        let expected = i_to_uA_t(5)
        let result = Microamperes_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint8_tUsing0Expecting0() {
        let expected = uA_t_to_i8(0)
        let result = Int8(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint8_tUsing5Expecting5() {
        let expected = uA_t_to_i8(5)
        let result = Int8(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint8_tUsingmicroamperes_tCInt_minExpectingInt8Int8_min() {
        let expected = uA_t_to_i8(microamperes_t(CInt.min))
        let result = Int8(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint8_tUsingmicroamperes_tCInt_maxExpectingInt8Int8_max() {
        let expected = uA_t_to_i8(microamperes_t(CInt.max))
        let result = Int8(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_tUsing0Expecting0() {
        let expected = i8_to_uA_t(0)
        let result = Microamperes_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_tUsing5Expecting5() {
        let expected = i8_to_uA_t(5)
        let result = Microamperes_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_tUsingInt8Int8_minExpectingmicroamperes_tInt8_min() {
        let expected = i8_to_uA_t(Int8(Int8.min))
        let result = Microamperes_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_tUsingInt8Int8_maxExpectingmicroamperes_tInt8_max() {
        let expected = i8_to_uA_t(Int8(Int8.max))
        let result = Microamperes_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint16_tUsing0Expecting0() {
        let expected = uA_t_to_i16(0)
        let result = Int16(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint16_tUsing5Expecting5() {
        let expected = uA_t_to_i16(5)
        let result = Int16(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint16_tUsingmicroamperes_tCInt_minExpectingInt16Int16_min() {
        let expected = uA_t_to_i16(microamperes_t(CInt.min))
        let result = Int16(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint16_tUsingmicroamperes_tCInt_maxExpectingInt16Int16_max() {
        let expected = uA_t_to_i16(microamperes_t(CInt.max))
        let result = Int16(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_tUsing0Expecting0() {
        let expected = i16_to_uA_t(0)
        let result = Microamperes_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_tUsing5Expecting5() {
        let expected = i16_to_uA_t(5)
        let result = Microamperes_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_tUsingInt16Int16_minExpectingmicroamperes_tInt16_min() {
        let expected = i16_to_uA_t(Int16(Int16.min))
        let result = Microamperes_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_tUsingInt16Int16_maxExpectingmicroamperes_tInt16_max() {
        let expected = i16_to_uA_t(Int16(Int16.max))
        let result = Microamperes_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint32_tUsing0Expecting0() {
        let expected = uA_t_to_i32(0)
        let result = Int32(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint32_tUsing5Expecting5() {
        let expected = uA_t_to_i32(5)
        let result = Int32(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint32_tUsingmicroamperes_tCInt_minExpectingInt32CInt_min() {
        let expected = uA_t_to_i32(microamperes_t(CInt.min))
        let result = Int32(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint32_tUsingmicroamperes_tCInt_maxExpectingInt32CInt_max() {
        let expected = uA_t_to_i32(microamperes_t(CInt.max))
        let result = Int32(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_tUsing0Expecting0() {
        let expected = i32_to_uA_t(0)
        let result = Microamperes_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_tUsing5Expecting5() {
        let expected = i32_to_uA_t(5)
        let result = Microamperes_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_tUsingInt32Int32_minExpectingmicroamperes_tCInt_min() {
        let expected = i32_to_uA_t(Int32(Int32.min))
        let result = Microamperes_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_tUsingInt32Int32_maxExpectingmicroamperes_tCInt_max() {
        let expected = i32_to_uA_t(Int32(Int32.max))
        let result = Microamperes_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint64_tUsing0Expecting0() {
        let expected = uA_t_to_i64(0)
        let result = Int64(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint64_tUsing5Expecting5() {
        let expected = uA_t_to_i64(5)
        let result = Int64(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint64_tUsingmicroamperes_tCInt_minExpectingInt64CInt_min() {
        let expected = uA_t_to_i64(microamperes_t(CInt.min))
        let result = Int64(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tToint64_tUsingmicroamperes_tCInt_maxExpectingInt64CInt_max() {
        let expected = uA_t_to_i64(microamperes_t(CInt.max))
        let result = Int64(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_tUsing0Expecting0() {
        let expected = i64_to_uA_t(0)
        let result = Microamperes_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_tUsing5Expecting5() {
        let expected = i64_to_uA_t(5)
        let result = Microamperes_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_tUsingInt64Int64_minExpectingmicroamperes_tCInt_min() {
        let expected = i64_to_uA_t(Int64(Int64.min))
        let result = Microamperes_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_tUsingInt64Int64_maxExpectingmicroamperes_tCInt_max() {
        let expected = i64_to_uA_t(Int64(Int64.max))
        let result = Microamperes_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTounsignedintUsing0Expecting0() {
        let expected = uA_t_to_u(0)
        let result = CUnsignedInt(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTounsignedintUsing5Expecting5() {
        let expected = uA_t_to_u(5)
        let result = CUnsignedInt(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTounsignedintUsingmicroamperes_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = uA_t_to_u(microamperes_t(CInt.min))
        let result = CUnsignedInt(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTounsignedintUsingmicroamperes_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = uA_t_to_u(microamperes_t(CInt.max))
        let result = CUnsignedInt(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_tUsing0Expecting0() {
        let expected = u_to_uA_t(0)
        let result = Microamperes_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_tUsing5Expecting5() {
        let expected = u_to_uA_t(5)
        let result = Microamperes_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_tUsingCUnsignedIntCUnsignedInt_minExpectingmicroamperes_tCUnsignedInt_min() {
        let expected = u_to_uA_t(CUnsignedInt(CUnsignedInt.min))
        let result = Microamperes_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_tUsingCUnsignedIntCUnsignedInt_maxExpectingmicroamperes_tCInt_max() {
        let expected = u_to_uA_t(CUnsignedInt(CUnsignedInt.max))
        let result = Microamperes_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint8_tUsing0Expecting0() {
        let expected = uA_t_to_u8(0)
        let result = UInt8(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint8_tUsing5Expecting5() {
        let expected = uA_t_to_u8(5)
        let result = UInt8(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint8_tUsingmicroamperes_tCInt_minExpectingUInt8UInt8_min() {
        let expected = uA_t_to_u8(microamperes_t(CInt.min))
        let result = UInt8(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint8_tUsingmicroamperes_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = uA_t_to_u8(microamperes_t(CInt.max))
        let result = UInt8(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_tUsing0Expecting0() {
        let expected = u8_to_uA_t(0)
        let result = Microamperes_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_tUsing5Expecting5() {
        let expected = u8_to_uA_t(5)
        let result = Microamperes_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_tUsingUInt8UInt8_minExpectingmicroamperes_tUInt8_min() {
        let expected = u8_to_uA_t(UInt8(UInt8.min))
        let result = Microamperes_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_tUsingUInt8UInt8_maxExpectingmicroamperes_tUInt8_max() {
        let expected = u8_to_uA_t(UInt8(UInt8.max))
        let result = Microamperes_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint16_tUsing0Expecting0() {
        let expected = uA_t_to_u16(0)
        let result = UInt16(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint16_tUsing5Expecting5() {
        let expected = uA_t_to_u16(5)
        let result = UInt16(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint16_tUsingmicroamperes_tCInt_minExpectingUInt16UInt16_min() {
        let expected = uA_t_to_u16(microamperes_t(CInt.min))
        let result = UInt16(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint16_tUsingmicroamperes_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = uA_t_to_u16(microamperes_t(CInt.max))
        let result = UInt16(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_tUsing0Expecting0() {
        let expected = u16_to_uA_t(0)
        let result = Microamperes_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_tUsing5Expecting5() {
        let expected = u16_to_uA_t(5)
        let result = Microamperes_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_tUsingUInt16UInt16_minExpectingmicroamperes_tUInt16_min() {
        let expected = u16_to_uA_t(UInt16(UInt16.min))
        let result = Microamperes_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_tUsingUInt16UInt16_maxExpectingmicroamperes_tUInt16_max() {
        let expected = u16_to_uA_t(UInt16(UInt16.max))
        let result = Microamperes_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint32_tUsing0Expecting0() {
        let expected = uA_t_to_u32(0)
        let result = UInt32(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint32_tUsing5Expecting5() {
        let expected = uA_t_to_u32(5)
        let result = UInt32(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint32_tUsingmicroamperes_tCInt_minExpectingUInt32UInt32_min() {
        let expected = uA_t_to_u32(microamperes_t(CInt.min))
        let result = UInt32(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint32_tUsingmicroamperes_tCInt_maxExpectingUInt32CInt_max() {
        let expected = uA_t_to_u32(microamperes_t(CInt.max))
        let result = UInt32(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_tUsing0Expecting0() {
        let expected = u32_to_uA_t(0)
        let result = Microamperes_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_tUsing5Expecting5() {
        let expected = u32_to_uA_t(5)
        let result = Microamperes_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_tUsingUInt32UInt32_minExpectingmicroamperes_tUInt32_min() {
        let expected = u32_to_uA_t(UInt32(UInt32.min))
        let result = Microamperes_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_tUsingUInt32UInt32_maxExpectingmicroamperes_tCInt_max() {
        let expected = u32_to_uA_t(UInt32(UInt32.max))
        let result = Microamperes_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint64_tUsing0Expecting0() {
        let expected = uA_t_to_u64(0)
        let result = UInt64(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint64_tUsing5Expecting5() {
        let expected = uA_t_to_u64(5)
        let result = UInt64(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint64_tUsingmicroamperes_tCInt_minExpectingUInt64UInt64_min() {
        let expected = uA_t_to_u64(microamperes_t(CInt.min))
        let result = UInt64(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTouint64_tUsingmicroamperes_tCInt_maxExpectingUInt64CInt_max() {
        let expected = uA_t_to_u64(microamperes_t(CInt.max))
        let result = UInt64(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_tUsing0Expecting0() {
        let expected = u64_to_uA_t(0)
        let result = Microamperes_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_tUsing5Expecting5() {
        let expected = u64_to_uA_t(5)
        let result = Microamperes_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_tUsingUInt64UInt64_minExpectingmicroamperes_tUInt64_min() {
        let expected = u64_to_uA_t(UInt64(UInt64.min))
        let result = Microamperes_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_tUsingUInt64UInt64_maxExpectingmicroamperes_tCInt_max() {
        let expected = u64_to_uA_t(UInt64(UInt64.max))
        let result = Microamperes_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTofloatUsing0Expecting0_0() {
        let expected = uA_t_to_f(0)
        let result = Float(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTofloatUsing5Expecting5_0() {
        let expected = uA_t_to_f(5)
        let result = Float(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTofloatUsingmicroamperes_tCInt_minExpectingFloatCInt_min() {
        let expected = uA_t_to_f(microamperes_t(CInt.min))
        let result = Float(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTofloatUsingmicroamperes_tCInt_maxExpectingFloatCInt_max() {
        let expected = uA_t_to_f(microamperes_t(CInt.max))
        let result = Float(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_tUsing0_0Expecting0() {
        let expected = f_to_uA_t(0.0)
        let result = Microamperes_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_tUsing5_0Expecting5() {
        let expected = f_to_uA_t(5.0)
        let result = Microamperes_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let expected = f_to_uA_t(Float(-Float.greatestFiniteMagnitude))
        let result = Microamperes_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_tUsingFloatFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let expected = f_to_uA_t(Float(Float.greatestFiniteMagnitude))
        let result = Microamperes_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTodoubleUsing0Expecting0_0() {
        let expected = uA_t_to_d(0)
        let result = Double(Microamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTodoubleUsing5Expecting5_0() {
        let expected = uA_t_to_d(5)
        let result = Double(Microamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTodoubleUsingmicroamperes_tCInt_minExpectingDoubleCInt_min() {
        let expected = uA_t_to_d(microamperes_t(CInt.min))
        let result = Double(Microamperes_t(microamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_tTodoubleUsingmicroamperes_tCInt_maxExpectingDoubleCInt_max() {
        let expected = uA_t_to_d(microamperes_t(CInt.max))
        let result = Double(Microamperes_t(microamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_tUsing0_0Expecting0() {
        let expected = d_to_uA_t(0.0)
        let result = Microamperes_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_tUsing5_0Expecting5() {
        let expected = d_to_uA_t(5.0)
        let result = Microamperes_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let expected = d_to_uA_t(Double(-Double.greatestFiniteMagnitude))
        let result = Microamperes_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let expected = d_to_uA_t(Double(Double.greatestFiniteMagnitude))
        let result = Microamperes_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides microamperes_u unit tests.
final class Microamperes_uTests: XCTestCase {

    func testmicroamperes_uTomicroamperes_tUsing0Expecting0() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_uA_t(0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_tUsingmicroamperes_uCUnsignedInt_minExpectingmicroamperes_tCUnsignedInt_min() {
        let unit = Microamperes_u(microamperes_u(CUnsignedInt.min))
        let expected = uA_u_to_uA_t(microamperes_u(CUnsignedInt.min))
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_tUsingmicroamperes_uCUnsignedInt_maxExpectingmicroamperes_tCInt_max() {
        let unit = Microamperes_u(microamperes_u(CUnsignedInt.max))
        let expected = uA_u_to_uA_t(microamperes_u(CUnsignedInt.max))
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_tUsing5Expecting5() {
        let unit = Microamperes_u(5)
        let expected = uA_u_to_uA_t(5)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing15Expectingmilliamperes_t151000() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_mA_t(15)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing25Expectingmilliamperes_t251000() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_mA_t(25)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing250Expectingmilliamperes_t2501000() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_mA_t(250)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing0Expectingmilliamperes_t01000() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_mA_t(0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing2500Expectingmilliamperes_t25001000() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_mA_t(2500)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing25000Expectingmilliamperes_t250001000() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_mA_t(25000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing250000Expectingmilliamperes_t2500001000() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_mA_t(250000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsing2500000Expectingmilliamperes_t25000001000() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_mA_t(2500000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsingCUnsignedInt_minExpectingmilliamperes_tCUnsignedInt_min1000() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_mA_t(CUnsignedInt.min)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_tUsingCUnsignedInt_maxExpectingmilliamperes_tCUnsignedInt_max1000() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_mA_t(CUnsignedInt.max)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing15Expectingamperes_t151000000() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_A_t(15)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing25Expectingamperes_t251000000() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_A_t(25)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing250Expectingamperes_t2501000000() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_A_t(250)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing0Expectingamperes_t01000000() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_A_t(0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing2500Expectingamperes_t25001000000() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_A_t(2500)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing25000Expectingamperes_t250001000000() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_A_t(25000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing250000Expectingamperes_t2500001000000() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_A_t(250000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsing2500000Expectingamperes_t25000001000000() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_A_t(2500000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsingCUnsignedInt_minExpectingamperes_tCUnsignedInt_min1000000() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_A_t(CUnsignedInt.min)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_tUsingCUnsignedInt_maxExpectingamperes_tCUnsignedInt_max1000000() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_A_t(CUnsignedInt.max)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing15Expectingmilliamperes_u151000() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_mA_u(15)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing25Expectingmilliamperes_u251000() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_mA_u(25)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing250Expectingmilliamperes_u2501000() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_mA_u(250)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing0Expectingmilliamperes_u01000() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_mA_u(0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing2500Expectingmilliamperes_u25001000() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_mA_u(2500)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing25000Expectingmilliamperes_u250001000() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_mA_u(25000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing250000Expectingmilliamperes_u2500001000() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_mA_u(250000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsing2500000Expectingmilliamperes_u25000001000() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_mA_u(2500000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsingCUnsignedInt_minExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_mA_u(CUnsignedInt.min)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_uUsingCUnsignedInt_maxExpectingmilliamperes_uCUnsignedInt_max1000() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_mA_u(CUnsignedInt.max)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing15Expectingamperes_u151000000() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_A_u(15)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing25Expectingamperes_u251000000() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_A_u(25)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing250Expectingamperes_u2501000000() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_A_u(250)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing0Expectingamperes_u01000000() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_A_u(0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing2500Expectingamperes_u25001000000() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_A_u(2500)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing25000Expectingamperes_u250001000000() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_A_u(25000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing250000Expectingamperes_u2500001000000() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_A_u(250000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsing2500000Expectingamperes_u25000001000000() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_A_u(2500000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsingCUnsignedInt_minExpectingamperes_uCUnsignedInt_min() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_A_u(CUnsignedInt.min)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_uUsingCUnsignedInt_maxExpectingamperes_uCUnsignedInt_max1000000() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_A_u(CUnsignedInt.max)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_fUsing0Expecting0_0() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_uA_f(0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_fUsingmicroamperes_uCUnsignedInt_minExpectingmicroamperes_fCUnsignedInt_min() {
        let unit = Microamperes_u(microamperes_u(CUnsignedInt.min))
        let expected = uA_u_to_uA_f(microamperes_u(CUnsignedInt.min))
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_fUsingmicroamperes_uCUnsignedInt_maxExpectingmicroamperes_fCUnsignedInt_max() {
        let unit = Microamperes_u(microamperes_u(CUnsignedInt.max))
        let expected = uA_u_to_uA_f(microamperes_u(CUnsignedInt.max))
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_fUsing5Expecting5_0() {
        let unit = Microamperes_u(5)
        let expected = uA_u_to_uA_f(5)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing15Expectingmilliamperes_f15_01000_0() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_mA_f(15)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing25Expectingmilliamperes_f25_01000_0() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_mA_f(25)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing250Expectingmilliamperes_f250_01000_0() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_mA_f(250)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing0Expectingmilliamperes_f0_01000_0() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_mA_f(0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing2500Expectingmilliamperes_f2500_01000_0() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_mA_f(2500)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing25000Expectingmilliamperes_f25000_01000_0() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_mA_f(25000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing250000Expectingmilliamperes_f250000_01000_0() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_mA_f(250000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsing2500000Expectingmilliamperes_f2500000_01000_0() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_mA_f(2500000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsingCUnsignedInt_minExpectingmilliamperes_fCUnsignedInt_min1000_0() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_mA_f(CUnsignedInt.min)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_fUsingCUnsignedInt_maxExpectingmilliamperes_fCUnsignedInt_max1000_0() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_mA_f(CUnsignedInt.max)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing15Expectingamperes_f15_01000000_0() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_A_f(15)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing25Expectingamperes_f25_01000000_0() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_A_f(25)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing250Expectingamperes_f250_01000000_0() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_A_f(250)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing0Expectingamperes_f0_01000000_0() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_A_f(0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing2500Expectingamperes_f2500_01000000_0() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_A_f(2500)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing25000Expectingamperes_f25000_01000000_0() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_A_f(25000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing250000Expectingamperes_f250000_01000000_0() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_A_f(250000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsing2500000Expectingamperes_f2500000_01000000_0() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_A_f(2500000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsingCUnsignedInt_minExpectingamperes_fCUnsignedInt_min1000000_0() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_A_f(CUnsignedInt.min)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_fUsingCUnsignedInt_maxExpectingamperes_fCUnsignedInt_max1000000_0() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_A_f(CUnsignedInt.max)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_dUsing0Expecting0_0() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_uA_d(0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_dUsingmicroamperes_uCUnsignedInt_minExpectingmicroamperes_dCUnsignedInt_min() {
        let unit = Microamperes_u(microamperes_u(CUnsignedInt.min))
        let expected = uA_u_to_uA_d(microamperes_u(CUnsignedInt.min))
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_dUsingmicroamperes_uCUnsignedInt_maxExpectingmicroamperes_dCUnsignedInt_max() {
        let unit = Microamperes_u(microamperes_u(CUnsignedInt.max))
        let expected = uA_u_to_uA_d(microamperes_u(CUnsignedInt.max))
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomicroamperes_dUsing5Expecting5_0() {
        let unit = Microamperes_u(5)
        let expected = uA_u_to_uA_d(5)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing15Expectingmilliamperes_d15_01000_0() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_mA_d(15)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing25Expectingmilliamperes_d25_01000_0() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_mA_d(25)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing250Expectingmilliamperes_d250_01000_0() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_mA_d(250)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing0Expectingmilliamperes_d0_01000_0() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_mA_d(0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing2500Expectingmilliamperes_d2500_01000_0() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_mA_d(2500)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing25000Expectingmilliamperes_d25000_01000_0() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_mA_d(25000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing250000Expectingmilliamperes_d250000_01000_0() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_mA_d(250000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsing2500000Expectingmilliamperes_d2500000_01000_0() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_mA_d(2500000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsingCUnsignedInt_minExpectingmilliamperes_dCUnsignedInt_min1000_0() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_mA_d(CUnsignedInt.min)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTomilliamperes_dUsingCUnsignedInt_maxExpectingmilliamperes_dCUnsignedInt_max1000_0() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_mA_d(CUnsignedInt.max)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing15Expectingamperes_d15_01000000_0() {
        let unit = Microamperes_u(15)
        let expected = uA_u_to_A_d(15)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing25Expectingamperes_d25_01000000_0() {
        let unit = Microamperes_u(25)
        let expected = uA_u_to_A_d(25)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing250Expectingamperes_d250_01000000_0() {
        let unit = Microamperes_u(250)
        let expected = uA_u_to_A_d(250)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing0Expectingamperes_d0_01000000_0() {
        let unit = Microamperes_u(0)
        let expected = uA_u_to_A_d(0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing2500Expectingamperes_d2500_01000000_0() {
        let unit = Microamperes_u(2500)
        let expected = uA_u_to_A_d(2500)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing25000Expectingamperes_d25000_01000000_0() {
        let unit = Microamperes_u(25000)
        let expected = uA_u_to_A_d(25000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing250000Expectingamperes_d250000_01000000_0() {
        let unit = Microamperes_u(250000)
        let expected = uA_u_to_A_d(250000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsing2500000Expectingamperes_d2500000_01000000_0() {
        let unit = Microamperes_u(2500000)
        let expected = uA_u_to_A_d(2500000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsingCUnsignedInt_minExpectingamperes_dCUnsignedInt_min1000000_0() {
        let unit = Microamperes_u(CUnsignedInt.min)
        let expected = uA_u_to_A_d(CUnsignedInt.min)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uToamperes_dUsingCUnsignedInt_maxExpectingamperes_dCUnsignedInt_max1000000_0() {
        let unit = Microamperes_u(CUnsignedInt.max)
        let expected = uA_u_to_A_d(CUnsignedInt.max)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_uTointUsing0Expecting0() {
        let expected = uA_u_to_i(0)
        let result = CInt(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTointUsing5Expecting5() {
        let expected = uA_u_to_i(5)
        let result = CInt(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTointUsingmicroamperes_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = uA_u_to_i(microamperes_u(CUnsignedInt.min))
        let result = CInt(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTointUsingmicroamperes_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = uA_u_to_i(microamperes_u(CUnsignedInt.max))
        let result = CInt(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_uUsing0Expecting0() {
        let expected = i_to_uA_u(0)
        let result = Microamperes_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_uUsing5Expecting5() {
        let expected = i_to_uA_u(5)
        let result = Microamperes_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_uUsingCIntCInt_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = i_to_uA_u(CInt(CInt.min))
        let result = Microamperes_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_uUsingCIntCInt_maxExpectingmicroamperes_uCInt_max() {
        let expected = i_to_uA_u(CInt(CInt.max))
        let result = Microamperes_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint8_tUsing0Expecting0() {
        let expected = uA_u_to_i8(0)
        let result = Int8(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint8_tUsing5Expecting5() {
        let expected = uA_u_to_i8(5)
        let result = Int8(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint8_tUsingmicroamperes_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = uA_u_to_i8(microamperes_u(CUnsignedInt.min))
        let result = Int8(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint8_tUsingmicroamperes_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = uA_u_to_i8(microamperes_u(CUnsignedInt.max))
        let result = Int8(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_uUsing0Expecting0() {
        let expected = i8_to_uA_u(0)
        let result = Microamperes_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_uUsing5Expecting5() {
        let expected = i8_to_uA_u(5)
        let result = Microamperes_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_uUsingInt8Int8_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = i8_to_uA_u(Int8(Int8.min))
        let result = Microamperes_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_uUsingInt8Int8_maxExpectingmicroamperes_uInt8_max() {
        let expected = i8_to_uA_u(Int8(Int8.max))
        let result = Microamperes_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint16_tUsing0Expecting0() {
        let expected = uA_u_to_i16(0)
        let result = Int16(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint16_tUsing5Expecting5() {
        let expected = uA_u_to_i16(5)
        let result = Int16(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint16_tUsingmicroamperes_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = uA_u_to_i16(microamperes_u(CUnsignedInt.min))
        let result = Int16(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint16_tUsingmicroamperes_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = uA_u_to_i16(microamperes_u(CUnsignedInt.max))
        let result = Int16(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_uUsing0Expecting0() {
        let expected = i16_to_uA_u(0)
        let result = Microamperes_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_uUsing5Expecting5() {
        let expected = i16_to_uA_u(5)
        let result = Microamperes_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_uUsingInt16Int16_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = i16_to_uA_u(Int16(Int16.min))
        let result = Microamperes_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_uUsingInt16Int16_maxExpectingmicroamperes_uInt16_max() {
        let expected = i16_to_uA_u(Int16(Int16.max))
        let result = Microamperes_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint32_tUsing0Expecting0() {
        let expected = uA_u_to_i32(0)
        let result = Int32(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint32_tUsing5Expecting5() {
        let expected = uA_u_to_i32(5)
        let result = Int32(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint32_tUsingmicroamperes_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = uA_u_to_i32(microamperes_u(CUnsignedInt.min))
        let result = Int32(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint32_tUsingmicroamperes_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = uA_u_to_i32(microamperes_u(CUnsignedInt.max))
        let result = Int32(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_uUsing0Expecting0() {
        let expected = i32_to_uA_u(0)
        let result = Microamperes_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_uUsing5Expecting5() {
        let expected = i32_to_uA_u(5)
        let result = Microamperes_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_uUsingInt32Int32_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = i32_to_uA_u(Int32(Int32.min))
        let result = Microamperes_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_uUsingInt32Int32_maxExpectingmicroamperes_uInt32_max() {
        let expected = i32_to_uA_u(Int32(Int32.max))
        let result = Microamperes_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint64_tUsing0Expecting0() {
        let expected = uA_u_to_i64(0)
        let result = Int64(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint64_tUsing5Expecting5() {
        let expected = uA_u_to_i64(5)
        let result = Int64(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint64_tUsingmicroamperes_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = uA_u_to_i64(microamperes_u(CUnsignedInt.min))
        let result = Int64(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uToint64_tUsingmicroamperes_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = uA_u_to_i64(microamperes_u(CUnsignedInt.max))
        let result = Int64(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_uUsing0Expecting0() {
        let expected = i64_to_uA_u(0)
        let result = Microamperes_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_uUsing5Expecting5() {
        let expected = i64_to_uA_u(5)
        let result = Microamperes_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_uUsingInt64Int64_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = i64_to_uA_u(Int64(Int64.min))
        let result = Microamperes_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_uUsingInt64Int64_maxExpectingmicroamperes_uCUnsignedInt_max() {
        let expected = i64_to_uA_u(Int64(Int64.max))
        let result = Microamperes_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTounsignedintUsing0Expecting0() {
        let expected = uA_u_to_u(0)
        let result = CUnsignedInt(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTounsignedintUsing5Expecting5() {
        let expected = uA_u_to_u(5)
        let result = CUnsignedInt(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTounsignedintUsingmicroamperes_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = uA_u_to_u(microamperes_u(CUnsignedInt.min))
        let result = CUnsignedInt(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTounsignedintUsingmicroamperes_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = uA_u_to_u(microamperes_u(CUnsignedInt.max))
        let result = CUnsignedInt(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_uUsing0Expecting0() {
        let expected = u_to_uA_u(0)
        let result = Microamperes_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_uUsing5Expecting5() {
        let expected = u_to_uA_u(5)
        let result = Microamperes_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint8_tUsing0Expecting0() {
        let expected = uA_u_to_u8(0)
        let result = UInt8(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint8_tUsing5Expecting5() {
        let expected = uA_u_to_u8(5)
        let result = UInt8(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint8_tUsingmicroamperes_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = uA_u_to_u8(microamperes_u(CUnsignedInt.min))
        let result = UInt8(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint8_tUsingmicroamperes_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = uA_u_to_u8(microamperes_u(CUnsignedInt.max))
        let result = UInt8(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_uUsing0Expecting0() {
        let expected = u8_to_uA_u(0)
        let result = Microamperes_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_uUsing5Expecting5() {
        let expected = u8_to_uA_u(5)
        let result = Microamperes_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_uUsingUInt8UInt8_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = u8_to_uA_u(UInt8(UInt8.min))
        let result = Microamperes_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_uUsingUInt8UInt8_maxExpectingmicroamperes_uUInt8_max() {
        let expected = u8_to_uA_u(UInt8(UInt8.max))
        let result = Microamperes_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint16_tUsing0Expecting0() {
        let expected = uA_u_to_u16(0)
        let result = UInt16(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint16_tUsing5Expecting5() {
        let expected = uA_u_to_u16(5)
        let result = UInt16(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint16_tUsingmicroamperes_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = uA_u_to_u16(microamperes_u(CUnsignedInt.min))
        let result = UInt16(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint16_tUsingmicroamperes_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = uA_u_to_u16(microamperes_u(CUnsignedInt.max))
        let result = UInt16(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_uUsing0Expecting0() {
        let expected = u16_to_uA_u(0)
        let result = Microamperes_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_uUsing5Expecting5() {
        let expected = u16_to_uA_u(5)
        let result = Microamperes_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_uUsingUInt16UInt16_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = u16_to_uA_u(UInt16(UInt16.min))
        let result = Microamperes_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_uUsingUInt16UInt16_maxExpectingmicroamperes_uUInt16_max() {
        let expected = u16_to_uA_u(UInt16(UInt16.max))
        let result = Microamperes_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint32_tUsing0Expecting0() {
        let expected = uA_u_to_u32(0)
        let result = UInt32(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint32_tUsing5Expecting5() {
        let expected = uA_u_to_u32(5)
        let result = UInt32(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint32_tUsingmicroamperes_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = uA_u_to_u32(microamperes_u(CUnsignedInt.min))
        let result = UInt32(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint32_tUsingmicroamperes_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = uA_u_to_u32(microamperes_u(CUnsignedInt.max))
        let result = UInt32(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_uUsing0Expecting0() {
        let expected = u32_to_uA_u(0)
        let result = Microamperes_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_uUsing5Expecting5() {
        let expected = u32_to_uA_u(5)
        let result = Microamperes_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_uUsingUInt32UInt32_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = u32_to_uA_u(UInt32(UInt32.min))
        let result = Microamperes_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_uUsingUInt32UInt32_maxExpectingmicroamperes_uCUnsignedInt_max() {
        let expected = u32_to_uA_u(UInt32(UInt32.max))
        let result = Microamperes_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint64_tUsing0Expecting0() {
        let expected = uA_u_to_u64(0)
        let result = UInt64(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint64_tUsing5Expecting5() {
        let expected = uA_u_to_u64(5)
        let result = UInt64(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint64_tUsingmicroamperes_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = uA_u_to_u64(microamperes_u(CUnsignedInt.min))
        let result = UInt64(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTouint64_tUsingmicroamperes_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = uA_u_to_u64(microamperes_u(CUnsignedInt.max))
        let result = UInt64(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_uUsing0Expecting0() {
        let expected = u64_to_uA_u(0)
        let result = Microamperes_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_uUsing5Expecting5() {
        let expected = u64_to_uA_u(5)
        let result = Microamperes_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_uUsingUInt64UInt64_minExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = u64_to_uA_u(UInt64(UInt64.min))
        let result = Microamperes_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_uUsingUInt64UInt64_maxExpectingmicroamperes_uCUnsignedInt_max() {
        let expected = u64_to_uA_u(UInt64(UInt64.max))
        let result = Microamperes_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTofloatUsing0Expecting0_0() {
        let expected = uA_u_to_f(0)
        let result = Float(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTofloatUsing5Expecting5_0() {
        let expected = uA_u_to_f(5)
        let result = Float(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTofloatUsingmicroamperes_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = uA_u_to_f(microamperes_u(CUnsignedInt.min))
        let result = Float(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTofloatUsingmicroamperes_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = uA_u_to_f(microamperes_u(CUnsignedInt.max))
        let result = Float(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_uUsing0_0Expecting0() {
        let expected = f_to_uA_u(0.0)
        let result = Microamperes_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_uUsing5_0Expecting5() {
        let expected = f_to_uA_u(5.0)
        let result = Microamperes_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = f_to_uA_u(Float(-Float.greatestFiniteMagnitude))
        let result = Microamperes_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_uUsingFloatFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let expected = f_to_uA_u(Float(Float.greatestFiniteMagnitude))
        let result = Microamperes_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTodoubleUsing0Expecting0_0() {
        let expected = uA_u_to_d(0)
        let result = Double(Microamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTodoubleUsing5Expecting5_0() {
        let expected = uA_u_to_d(5)
        let result = Double(Microamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTodoubleUsingmicroamperes_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = uA_u_to_d(microamperes_u(CUnsignedInt.min))
        let result = Double(Microamperes_u(microamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_uTodoubleUsingmicroamperes_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = uA_u_to_d(microamperes_u(CUnsignedInt.max))
        let result = Double(Microamperes_u(microamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_uUsing0_0Expecting0() {
        let expected = d_to_uA_u(0.0)
        let result = Microamperes_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_uUsing5_0Expecting5() {
        let expected = d_to_uA_u(5.0)
        let result = Microamperes_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let expected = d_to_uA_u(Double(-Double.greatestFiniteMagnitude))
        let result = Microamperes_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let expected = d_to_uA_u(Double(Double.greatestFiniteMagnitude))
        let result = Microamperes_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides microamperes_f unit tests.
final class Microamperes_fTests: XCTestCase {

    func testmicroamperes_fTomicroamperes_tUsing0_0Expecting0() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_uA_t(0.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let unit = Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude))
        let expected = uA_f_to_uA_t(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let unit = Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude))
        let expected = uA_f_to_uA_t(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_tUsing5_0Expecting5() {
        let unit = Microamperes_f(5.0)
        let expected = uA_f_to_uA_t(5.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing15_0Expectingmilliamperes_t15_01000_0_rounded() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_mA_t(15.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing25_0Expectingmilliamperes_t25_01000_0_rounded() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_mA_t(25.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing250_0Expectingmilliamperes_t250_01000_0_rounded() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_mA_t(250.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing0_0Expectingmilliamperes_t0_01000_0_rounded() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_mA_t(0.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing2500_0Expectingmilliamperes_t2500_01000_0_rounded() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_mA_t(2500.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing25000_0Expectingmilliamperes_t25000_01000_0_rounded() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_mA_t(25000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing250000_0Expectingmilliamperes_t250000_01000_0_rounded() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_mA_t(250000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsing2500000_0Expectingmilliamperes_t2500000_01000_0_rounded() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_mA_t(2500000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsingNeg323_0Expectingmilliamperes_tNeg323_01000_0_rounded() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_mA_t(-323.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsingNeg10_0Expectingmilliamperes_tNeg10_01000_0_rounded() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_mA_t(-10.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsingNeg1000_0Expectingmilliamperes_tNeg1000_01000_0_rounded() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_mA_t(-1000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsingNeg5_0Expectingmilliamperes_tNeg5_01000_0_rounded() {
        let unit = Microamperes_f(-5.0)
        let expected = uA_f_to_mA_t(-5.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_t(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_tUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_t(Float.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing15_0Expectingamperes_t15_01000000_0_rounded() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_A_t(15.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing25_0Expectingamperes_t25_01000000_0_rounded() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_A_t(25.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing250_0Expectingamperes_t250_01000000_0_rounded() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_A_t(250.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing0_0Expectingamperes_t0_01000000_0_rounded() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_A_t(0.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing2500_0Expectingamperes_t2500_01000000_0_rounded() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_A_t(2500.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing25000_0Expectingamperes_t25000_01000000_0_rounded() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_A_t(25000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing250000_0Expectingamperes_t250000_01000000_0_rounded() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_A_t(250000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsing2500000_0Expectingamperes_t2500000_01000000_0_rounded() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_A_t(2500000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsingNeg323_0Expectingamperes_tNeg323_01000000_0_rounded() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_A_t(-323.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsingNeg10_0Expectingamperes_tNeg10_01000000_0_rounded() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_A_t(-10.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsingNeg1000_0Expectingamperes_tNeg1000_01000000_0_rounded() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_A_t(-1000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsingNeg5_0Expectingamperes_tNeg5_01000000_0_rounded() {
        let unit = Microamperes_f(-5.0)
        let expected = uA_f_to_A_t(-5.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_t(-Float.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_tUsingFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_t(Float.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_uUsing0_0Expecting0() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_uA_u(0.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_uUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude))
        let expected = uA_f_to_uA_u(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_uUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude))
        let expected = uA_f_to_uA_u(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_uUsing5_0Expecting5() {
        let unit = Microamperes_f(5.0)
        let expected = uA_f_to_uA_u(5.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing15_0Expectingmilliamperes_u15_01000_0_rounded() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_mA_u(15.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing25_0Expectingmilliamperes_u25_01000_0_rounded() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_mA_u(25.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing250_0Expectingmilliamperes_u250_01000_0_rounded() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_mA_u(250.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing0_0Expectingmilliamperes_u0_01000_0_rounded() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_mA_u(0.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing2500_0Expectingmilliamperes_u2500_01000_0_rounded() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_mA_u(2500.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing25000_0Expectingmilliamperes_u25000_01000_0_rounded() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_mA_u(25000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing250000_0Expectingmilliamperes_u250000_01000_0_rounded() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_mA_u(250000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsing2500000_0Expectingmilliamperes_u2500000_01000_0_rounded() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_mA_u(2500000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsingNeg323_0Expecting0() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_mA_u(-323.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsingNeg10_0Expecting0() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_mA_u(-10.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsingNeg1000_0Expecting0() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_mA_u(-1000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsingNeg6_0Expecting0() {
        let unit = Microamperes_f(-6.0)
        let expected = uA_f_to_mA_u(-6.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_u(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_uUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_u(Float.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing15_0Expectingamperes_u15_01000000_0_rounded() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_A_u(15.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing25_0Expectingamperes_u25_01000000_0_rounded() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_A_u(25.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing250_0Expectingamperes_u250_01000000_0_rounded() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_A_u(250.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing0_0Expectingamperes_u0_01000000_0_rounded() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_A_u(0.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing2500_0Expectingamperes_u2500_01000000_0_rounded() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_A_u(2500.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing25000_0Expectingamperes_u25000_01000000_0_rounded() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_A_u(25000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing250000_0Expectingamperes_u250000_01000000_0_rounded() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_A_u(250000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsing2500000_0Expectingamperes_u2500000_01000000_0_rounded() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_A_u(2500000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsingNeg323_0Expecting0() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_A_u(-323.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsingNeg10_0Expecting0() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_A_u(-10.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsingNeg1000_0Expecting0() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_A_u(-1000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsingNeg6_0Expecting0() {
        let unit = Microamperes_f(-6.0)
        let expected = uA_f_to_A_u(-6.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_u(-Float.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_uUsingFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_u(Float.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing15_0Expectingmilliamperes_f15_01000_0() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_mA_f(15.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing25_0Expectingmilliamperes_f25_01000_0() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_mA_f(25.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing250_0Expectingmilliamperes_f250_01000_0() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_mA_f(250.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing0_0Expectingmilliamperes_f0_01000_0() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_mA_f(0.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing2500_0Expectingmilliamperes_f2500_01000_0() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_mA_f(2500.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing25000_0Expectingmilliamperes_f25000_01000_0() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_mA_f(25000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing250000_0Expectingmilliamperes_f250000_01000_0() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_mA_f(250000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsing2500000_0Expectingmilliamperes_f2500000_01000_0() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_mA_f(2500000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsingNeg323_0Expectingmilliamperes_fNeg323_01000_0() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_mA_f(-323.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsingNeg10_0Expectingmilliamperes_fNeg10_01000_0() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_mA_f(-10.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsingNeg1000_0Expectingmilliamperes_fNeg1000_01000_0() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_mA_f(-1000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsingNeg5_0Expectingmilliamperes_fNeg5_01000_0() {
        let unit = Microamperes_f(-5.0)
        let expected = uA_f_to_mA_f(-5.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_fNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_f(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_fUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_fFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_f(Float.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing15_0Expectingamperes_f15_01000000_0() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_A_f(15.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing25_0Expectingamperes_f25_01000000_0() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_A_f(25.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing250_0Expectingamperes_f250_01000000_0() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_A_f(250.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing0_0Expectingamperes_f0_01000000_0() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_A_f(0.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing2500_0Expectingamperes_f2500_01000000_0() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_A_f(2500.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing25000_0Expectingamperes_f25000_01000000_0() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_A_f(25000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing250000_0Expectingamperes_f250000_01000000_0() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_A_f(250000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsing2500000_0Expectingamperes_f2500000_01000000_0() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_A_f(2500000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsingNeg323_0Expectingamperes_fNeg323_01000000_0() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_A_f(-323.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsingNeg10_0Expectingamperes_fNeg10_01000000_0() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_A_f(-10.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsingNeg1000_0Expectingamperes_fNeg1000_01000000_0() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_A_f(-1000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsingNeg5_0Expectingamperes_fNeg5_01000000_0() {
        let unit = Microamperes_f(-5.0)
        let expected = uA_f_to_A_f(-5.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_fNegFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_f(-Float.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_fUsingFloat_greatestFiniteMagnitudeExpectingamperes_fFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_f(Float.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_dUsing0_0Expecting0_0() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_uA_d(0.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_dUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_dNegFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude))
        let expected = uA_f_to_uA_d(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_dUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingmicroamperes_dFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude))
        let expected = uA_f_to_uA_d(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomicroamperes_dUsing5_0Expecting5_0() {
        let unit = Microamperes_f(5.0)
        let expected = uA_f_to_uA_d(5.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing15_0Expectingmilliamperes_d15_01000_0() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_mA_d(15.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing25_0Expectingmilliamperes_d25_01000_0() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_mA_d(25.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing250_0Expectingmilliamperes_d250_01000_0() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_mA_d(250.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing0_0Expectingmilliamperes_d0_01000_0() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_mA_d(0.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing2500_0Expectingmilliamperes_d2500_01000_0() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_mA_d(2500.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing25000_0Expectingmilliamperes_d25000_01000_0() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_mA_d(25000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing250000_0Expectingmilliamperes_d250000_01000_0() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_mA_d(250000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsing2500000_0Expectingmilliamperes_d2500000_01000_0() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_mA_d(2500000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsingNeg323_0Expectingmilliamperes_dNeg323_01000_0() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_mA_d(-323.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsingNeg10_0Expectingmilliamperes_dNeg10_01000_0() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_mA_d(-10.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsingNeg1000_0Expectingmilliamperes_dNeg1000_01000_0() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_mA_d(-1000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsingNeg5_0Expectingmilliamperes_dNeg5_01000_0() {
        let unit = Microamperes_f(-5.0)
        let expected = uA_f_to_mA_d(-5.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_d(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTomilliamperes_dUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_mA_d(Float.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing15_0Expectingamperes_d15_01000000_0() {
        let unit = Microamperes_f(15.0)
        let expected = uA_f_to_A_d(15.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing25_0Expectingamperes_d25_01000000_0() {
        let unit = Microamperes_f(25.0)
        let expected = uA_f_to_A_d(25.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing250_0Expectingamperes_d250_01000000_0() {
        let unit = Microamperes_f(250.0)
        let expected = uA_f_to_A_d(250.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing0_0Expectingamperes_d0_01000000_0() {
        let unit = Microamperes_f(0.0)
        let expected = uA_f_to_A_d(0.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing2500_0Expectingamperes_d2500_01000000_0() {
        let unit = Microamperes_f(2500.0)
        let expected = uA_f_to_A_d(2500.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing25000_0Expectingamperes_d25000_01000000_0() {
        let unit = Microamperes_f(25000.0)
        let expected = uA_f_to_A_d(25000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing250000_0Expectingamperes_d250000_01000000_0() {
        let unit = Microamperes_f(250000.0)
        let expected = uA_f_to_A_d(250000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsing2500000_0Expectingamperes_d2500000_01000000_0() {
        let unit = Microamperes_f(2500000.0)
        let expected = uA_f_to_A_d(2500000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsingNeg323_0Expectingamperes_dNeg323_01000000_0() {
        let unit = Microamperes_f(-323.0)
        let expected = uA_f_to_A_d(-323.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsingNeg10_0Expectingamperes_dNeg10_01000000_0() {
        let unit = Microamperes_f(-10.0)
        let expected = uA_f_to_A_d(-10.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsingNeg1000_0Expectingamperes_dNeg1000_01000000_0() {
        let unit = Microamperes_f(-1000.0)
        let expected = uA_f_to_A_d(-1000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsingNeg5_0Expectingamperes_dNeg5_01000000_0() {
        let unit = Microamperes_f(-5.0)
        let expected = uA_f_to_A_d(-5.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_dNegFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microamperes_f(-Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_d(-Float.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fToamperes_dUsingFloat_greatestFiniteMagnitudeExpectingamperes_dFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microamperes_f(Float.greatestFiniteMagnitude)
        let expected = uA_f_to_A_d(Float.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_fTointUsing0_0Expecting0() {
        let expected = uA_f_to_i(0.0)
        let result = CInt(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTointUsing5_0Expecting5() {
        let expected = uA_f_to_i(5.0)
        let result = CInt(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTointUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = uA_f_to_i(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTointUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = uA_f_to_i(microamperes_f(Float.greatestFiniteMagnitude))
        let result = CInt(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_fUsing0Expecting0_0() {
        let expected = i_to_uA_f(0)
        let result = Microamperes_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_fUsing5Expecting5_0() {
        let expected = i_to_uA_f(5)
        let result = Microamperes_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_fUsingCIntCInt_minExpectingmicroamperes_fCInt_min() {
        let expected = i_to_uA_f(CInt(CInt.min))
        let result = Microamperes_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_fUsingCIntCInt_maxExpectingmicroamperes_fCInt_max() {
        let expected = i_to_uA_f(CInt(CInt.max))
        let result = Microamperes_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint8_tUsing0_0Expecting0() {
        let expected = uA_f_to_i8(0.0)
        let result = Int8(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint8_tUsing5_0Expecting5() {
        let expected = uA_f_to_i8(5.0)
        let result = Int8(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint8_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = uA_f_to_i8(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint8_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = uA_f_to_i8(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Int8(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = i8_to_uA_f(0)
        let result = Microamperes_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = i8_to_uA_f(5)
        let result = Microamperes_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_fUsingInt8Int8_minExpectingmicroamperes_fInt8_min() {
        let expected = i8_to_uA_f(Int8(Int8.min))
        let result = Microamperes_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_fUsingInt8Int8_maxExpectingmicroamperes_fInt8_max() {
        let expected = i8_to_uA_f(Int8(Int8.max))
        let result = Microamperes_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint16_tUsing0_0Expecting0() {
        let expected = uA_f_to_i16(0.0)
        let result = Int16(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint16_tUsing5_0Expecting5() {
        let expected = uA_f_to_i16(5.0)
        let result = Int16(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint16_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = uA_f_to_i16(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint16_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = uA_f_to_i16(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Int16(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = i16_to_uA_f(0)
        let result = Microamperes_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = i16_to_uA_f(5)
        let result = Microamperes_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_fUsingInt16Int16_minExpectingmicroamperes_fInt16_min() {
        let expected = i16_to_uA_f(Int16(Int16.min))
        let result = Microamperes_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_fUsingInt16Int16_maxExpectingmicroamperes_fInt16_max() {
        let expected = i16_to_uA_f(Int16(Int16.max))
        let result = Microamperes_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint32_tUsing0_0Expecting0() {
        let expected = uA_f_to_i32(0.0)
        let result = Int32(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint32_tUsing5_0Expecting5() {
        let expected = uA_f_to_i32(5.0)
        let result = Int32(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint32_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = uA_f_to_i32(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint32_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = uA_f_to_i32(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Int32(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = i32_to_uA_f(0)
        let result = Microamperes_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = i32_to_uA_f(5)
        let result = Microamperes_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_fUsingInt32Int32_minExpectingmicroamperes_fInt32_min() {
        let expected = i32_to_uA_f(Int32(Int32.min))
        let result = Microamperes_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_fUsingInt32Int32_maxExpectingmicroamperes_fInt32_max() {
        let expected = i32_to_uA_f(Int32(Int32.max))
        let result = Microamperes_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint64_tUsing0_0Expecting0() {
        let expected = uA_f_to_i64(0.0)
        let result = Int64(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint64_tUsing5_0Expecting5() {
        let expected = uA_f_to_i64(5.0)
        let result = Int64(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint64_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = uA_f_to_i64(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fToint64_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = uA_f_to_i64(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Int64(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = i64_to_uA_f(0)
        let result = Microamperes_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = i64_to_uA_f(5)
        let result = Microamperes_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_fUsingInt64Int64_minExpectingmicroamperes_fInt64_min() {
        let expected = i64_to_uA_f(Int64(Int64.min))
        let result = Microamperes_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_fUsingInt64Int64_maxExpectingmicroamperes_fInt64_max() {
        let expected = i64_to_uA_f(Int64(Int64.max))
        let result = Microamperes_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTounsignedintUsing0_0Expecting0() {
        let expected = uA_f_to_u(0.0)
        let result = CUnsignedInt(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTounsignedintUsing5_0Expecting5() {
        let expected = uA_f_to_u(5.0)
        let result = CUnsignedInt(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTounsignedintUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = uA_f_to_u(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTounsignedintUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = uA_f_to_u(microamperes_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_fUsing0Expecting0_0() {
        let expected = u_to_uA_f(0)
        let result = Microamperes_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_fUsing5Expecting5_0() {
        let expected = u_to_uA_f(5)
        let result = Microamperes_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_fUsingCUnsignedIntCUnsignedInt_minExpectingmicroamperes_fCUnsignedInt_min() {
        let expected = u_to_uA_f(CUnsignedInt(CUnsignedInt.min))
        let result = Microamperes_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_fUsingCUnsignedIntCUnsignedInt_maxExpectingmicroamperes_fCUnsignedInt_max() {
        let expected = u_to_uA_f(CUnsignedInt(CUnsignedInt.max))
        let result = Microamperes_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint8_tUsing0_0Expecting0() {
        let expected = uA_f_to_u8(0.0)
        let result = UInt8(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint8_tUsing5_0Expecting5() {
        let expected = uA_f_to_u8(5.0)
        let result = UInt8(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint8_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = uA_f_to_u8(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint8_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = uA_f_to_u8(microamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = u8_to_uA_f(0)
        let result = Microamperes_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = u8_to_uA_f(5)
        let result = Microamperes_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_fUsingUInt8UInt8_minExpectingmicroamperes_fUInt8_min() {
        let expected = u8_to_uA_f(UInt8(UInt8.min))
        let result = Microamperes_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_fUsingUInt8UInt8_maxExpectingmicroamperes_fUInt8_max() {
        let expected = u8_to_uA_f(UInt8(UInt8.max))
        let result = Microamperes_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint16_tUsing0_0Expecting0() {
        let expected = uA_f_to_u16(0.0)
        let result = UInt16(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint16_tUsing5_0Expecting5() {
        let expected = uA_f_to_u16(5.0)
        let result = UInt16(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint16_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = uA_f_to_u16(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint16_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = uA_f_to_u16(microamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = u16_to_uA_f(0)
        let result = Microamperes_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = u16_to_uA_f(5)
        let result = Microamperes_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_fUsingUInt16UInt16_minExpectingmicroamperes_fUInt16_min() {
        let expected = u16_to_uA_f(UInt16(UInt16.min))
        let result = Microamperes_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_fUsingUInt16UInt16_maxExpectingmicroamperes_fUInt16_max() {
        let expected = u16_to_uA_f(UInt16(UInt16.max))
        let result = Microamperes_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint32_tUsing0_0Expecting0() {
        let expected = uA_f_to_u32(0.0)
        let result = UInt32(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint32_tUsing5_0Expecting5() {
        let expected = uA_f_to_u32(5.0)
        let result = UInt32(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint32_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = uA_f_to_u32(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint32_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = uA_f_to_u32(microamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = u32_to_uA_f(0)
        let result = Microamperes_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = u32_to_uA_f(5)
        let result = Microamperes_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_fUsingUInt32UInt32_minExpectingmicroamperes_fUInt32_min() {
        let expected = u32_to_uA_f(UInt32(UInt32.min))
        let result = Microamperes_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_fUsingUInt32UInt32_maxExpectingmicroamperes_fUInt32_max() {
        let expected = u32_to_uA_f(UInt32(UInt32.max))
        let result = Microamperes_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint64_tUsing0_0Expecting0() {
        let expected = uA_f_to_u64(0.0)
        let result = UInt64(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint64_tUsing5_0Expecting5() {
        let expected = uA_f_to_u64(5.0)
        let result = UInt64(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint64_tUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = uA_f_to_u64(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTouint64_tUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = uA_f_to_u64(microamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_fUsing0Expecting0_0() {
        let expected = u64_to_uA_f(0)
        let result = Microamperes_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_fUsing5Expecting5_0() {
        let expected = u64_to_uA_f(5)
        let result = Microamperes_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_fUsingUInt64UInt64_minExpectingmicroamperes_fUInt64_min() {
        let expected = u64_to_uA_f(UInt64(UInt64.min))
        let result = Microamperes_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_fUsingUInt64UInt64_maxExpectingmicroamperes_fUInt64_max() {
        let expected = u64_to_uA_f(UInt64(UInt64.max))
        let result = Microamperes_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTofloatUsing0_0Expecting0_0() {
        let expected = uA_f_to_f(0.0)
        let result = Float(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTofloatUsing5_0Expecting5_0() {
        let expected = uA_f_to_f(5.0)
        let result = Float(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTofloatUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = uA_f_to_f(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Float(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTofloatUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = uA_f_to_f(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Float(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_fUsing0_0Expecting0_0() {
        let expected = f_to_uA_f(0.0)
        let result = Microamperes_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_fUsing5_0Expecting5_0() {
        let expected = f_to_uA_f(5.0)
        let result = Microamperes_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTodoubleUsing0_0Expecting0_0() {
        let expected = uA_f_to_d(0.0)
        let result = Double(Microamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTodoubleUsing5_0Expecting5_0() {
        let expected = uA_f_to_d(5.0)
        let result = Double(Microamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTodoubleUsingmicroamperes_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = uA_f_to_d(microamperes_f(-Float.greatestFiniteMagnitude))
        let result = Double(Microamperes_f(microamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_fTodoubleUsingmicroamperes_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = uA_f_to_d(microamperes_f(Float.greatestFiniteMagnitude))
        let result = Double(Microamperes_f(microamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_fUsing0_0Expecting0_0() {
        let expected = d_to_uA_f(0.0)
        let result = Microamperes_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_fUsing5_0Expecting5_0() {
        let expected = d_to_uA_f(5.0)
        let result = Microamperes_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_uA_f(Double(-Double.greatestFiniteMagnitude))
        let result = Microamperes_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingmicroamperes_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_uA_f(Double(Double.greatestFiniteMagnitude))
        let result = Microamperes_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides microamperes_d unit tests.
final class Microamperes_dTests: XCTestCase {

    func testmicroamperes_dTomicroamperes_tUsing0_0Expecting0() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_uA_t(0.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let unit = Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude))
        let expected = uA_d_to_uA_t(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let unit = Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude))
        let expected = uA_d_to_uA_t(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_tUsing5_0Expecting5() {
        let unit = Microamperes_d(5.0)
        let expected = uA_d_to_uA_t(5.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing15_0Expectingmilliamperes_t15_01000_0_rounded() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_mA_t(15.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing25_0Expectingmilliamperes_t25_01000_0_rounded() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_mA_t(25.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing250_0Expectingmilliamperes_t250_01000_0_rounded() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_mA_t(250.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing0_0Expectingmilliamperes_t0_01000_0_rounded() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_mA_t(0.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing2500_0Expectingmilliamperes_t2500_01000_0_rounded() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_mA_t(2500.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing25000_0Expectingmilliamperes_t25000_01000_0_rounded() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_mA_t(25000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing250000_0Expectingmilliamperes_t250000_01000_0_rounded() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_mA_t(250000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsing2500000_0Expectingmilliamperes_t2500000_01000_0_rounded() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_mA_t(2500000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsingNeg323_0Expectingmilliamperes_tNeg323_01000_0_rounded() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_mA_t(-323.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsingNeg10_0Expectingmilliamperes_tNeg10_01000_0_rounded() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_mA_t(-10.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsingNeg1000_0Expectingmilliamperes_tNeg1000_01000_0_rounded() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_mA_t(-1000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsingNeg5_0Expectingmilliamperes_tNeg5_01000_0_rounded() {
        let unit = Microamperes_d(-5.0)
        let expected = uA_d_to_mA_t(-5.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_tUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_t(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTomilliamperes_tUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_t(Double.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_tUsing15_0Expectingamperes_t15_01000000_0_rounded() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_A_t(15.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsing25_0Expectingamperes_t25_01000000_0_rounded() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_A_t(25.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsing250_0Expectingamperes_t250_01000000_0_rounded() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_A_t(250.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsing0_0Expectingamperes_t0_01000000_0_rounded() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_A_t(0.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsing2500_0Expectingamperes_t2500_01000000_0_rounded() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_A_t(2500.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsing25000_0Expectingamperes_t25000_01000000_0_rounded() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_A_t(25000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsing250000_0Expectingamperes_t250000_01000000_0_rounded() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_A_t(250000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsing2500000_0Expectingamperes_t2500000_01000000_0_rounded() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_A_t(2500000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsingNeg323_0Expectingamperes_tNeg323_01000000_0_rounded() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_A_t(-323.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsingNeg10_0Expectingamperes_tNeg10_01000000_0_rounded() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_A_t(-10.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsingNeg1000_0Expectingamperes_tNeg1000_01000000_0_rounded() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_A_t(-1000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsingNeg5_0Expectingamperes_tNeg5_01000000_0_rounded() {
        let unit = Microamperes_d(-5.0)
        let expected = uA_d_to_A_t(-5.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_tUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_t(-Double.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_tUsingDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_t(Double.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTomicroamperes_uUsing0_0Expecting0() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_uA_u(0.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_uUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude))
        let expected = uA_d_to_uA_u(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_uUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude))
        let expected = uA_d_to_uA_u(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_uUsing5_0Expecting5() {
        let unit = Microamperes_d(5.0)
        let expected = uA_d_to_uA_u(5.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing15_0Expectingmilliamperes_u15_01000_0_rounded() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_mA_u(15.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing25_0Expectingmilliamperes_u25_01000_0_rounded() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_mA_u(25.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing250_0Expectingmilliamperes_u250_01000_0_rounded() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_mA_u(250.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing0_0Expectingmilliamperes_u0_01000_0_rounded() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_mA_u(0.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing2500_0Expectingmilliamperes_u2500_01000_0_rounded() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_mA_u(2500.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing25000_0Expectingmilliamperes_u25000_01000_0_rounded() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_mA_u(25000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing250000_0Expectingmilliamperes_u250000_01000_0_rounded() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_mA_u(250000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsing2500000_0Expectingmilliamperes_u2500000_01000_0_rounded() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_mA_u(2500000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsingNeg323_0Expecting0() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_mA_u(-323.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsingNeg10_0Expecting0() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_mA_u(-10.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsingNeg1000_0Expecting0() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_mA_u(-1000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsingNeg6_0Expecting0() {
        let unit = Microamperes_d(-6.0)
        let expected = uA_d_to_mA_u(-6.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_uUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_u(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTomilliamperes_uUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_u(Double.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_uUsing15_0Expectingamperes_u15_01000000_0_rounded() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_A_u(15.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsing25_0Expectingamperes_u25_01000000_0_rounded() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_A_u(25.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsing250_0Expectingamperes_u250_01000000_0_rounded() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_A_u(250.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsing0_0Expectingamperes_u0_01000000_0_rounded() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_A_u(0.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsing2500_0Expectingamperes_u2500_01000000_0_rounded() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_A_u(2500.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsing25000_0Expectingamperes_u25000_01000000_0_rounded() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_A_u(25000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsing250000_0Expectingamperes_u250000_01000000_0_rounded() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_A_u(250000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsing2500000_0Expectingamperes_u2500000_01000000_0_rounded() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_A_u(2500000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsingNeg323_0Expecting0() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_A_u(-323.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsingNeg10_0Expecting0() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_A_u(-10.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsingNeg1000_0Expecting0() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_A_u(-1000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsingNeg6_0Expecting0() {
        let unit = Microamperes_d(-6.0)
        let expected = uA_d_to_A_u(-6.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_uUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_u(-Double.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_uUsingDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_u(Double.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTomicroamperes_fUsing0_0Expecting0_0() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_uA_f(0.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_fUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude))
        let expected = uA_d_to_uA_f(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_fUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingmicroamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude))
        let expected = uA_d_to_uA_f(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomicroamperes_fUsing5_0Expecting5_0() {
        let unit = Microamperes_d(5.0)
        let expected = uA_d_to_uA_f(5.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing15_0Expectingmilliamperes_f15_01000_0() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_mA_f(15.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing25_0Expectingmilliamperes_f25_01000_0() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_mA_f(25.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing250_0Expectingmilliamperes_f250_01000_0() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_mA_f(250.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing0_0Expectingmilliamperes_f0_01000_0() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_mA_f(0.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing2500_0Expectingmilliamperes_f2500_01000_0() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_mA_f(2500.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing25000_0Expectingmilliamperes_f25000_01000_0() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_mA_f(25000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing250000_0Expectingmilliamperes_f250000_01000_0() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_mA_f(250000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsing2500000_0Expectingmilliamperes_f2500000_01000_0() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_mA_f(2500000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsingNeg323_0Expectingmilliamperes_fNeg323_01000_0() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_mA_f(-323.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsingNeg10_0Expectingmilliamperes_fNeg10_01000_0() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_mA_f(-10.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsingNeg1000_0Expectingmilliamperes_fNeg1000_01000_0() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_mA_f(-1000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsingNeg5_0Expectingmilliamperes_fNeg5_01000_0() {
        let unit = Microamperes_d(-5.0)
        let expected = uA_d_to_mA_f(-5.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_fUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_f(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTomilliamperes_fUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_f(Double.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_fUsing15_0Expectingamperes_f15_01000000_0() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_A_f(15.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsing25_0Expectingamperes_f25_01000000_0() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_A_f(25.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsing250_0Expectingamperes_f250_01000000_0() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_A_f(250.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsing0_0Expectingamperes_f0_01000000_0() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_A_f(0.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsing2500_0Expectingamperes_f2500_01000000_0() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_A_f(2500.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsing25000_0Expectingamperes_f25000_01000000_0() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_A_f(25000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsing250000_0Expectingamperes_f250000_01000000_0() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_A_f(250000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsing2500000_0Expectingamperes_f2500000_01000000_0() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_A_f(2500000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsingNeg323_0Expectingamperes_fNeg323_01000000_0() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_A_f(-323.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsingNeg10_0Expectingamperes_fNeg10_01000000_0() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_A_f(-10.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsingNeg1000_0Expectingamperes_fNeg1000_01000000_0() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_A_f(-1000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsingNeg5_0Expectingamperes_fNeg5_01000000_0() {
        let unit = Microamperes_d(-5.0)
        let expected = uA_d_to_A_f(-5.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_fUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_f(-Double.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_fUsingDouble_greatestFiniteMagnitudeExpectingamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_f(Double.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTomilliamperes_dUsing15_0Expectingmilliamperes_d15_01000_0() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_mA_d(15.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsing25_0Expectingmilliamperes_d25_01000_0() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_mA_d(25.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsing250_0Expectingmilliamperes_d250_01000_0() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_mA_d(250.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsing0_0Expectingmilliamperes_d0_01000_0() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_mA_d(0.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsing2500_0Expectingmilliamperes_d2500_01000_0() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_mA_d(2500.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsing25000_0Expectingmilliamperes_d25000_01000_0() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_mA_d(25000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsing250000_0Expectingmilliamperes_d250000_01000_0() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_mA_d(250000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsing2500000_0Expectingmilliamperes_d2500000_01000_0() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_mA_d(2500000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsingNeg323_0Expectingmilliamperes_dNeg323_01000_0() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_mA_d(-323.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsingNeg10_0Expectingmilliamperes_dNeg10_01000_0() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_mA_d(-10.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsingNeg1000_0Expectingmilliamperes_dNeg1000_01000_0() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_mA_d(-1000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsingNeg5_0Expectingmilliamperes_dNeg5_01000_0() {
        let unit = Microamperes_d(-5.0)
        let expected = uA_d_to_mA_d(-5.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dTomilliamperes_dUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_dNegDouble_greatestFiniteMagnitude1000_0() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_d(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTomilliamperes_dUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_dDouble_greatestFiniteMagnitude1000_0() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_mA_d(Double.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_dUsing15_0Expectingamperes_d15_01000000_0() {
        let unit = Microamperes_d(15.0)
        let expected = uA_d_to_A_d(15.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsing25_0Expectingamperes_d25_01000000_0() {
        let unit = Microamperes_d(25.0)
        let expected = uA_d_to_A_d(25.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsing250_0Expectingamperes_d250_01000000_0() {
        let unit = Microamperes_d(250.0)
        let expected = uA_d_to_A_d(250.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsing0_0Expectingamperes_d0_01000000_0() {
        let unit = Microamperes_d(0.0)
        let expected = uA_d_to_A_d(0.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsing2500_0Expectingamperes_d2500_01000000_0() {
        let unit = Microamperes_d(2500.0)
        let expected = uA_d_to_A_d(2500.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsing25000_0Expectingamperes_d25000_01000000_0() {
        let unit = Microamperes_d(25000.0)
        let expected = uA_d_to_A_d(25000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsing250000_0Expectingamperes_d250000_01000000_0() {
        let unit = Microamperes_d(250000.0)
        let expected = uA_d_to_A_d(250000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsing2500000_0Expectingamperes_d2500000_01000000_0() {
        let unit = Microamperes_d(2500000.0)
        let expected = uA_d_to_A_d(2500000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsingNeg323_0Expectingamperes_dNeg323_01000000_0() {
        let unit = Microamperes_d(-323.0)
        let expected = uA_d_to_A_d(-323.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsingNeg10_0Expectingamperes_dNeg10_01000000_0() {
        let unit = Microamperes_d(-10.0)
        let expected = uA_d_to_A_d(-10.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsingNeg1000_0Expectingamperes_dNeg1000_01000000_0() {
        let unit = Microamperes_d(-1000.0)
        let expected = uA_d_to_A_d(-1000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsingNeg5_0Expectingamperes_dNeg5_01000000_0() {
        let unit = Microamperes_d(-5.0)
        let expected = uA_d_to_A_d(-5.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroamperes_dToamperes_dUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_dNegDouble_greatestFiniteMagnitude1000000_0() {
        let unit = Microamperes_d(-Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_d(-Double.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToamperes_dUsingDouble_greatestFiniteMagnitudeExpectingamperes_dDouble_greatestFiniteMagnitude1000000_0() {
        let unit = Microamperes_d(Double.greatestFiniteMagnitude)
        let expected = uA_d_to_A_d(Double.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTointUsing0_0Expecting0() {
        let expected = uA_d_to_i(0.0)
        let result = CInt(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTointUsing5_0Expecting5() {
        let expected = uA_d_to_i(5.0)
        let result = CInt(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTointUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = uA_d_to_i(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTointUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = uA_d_to_i(microamperes_d(Double.greatestFiniteMagnitude))
        let result = CInt(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_dUsing0Expecting0_0() {
        let expected = i_to_uA_d(0)
        let result = Microamperes_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_dUsing5Expecting5_0() {
        let expected = i_to_uA_d(5)
        let result = Microamperes_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_dUsingCIntCInt_minExpectingmicroamperes_dCInt_min() {
        let expected = i_to_uA_d(CInt(CInt.min))
        let result = Microamperes_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroamperes_dUsingCIntCInt_maxExpectingmicroamperes_dCInt_max() {
        let expected = i_to_uA_d(CInt(CInt.max))
        let result = Microamperes_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint8_tUsing0_0Expecting0() {
        let expected = uA_d_to_i8(0.0)
        let result = Int8(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint8_tUsing5_0Expecting5() {
        let expected = uA_d_to_i8(5.0)
        let result = Int8(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint8_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = uA_d_to_i8(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint8_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = uA_d_to_i8(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Int8(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = i8_to_uA_d(0)
        let result = Microamperes_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = i8_to_uA_d(5)
        let result = Microamperes_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_dUsingInt8Int8_minExpectingmicroamperes_dInt8_min() {
        let expected = i8_to_uA_d(Int8(Int8.min))
        let result = Microamperes_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroamperes_dUsingInt8Int8_maxExpectingmicroamperes_dInt8_max() {
        let expected = i8_to_uA_d(Int8(Int8.max))
        let result = Microamperes_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint16_tUsing0_0Expecting0() {
        let expected = uA_d_to_i16(0.0)
        let result = Int16(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint16_tUsing5_0Expecting5() {
        let expected = uA_d_to_i16(5.0)
        let result = Int16(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint16_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = uA_d_to_i16(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint16_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = uA_d_to_i16(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Int16(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = i16_to_uA_d(0)
        let result = Microamperes_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = i16_to_uA_d(5)
        let result = Microamperes_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_dUsingInt16Int16_minExpectingmicroamperes_dInt16_min() {
        let expected = i16_to_uA_d(Int16(Int16.min))
        let result = Microamperes_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroamperes_dUsingInt16Int16_maxExpectingmicroamperes_dInt16_max() {
        let expected = i16_to_uA_d(Int16(Int16.max))
        let result = Microamperes_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint32_tUsing0_0Expecting0() {
        let expected = uA_d_to_i32(0.0)
        let result = Int32(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint32_tUsing5_0Expecting5() {
        let expected = uA_d_to_i32(5.0)
        let result = Int32(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint32_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = uA_d_to_i32(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint32_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = uA_d_to_i32(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Int32(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = i32_to_uA_d(0)
        let result = Microamperes_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = i32_to_uA_d(5)
        let result = Microamperes_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_dUsingInt32Int32_minExpectingmicroamperes_dInt32_min() {
        let expected = i32_to_uA_d(Int32(Int32.min))
        let result = Microamperes_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroamperes_dUsingInt32Int32_maxExpectingmicroamperes_dInt32_max() {
        let expected = i32_to_uA_d(Int32(Int32.max))
        let result = Microamperes_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint64_tUsing0_0Expecting0() {
        let expected = uA_d_to_i64(0.0)
        let result = Int64(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint64_tUsing5_0Expecting5() {
        let expected = uA_d_to_i64(5.0)
        let result = Int64(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint64_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = uA_d_to_i64(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dToint64_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = uA_d_to_i64(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Int64(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = i64_to_uA_d(0)
        let result = Microamperes_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = i64_to_uA_d(5)
        let result = Microamperes_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_dUsingInt64Int64_minExpectingmicroamperes_dInt64_min() {
        let expected = i64_to_uA_d(Int64(Int64.min))
        let result = Microamperes_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroamperes_dUsingInt64Int64_maxExpectingmicroamperes_dInt64_max() {
        let expected = i64_to_uA_d(Int64(Int64.max))
        let result = Microamperes_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTounsignedintUsing0_0Expecting0() {
        let expected = uA_d_to_u(0.0)
        let result = CUnsignedInt(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTounsignedintUsing5_0Expecting5() {
        let expected = uA_d_to_u(5.0)
        let result = CUnsignedInt(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTounsignedintUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = uA_d_to_u(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTounsignedintUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = uA_d_to_u(microamperes_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_dUsing0Expecting0_0() {
        let expected = u_to_uA_d(0)
        let result = Microamperes_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_dUsing5Expecting5_0() {
        let expected = u_to_uA_d(5)
        let result = Microamperes_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_dUsingCUnsignedIntCUnsignedInt_minExpectingmicroamperes_dCUnsignedInt_min() {
        let expected = u_to_uA_d(CUnsignedInt(CUnsignedInt.min))
        let result = Microamperes_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroamperes_dUsingCUnsignedIntCUnsignedInt_maxExpectingmicroamperes_dCUnsignedInt_max() {
        let expected = u_to_uA_d(CUnsignedInt(CUnsignedInt.max))
        let result = Microamperes_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint8_tUsing0_0Expecting0() {
        let expected = uA_d_to_u8(0.0)
        let result = UInt8(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint8_tUsing5_0Expecting5() {
        let expected = uA_d_to_u8(5.0)
        let result = UInt8(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint8_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = uA_d_to_u8(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint8_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = uA_d_to_u8(microamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = u8_to_uA_d(0)
        let result = Microamperes_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = u8_to_uA_d(5)
        let result = Microamperes_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_dUsingUInt8UInt8_minExpectingmicroamperes_dUInt8_min() {
        let expected = u8_to_uA_d(UInt8(UInt8.min))
        let result = Microamperes_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroamperes_dUsingUInt8UInt8_maxExpectingmicroamperes_dUInt8_max() {
        let expected = u8_to_uA_d(UInt8(UInt8.max))
        let result = Microamperes_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint16_tUsing0_0Expecting0() {
        let expected = uA_d_to_u16(0.0)
        let result = UInt16(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint16_tUsing5_0Expecting5() {
        let expected = uA_d_to_u16(5.0)
        let result = UInt16(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint16_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = uA_d_to_u16(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint16_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = uA_d_to_u16(microamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = u16_to_uA_d(0)
        let result = Microamperes_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = u16_to_uA_d(5)
        let result = Microamperes_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_dUsingUInt16UInt16_minExpectingmicroamperes_dUInt16_min() {
        let expected = u16_to_uA_d(UInt16(UInt16.min))
        let result = Microamperes_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroamperes_dUsingUInt16UInt16_maxExpectingmicroamperes_dUInt16_max() {
        let expected = u16_to_uA_d(UInt16(UInt16.max))
        let result = Microamperes_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint32_tUsing0_0Expecting0() {
        let expected = uA_d_to_u32(0.0)
        let result = UInt32(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint32_tUsing5_0Expecting5() {
        let expected = uA_d_to_u32(5.0)
        let result = UInt32(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint32_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = uA_d_to_u32(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint32_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = uA_d_to_u32(microamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = u32_to_uA_d(0)
        let result = Microamperes_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = u32_to_uA_d(5)
        let result = Microamperes_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_dUsingUInt32UInt32_minExpectingmicroamperes_dUInt32_min() {
        let expected = u32_to_uA_d(UInt32(UInt32.min))
        let result = Microamperes_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroamperes_dUsingUInt32UInt32_maxExpectingmicroamperes_dUInt32_max() {
        let expected = u32_to_uA_d(UInt32(UInt32.max))
        let result = Microamperes_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint64_tUsing0_0Expecting0() {
        let expected = uA_d_to_u64(0.0)
        let result = UInt64(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint64_tUsing5_0Expecting5() {
        let expected = uA_d_to_u64(5.0)
        let result = UInt64(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint64_tUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = uA_d_to_u64(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTouint64_tUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = uA_d_to_u64(microamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_dUsing0Expecting0_0() {
        let expected = u64_to_uA_d(0)
        let result = Microamperes_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_dUsing5Expecting5_0() {
        let expected = u64_to_uA_d(5)
        let result = Microamperes_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_dUsingUInt64UInt64_minExpectingmicroamperes_dUInt64_min() {
        let expected = u64_to_uA_d(UInt64(UInt64.min))
        let result = Microamperes_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroamperes_dUsingUInt64UInt64_maxExpectingmicroamperes_dUInt64_max() {
        let expected = u64_to_uA_d(UInt64(UInt64.max))
        let result = Microamperes_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTofloatUsing0_0Expecting0_0() {
        let expected = uA_d_to_f(0.0)
        let result = Float(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTofloatUsing5_0Expecting5_0() {
        let expected = uA_d_to_f(5.0)
        let result = Float(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTofloatUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = uA_d_to_f(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Float(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTofloatUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = uA_d_to_f(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Float(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_dUsing0_0Expecting0_0() {
        let expected = f_to_uA_d(0.0)
        let result = Microamperes_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_dUsing5_0Expecting5_0() {
        let expected = f_to_uA_d(5.0)
        let result = Microamperes_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_uA_d(Float(-Float.greatestFiniteMagnitude))
        let result = Microamperes_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroamperes_dUsingFloatFloat_greatestFiniteMagnitudeExpectingmicroamperes_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_uA_d(Float(Float.greatestFiniteMagnitude))
        let result = Microamperes_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTodoubleUsing0_0Expecting0_0() {
        let expected = uA_d_to_d(0.0)
        let result = Double(Microamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTodoubleUsing5_0Expecting5_0() {
        let expected = uA_d_to_d(5.0)
        let result = Double(Microamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTodoubleUsingmicroamperes_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = uA_d_to_d(microamperes_d(-Double.greatestFiniteMagnitude))
        let result = Double(Microamperes_d(microamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroamperes_dTodoubleUsingmicroamperes_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = uA_d_to_d(microamperes_d(Double.greatestFiniteMagnitude))
        let result = Double(Microamperes_d(microamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_dUsing0_0Expecting0_0() {
        let expected = d_to_uA_d(0.0)
        let result = Microamperes_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroamperes_dUsing5_0Expecting5_0() {
        let expected = d_to_uA_d(5.0)
        let result = Microamperes_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliamperes_t unit tests.
final class Milliamperes_tTests: XCTestCase {

    func testmilliamperes_tTomicroamperes_tUsing15Expectingmicroamperes_t151000() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_uA_t(15)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsing25Expectingmicroamperes_t251000() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_uA_t(25)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsing250Expectingmicroamperes_t2501000() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_uA_t(250)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsing0Expectingmicroamperes_t01000() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_uA_t(0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsing2500Expectingmicroamperes_t25001000() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_uA_t(2500)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsing25000Expectingmicroamperes_t250001000() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_uA_t(25000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsing250000Expectingmicroamperes_t2500001000() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_uA_t(250000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsingNeg323Expectingmicroamperes_tNeg3231000() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_uA_t(-323)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsingNeg10Expectingmicroamperes_tNeg101000() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_uA_t(-10)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsingNeg1000Expectingmicroamperes_tNeg10001000() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_uA_t(-1000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsingNeg5Expectingmicroamperes_tNeg51000() {
        let unit = Milliamperes_t(-5)
        let expected = mA_t_to_uA_t(-5)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsingCInt_minExpectingmicroamperes_tCInt_min() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_uA_t(CInt.min)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_tUsingCInt_maxExpectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_uA_t(CInt.max)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing15Expectingamperes_t151000() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_A_t(15)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing25Expectingamperes_t251000() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_A_t(25)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing250Expectingamperes_t2501000() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_A_t(250)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing0Expectingamperes_t01000() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_A_t(0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing2500Expectingamperes_t25001000() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_A_t(2500)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing25000Expectingamperes_t250001000() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_A_t(25000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing250000Expectingamperes_t2500001000() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_A_t(250000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsing2500000Expectingamperes_t25000001000() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_A_t(2500000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsingNeg323Expectingamperes_tNeg3231000() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_A_t(-323)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsingNeg10Expectingamperes_tNeg101000() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_A_t(-10)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsingNeg1000Expectingamperes_tNeg10001000() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_A_t(-1000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsingNeg5Expectingamperes_tNeg51000() {
        let unit = Milliamperes_t(-5)
        let expected = mA_t_to_A_t(-5)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsingCInt_minExpectingamperes_tCInt_min1000() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_A_t(CInt.min)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_tUsingCInt_maxExpectingamperes_tCInt_max1000() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_A_t(CInt.max)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing15Expectingmicroamperes_u151000() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_uA_u(15)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing25Expectingmicroamperes_u251000() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_uA_u(25)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing250Expectingmicroamperes_u2501000() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_uA_u(250)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing0Expectingmicroamperes_u01000() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_uA_u(0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing2500Expectingmicroamperes_u25001000() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_uA_u(2500)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing25000Expectingmicroamperes_u250001000() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_uA_u(25000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing250000Expectingmicroamperes_u2500001000() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_uA_u(250000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsing2500000Expectingmicroamperes_u25000001000() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_uA_u(2500000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsingNeg323Expecting0() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_uA_u(-323)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsingNeg10Expecting0() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_uA_u(-10)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsingNeg1000Expecting0() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_uA_u(-1000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsingNeg6Expecting0() {
        let unit = Milliamperes_t(-6)
        let expected = mA_t_to_uA_u(-6)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsingCInt_minExpecting0() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_uA_u(CInt.min)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_uUsingCInt_maxExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_uA_u(CInt.max)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_uUsing0Expecting0() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_mA_u(0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_uUsingmilliamperes_tCInt_minExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_t(milliamperes_t(CInt.min))
        let expected = mA_t_to_mA_u(milliamperes_t(CInt.min))
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_uUsingmilliamperes_tCInt_maxExpectingmilliamperes_uCInt_max() {
        let unit = Milliamperes_t(milliamperes_t(CInt.max))
        let expected = mA_t_to_mA_u(milliamperes_t(CInt.max))
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_uUsing5Expecting5() {
        let unit = Milliamperes_t(5)
        let expected = mA_t_to_mA_u(5)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing15Expectingamperes_u151000() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_A_u(15)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing25Expectingamperes_u251000() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_A_u(25)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing250Expectingamperes_u2501000() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_A_u(250)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing0Expectingamperes_u01000() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_A_u(0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing2500Expectingamperes_u25001000() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_A_u(2500)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing25000Expectingamperes_u250001000() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_A_u(25000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing250000Expectingamperes_u2500001000() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_A_u(250000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsing2500000Expectingamperes_u25000001000() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_A_u(2500000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsingNeg323Expecting0() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_A_u(-323)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsingNeg10Expecting0() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_A_u(-10)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsingNeg1000Expecting0() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_A_u(-1000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsingNeg6Expecting0() {
        let unit = Milliamperes_t(-6)
        let expected = mA_t_to_A_u(-6)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsingCInt_minExpecting0() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_A_u(CInt.min)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_uUsingCInt_maxExpectingamperes_uCInt_max1000() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_A_u(CInt.max)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing15Expectingmicroamperes_f15_01000_0() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_uA_f(15)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing25Expectingmicroamperes_f25_01000_0() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_uA_f(25)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing250Expectingmicroamperes_f250_01000_0() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_uA_f(250)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing0Expectingmicroamperes_f0_01000_0() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_uA_f(0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing2500Expectingmicroamperes_f2500_01000_0() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_uA_f(2500)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing25000Expectingmicroamperes_f25000_01000_0() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_uA_f(25000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing250000Expectingmicroamperes_f250000_01000_0() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_uA_f(250000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsing2500000Expectingmicroamperes_f2500000_01000_0() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_uA_f(2500000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsingNeg323Expectingmicroamperes_fNeg323_01000_0() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_uA_f(-323)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsingNeg10Expectingmicroamperes_fNeg10_01000_0() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_uA_f(-10)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsingNeg1000Expectingmicroamperes_fNeg1000_01000_0() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_uA_f(-1000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsingNeg5Expectingmicroamperes_fNeg5_01000_0() {
        let unit = Milliamperes_t(-5)
        let expected = mA_t_to_uA_f(-5)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsingCInt_minExpectingmicroamperes_fCInt_min1000_0() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_uA_f(CInt.min)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_fUsingCInt_maxExpectingmicroamperes_fCInt_max1000_0() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_uA_f(CInt.max)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_fUsing0Expecting0_0() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_mA_f(0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_fUsingmilliamperes_tCInt_minExpectingmilliamperes_fCInt_min() {
        let unit = Milliamperes_t(milliamperes_t(CInt.min))
        let expected = mA_t_to_mA_f(milliamperes_t(CInt.min))
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_fUsingmilliamperes_tCInt_maxExpectingmilliamperes_fCInt_max() {
        let unit = Milliamperes_t(milliamperes_t(CInt.max))
        let expected = mA_t_to_mA_f(milliamperes_t(CInt.max))
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_fUsing5Expecting5_0() {
        let unit = Milliamperes_t(5)
        let expected = mA_t_to_mA_f(5)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing15Expectingamperes_f15_01000_0() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_A_f(15)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing25Expectingamperes_f25_01000_0() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_A_f(25)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing250Expectingamperes_f250_01000_0() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_A_f(250)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing0Expectingamperes_f0_01000_0() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_A_f(0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing2500Expectingamperes_f2500_01000_0() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_A_f(2500)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing25000Expectingamperes_f25000_01000_0() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_A_f(25000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing250000Expectingamperes_f250000_01000_0() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_A_f(250000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsing2500000Expectingamperes_f2500000_01000_0() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_A_f(2500000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsingNeg323Expectingamperes_fNeg323_01000_0() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_A_f(-323)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsingNeg10Expectingamperes_fNeg10_01000_0() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_A_f(-10)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsingNeg1000Expectingamperes_fNeg1000_01000_0() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_A_f(-1000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsingNeg5Expectingamperes_fNeg5_01000_0() {
        let unit = Milliamperes_t(-5)
        let expected = mA_t_to_A_f(-5)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsingCInt_minExpectingamperes_fCInt_min1000_0() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_A_f(CInt.min)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_fUsingCInt_maxExpectingamperes_fCInt_max1000_0() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_A_f(CInt.max)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing15Expectingmicroamperes_d15_01000_0() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_uA_d(15)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing25Expectingmicroamperes_d25_01000_0() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_uA_d(25)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing250Expectingmicroamperes_d250_01000_0() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_uA_d(250)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing0Expectingmicroamperes_d0_01000_0() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_uA_d(0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing2500Expectingmicroamperes_d2500_01000_0() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_uA_d(2500)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing25000Expectingmicroamperes_d25000_01000_0() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_uA_d(25000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing250000Expectingmicroamperes_d250000_01000_0() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_uA_d(250000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsing2500000Expectingmicroamperes_d2500000_01000_0() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_uA_d(2500000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsingNeg323Expectingmicroamperes_dNeg323_01000_0() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_uA_d(-323)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsingNeg10Expectingmicroamperes_dNeg10_01000_0() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_uA_d(-10)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsingNeg1000Expectingmicroamperes_dNeg1000_01000_0() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_uA_d(-1000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsingNeg5Expectingmicroamperes_dNeg5_01000_0() {
        let unit = Milliamperes_t(-5)
        let expected = mA_t_to_uA_d(-5)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsingCInt_minExpectingmicroamperes_dCInt_min1000_0() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_uA_d(CInt.min)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomicroamperes_dUsingCInt_maxExpectingmicroamperes_dCInt_max1000_0() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_uA_d(CInt.max)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_dUsing0Expecting0_0() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_mA_d(0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_dUsingmilliamperes_tCInt_minExpectingmilliamperes_dCInt_min() {
        let unit = Milliamperes_t(milliamperes_t(CInt.min))
        let expected = mA_t_to_mA_d(milliamperes_t(CInt.min))
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_dUsingmilliamperes_tCInt_maxExpectingmilliamperes_dCInt_max() {
        let unit = Milliamperes_t(milliamperes_t(CInt.max))
        let expected = mA_t_to_mA_d(milliamperes_t(CInt.max))
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTomilliamperes_dUsing5Expecting5_0() {
        let unit = Milliamperes_t(5)
        let expected = mA_t_to_mA_d(5)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing15Expectingamperes_d15_01000_0() {
        let unit = Milliamperes_t(15)
        let expected = mA_t_to_A_d(15)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing25Expectingamperes_d25_01000_0() {
        let unit = Milliamperes_t(25)
        let expected = mA_t_to_A_d(25)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing250Expectingamperes_d250_01000_0() {
        let unit = Milliamperes_t(250)
        let expected = mA_t_to_A_d(250)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing0Expectingamperes_d0_01000_0() {
        let unit = Milliamperes_t(0)
        let expected = mA_t_to_A_d(0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing2500Expectingamperes_d2500_01000_0() {
        let unit = Milliamperes_t(2500)
        let expected = mA_t_to_A_d(2500)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing25000Expectingamperes_d25000_01000_0() {
        let unit = Milliamperes_t(25000)
        let expected = mA_t_to_A_d(25000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing250000Expectingamperes_d250000_01000_0() {
        let unit = Milliamperes_t(250000)
        let expected = mA_t_to_A_d(250000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsing2500000Expectingamperes_d2500000_01000_0() {
        let unit = Milliamperes_t(2500000)
        let expected = mA_t_to_A_d(2500000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsingNeg323Expectingamperes_dNeg323_01000_0() {
        let unit = Milliamperes_t(-323)
        let expected = mA_t_to_A_d(-323)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsingNeg10Expectingamperes_dNeg10_01000_0() {
        let unit = Milliamperes_t(-10)
        let expected = mA_t_to_A_d(-10)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsingNeg1000Expectingamperes_dNeg1000_01000_0() {
        let unit = Milliamperes_t(-1000)
        let expected = mA_t_to_A_d(-1000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsingNeg5Expectingamperes_dNeg5_01000_0() {
        let unit = Milliamperes_t(-5)
        let expected = mA_t_to_A_d(-5)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsingCInt_minExpectingamperes_dCInt_min1000_0() {
        let unit = Milliamperes_t(CInt.min)
        let expected = mA_t_to_A_d(CInt.min)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tToamperes_dUsingCInt_maxExpectingamperes_dCInt_max1000_0() {
        let unit = Milliamperes_t(CInt.max)
        let expected = mA_t_to_A_d(CInt.max)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_tTointUsing0Expecting0() {
        let expected = mA_t_to_i(0)
        let result = CInt(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTointUsing5Expecting5() {
        let expected = mA_t_to_i(5)
        let result = CInt(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTointUsingmilliamperes_tCInt_minExpectingCIntCInt_min() {
        let expected = mA_t_to_i(milliamperes_t(CInt.min))
        let result = CInt(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTointUsingmilliamperes_tCInt_maxExpectingCIntCInt_max() {
        let expected = mA_t_to_i(milliamperes_t(CInt.max))
        let result = CInt(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_tUsing0Expecting0() {
        let expected = i_to_mA_t(0)
        let result = Milliamperes_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_tUsing5Expecting5() {
        let expected = i_to_mA_t(5)
        let result = Milliamperes_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint8_tUsing0Expecting0() {
        let expected = mA_t_to_i8(0)
        let result = Int8(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint8_tUsing5Expecting5() {
        let expected = mA_t_to_i8(5)
        let result = Int8(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint8_tUsingmilliamperes_tCInt_minExpectingInt8Int8_min() {
        let expected = mA_t_to_i8(milliamperes_t(CInt.min))
        let result = Int8(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint8_tUsingmilliamperes_tCInt_maxExpectingInt8Int8_max() {
        let expected = mA_t_to_i8(milliamperes_t(CInt.max))
        let result = Int8(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_tUsing0Expecting0() {
        let expected = i8_to_mA_t(0)
        let result = Milliamperes_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_tUsing5Expecting5() {
        let expected = i8_to_mA_t(5)
        let result = Milliamperes_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_tUsingInt8Int8_minExpectingmilliamperes_tInt8_min() {
        let expected = i8_to_mA_t(Int8(Int8.min))
        let result = Milliamperes_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_tUsingInt8Int8_maxExpectingmilliamperes_tInt8_max() {
        let expected = i8_to_mA_t(Int8(Int8.max))
        let result = Milliamperes_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint16_tUsing0Expecting0() {
        let expected = mA_t_to_i16(0)
        let result = Int16(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint16_tUsing5Expecting5() {
        let expected = mA_t_to_i16(5)
        let result = Int16(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint16_tUsingmilliamperes_tCInt_minExpectingInt16Int16_min() {
        let expected = mA_t_to_i16(milliamperes_t(CInt.min))
        let result = Int16(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint16_tUsingmilliamperes_tCInt_maxExpectingInt16Int16_max() {
        let expected = mA_t_to_i16(milliamperes_t(CInt.max))
        let result = Int16(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_tUsing0Expecting0() {
        let expected = i16_to_mA_t(0)
        let result = Milliamperes_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_tUsing5Expecting5() {
        let expected = i16_to_mA_t(5)
        let result = Milliamperes_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_tUsingInt16Int16_minExpectingmilliamperes_tInt16_min() {
        let expected = i16_to_mA_t(Int16(Int16.min))
        let result = Milliamperes_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_tUsingInt16Int16_maxExpectingmilliamperes_tInt16_max() {
        let expected = i16_to_mA_t(Int16(Int16.max))
        let result = Milliamperes_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint32_tUsing0Expecting0() {
        let expected = mA_t_to_i32(0)
        let result = Int32(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint32_tUsing5Expecting5() {
        let expected = mA_t_to_i32(5)
        let result = Int32(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint32_tUsingmilliamperes_tCInt_minExpectingInt32CInt_min() {
        let expected = mA_t_to_i32(milliamperes_t(CInt.min))
        let result = Int32(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint32_tUsingmilliamperes_tCInt_maxExpectingInt32CInt_max() {
        let expected = mA_t_to_i32(milliamperes_t(CInt.max))
        let result = Int32(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_tUsing0Expecting0() {
        let expected = i32_to_mA_t(0)
        let result = Milliamperes_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_tUsing5Expecting5() {
        let expected = i32_to_mA_t(5)
        let result = Milliamperes_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_tUsingInt32Int32_minExpectingmilliamperes_tCInt_min() {
        let expected = i32_to_mA_t(Int32(Int32.min))
        let result = Milliamperes_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_tUsingInt32Int32_maxExpectingmilliamperes_tCInt_max() {
        let expected = i32_to_mA_t(Int32(Int32.max))
        let result = Milliamperes_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint64_tUsing0Expecting0() {
        let expected = mA_t_to_i64(0)
        let result = Int64(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint64_tUsing5Expecting5() {
        let expected = mA_t_to_i64(5)
        let result = Int64(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint64_tUsingmilliamperes_tCInt_minExpectingInt64CInt_min() {
        let expected = mA_t_to_i64(milliamperes_t(CInt.min))
        let result = Int64(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tToint64_tUsingmilliamperes_tCInt_maxExpectingInt64CInt_max() {
        let expected = mA_t_to_i64(milliamperes_t(CInt.max))
        let result = Int64(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_tUsing0Expecting0() {
        let expected = i64_to_mA_t(0)
        let result = Milliamperes_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_tUsing5Expecting5() {
        let expected = i64_to_mA_t(5)
        let result = Milliamperes_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_tUsingInt64Int64_minExpectingmilliamperes_tCInt_min() {
        let expected = i64_to_mA_t(Int64(Int64.min))
        let result = Milliamperes_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_tUsingInt64Int64_maxExpectingmilliamperes_tCInt_max() {
        let expected = i64_to_mA_t(Int64(Int64.max))
        let result = Milliamperes_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTounsignedintUsing0Expecting0() {
        let expected = mA_t_to_u(0)
        let result = CUnsignedInt(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTounsignedintUsing5Expecting5() {
        let expected = mA_t_to_u(5)
        let result = CUnsignedInt(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTounsignedintUsingmilliamperes_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mA_t_to_u(milliamperes_t(CInt.min))
        let result = CUnsignedInt(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTounsignedintUsingmilliamperes_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = mA_t_to_u(milliamperes_t(CInt.max))
        let result = CUnsignedInt(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_tUsing0Expecting0() {
        let expected = u_to_mA_t(0)
        let result = Milliamperes_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_tUsing5Expecting5() {
        let expected = u_to_mA_t(5)
        let result = Milliamperes_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_tUsingCUnsignedIntCUnsignedInt_minExpectingmilliamperes_tCUnsignedInt_min() {
        let expected = u_to_mA_t(CUnsignedInt(CUnsignedInt.min))
        let result = Milliamperes_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_tUsingCUnsignedIntCUnsignedInt_maxExpectingmilliamperes_tCInt_max() {
        let expected = u_to_mA_t(CUnsignedInt(CUnsignedInt.max))
        let result = Milliamperes_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint8_tUsing0Expecting0() {
        let expected = mA_t_to_u8(0)
        let result = UInt8(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint8_tUsing5Expecting5() {
        let expected = mA_t_to_u8(5)
        let result = UInt8(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint8_tUsingmilliamperes_tCInt_minExpectingUInt8UInt8_min() {
        let expected = mA_t_to_u8(milliamperes_t(CInt.min))
        let result = UInt8(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint8_tUsingmilliamperes_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = mA_t_to_u8(milliamperes_t(CInt.max))
        let result = UInt8(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_tUsing0Expecting0() {
        let expected = u8_to_mA_t(0)
        let result = Milliamperes_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_tUsing5Expecting5() {
        let expected = u8_to_mA_t(5)
        let result = Milliamperes_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_tUsingUInt8UInt8_minExpectingmilliamperes_tUInt8_min() {
        let expected = u8_to_mA_t(UInt8(UInt8.min))
        let result = Milliamperes_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_tUsingUInt8UInt8_maxExpectingmilliamperes_tUInt8_max() {
        let expected = u8_to_mA_t(UInt8(UInt8.max))
        let result = Milliamperes_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint16_tUsing0Expecting0() {
        let expected = mA_t_to_u16(0)
        let result = UInt16(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint16_tUsing5Expecting5() {
        let expected = mA_t_to_u16(5)
        let result = UInt16(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint16_tUsingmilliamperes_tCInt_minExpectingUInt16UInt16_min() {
        let expected = mA_t_to_u16(milliamperes_t(CInt.min))
        let result = UInt16(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint16_tUsingmilliamperes_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = mA_t_to_u16(milliamperes_t(CInt.max))
        let result = UInt16(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_tUsing0Expecting0() {
        let expected = u16_to_mA_t(0)
        let result = Milliamperes_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_tUsing5Expecting5() {
        let expected = u16_to_mA_t(5)
        let result = Milliamperes_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_tUsingUInt16UInt16_minExpectingmilliamperes_tUInt16_min() {
        let expected = u16_to_mA_t(UInt16(UInt16.min))
        let result = Milliamperes_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_tUsingUInt16UInt16_maxExpectingmilliamperes_tUInt16_max() {
        let expected = u16_to_mA_t(UInt16(UInt16.max))
        let result = Milliamperes_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint32_tUsing0Expecting0() {
        let expected = mA_t_to_u32(0)
        let result = UInt32(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint32_tUsing5Expecting5() {
        let expected = mA_t_to_u32(5)
        let result = UInt32(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint32_tUsingmilliamperes_tCInt_minExpectingUInt32UInt32_min() {
        let expected = mA_t_to_u32(milliamperes_t(CInt.min))
        let result = UInt32(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint32_tUsingmilliamperes_tCInt_maxExpectingUInt32CInt_max() {
        let expected = mA_t_to_u32(milliamperes_t(CInt.max))
        let result = UInt32(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_tUsing0Expecting0() {
        let expected = u32_to_mA_t(0)
        let result = Milliamperes_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_tUsing5Expecting5() {
        let expected = u32_to_mA_t(5)
        let result = Milliamperes_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_tUsingUInt32UInt32_minExpectingmilliamperes_tUInt32_min() {
        let expected = u32_to_mA_t(UInt32(UInt32.min))
        let result = Milliamperes_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_tUsingUInt32UInt32_maxExpectingmilliamperes_tCInt_max() {
        let expected = u32_to_mA_t(UInt32(UInt32.max))
        let result = Milliamperes_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint64_tUsing0Expecting0() {
        let expected = mA_t_to_u64(0)
        let result = UInt64(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint64_tUsing5Expecting5() {
        let expected = mA_t_to_u64(5)
        let result = UInt64(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint64_tUsingmilliamperes_tCInt_minExpectingUInt64UInt64_min() {
        let expected = mA_t_to_u64(milliamperes_t(CInt.min))
        let result = UInt64(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTouint64_tUsingmilliamperes_tCInt_maxExpectingUInt64CInt_max() {
        let expected = mA_t_to_u64(milliamperes_t(CInt.max))
        let result = UInt64(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_tUsing0Expecting0() {
        let expected = u64_to_mA_t(0)
        let result = Milliamperes_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_tUsing5Expecting5() {
        let expected = u64_to_mA_t(5)
        let result = Milliamperes_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_tUsingUInt64UInt64_minExpectingmilliamperes_tUInt64_min() {
        let expected = u64_to_mA_t(UInt64(UInt64.min))
        let result = Milliamperes_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_tUsingUInt64UInt64_maxExpectingmilliamperes_tCInt_max() {
        let expected = u64_to_mA_t(UInt64(UInt64.max))
        let result = Milliamperes_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTofloatUsing0Expecting0_0() {
        let expected = mA_t_to_f(0)
        let result = Float(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTofloatUsing5Expecting5_0() {
        let expected = mA_t_to_f(5)
        let result = Float(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTofloatUsingmilliamperes_tCInt_minExpectingFloatCInt_min() {
        let expected = mA_t_to_f(milliamperes_t(CInt.min))
        let result = Float(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTofloatUsingmilliamperes_tCInt_maxExpectingFloatCInt_max() {
        let expected = mA_t_to_f(milliamperes_t(CInt.max))
        let result = Float(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_tUsing0_0Expecting0() {
        let expected = f_to_mA_t(0.0)
        let result = Milliamperes_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_tUsing5_0Expecting5() {
        let expected = f_to_mA_t(5.0)
        let result = Milliamperes_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let expected = f_to_mA_t(Float(-Float.greatestFiniteMagnitude))
        let result = Milliamperes_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_tUsingFloatFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let expected = f_to_mA_t(Float(Float.greatestFiniteMagnitude))
        let result = Milliamperes_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTodoubleUsing0Expecting0_0() {
        let expected = mA_t_to_d(0)
        let result = Double(Milliamperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTodoubleUsing5Expecting5_0() {
        let expected = mA_t_to_d(5)
        let result = Double(Milliamperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTodoubleUsingmilliamperes_tCInt_minExpectingDoubleCInt_min() {
        let expected = mA_t_to_d(milliamperes_t(CInt.min))
        let result = Double(Milliamperes_t(milliamperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_tTodoubleUsingmilliamperes_tCInt_maxExpectingDoubleCInt_max() {
        let expected = mA_t_to_d(milliamperes_t(CInt.max))
        let result = Double(Milliamperes_t(milliamperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_tUsing0_0Expecting0() {
        let expected = d_to_mA_t(0.0)
        let result = Milliamperes_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_tUsing5_0Expecting5() {
        let expected = d_to_mA_t(5.0)
        let result = Milliamperes_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let expected = d_to_mA_t(Double(-Double.greatestFiniteMagnitude))
        let result = Milliamperes_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let expected = d_to_mA_t(Double(Double.greatestFiniteMagnitude))
        let result = Milliamperes_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliamperes_u unit tests.
final class Milliamperes_uTests: XCTestCase {

    func testmilliamperes_uTomicroamperes_tUsing15Expectingmicroamperes_t151000() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_uA_t(15)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsing25Expectingmicroamperes_t251000() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_uA_t(25)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsing250Expectingmicroamperes_t2501000() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_uA_t(250)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsing0Expectingmicroamperes_t01000() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_uA_t(0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsing2500Expectingmicroamperes_t25001000() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_uA_t(2500)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsing25000Expectingmicroamperes_t250001000() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_uA_t(25000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsing250000Expectingmicroamperes_t2500001000() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_uA_t(250000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsingCUnsignedInt_minExpectingmicroamperes_tCUnsignedInt_min1000() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_uA_t(CUnsignedInt.min)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_tUsingCUnsignedInt_maxExpectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_uA_t(CUnsignedInt.max)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_tUsing0Expecting0() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_mA_t(0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_tUsingmilliamperes_uCUnsignedInt_minExpectingmilliamperes_tCUnsignedInt_min() {
        let unit = Milliamperes_u(milliamperes_u(CUnsignedInt.min))
        let expected = mA_u_to_mA_t(milliamperes_u(CUnsignedInt.min))
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_tUsingmilliamperes_uCUnsignedInt_maxExpectingmilliamperes_tCInt_max() {
        let unit = Milliamperes_u(milliamperes_u(CUnsignedInt.max))
        let expected = mA_u_to_mA_t(milliamperes_u(CUnsignedInt.max))
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_tUsing5Expecting5() {
        let unit = Milliamperes_u(5)
        let expected = mA_u_to_mA_t(5)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing15Expectingamperes_t151000() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_A_t(15)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing25Expectingamperes_t251000() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_A_t(25)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing250Expectingamperes_t2501000() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_A_t(250)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing0Expectingamperes_t01000() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_A_t(0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing2500Expectingamperes_t25001000() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_A_t(2500)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing25000Expectingamperes_t250001000() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_A_t(25000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing250000Expectingamperes_t2500001000() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_A_t(250000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsing2500000Expectingamperes_t25000001000() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_A_t(2500000)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsingCUnsignedInt_minExpectingamperes_tCUnsignedInt_min1000() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_A_t(CUnsignedInt.min)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_tUsingCUnsignedInt_maxExpectingamperes_tCUnsignedInt_max1000() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_A_t(CUnsignedInt.max)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing15Expectingmicroamperes_u151000() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_uA_u(15)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing25Expectingmicroamperes_u251000() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_uA_u(25)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing250Expectingmicroamperes_u2501000() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_uA_u(250)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing0Expectingmicroamperes_u01000() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_uA_u(0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing2500Expectingmicroamperes_u25001000() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_uA_u(2500)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing25000Expectingmicroamperes_u250001000() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_uA_u(25000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing250000Expectingmicroamperes_u2500001000() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_uA_u(250000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsing2500000Expectingmicroamperes_u25000001000() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_uA_u(2500000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsingCUnsignedInt_minExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_uA_u(CUnsignedInt.min)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_uUsingCUnsignedInt_maxExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_uA_u(CUnsignedInt.max)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing15Expectingamperes_u151000() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_A_u(15)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing25Expectingamperes_u251000() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_A_u(25)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing250Expectingamperes_u2501000() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_A_u(250)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing0Expectingamperes_u01000() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_A_u(0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing2500Expectingamperes_u25001000() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_A_u(2500)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing25000Expectingamperes_u250001000() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_A_u(25000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing250000Expectingamperes_u2500001000() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_A_u(250000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsing2500000Expectingamperes_u25000001000() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_A_u(2500000)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsingCUnsignedInt_minExpectingamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_A_u(CUnsignedInt.min)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_uUsingCUnsignedInt_maxExpectingamperes_uCUnsignedInt_max1000() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_A_u(CUnsignedInt.max)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing15Expectingmicroamperes_f15_01000_0() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_uA_f(15)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing25Expectingmicroamperes_f25_01000_0() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_uA_f(25)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing250Expectingmicroamperes_f250_01000_0() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_uA_f(250)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing0Expectingmicroamperes_f0_01000_0() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_uA_f(0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing2500Expectingmicroamperes_f2500_01000_0() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_uA_f(2500)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing25000Expectingmicroamperes_f25000_01000_0() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_uA_f(25000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing250000Expectingmicroamperes_f250000_01000_0() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_uA_f(250000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsing2500000Expectingmicroamperes_f2500000_01000_0() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_uA_f(2500000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsingCUnsignedInt_minExpectingmicroamperes_fCUnsignedInt_min1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_uA_f(CUnsignedInt.min)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_fUsingCUnsignedInt_maxExpectingmicroamperes_fCUnsignedInt_max1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_uA_f(CUnsignedInt.max)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_fUsing0Expecting0_0() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_mA_f(0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_fUsingmilliamperes_uCUnsignedInt_minExpectingmilliamperes_fCUnsignedInt_min() {
        let unit = Milliamperes_u(milliamperes_u(CUnsignedInt.min))
        let expected = mA_u_to_mA_f(milliamperes_u(CUnsignedInt.min))
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_fUsingmilliamperes_uCUnsignedInt_maxExpectingmilliamperes_fCUnsignedInt_max() {
        let unit = Milliamperes_u(milliamperes_u(CUnsignedInt.max))
        let expected = mA_u_to_mA_f(milliamperes_u(CUnsignedInt.max))
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_fUsing5Expecting5_0() {
        let unit = Milliamperes_u(5)
        let expected = mA_u_to_mA_f(5)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing15Expectingamperes_f15_01000_0() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_A_f(15)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing25Expectingamperes_f25_01000_0() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_A_f(25)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing250Expectingamperes_f250_01000_0() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_A_f(250)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing0Expectingamperes_f0_01000_0() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_A_f(0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing2500Expectingamperes_f2500_01000_0() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_A_f(2500)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing25000Expectingamperes_f25000_01000_0() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_A_f(25000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing250000Expectingamperes_f250000_01000_0() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_A_f(250000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsing2500000Expectingamperes_f2500000_01000_0() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_A_f(2500000)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsingCUnsignedInt_minExpectingamperes_fCUnsignedInt_min1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_A_f(CUnsignedInt.min)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_fUsingCUnsignedInt_maxExpectingamperes_fCUnsignedInt_max1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_A_f(CUnsignedInt.max)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing15Expectingmicroamperes_d15_01000_0() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_uA_d(15)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing25Expectingmicroamperes_d25_01000_0() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_uA_d(25)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing250Expectingmicroamperes_d250_01000_0() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_uA_d(250)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing0Expectingmicroamperes_d0_01000_0() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_uA_d(0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing2500Expectingmicroamperes_d2500_01000_0() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_uA_d(2500)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing25000Expectingmicroamperes_d25000_01000_0() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_uA_d(25000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing250000Expectingmicroamperes_d250000_01000_0() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_uA_d(250000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsing2500000Expectingmicroamperes_d2500000_01000_0() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_uA_d(2500000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsingCUnsignedInt_minExpectingmicroamperes_dCUnsignedInt_min1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_uA_d(CUnsignedInt.min)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomicroamperes_dUsingCUnsignedInt_maxExpectingmicroamperes_dCUnsignedInt_max1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_uA_d(CUnsignedInt.max)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_dUsing0Expecting0_0() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_mA_d(0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_dUsingmilliamperes_uCUnsignedInt_minExpectingmilliamperes_dCUnsignedInt_min() {
        let unit = Milliamperes_u(milliamperes_u(CUnsignedInt.min))
        let expected = mA_u_to_mA_d(milliamperes_u(CUnsignedInt.min))
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_dUsingmilliamperes_uCUnsignedInt_maxExpectingmilliamperes_dCUnsignedInt_max() {
        let unit = Milliamperes_u(milliamperes_u(CUnsignedInt.max))
        let expected = mA_u_to_mA_d(milliamperes_u(CUnsignedInt.max))
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTomilliamperes_dUsing5Expecting5_0() {
        let unit = Milliamperes_u(5)
        let expected = mA_u_to_mA_d(5)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing15Expectingamperes_d15_01000_0() {
        let unit = Milliamperes_u(15)
        let expected = mA_u_to_A_d(15)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing25Expectingamperes_d25_01000_0() {
        let unit = Milliamperes_u(25)
        let expected = mA_u_to_A_d(25)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing250Expectingamperes_d250_01000_0() {
        let unit = Milliamperes_u(250)
        let expected = mA_u_to_A_d(250)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing0Expectingamperes_d0_01000_0() {
        let unit = Milliamperes_u(0)
        let expected = mA_u_to_A_d(0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing2500Expectingamperes_d2500_01000_0() {
        let unit = Milliamperes_u(2500)
        let expected = mA_u_to_A_d(2500)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing25000Expectingamperes_d25000_01000_0() {
        let unit = Milliamperes_u(25000)
        let expected = mA_u_to_A_d(25000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing250000Expectingamperes_d250000_01000_0() {
        let unit = Milliamperes_u(250000)
        let expected = mA_u_to_A_d(250000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsing2500000Expectingamperes_d2500000_01000_0() {
        let unit = Milliamperes_u(2500000)
        let expected = mA_u_to_A_d(2500000)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsingCUnsignedInt_minExpectingamperes_dCUnsignedInt_min1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.min)
        let expected = mA_u_to_A_d(CUnsignedInt.min)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uToamperes_dUsingCUnsignedInt_maxExpectingamperes_dCUnsignedInt_max1000_0() {
        let unit = Milliamperes_u(CUnsignedInt.max)
        let expected = mA_u_to_A_d(CUnsignedInt.max)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_uTointUsing0Expecting0() {
        let expected = mA_u_to_i(0)
        let result = CInt(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTointUsing5Expecting5() {
        let expected = mA_u_to_i(5)
        let result = CInt(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTointUsingmilliamperes_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = mA_u_to_i(milliamperes_u(CUnsignedInt.min))
        let result = CInt(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTointUsingmilliamperes_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = mA_u_to_i(milliamperes_u(CUnsignedInt.max))
        let result = CInt(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_uUsing0Expecting0() {
        let expected = i_to_mA_u(0)
        let result = Milliamperes_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_uUsing5Expecting5() {
        let expected = i_to_mA_u(5)
        let result = Milliamperes_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_uUsingCIntCInt_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = i_to_mA_u(CInt(CInt.min))
        let result = Milliamperes_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_uUsingCIntCInt_maxExpectingmilliamperes_uCInt_max() {
        let expected = i_to_mA_u(CInt(CInt.max))
        let result = Milliamperes_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint8_tUsing0Expecting0() {
        let expected = mA_u_to_i8(0)
        let result = Int8(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint8_tUsing5Expecting5() {
        let expected = mA_u_to_i8(5)
        let result = Int8(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint8_tUsingmilliamperes_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = mA_u_to_i8(milliamperes_u(CUnsignedInt.min))
        let result = Int8(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint8_tUsingmilliamperes_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = mA_u_to_i8(milliamperes_u(CUnsignedInt.max))
        let result = Int8(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_uUsing0Expecting0() {
        let expected = i8_to_mA_u(0)
        let result = Milliamperes_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_uUsing5Expecting5() {
        let expected = i8_to_mA_u(5)
        let result = Milliamperes_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_uUsingInt8Int8_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = i8_to_mA_u(Int8(Int8.min))
        let result = Milliamperes_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_uUsingInt8Int8_maxExpectingmilliamperes_uInt8_max() {
        let expected = i8_to_mA_u(Int8(Int8.max))
        let result = Milliamperes_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint16_tUsing0Expecting0() {
        let expected = mA_u_to_i16(0)
        let result = Int16(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint16_tUsing5Expecting5() {
        let expected = mA_u_to_i16(5)
        let result = Int16(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint16_tUsingmilliamperes_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = mA_u_to_i16(milliamperes_u(CUnsignedInt.min))
        let result = Int16(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint16_tUsingmilliamperes_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = mA_u_to_i16(milliamperes_u(CUnsignedInt.max))
        let result = Int16(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_uUsing0Expecting0() {
        let expected = i16_to_mA_u(0)
        let result = Milliamperes_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_uUsing5Expecting5() {
        let expected = i16_to_mA_u(5)
        let result = Milliamperes_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_uUsingInt16Int16_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = i16_to_mA_u(Int16(Int16.min))
        let result = Milliamperes_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_uUsingInt16Int16_maxExpectingmilliamperes_uInt16_max() {
        let expected = i16_to_mA_u(Int16(Int16.max))
        let result = Milliamperes_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint32_tUsing0Expecting0() {
        let expected = mA_u_to_i32(0)
        let result = Int32(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint32_tUsing5Expecting5() {
        let expected = mA_u_to_i32(5)
        let result = Int32(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint32_tUsingmilliamperes_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = mA_u_to_i32(milliamperes_u(CUnsignedInt.min))
        let result = Int32(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint32_tUsingmilliamperes_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = mA_u_to_i32(milliamperes_u(CUnsignedInt.max))
        let result = Int32(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_uUsing0Expecting0() {
        let expected = i32_to_mA_u(0)
        let result = Milliamperes_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_uUsing5Expecting5() {
        let expected = i32_to_mA_u(5)
        let result = Milliamperes_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_uUsingInt32Int32_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = i32_to_mA_u(Int32(Int32.min))
        let result = Milliamperes_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_uUsingInt32Int32_maxExpectingmilliamperes_uInt32_max() {
        let expected = i32_to_mA_u(Int32(Int32.max))
        let result = Milliamperes_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint64_tUsing0Expecting0() {
        let expected = mA_u_to_i64(0)
        let result = Int64(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint64_tUsing5Expecting5() {
        let expected = mA_u_to_i64(5)
        let result = Int64(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint64_tUsingmilliamperes_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = mA_u_to_i64(milliamperes_u(CUnsignedInt.min))
        let result = Int64(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uToint64_tUsingmilliamperes_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = mA_u_to_i64(milliamperes_u(CUnsignedInt.max))
        let result = Int64(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_uUsing0Expecting0() {
        let expected = i64_to_mA_u(0)
        let result = Milliamperes_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_uUsing5Expecting5() {
        let expected = i64_to_mA_u(5)
        let result = Milliamperes_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_uUsingInt64Int64_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = i64_to_mA_u(Int64(Int64.min))
        let result = Milliamperes_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_uUsingInt64Int64_maxExpectingmilliamperes_uCUnsignedInt_max() {
        let expected = i64_to_mA_u(Int64(Int64.max))
        let result = Milliamperes_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTounsignedintUsing0Expecting0() {
        let expected = mA_u_to_u(0)
        let result = CUnsignedInt(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTounsignedintUsing5Expecting5() {
        let expected = mA_u_to_u(5)
        let result = CUnsignedInt(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTounsignedintUsingmilliamperes_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mA_u_to_u(milliamperes_u(CUnsignedInt.min))
        let result = CUnsignedInt(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTounsignedintUsingmilliamperes_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = mA_u_to_u(milliamperes_u(CUnsignedInt.max))
        let result = CUnsignedInt(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_uUsing0Expecting0() {
        let expected = u_to_mA_u(0)
        let result = Milliamperes_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_uUsing5Expecting5() {
        let expected = u_to_mA_u(5)
        let result = Milliamperes_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint8_tUsing0Expecting0() {
        let expected = mA_u_to_u8(0)
        let result = UInt8(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint8_tUsing5Expecting5() {
        let expected = mA_u_to_u8(5)
        let result = UInt8(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint8_tUsingmilliamperes_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = mA_u_to_u8(milliamperes_u(CUnsignedInt.min))
        let result = UInt8(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint8_tUsingmilliamperes_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = mA_u_to_u8(milliamperes_u(CUnsignedInt.max))
        let result = UInt8(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_uUsing0Expecting0() {
        let expected = u8_to_mA_u(0)
        let result = Milliamperes_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_uUsing5Expecting5() {
        let expected = u8_to_mA_u(5)
        let result = Milliamperes_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_uUsingUInt8UInt8_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = u8_to_mA_u(UInt8(UInt8.min))
        let result = Milliamperes_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_uUsingUInt8UInt8_maxExpectingmilliamperes_uUInt8_max() {
        let expected = u8_to_mA_u(UInt8(UInt8.max))
        let result = Milliamperes_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint16_tUsing0Expecting0() {
        let expected = mA_u_to_u16(0)
        let result = UInt16(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint16_tUsing5Expecting5() {
        let expected = mA_u_to_u16(5)
        let result = UInt16(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint16_tUsingmilliamperes_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = mA_u_to_u16(milliamperes_u(CUnsignedInt.min))
        let result = UInt16(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint16_tUsingmilliamperes_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = mA_u_to_u16(milliamperes_u(CUnsignedInt.max))
        let result = UInt16(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_uUsing0Expecting0() {
        let expected = u16_to_mA_u(0)
        let result = Milliamperes_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_uUsing5Expecting5() {
        let expected = u16_to_mA_u(5)
        let result = Milliamperes_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_uUsingUInt16UInt16_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = u16_to_mA_u(UInt16(UInt16.min))
        let result = Milliamperes_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_uUsingUInt16UInt16_maxExpectingmilliamperes_uUInt16_max() {
        let expected = u16_to_mA_u(UInt16(UInt16.max))
        let result = Milliamperes_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint32_tUsing0Expecting0() {
        let expected = mA_u_to_u32(0)
        let result = UInt32(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint32_tUsing5Expecting5() {
        let expected = mA_u_to_u32(5)
        let result = UInt32(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint32_tUsingmilliamperes_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = mA_u_to_u32(milliamperes_u(CUnsignedInt.min))
        let result = UInt32(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint32_tUsingmilliamperes_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = mA_u_to_u32(milliamperes_u(CUnsignedInt.max))
        let result = UInt32(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_uUsing0Expecting0() {
        let expected = u32_to_mA_u(0)
        let result = Milliamperes_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_uUsing5Expecting5() {
        let expected = u32_to_mA_u(5)
        let result = Milliamperes_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_uUsingUInt32UInt32_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = u32_to_mA_u(UInt32(UInt32.min))
        let result = Milliamperes_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_uUsingUInt32UInt32_maxExpectingmilliamperes_uCUnsignedInt_max() {
        let expected = u32_to_mA_u(UInt32(UInt32.max))
        let result = Milliamperes_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint64_tUsing0Expecting0() {
        let expected = mA_u_to_u64(0)
        let result = UInt64(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint64_tUsing5Expecting5() {
        let expected = mA_u_to_u64(5)
        let result = UInt64(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint64_tUsingmilliamperes_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = mA_u_to_u64(milliamperes_u(CUnsignedInt.min))
        let result = UInt64(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTouint64_tUsingmilliamperes_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = mA_u_to_u64(milliamperes_u(CUnsignedInt.max))
        let result = UInt64(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_uUsing0Expecting0() {
        let expected = u64_to_mA_u(0)
        let result = Milliamperes_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_uUsing5Expecting5() {
        let expected = u64_to_mA_u(5)
        let result = Milliamperes_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_uUsingUInt64UInt64_minExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = u64_to_mA_u(UInt64(UInt64.min))
        let result = Milliamperes_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_uUsingUInt64UInt64_maxExpectingmilliamperes_uCUnsignedInt_max() {
        let expected = u64_to_mA_u(UInt64(UInt64.max))
        let result = Milliamperes_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTofloatUsing0Expecting0_0() {
        let expected = mA_u_to_f(0)
        let result = Float(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTofloatUsing5Expecting5_0() {
        let expected = mA_u_to_f(5)
        let result = Float(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTofloatUsingmilliamperes_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = mA_u_to_f(milliamperes_u(CUnsignedInt.min))
        let result = Float(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTofloatUsingmilliamperes_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = mA_u_to_f(milliamperes_u(CUnsignedInt.max))
        let result = Float(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_uUsing0_0Expecting0() {
        let expected = f_to_mA_u(0.0)
        let result = Milliamperes_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_uUsing5_0Expecting5() {
        let expected = f_to_mA_u(5.0)
        let result = Milliamperes_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = f_to_mA_u(Float(-Float.greatestFiniteMagnitude))
        let result = Milliamperes_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_uUsingFloatFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let expected = f_to_mA_u(Float(Float.greatestFiniteMagnitude))
        let result = Milliamperes_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTodoubleUsing0Expecting0_0() {
        let expected = mA_u_to_d(0)
        let result = Double(Milliamperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTodoubleUsing5Expecting5_0() {
        let expected = mA_u_to_d(5)
        let result = Double(Milliamperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTodoubleUsingmilliamperes_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = mA_u_to_d(milliamperes_u(CUnsignedInt.min))
        let result = Double(Milliamperes_u(milliamperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_uTodoubleUsingmilliamperes_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = mA_u_to_d(milliamperes_u(CUnsignedInt.max))
        let result = Double(Milliamperes_u(milliamperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_uUsing0_0Expecting0() {
        let expected = d_to_mA_u(0.0)
        let result = Milliamperes_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_uUsing5_0Expecting5() {
        let expected = d_to_mA_u(5.0)
        let result = Milliamperes_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let expected = d_to_mA_u(Double(-Double.greatestFiniteMagnitude))
        let result = Milliamperes_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let expected = d_to_mA_u(Double(Double.greatestFiniteMagnitude))
        let result = Milliamperes_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliamperes_f unit tests.
final class Milliamperes_fTests: XCTestCase {

    func testmilliamperes_fTomicroamperes_tUsing15_0Expectingmicroamperes_t15_01000_0_rounded() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_uA_t(15.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsing25_0Expectingmicroamperes_t25_01000_0_rounded() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_uA_t(25.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsing250_0Expectingmicroamperes_t250_01000_0_rounded() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_uA_t(250.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsing0_0Expectingmicroamperes_t0_01000_0_rounded() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_uA_t(0.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsing2500_0Expectingmicroamperes_t2500_01000_0_rounded() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_uA_t(2500.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsing25000_0Expectingmicroamperes_t25000_01000_0_rounded() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_uA_t(25000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsing250000_0Expectingmicroamperes_t250000_01000_0_rounded() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_uA_t(250000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_f(2500000)
        let expected = mA_f_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsingNeg323_0Expectingmicroamperes_tNeg323_01000_0_rounded() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_uA_t(-323.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsingNeg10_0Expectingmicroamperes_tNeg10_01000_0_rounded() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_uA_t(-10.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsingNeg1000_0Expectingmicroamperes_tNeg1000_01000_0_rounded() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_uA_t(-1000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsingNeg5_0Expectingmicroamperes_tNeg5_01000_0_rounded() {
        let unit = Milliamperes_f(-5.0)
        let expected = mA_f_to_uA_t(-5.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_t(-Float.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_tUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_t(Float.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_tUsing0_0Expecting0() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_mA_t(0.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let unit = Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude))
        let expected = mA_f_to_mA_t(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let unit = Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude))
        let expected = mA_f_to_mA_t(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_tUsing5_0Expecting5() {
        let unit = Milliamperes_f(5.0)
        let expected = mA_f_to_mA_t(5.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing15_0Expectingamperes_t15_01000_0_rounded() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_A_t(15.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing25_0Expectingamperes_t25_01000_0_rounded() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_A_t(25.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing250_0Expectingamperes_t250_01000_0_rounded() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_A_t(250.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing0_0Expectingamperes_t0_01000_0_rounded() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_A_t(0.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing2500_0Expectingamperes_t2500_01000_0_rounded() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_A_t(2500.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing25000_0Expectingamperes_t25000_01000_0_rounded() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_A_t(25000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing250000_0Expectingamperes_t250000_01000_0_rounded() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_A_t(250000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsing2500000_0Expectingamperes_t2500000_01000_0_rounded() {
        let unit = Milliamperes_f(2500000.0)
        let expected = mA_f_to_A_t(2500000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsingNeg323_0Expectingamperes_tNeg323_01000_0_rounded() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_A_t(-323.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsingNeg10_0Expectingamperes_tNeg10_01000_0_rounded() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_A_t(-10.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsingNeg1000_0Expectingamperes_tNeg1000_01000_0_rounded() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_A_t(-1000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsingNeg5_0Expectingamperes_tNeg5_01000_0_rounded() {
        let unit = Milliamperes_f(-5.0)
        let expected = mA_f_to_A_t(-5.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_t(-Float.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_tUsingFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_t(Float.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing15_0Expectingmicroamperes_u15_01000_0_rounded() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_uA_u(15.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing25_0Expectingmicroamperes_u25_01000_0_rounded() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_uA_u(25.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing250_0Expectingmicroamperes_u250_01000_0_rounded() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_uA_u(250.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing0_0Expectingmicroamperes_u0_01000_0_rounded() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_uA_u(0.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing2500_0Expectingmicroamperes_u2500_01000_0_rounded() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_uA_u(2500.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing25000_0Expectingmicroamperes_u25000_01000_0_rounded() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_uA_u(25000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing250000_0Expectingmicroamperes_u250000_01000_0_rounded() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_uA_u(250000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsing2500000_0Expectingmicroamperes_u2500000_01000_0_rounded() {
        let unit = Milliamperes_f(2500000.0)
        let expected = mA_f_to_uA_u(2500000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsingNeg323_0Expecting0() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_uA_u(-323.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsingNeg10_0Expecting0() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_uA_u(-10.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsingNeg1000_0Expecting0() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_uA_u(-1000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsingNeg6_0Expecting0() {
        let unit = Milliamperes_f(-6.0)
        let expected = mA_f_to_uA_u(-6.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_u(-Float.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_uUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_u(Float.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_uUsing0_0Expecting0() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_mA_u(0.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_uUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude))
        let expected = mA_f_to_mA_u(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_uUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude))
        let expected = mA_f_to_mA_u(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_uUsing5_0Expecting5() {
        let unit = Milliamperes_f(5.0)
        let expected = mA_f_to_mA_u(5.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing15_0Expectingamperes_u15_01000_0_rounded() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_A_u(15.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing25_0Expectingamperes_u25_01000_0_rounded() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_A_u(25.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing250_0Expectingamperes_u250_01000_0_rounded() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_A_u(250.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing0_0Expectingamperes_u0_01000_0_rounded() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_A_u(0.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing2500_0Expectingamperes_u2500_01000_0_rounded() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_A_u(2500.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing25000_0Expectingamperes_u25000_01000_0_rounded() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_A_u(25000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing250000_0Expectingamperes_u250000_01000_0_rounded() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_A_u(250000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsing2500000_0Expectingamperes_u2500000_01000_0_rounded() {
        let unit = Milliamperes_f(2500000.0)
        let expected = mA_f_to_A_u(2500000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsingNeg323_0Expecting0() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_A_u(-323.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsingNeg10_0Expecting0() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_A_u(-10.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsingNeg1000_0Expecting0() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_A_u(-1000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsingNeg6_0Expecting0() {
        let unit = Milliamperes_f(-6.0)
        let expected = mA_f_to_A_u(-6.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_u(-Float.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_uUsingFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_u(Float.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing15_0Expectingmicroamperes_f15_01000_0() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_uA_f(15.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing25_0Expectingmicroamperes_f25_01000_0() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_uA_f(25.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing250_0Expectingmicroamperes_f250_01000_0() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_uA_f(250.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing0_0Expectingmicroamperes_f0_01000_0() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_uA_f(0.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing2500_0Expectingmicroamperes_f2500_01000_0() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_uA_f(2500.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing25000_0Expectingmicroamperes_f25000_01000_0() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_uA_f(25000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing250000_0Expectingmicroamperes_f250000_01000_0() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_uA_f(250000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsing2500000_0Expectingmicroamperes_f2500000_01000_0() {
        let unit = Milliamperes_f(2500000.0)
        let expected = mA_f_to_uA_f(2500000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsingNeg323_0Expectingmicroamperes_fNeg323_01000_0() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_uA_f(-323.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsingNeg10_0Expectingmicroamperes_fNeg10_01000_0() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_uA_f(-10.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsingNeg1000_0Expectingmicroamperes_fNeg1000_01000_0() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_uA_f(-1000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsingNeg5_0Expectingmicroamperes_fNeg5_01000_0() {
        let unit = Milliamperes_f(-5.0)
        let expected = mA_f_to_uA_f(-5.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_f(-Float.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_fUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_f(Float.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing15_0Expectingamperes_f15_01000_0() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_A_f(15.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing25_0Expectingamperes_f25_01000_0() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_A_f(25.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing250_0Expectingamperes_f250_01000_0() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_A_f(250.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing0_0Expectingamperes_f0_01000_0() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_A_f(0.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing2500_0Expectingamperes_f2500_01000_0() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_A_f(2500.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing25000_0Expectingamperes_f25000_01000_0() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_A_f(25000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing250000_0Expectingamperes_f250000_01000_0() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_A_f(250000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsing2500000_0Expectingamperes_f2500000_01000_0() {
        let unit = Milliamperes_f(2500000.0)
        let expected = mA_f_to_A_f(2500000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsingNeg323_0Expectingamperes_fNeg323_01000_0() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_A_f(-323.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsingNeg10_0Expectingamperes_fNeg10_01000_0() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_A_f(-10.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsingNeg1000_0Expectingamperes_fNeg1000_01000_0() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_A_f(-1000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsingNeg5_0Expectingamperes_fNeg5_01000_0() {
        let unit = Milliamperes_f(-5.0)
        let expected = mA_f_to_A_f(-5.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_fNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_f(-Float.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_fUsingFloat_greatestFiniteMagnitudeExpectingamperes_fFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_f(Float.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing15_0Expectingmicroamperes_d15_01000_0() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_uA_d(15.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing25_0Expectingmicroamperes_d25_01000_0() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_uA_d(25.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing250_0Expectingmicroamperes_d250_01000_0() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_uA_d(250.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing0_0Expectingmicroamperes_d0_01000_0() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_uA_d(0.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing2500_0Expectingmicroamperes_d2500_01000_0() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_uA_d(2500.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing25000_0Expectingmicroamperes_d25000_01000_0() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_uA_d(25000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing250000_0Expectingmicroamperes_d250000_01000_0() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_uA_d(250000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsing2500000_0Expectingmicroamperes_d2500000_01000_0() {
        let unit = Milliamperes_f(2500000.0)
        let expected = mA_f_to_uA_d(2500000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsingNeg323_0Expectingmicroamperes_dNeg323_01000_0() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_uA_d(-323.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsingNeg10_0Expectingmicroamperes_dNeg10_01000_0() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_uA_d(-10.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsingNeg1000_0Expectingmicroamperes_dNeg1000_01000_0() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_uA_d(-1000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsingNeg5_0Expectingmicroamperes_dNeg5_01000_0() {
        let unit = Milliamperes_f(-5.0)
        let expected = mA_f_to_uA_d(-5.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_d(-Float.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomicroamperes_dUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_uA_d(Float.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_dUsing0_0Expecting0_0() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_mA_d(0.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_dUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_dNegFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude))
        let expected = mA_f_to_mA_d(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_dUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingmilliamperes_dFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude))
        let expected = mA_f_to_mA_d(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTomilliamperes_dUsing5_0Expecting5_0() {
        let unit = Milliamperes_f(5.0)
        let expected = mA_f_to_mA_d(5.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing15_0Expectingamperes_d15_01000_0() {
        let unit = Milliamperes_f(15.0)
        let expected = mA_f_to_A_d(15.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing25_0Expectingamperes_d25_01000_0() {
        let unit = Milliamperes_f(25.0)
        let expected = mA_f_to_A_d(25.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing250_0Expectingamperes_d250_01000_0() {
        let unit = Milliamperes_f(250.0)
        let expected = mA_f_to_A_d(250.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing0_0Expectingamperes_d0_01000_0() {
        let unit = Milliamperes_f(0.0)
        let expected = mA_f_to_A_d(0.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing2500_0Expectingamperes_d2500_01000_0() {
        let unit = Milliamperes_f(2500.0)
        let expected = mA_f_to_A_d(2500.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing25000_0Expectingamperes_d25000_01000_0() {
        let unit = Milliamperes_f(25000.0)
        let expected = mA_f_to_A_d(25000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing250000_0Expectingamperes_d250000_01000_0() {
        let unit = Milliamperes_f(250000.0)
        let expected = mA_f_to_A_d(250000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsing2500000_0Expectingamperes_d2500000_01000_0() {
        let unit = Milliamperes_f(2500000.0)
        let expected = mA_f_to_A_d(2500000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsingNeg323_0Expectingamperes_dNeg323_01000_0() {
        let unit = Milliamperes_f(-323.0)
        let expected = mA_f_to_A_d(-323.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsingNeg10_0Expectingamperes_dNeg10_01000_0() {
        let unit = Milliamperes_f(-10.0)
        let expected = mA_f_to_A_d(-10.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsingNeg1000_0Expectingamperes_dNeg1000_01000_0() {
        let unit = Milliamperes_f(-1000.0)
        let expected = mA_f_to_A_d(-1000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsingNeg5_0Expectingamperes_dNeg5_01000_0() {
        let unit = Milliamperes_f(-5.0)
        let expected = mA_f_to_A_d(-5.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsingNegFloat_greatestFiniteMagnitudeExpectingamperes_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_f(-Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_d(-Float.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fToamperes_dUsingFloat_greatestFiniteMagnitudeExpectingamperes_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_f(Float.greatestFiniteMagnitude)
        let expected = mA_f_to_A_d(Float.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_fTointUsing0_0Expecting0() {
        let expected = mA_f_to_i(0.0)
        let result = CInt(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTointUsing5_0Expecting5() {
        let expected = mA_f_to_i(5.0)
        let result = CInt(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTointUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = mA_f_to_i(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTointUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = mA_f_to_i(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = CInt(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_fUsing0Expecting0_0() {
        let expected = i_to_mA_f(0)
        let result = Milliamperes_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_fUsing5Expecting5_0() {
        let expected = i_to_mA_f(5)
        let result = Milliamperes_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_fUsingCIntCInt_minExpectingmilliamperes_fCInt_min() {
        let expected = i_to_mA_f(CInt(CInt.min))
        let result = Milliamperes_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_fUsingCIntCInt_maxExpectingmilliamperes_fCInt_max() {
        let expected = i_to_mA_f(CInt(CInt.max))
        let result = Milliamperes_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint8_tUsing0_0Expecting0() {
        let expected = mA_f_to_i8(0.0)
        let result = Int8(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint8_tUsing5_0Expecting5() {
        let expected = mA_f_to_i8(5.0)
        let result = Int8(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint8_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = mA_f_to_i8(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint8_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = mA_f_to_i8(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Int8(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = i8_to_mA_f(0)
        let result = Milliamperes_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = i8_to_mA_f(5)
        let result = Milliamperes_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_fUsingInt8Int8_minExpectingmilliamperes_fInt8_min() {
        let expected = i8_to_mA_f(Int8(Int8.min))
        let result = Milliamperes_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_fUsingInt8Int8_maxExpectingmilliamperes_fInt8_max() {
        let expected = i8_to_mA_f(Int8(Int8.max))
        let result = Milliamperes_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint16_tUsing0_0Expecting0() {
        let expected = mA_f_to_i16(0.0)
        let result = Int16(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint16_tUsing5_0Expecting5() {
        let expected = mA_f_to_i16(5.0)
        let result = Int16(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint16_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = mA_f_to_i16(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint16_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = mA_f_to_i16(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Int16(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = i16_to_mA_f(0)
        let result = Milliamperes_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = i16_to_mA_f(5)
        let result = Milliamperes_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_fUsingInt16Int16_minExpectingmilliamperes_fInt16_min() {
        let expected = i16_to_mA_f(Int16(Int16.min))
        let result = Milliamperes_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_fUsingInt16Int16_maxExpectingmilliamperes_fInt16_max() {
        let expected = i16_to_mA_f(Int16(Int16.max))
        let result = Milliamperes_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint32_tUsing0_0Expecting0() {
        let expected = mA_f_to_i32(0.0)
        let result = Int32(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint32_tUsing5_0Expecting5() {
        let expected = mA_f_to_i32(5.0)
        let result = Int32(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint32_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = mA_f_to_i32(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint32_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = mA_f_to_i32(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Int32(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = i32_to_mA_f(0)
        let result = Milliamperes_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = i32_to_mA_f(5)
        let result = Milliamperes_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_fUsingInt32Int32_minExpectingmilliamperes_fInt32_min() {
        let expected = i32_to_mA_f(Int32(Int32.min))
        let result = Milliamperes_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_fUsingInt32Int32_maxExpectingmilliamperes_fInt32_max() {
        let expected = i32_to_mA_f(Int32(Int32.max))
        let result = Milliamperes_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint64_tUsing0_0Expecting0() {
        let expected = mA_f_to_i64(0.0)
        let result = Int64(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint64_tUsing5_0Expecting5() {
        let expected = mA_f_to_i64(5.0)
        let result = Int64(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint64_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = mA_f_to_i64(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fToint64_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = mA_f_to_i64(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Int64(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = i64_to_mA_f(0)
        let result = Milliamperes_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = i64_to_mA_f(5)
        let result = Milliamperes_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_fUsingInt64Int64_minExpectingmilliamperes_fInt64_min() {
        let expected = i64_to_mA_f(Int64(Int64.min))
        let result = Milliamperes_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_fUsingInt64Int64_maxExpectingmilliamperes_fInt64_max() {
        let expected = i64_to_mA_f(Int64(Int64.max))
        let result = Milliamperes_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTounsignedintUsing0_0Expecting0() {
        let expected = mA_f_to_u(0.0)
        let result = CUnsignedInt(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTounsignedintUsing5_0Expecting5() {
        let expected = mA_f_to_u(5.0)
        let result = CUnsignedInt(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTounsignedintUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mA_f_to_u(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTounsignedintUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = mA_f_to_u(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_fUsing0Expecting0_0() {
        let expected = u_to_mA_f(0)
        let result = Milliamperes_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_fUsing5Expecting5_0() {
        let expected = u_to_mA_f(5)
        let result = Milliamperes_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_fUsingCUnsignedIntCUnsignedInt_minExpectingmilliamperes_fCUnsignedInt_min() {
        let expected = u_to_mA_f(CUnsignedInt(CUnsignedInt.min))
        let result = Milliamperes_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_fUsingCUnsignedIntCUnsignedInt_maxExpectingmilliamperes_fCUnsignedInt_max() {
        let expected = u_to_mA_f(CUnsignedInt(CUnsignedInt.max))
        let result = Milliamperes_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint8_tUsing0_0Expecting0() {
        let expected = mA_f_to_u8(0.0)
        let result = UInt8(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint8_tUsing5_0Expecting5() {
        let expected = mA_f_to_u8(5.0)
        let result = UInt8(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint8_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = mA_f_to_u8(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint8_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = mA_f_to_u8(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = u8_to_mA_f(0)
        let result = Milliamperes_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = u8_to_mA_f(5)
        let result = Milliamperes_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_fUsingUInt8UInt8_minExpectingmilliamperes_fUInt8_min() {
        let expected = u8_to_mA_f(UInt8(UInt8.min))
        let result = Milliamperes_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_fUsingUInt8UInt8_maxExpectingmilliamperes_fUInt8_max() {
        let expected = u8_to_mA_f(UInt8(UInt8.max))
        let result = Milliamperes_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint16_tUsing0_0Expecting0() {
        let expected = mA_f_to_u16(0.0)
        let result = UInt16(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint16_tUsing5_0Expecting5() {
        let expected = mA_f_to_u16(5.0)
        let result = UInt16(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint16_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = mA_f_to_u16(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint16_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = mA_f_to_u16(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = u16_to_mA_f(0)
        let result = Milliamperes_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = u16_to_mA_f(5)
        let result = Milliamperes_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_fUsingUInt16UInt16_minExpectingmilliamperes_fUInt16_min() {
        let expected = u16_to_mA_f(UInt16(UInt16.min))
        let result = Milliamperes_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_fUsingUInt16UInt16_maxExpectingmilliamperes_fUInt16_max() {
        let expected = u16_to_mA_f(UInt16(UInt16.max))
        let result = Milliamperes_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint32_tUsing0_0Expecting0() {
        let expected = mA_f_to_u32(0.0)
        let result = UInt32(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint32_tUsing5_0Expecting5() {
        let expected = mA_f_to_u32(5.0)
        let result = UInt32(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint32_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = mA_f_to_u32(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint32_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = mA_f_to_u32(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = u32_to_mA_f(0)
        let result = Milliamperes_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = u32_to_mA_f(5)
        let result = Milliamperes_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_fUsingUInt32UInt32_minExpectingmilliamperes_fUInt32_min() {
        let expected = u32_to_mA_f(UInt32(UInt32.min))
        let result = Milliamperes_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_fUsingUInt32UInt32_maxExpectingmilliamperes_fUInt32_max() {
        let expected = u32_to_mA_f(UInt32(UInt32.max))
        let result = Milliamperes_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint64_tUsing0_0Expecting0() {
        let expected = mA_f_to_u64(0.0)
        let result = UInt64(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint64_tUsing5_0Expecting5() {
        let expected = mA_f_to_u64(5.0)
        let result = UInt64(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint64_tUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = mA_f_to_u64(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTouint64_tUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = mA_f_to_u64(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_fUsing0Expecting0_0() {
        let expected = u64_to_mA_f(0)
        let result = Milliamperes_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_fUsing5Expecting5_0() {
        let expected = u64_to_mA_f(5)
        let result = Milliamperes_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_fUsingUInt64UInt64_minExpectingmilliamperes_fUInt64_min() {
        let expected = u64_to_mA_f(UInt64(UInt64.min))
        let result = Milliamperes_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_fUsingUInt64UInt64_maxExpectingmilliamperes_fUInt64_max() {
        let expected = u64_to_mA_f(UInt64(UInt64.max))
        let result = Milliamperes_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTofloatUsing0_0Expecting0_0() {
        let expected = mA_f_to_f(0.0)
        let result = Float(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTofloatUsing5_0Expecting5_0() {
        let expected = mA_f_to_f(5.0)
        let result = Float(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTofloatUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = mA_f_to_f(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Float(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTofloatUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = mA_f_to_f(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Float(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_fUsing0_0Expecting0_0() {
        let expected = f_to_mA_f(0.0)
        let result = Milliamperes_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_fUsing5_0Expecting5_0() {
        let expected = f_to_mA_f(5.0)
        let result = Milliamperes_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTodoubleUsing0_0Expecting0_0() {
        let expected = mA_f_to_d(0.0)
        let result = Double(Milliamperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTodoubleUsing5_0Expecting5_0() {
        let expected = mA_f_to_d(5.0)
        let result = Double(Milliamperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTodoubleUsingmilliamperes_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = mA_f_to_d(milliamperes_f(-Float.greatestFiniteMagnitude))
        let result = Double(Milliamperes_f(milliamperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_fTodoubleUsingmilliamperes_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = mA_f_to_d(milliamperes_f(Float.greatestFiniteMagnitude))
        let result = Double(Milliamperes_f(milliamperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_fUsing0_0Expecting0_0() {
        let expected = d_to_mA_f(0.0)
        let result = Milliamperes_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_fUsing5_0Expecting5_0() {
        let expected = d_to_mA_f(5.0)
        let result = Milliamperes_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_mA_f(Double(-Double.greatestFiniteMagnitude))
        let result = Milliamperes_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingmilliamperes_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_mA_f(Double(Double.greatestFiniteMagnitude))
        let result = Milliamperes_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliamperes_d unit tests.
final class Milliamperes_dTests: XCTestCase {

    func testmilliamperes_dTomicroamperes_tUsing15_0Expectingmicroamperes_t15_01000_0_rounded() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_uA_t(15.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsing25_0Expectingmicroamperes_t25_01000_0_rounded() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_uA_t(25.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsing250_0Expectingmicroamperes_t250_01000_0_rounded() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_uA_t(250.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsing0_0Expectingmicroamperes_t0_01000_0_rounded() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_uA_t(0.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsing2500_0Expectingmicroamperes_t2500_01000_0_rounded() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_uA_t(2500.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsing25000_0Expectingmicroamperes_t25000_01000_0_rounded() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_uA_t(25000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsing250000_0Expectingmicroamperes_t250000_01000_0_rounded() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_uA_t(250000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_d(2500000)
        let expected = mA_d_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsingNeg323_0Expectingmicroamperes_tNeg323_01000_0_rounded() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_uA_t(-323.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsingNeg10_0Expectingmicroamperes_tNeg10_01000_0_rounded() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_uA_t(-10.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsingNeg1000_0Expectingmicroamperes_tNeg1000_01000_0_rounded() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_uA_t(-1000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsingNeg5_0Expectingmicroamperes_tNeg5_01000_0_rounded() {
        let unit = Milliamperes_d(-5.0)
        let expected = mA_d_to_uA_t(-5.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_tUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_t(-Double.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomicroamperes_tUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_t(Double.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomilliamperes_tUsing0_0Expecting0() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_mA_t(0.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let unit = Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude))
        let expected = mA_d_to_mA_t(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let unit = Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude))
        let expected = mA_d_to_mA_t(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_tUsing5_0Expecting5() {
        let unit = Milliamperes_d(5.0)
        let expected = mA_d_to_mA_t(5.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing15_0Expectingamperes_t15_01000_0_rounded() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_A_t(15.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing25_0Expectingamperes_t25_01000_0_rounded() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_A_t(25.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing250_0Expectingamperes_t250_01000_0_rounded() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_A_t(250.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing0_0Expectingamperes_t0_01000_0_rounded() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_A_t(0.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing2500_0Expectingamperes_t2500_01000_0_rounded() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_A_t(2500.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing25000_0Expectingamperes_t25000_01000_0_rounded() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_A_t(25000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing250000_0Expectingamperes_t250000_01000_0_rounded() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_A_t(250000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsing2500000_0Expectingamperes_t2500000_01000_0_rounded() {
        let unit = Milliamperes_d(2500000.0)
        let expected = mA_d_to_A_t(2500000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsingNeg323_0Expectingamperes_tNeg323_01000_0_rounded() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_A_t(-323.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsingNeg10_0Expectingamperes_tNeg10_01000_0_rounded() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_A_t(-10.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsingNeg1000_0Expectingamperes_tNeg1000_01000_0_rounded() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_A_t(-1000.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsingNeg5_0Expectingamperes_tNeg5_01000_0_rounded() {
        let unit = Milliamperes_d(-5.0)
        let expected = mA_d_to_A_t(-5.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_tUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_t(-Double.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToamperes_tUsingDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_t(Double.greatestFiniteMagnitude)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomicroamperes_uUsing15_0Expectingmicroamperes_u15_01000_0_rounded() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_uA_u(15.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsing25_0Expectingmicroamperes_u25_01000_0_rounded() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_uA_u(25.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsing250_0Expectingmicroamperes_u250_01000_0_rounded() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_uA_u(250.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsing0_0Expectingmicroamperes_u0_01000_0_rounded() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_uA_u(0.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsing2500_0Expectingmicroamperes_u2500_01000_0_rounded() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_uA_u(2500.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsing25000_0Expectingmicroamperes_u25000_01000_0_rounded() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_uA_u(25000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsing250000_0Expectingmicroamperes_u250000_01000_0_rounded() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_uA_u(250000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsing2500000_0Expectingmicroamperes_u2500000_01000_0_rounded() {
        let unit = Milliamperes_d(2500000.0)
        let expected = mA_d_to_uA_u(2500000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsingNeg323_0Expecting0() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_uA_u(-323.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsingNeg10_0Expecting0() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_uA_u(-10.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsingNeg1000_0Expecting0() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_uA_u(-1000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsingNeg6_0Expecting0() {
        let unit = Milliamperes_d(-6.0)
        let expected = mA_d_to_uA_u(-6.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_uUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_u(-Double.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomicroamperes_uUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_u(Double.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomilliamperes_uUsing0_0Expecting0() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_mA_u(0.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_uUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude))
        let expected = mA_d_to_mA_u(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_uUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude))
        let expected = mA_d_to_mA_u(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_uUsing5_0Expecting5() {
        let unit = Milliamperes_d(5.0)
        let expected = mA_d_to_mA_u(5.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing15_0Expectingamperes_u15_01000_0_rounded() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_A_u(15.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing25_0Expectingamperes_u25_01000_0_rounded() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_A_u(25.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing250_0Expectingamperes_u250_01000_0_rounded() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_A_u(250.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing0_0Expectingamperes_u0_01000_0_rounded() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_A_u(0.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing2500_0Expectingamperes_u2500_01000_0_rounded() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_A_u(2500.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing25000_0Expectingamperes_u25000_01000_0_rounded() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_A_u(25000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing250000_0Expectingamperes_u250000_01000_0_rounded() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_A_u(250000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsing2500000_0Expectingamperes_u2500000_01000_0_rounded() {
        let unit = Milliamperes_d(2500000.0)
        let expected = mA_d_to_A_u(2500000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsingNeg323_0Expecting0() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_A_u(-323.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsingNeg10_0Expecting0() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_A_u(-10.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsingNeg1000_0Expecting0() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_A_u(-1000.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsingNeg6_0Expecting0() {
        let unit = Milliamperes_d(-6.0)
        let expected = mA_d_to_A_u(-6.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_uUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_u(-Double.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToamperes_uUsingDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_u(Double.greatestFiniteMagnitude)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomicroamperes_fUsing15_0Expectingmicroamperes_f15_01000_0() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_uA_f(15.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsing25_0Expectingmicroamperes_f25_01000_0() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_uA_f(25.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsing250_0Expectingmicroamperes_f250_01000_0() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_uA_f(250.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsing0_0Expectingmicroamperes_f0_01000_0() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_uA_f(0.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsing2500_0Expectingmicroamperes_f2500_01000_0() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_uA_f(2500.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsing25000_0Expectingmicroamperes_f25000_01000_0() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_uA_f(25000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsing250000_0Expectingmicroamperes_f250000_01000_0() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_uA_f(250000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsing2500000_0Expectingmicroamperes_f2500000_01000_0() {
        let unit = Milliamperes_d(2500000.0)
        let expected = mA_d_to_uA_f(2500000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsingNeg323_0Expectingmicroamperes_fNeg323_01000_0() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_uA_f(-323.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsingNeg10_0Expectingmicroamperes_fNeg10_01000_0() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_uA_f(-10.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsingNeg1000_0Expectingmicroamperes_fNeg1000_01000_0() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_uA_f(-1000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsingNeg5_0Expectingmicroamperes_fNeg5_01000_0() {
        let unit = Milliamperes_d(-5.0)
        let expected = mA_d_to_uA_f(-5.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_fUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_f(-Double.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomicroamperes_fUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_f(Double.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomilliamperes_fUsing0_0Expecting0_0() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_mA_f(0.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_fUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude))
        let expected = mA_d_to_mA_f(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_fUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingmilliamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude))
        let expected = mA_d_to_mA_f(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomilliamperes_fUsing5_0Expecting5_0() {
        let unit = Milliamperes_d(5.0)
        let expected = mA_d_to_mA_f(5.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing15_0Expectingamperes_f15_01000_0() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_A_f(15.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing25_0Expectingamperes_f25_01000_0() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_A_f(25.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing250_0Expectingamperes_f250_01000_0() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_A_f(250.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing0_0Expectingamperes_f0_01000_0() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_A_f(0.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing2500_0Expectingamperes_f2500_01000_0() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_A_f(2500.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing25000_0Expectingamperes_f25000_01000_0() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_A_f(25000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing250000_0Expectingamperes_f250000_01000_0() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_A_f(250000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsing2500000_0Expectingamperes_f2500000_01000_0() {
        let unit = Milliamperes_d(2500000.0)
        let expected = mA_d_to_A_f(2500000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsingNeg323_0Expectingamperes_fNeg323_01000_0() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_A_f(-323.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsingNeg10_0Expectingamperes_fNeg10_01000_0() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_A_f(-10.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsingNeg1000_0Expectingamperes_fNeg1000_01000_0() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_A_f(-1000.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsingNeg5_0Expectingamperes_fNeg5_01000_0() {
        let unit = Milliamperes_d(-5.0)
        let expected = mA_d_to_A_f(-5.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_fUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_f(-Double.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToamperes_fUsingDouble_greatestFiniteMagnitudeExpectingamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_f(Double.greatestFiniteMagnitude)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomicroamperes_dUsing15_0Expectingmicroamperes_d15_01000_0() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_uA_d(15.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsing25_0Expectingmicroamperes_d25_01000_0() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_uA_d(25.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsing250_0Expectingmicroamperes_d250_01000_0() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_uA_d(250.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsing0_0Expectingmicroamperes_d0_01000_0() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_uA_d(0.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsing2500_0Expectingmicroamperes_d2500_01000_0() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_uA_d(2500.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsing25000_0Expectingmicroamperes_d25000_01000_0() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_uA_d(25000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsing250000_0Expectingmicroamperes_d250000_01000_0() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_uA_d(250000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsing2500000_0Expectingmicroamperes_d2500000_01000_0() {
        let unit = Milliamperes_d(2500000.0)
        let expected = mA_d_to_uA_d(2500000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsingNeg323_0Expectingmicroamperes_dNeg323_01000_0() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_uA_d(-323.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsingNeg10_0Expectingmicroamperes_dNeg10_01000_0() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_uA_d(-10.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsingNeg1000_0Expectingmicroamperes_dNeg1000_01000_0() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_uA_d(-1000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsingNeg5_0Expectingmicroamperes_dNeg5_01000_0() {
        let unit = Milliamperes_d(-5.0)
        let expected = mA_d_to_uA_d(-5.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dTomicroamperes_dUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_dNegDouble_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_d(-Double.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTomicroamperes_dUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_dDouble_greatestFiniteMagnitude() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_uA_d(Double.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToamperes_dUsing15_0Expectingamperes_d15_01000_0() {
        let unit = Milliamperes_d(15.0)
        let expected = mA_d_to_A_d(15.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsing25_0Expectingamperes_d25_01000_0() {
        let unit = Milliamperes_d(25.0)
        let expected = mA_d_to_A_d(25.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsing250_0Expectingamperes_d250_01000_0() {
        let unit = Milliamperes_d(250.0)
        let expected = mA_d_to_A_d(250.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsing0_0Expectingamperes_d0_01000_0() {
        let unit = Milliamperes_d(0.0)
        let expected = mA_d_to_A_d(0.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsing2500_0Expectingamperes_d2500_01000_0() {
        let unit = Milliamperes_d(2500.0)
        let expected = mA_d_to_A_d(2500.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsing25000_0Expectingamperes_d25000_01000_0() {
        let unit = Milliamperes_d(25000.0)
        let expected = mA_d_to_A_d(25000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsing250000_0Expectingamperes_d250000_01000_0() {
        let unit = Milliamperes_d(250000.0)
        let expected = mA_d_to_A_d(250000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsing2500000_0Expectingamperes_d2500000_01000_0() {
        let unit = Milliamperes_d(2500000.0)
        let expected = mA_d_to_A_d(2500000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsingNeg323_0Expectingamperes_dNeg323_01000_0() {
        let unit = Milliamperes_d(-323.0)
        let expected = mA_d_to_A_d(-323.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsingNeg10_0Expectingamperes_dNeg10_01000_0() {
        let unit = Milliamperes_d(-10.0)
        let expected = mA_d_to_A_d(-10.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsingNeg1000_0Expectingamperes_dNeg1000_01000_0() {
        let unit = Milliamperes_d(-1000.0)
        let expected = mA_d_to_A_d(-1000.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsingNeg5_0Expectingamperes_dNeg5_01000_0() {
        let unit = Milliamperes_d(-5.0)
        let expected = mA_d_to_A_d(-5.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliamperes_dToamperes_dUsingNegDouble_greatestFiniteMagnitudeExpectingamperes_dNegDouble_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_d(-Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_d(-Double.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToamperes_dUsingDouble_greatestFiniteMagnitudeExpectingamperes_dDouble_greatestFiniteMagnitude1000_0() {
        let unit = Milliamperes_d(Double.greatestFiniteMagnitude)
        let expected = mA_d_to_A_d(Double.greatestFiniteMagnitude)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTointUsing0_0Expecting0() {
        let expected = mA_d_to_i(0.0)
        let result = CInt(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTointUsing5_0Expecting5() {
        let expected = mA_d_to_i(5.0)
        let result = CInt(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTointUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = mA_d_to_i(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTointUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = mA_d_to_i(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = CInt(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_dUsing0Expecting0_0() {
        let expected = i_to_mA_d(0)
        let result = Milliamperes_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_dUsing5Expecting5_0() {
        let expected = i_to_mA_d(5)
        let result = Milliamperes_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_dUsingCIntCInt_minExpectingmilliamperes_dCInt_min() {
        let expected = i_to_mA_d(CInt(CInt.min))
        let result = Milliamperes_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliamperes_dUsingCIntCInt_maxExpectingmilliamperes_dCInt_max() {
        let expected = i_to_mA_d(CInt(CInt.max))
        let result = Milliamperes_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint8_tUsing0_0Expecting0() {
        let expected = mA_d_to_i8(0.0)
        let result = Int8(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint8_tUsing5_0Expecting5() {
        let expected = mA_d_to_i8(5.0)
        let result = Int8(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint8_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = mA_d_to_i8(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint8_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = mA_d_to_i8(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Int8(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = i8_to_mA_d(0)
        let result = Milliamperes_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = i8_to_mA_d(5)
        let result = Milliamperes_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_dUsingInt8Int8_minExpectingmilliamperes_dInt8_min() {
        let expected = i8_to_mA_d(Int8(Int8.min))
        let result = Milliamperes_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliamperes_dUsingInt8Int8_maxExpectingmilliamperes_dInt8_max() {
        let expected = i8_to_mA_d(Int8(Int8.max))
        let result = Milliamperes_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint16_tUsing0_0Expecting0() {
        let expected = mA_d_to_i16(0.0)
        let result = Int16(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint16_tUsing5_0Expecting5() {
        let expected = mA_d_to_i16(5.0)
        let result = Int16(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint16_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = mA_d_to_i16(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint16_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = mA_d_to_i16(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Int16(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = i16_to_mA_d(0)
        let result = Milliamperes_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = i16_to_mA_d(5)
        let result = Milliamperes_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_dUsingInt16Int16_minExpectingmilliamperes_dInt16_min() {
        let expected = i16_to_mA_d(Int16(Int16.min))
        let result = Milliamperes_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliamperes_dUsingInt16Int16_maxExpectingmilliamperes_dInt16_max() {
        let expected = i16_to_mA_d(Int16(Int16.max))
        let result = Milliamperes_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint32_tUsing0_0Expecting0() {
        let expected = mA_d_to_i32(0.0)
        let result = Int32(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint32_tUsing5_0Expecting5() {
        let expected = mA_d_to_i32(5.0)
        let result = Int32(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint32_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = mA_d_to_i32(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint32_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = mA_d_to_i32(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Int32(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = i32_to_mA_d(0)
        let result = Milliamperes_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = i32_to_mA_d(5)
        let result = Milliamperes_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_dUsingInt32Int32_minExpectingmilliamperes_dInt32_min() {
        let expected = i32_to_mA_d(Int32(Int32.min))
        let result = Milliamperes_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliamperes_dUsingInt32Int32_maxExpectingmilliamperes_dInt32_max() {
        let expected = i32_to_mA_d(Int32(Int32.max))
        let result = Milliamperes_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint64_tUsing0_0Expecting0() {
        let expected = mA_d_to_i64(0.0)
        let result = Int64(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint64_tUsing5_0Expecting5() {
        let expected = mA_d_to_i64(5.0)
        let result = Int64(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint64_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = mA_d_to_i64(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dToint64_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = mA_d_to_i64(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Int64(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = i64_to_mA_d(0)
        let result = Milliamperes_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = i64_to_mA_d(5)
        let result = Milliamperes_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_dUsingInt64Int64_minExpectingmilliamperes_dInt64_min() {
        let expected = i64_to_mA_d(Int64(Int64.min))
        let result = Milliamperes_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliamperes_dUsingInt64Int64_maxExpectingmilliamperes_dInt64_max() {
        let expected = i64_to_mA_d(Int64(Int64.max))
        let result = Milliamperes_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTounsignedintUsing0_0Expecting0() {
        let expected = mA_d_to_u(0.0)
        let result = CUnsignedInt(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTounsignedintUsing5_0Expecting5() {
        let expected = mA_d_to_u(5.0)
        let result = CUnsignedInt(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTounsignedintUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mA_d_to_u(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTounsignedintUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = mA_d_to_u(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_dUsing0Expecting0_0() {
        let expected = u_to_mA_d(0)
        let result = Milliamperes_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_dUsing5Expecting5_0() {
        let expected = u_to_mA_d(5)
        let result = Milliamperes_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_dUsingCUnsignedIntCUnsignedInt_minExpectingmilliamperes_dCUnsignedInt_min() {
        let expected = u_to_mA_d(CUnsignedInt(CUnsignedInt.min))
        let result = Milliamperes_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliamperes_dUsingCUnsignedIntCUnsignedInt_maxExpectingmilliamperes_dCUnsignedInt_max() {
        let expected = u_to_mA_d(CUnsignedInt(CUnsignedInt.max))
        let result = Milliamperes_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint8_tUsing0_0Expecting0() {
        let expected = mA_d_to_u8(0.0)
        let result = UInt8(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint8_tUsing5_0Expecting5() {
        let expected = mA_d_to_u8(5.0)
        let result = UInt8(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint8_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = mA_d_to_u8(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint8_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = mA_d_to_u8(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = u8_to_mA_d(0)
        let result = Milliamperes_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = u8_to_mA_d(5)
        let result = Milliamperes_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_dUsingUInt8UInt8_minExpectingmilliamperes_dUInt8_min() {
        let expected = u8_to_mA_d(UInt8(UInt8.min))
        let result = Milliamperes_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliamperes_dUsingUInt8UInt8_maxExpectingmilliamperes_dUInt8_max() {
        let expected = u8_to_mA_d(UInt8(UInt8.max))
        let result = Milliamperes_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint16_tUsing0_0Expecting0() {
        let expected = mA_d_to_u16(0.0)
        let result = UInt16(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint16_tUsing5_0Expecting5() {
        let expected = mA_d_to_u16(5.0)
        let result = UInt16(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint16_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = mA_d_to_u16(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint16_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = mA_d_to_u16(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = u16_to_mA_d(0)
        let result = Milliamperes_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = u16_to_mA_d(5)
        let result = Milliamperes_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_dUsingUInt16UInt16_minExpectingmilliamperes_dUInt16_min() {
        let expected = u16_to_mA_d(UInt16(UInt16.min))
        let result = Milliamperes_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliamperes_dUsingUInt16UInt16_maxExpectingmilliamperes_dUInt16_max() {
        let expected = u16_to_mA_d(UInt16(UInt16.max))
        let result = Milliamperes_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint32_tUsing0_0Expecting0() {
        let expected = mA_d_to_u32(0.0)
        let result = UInt32(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint32_tUsing5_0Expecting5() {
        let expected = mA_d_to_u32(5.0)
        let result = UInt32(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint32_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = mA_d_to_u32(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint32_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = mA_d_to_u32(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = u32_to_mA_d(0)
        let result = Milliamperes_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = u32_to_mA_d(5)
        let result = Milliamperes_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_dUsingUInt32UInt32_minExpectingmilliamperes_dUInt32_min() {
        let expected = u32_to_mA_d(UInt32(UInt32.min))
        let result = Milliamperes_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliamperes_dUsingUInt32UInt32_maxExpectingmilliamperes_dUInt32_max() {
        let expected = u32_to_mA_d(UInt32(UInt32.max))
        let result = Milliamperes_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint64_tUsing0_0Expecting0() {
        let expected = mA_d_to_u64(0.0)
        let result = UInt64(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint64_tUsing5_0Expecting5() {
        let expected = mA_d_to_u64(5.0)
        let result = UInt64(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint64_tUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = mA_d_to_u64(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTouint64_tUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = mA_d_to_u64(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_dUsing0Expecting0_0() {
        let expected = u64_to_mA_d(0)
        let result = Milliamperes_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_dUsing5Expecting5_0() {
        let expected = u64_to_mA_d(5)
        let result = Milliamperes_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_dUsingUInt64UInt64_minExpectingmilliamperes_dUInt64_min() {
        let expected = u64_to_mA_d(UInt64(UInt64.min))
        let result = Milliamperes_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliamperes_dUsingUInt64UInt64_maxExpectingmilliamperes_dUInt64_max() {
        let expected = u64_to_mA_d(UInt64(UInt64.max))
        let result = Milliamperes_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTofloatUsing0_0Expecting0_0() {
        let expected = mA_d_to_f(0.0)
        let result = Float(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTofloatUsing5_0Expecting5_0() {
        let expected = mA_d_to_f(5.0)
        let result = Float(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTofloatUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = mA_d_to_f(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Float(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTofloatUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = mA_d_to_f(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Float(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_dUsing0_0Expecting0_0() {
        let expected = f_to_mA_d(0.0)
        let result = Milliamperes_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_dUsing5_0Expecting5_0() {
        let expected = f_to_mA_d(5.0)
        let result = Milliamperes_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_mA_d(Float(-Float.greatestFiniteMagnitude))
        let result = Milliamperes_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliamperes_dUsingFloatFloat_greatestFiniteMagnitudeExpectingmilliamperes_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_mA_d(Float(Float.greatestFiniteMagnitude))
        let result = Milliamperes_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTodoubleUsing0_0Expecting0_0() {
        let expected = mA_d_to_d(0.0)
        let result = Double(Milliamperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTodoubleUsing5_0Expecting5_0() {
        let expected = mA_d_to_d(5.0)
        let result = Double(Milliamperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTodoubleUsingmilliamperes_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = mA_d_to_d(milliamperes_d(-Double.greatestFiniteMagnitude))
        let result = Double(Milliamperes_d(milliamperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliamperes_dTodoubleUsingmilliamperes_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = mA_d_to_d(milliamperes_d(Double.greatestFiniteMagnitude))
        let result = Double(Milliamperes_d(milliamperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_dUsing0_0Expecting0_0() {
        let expected = d_to_mA_d(0.0)
        let result = Milliamperes_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliamperes_dUsing5_0Expecting5_0() {
        let expected = d_to_mA_d(5.0)
        let result = Milliamperes_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides amperes_t unit tests.
final class Amperes_tTests: XCTestCase {

    func testamperes_tTomicroamperes_tUsing15Expectingmicroamperes_t151000000() {
        let unit = Amperes_t(15)
        let expected = A_t_to_uA_t(15)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsing25Expectingmicroamperes_t251000000() {
        let unit = Amperes_t(25)
        let expected = A_t_to_uA_t(25)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsing250Expectingmicroamperes_t2501000000() {
        let unit = Amperes_t(250)
        let expected = A_t_to_uA_t(250)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsing0Expectingmicroamperes_t01000000() {
        let unit = Amperes_t(0)
        let expected = A_t_to_uA_t(0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsing2500Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_uA_t(2500)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsing25000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_uA_t(25000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsing250000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_uA_t(250000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsingNeg323Expectingmicroamperes_tNeg3231000000() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_uA_t(-323)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsingNeg10Expectingmicroamperes_tNeg101000000() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_uA_t(-10)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsingNeg1000Expectingmicroamperes_tNeg10001000000() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_uA_t(-1000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsingNeg5Expectingmicroamperes_tNeg51000000() {
        let unit = Amperes_t(-5)
        let expected = A_t_to_uA_t(-5)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsingCInt_minExpectingmicroamperes_tCInt_min() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_uA_t(CInt.min)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_tUsingCInt_maxExpectingmicroamperes_tCInt_max() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_uA_t(CInt.max)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing15Expectingmilliamperes_t151000() {
        let unit = Amperes_t(15)
        let expected = A_t_to_mA_t(15)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing25Expectingmilliamperes_t251000() {
        let unit = Amperes_t(25)
        let expected = A_t_to_mA_t(25)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing250Expectingmilliamperes_t2501000() {
        let unit = Amperes_t(250)
        let expected = A_t_to_mA_t(250)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing0Expectingmilliamperes_t01000() {
        let unit = Amperes_t(0)
        let expected = A_t_to_mA_t(0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing2500Expectingmilliamperes_t25001000() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_mA_t(2500)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing25000Expectingmilliamperes_t250001000() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_mA_t(25000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing250000Expectingmilliamperes_t2500001000() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_mA_t(250000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsing2500000Expectingmilliamperes_tCInt_max() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_mA_t(2500000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsingNeg323Expectingmilliamperes_tNeg3231000() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_mA_t(-323)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsingNeg10Expectingmilliamperes_tNeg101000() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_mA_t(-10)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsingNeg1000Expectingmilliamperes_tNeg10001000() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_mA_t(-1000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsingNeg5Expectingmilliamperes_tNeg51000() {
        let unit = Amperes_t(-5)
        let expected = A_t_to_mA_t(-5)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsingCInt_minExpectingmilliamperes_tCInt_min() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_mA_t(CInt.min)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_tUsingCInt_maxExpectingmilliamperes_tCInt_max() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_mA_t(CInt.max)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing15Expectingmicroamperes_u151000000() {
        let unit = Amperes_t(15)
        let expected = A_t_to_uA_u(15)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing25Expectingmicroamperes_u251000000() {
        let unit = Amperes_t(25)
        let expected = A_t_to_uA_u(25)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing250Expectingmicroamperes_u2501000000() {
        let unit = Amperes_t(250)
        let expected = A_t_to_uA_u(250)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing0Expectingmicroamperes_u01000000() {
        let unit = Amperes_t(0)
        let expected = A_t_to_uA_u(0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing2500Expectingmicroamperes_u25001000000() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_uA_u(2500)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing25000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_uA_u(25000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing250000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_uA_u(250000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsing2500000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_uA_u(2500000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsingNeg323Expecting0() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_uA_u(-323)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsingNeg10Expecting0() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_uA_u(-10)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsingNeg1000Expecting0() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_uA_u(-1000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsingNeg6Expecting0() {
        let unit = Amperes_t(-6)
        let expected = A_t_to_uA_u(-6)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsingCInt_minExpecting0() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_uA_u(CInt.min)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_uUsingCInt_maxExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_uA_u(CInt.max)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing15Expectingmilliamperes_u151000() {
        let unit = Amperes_t(15)
        let expected = A_t_to_mA_u(15)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing25Expectingmilliamperes_u251000() {
        let unit = Amperes_t(25)
        let expected = A_t_to_mA_u(25)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing250Expectingmilliamperes_u2501000() {
        let unit = Amperes_t(250)
        let expected = A_t_to_mA_u(250)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing0Expectingmilliamperes_u01000() {
        let unit = Amperes_t(0)
        let expected = A_t_to_mA_u(0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing2500Expectingmilliamperes_u25001000() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_mA_u(2500)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing25000Expectingmilliamperes_u250001000() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_mA_u(25000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing250000Expectingmilliamperes_u2500001000() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_mA_u(250000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsing2500000Expectingmilliamperes_u25000001000() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_mA_u(2500000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsingNeg323Expecting0() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_mA_u(-323)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsingNeg10Expecting0() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_mA_u(-10)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsingNeg1000Expecting0() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_mA_u(-1000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsingNeg6Expecting0() {
        let unit = Amperes_t(-6)
        let expected = A_t_to_mA_u(-6)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsingCInt_minExpecting0() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_mA_u(CInt.min)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_uUsingCInt_maxExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_mA_u(CInt.max)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_uUsing0Expecting0() {
        let unit = Amperes_t(0)
        let expected = A_t_to_A_u(0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_uUsingamperes_tCInt_minExpectingamperes_uCUnsignedInt_min() {
        let unit = Amperes_t(amperes_t(CInt.min))
        let expected = A_t_to_A_u(amperes_t(CInt.min))
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_uUsingamperes_tCInt_maxExpectingamperes_uCInt_max() {
        let unit = Amperes_t(amperes_t(CInt.max))
        let expected = A_t_to_A_u(amperes_t(CInt.max))
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_uUsing5Expecting5() {
        let unit = Amperes_t(5)
        let expected = A_t_to_A_u(5)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing15Expectingmicroamperes_f15_01000000_0() {
        let unit = Amperes_t(15)
        let expected = A_t_to_uA_f(15)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing25Expectingmicroamperes_f25_01000000_0() {
        let unit = Amperes_t(25)
        let expected = A_t_to_uA_f(25)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing250Expectingmicroamperes_f250_01000000_0() {
        let unit = Amperes_t(250)
        let expected = A_t_to_uA_f(250)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing0Expectingmicroamperes_f0_01000000_0() {
        let unit = Amperes_t(0)
        let expected = A_t_to_uA_f(0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing2500Expectingmicroamperes_f2500_01000000_0() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_uA_f(2500)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing25000Expectingmicroamperes_f25000_01000000_0() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_uA_f(25000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing250000Expectingmicroamperes_f250000_01000000_0() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_uA_f(250000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsing2500000Expectingmicroamperes_f2500000_01000000_0() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_uA_f(2500000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsingNeg323Expectingmicroamperes_fNeg323_01000000_0() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_uA_f(-323)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsingNeg10Expectingmicroamperes_fNeg10_01000000_0() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_uA_f(-10)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsingNeg1000Expectingmicroamperes_fNeg1000_01000000_0() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_uA_f(-1000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsingNeg5Expectingmicroamperes_fNeg5_01000000_0() {
        let unit = Amperes_t(-5)
        let expected = A_t_to_uA_f(-5)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsingCInt_minExpectingmicroamperes_fCInt_min1000000_0() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_uA_f(CInt.min)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_fUsingCInt_maxExpectingmicroamperes_fCInt_max1000000_0() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_uA_f(CInt.max)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing15Expectingmilliamperes_f15_01000_0() {
        let unit = Amperes_t(15)
        let expected = A_t_to_mA_f(15)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing25Expectingmilliamperes_f25_01000_0() {
        let unit = Amperes_t(25)
        let expected = A_t_to_mA_f(25)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing250Expectingmilliamperes_f250_01000_0() {
        let unit = Amperes_t(250)
        let expected = A_t_to_mA_f(250)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing0Expectingmilliamperes_f0_01000_0() {
        let unit = Amperes_t(0)
        let expected = A_t_to_mA_f(0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing2500Expectingmilliamperes_f2500_01000_0() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_mA_f(2500)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing25000Expectingmilliamperes_f25000_01000_0() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_mA_f(25000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing250000Expectingmilliamperes_f250000_01000_0() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_mA_f(250000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsing2500000Expectingmilliamperes_f2500000_01000_0() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_mA_f(2500000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsingNeg323Expectingmilliamperes_fNeg323_01000_0() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_mA_f(-323)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsingNeg10Expectingmilliamperes_fNeg10_01000_0() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_mA_f(-10)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsingNeg1000Expectingmilliamperes_fNeg1000_01000_0() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_mA_f(-1000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsingNeg5Expectingmilliamperes_fNeg5_01000_0() {
        let unit = Amperes_t(-5)
        let expected = A_t_to_mA_f(-5)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsingCInt_minExpectingmilliamperes_fCInt_min1000_0() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_mA_f(CInt.min)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_fUsingCInt_maxExpectingmilliamperes_fCInt_max1000_0() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_mA_f(CInt.max)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_fUsing0Expecting0_0() {
        let unit = Amperes_t(0)
        let expected = A_t_to_A_f(0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_fUsingamperes_tCInt_minExpectingamperes_fCInt_min() {
        let unit = Amperes_t(amperes_t(CInt.min))
        let expected = A_t_to_A_f(amperes_t(CInt.min))
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_fUsingamperes_tCInt_maxExpectingamperes_fCInt_max() {
        let unit = Amperes_t(amperes_t(CInt.max))
        let expected = A_t_to_A_f(amperes_t(CInt.max))
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_fUsing5Expecting5_0() {
        let unit = Amperes_t(5)
        let expected = A_t_to_A_f(5)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing15Expectingmicroamperes_d15_01000000_0() {
        let unit = Amperes_t(15)
        let expected = A_t_to_uA_d(15)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing25Expectingmicroamperes_d25_01000000_0() {
        let unit = Amperes_t(25)
        let expected = A_t_to_uA_d(25)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing250Expectingmicroamperes_d250_01000000_0() {
        let unit = Amperes_t(250)
        let expected = A_t_to_uA_d(250)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing0Expectingmicroamperes_d0_01000000_0() {
        let unit = Amperes_t(0)
        let expected = A_t_to_uA_d(0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing2500Expectingmicroamperes_d2500_01000000_0() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_uA_d(2500)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing25000Expectingmicroamperes_d25000_01000000_0() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_uA_d(25000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing250000Expectingmicroamperes_d250000_01000000_0() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_uA_d(250000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsing2500000Expectingmicroamperes_d2500000_01000000_0() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_uA_d(2500000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsingNeg323Expectingmicroamperes_dNeg323_01000000_0() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_uA_d(-323)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsingNeg10Expectingmicroamperes_dNeg10_01000000_0() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_uA_d(-10)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsingNeg1000Expectingmicroamperes_dNeg1000_01000000_0() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_uA_d(-1000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsingNeg5Expectingmicroamperes_dNeg5_01000000_0() {
        let unit = Amperes_t(-5)
        let expected = A_t_to_uA_d(-5)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsingCInt_minExpectingmicroamperes_dCInt_min1000000_0() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_uA_d(CInt.min)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomicroamperes_dUsingCInt_maxExpectingmicroamperes_dCInt_max1000000_0() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_uA_d(CInt.max)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing15Expectingmilliamperes_d15_01000_0() {
        let unit = Amperes_t(15)
        let expected = A_t_to_mA_d(15)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing25Expectingmilliamperes_d25_01000_0() {
        let unit = Amperes_t(25)
        let expected = A_t_to_mA_d(25)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing250Expectingmilliamperes_d250_01000_0() {
        let unit = Amperes_t(250)
        let expected = A_t_to_mA_d(250)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing0Expectingmilliamperes_d0_01000_0() {
        let unit = Amperes_t(0)
        let expected = A_t_to_mA_d(0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing2500Expectingmilliamperes_d2500_01000_0() {
        let unit = Amperes_t(2500)
        let expected = A_t_to_mA_d(2500)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing25000Expectingmilliamperes_d25000_01000_0() {
        let unit = Amperes_t(25000)
        let expected = A_t_to_mA_d(25000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing250000Expectingmilliamperes_d250000_01000_0() {
        let unit = Amperes_t(250000)
        let expected = A_t_to_mA_d(250000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsing2500000Expectingmilliamperes_d2500000_01000_0() {
        let unit = Amperes_t(2500000)
        let expected = A_t_to_mA_d(2500000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsingNeg323Expectingmilliamperes_dNeg323_01000_0() {
        let unit = Amperes_t(-323)
        let expected = A_t_to_mA_d(-323)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsingNeg10Expectingmilliamperes_dNeg10_01000_0() {
        let unit = Amperes_t(-10)
        let expected = A_t_to_mA_d(-10)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsingNeg1000Expectingmilliamperes_dNeg1000_01000_0() {
        let unit = Amperes_t(-1000)
        let expected = A_t_to_mA_d(-1000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsingNeg5Expectingmilliamperes_dNeg5_01000_0() {
        let unit = Amperes_t(-5)
        let expected = A_t_to_mA_d(-5)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsingCInt_minExpectingmilliamperes_dCInt_min1000_0() {
        let unit = Amperes_t(CInt.min)
        let expected = A_t_to_mA_d(CInt.min)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTomilliamperes_dUsingCInt_maxExpectingmilliamperes_dCInt_max1000_0() {
        let unit = Amperes_t(CInt.max)
        let expected = A_t_to_mA_d(CInt.max)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_dUsing0Expecting0_0() {
        let unit = Amperes_t(0)
        let expected = A_t_to_A_d(0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_dUsingamperes_tCInt_minExpectingamperes_dCInt_min() {
        let unit = Amperes_t(amperes_t(CInt.min))
        let expected = A_t_to_A_d(amperes_t(CInt.min))
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_dUsingamperes_tCInt_maxExpectingamperes_dCInt_max() {
        let unit = Amperes_t(amperes_t(CInt.max))
        let expected = A_t_to_A_d(amperes_t(CInt.max))
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tToamperes_dUsing5Expecting5_0() {
        let unit = Amperes_t(5)
        let expected = A_t_to_A_d(5)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_tTointUsing0Expecting0() {
        let expected = A_t_to_i(0)
        let result = CInt(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTointUsing5Expecting5() {
        let expected = A_t_to_i(5)
        let result = CInt(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTointUsingamperes_tCInt_minExpectingCIntCInt_min() {
        let expected = A_t_to_i(amperes_t(CInt.min))
        let result = CInt(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTointUsingamperes_tCInt_maxExpectingCIntCInt_max() {
        let expected = A_t_to_i(amperes_t(CInt.max))
        let result = CInt(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_tUsing0Expecting0() {
        let expected = i_to_A_t(0)
        let result = Amperes_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_tUsing5Expecting5() {
        let expected = i_to_A_t(5)
        let result = Amperes_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint8_tUsing0Expecting0() {
        let expected = A_t_to_i8(0)
        let result = Int8(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint8_tUsing5Expecting5() {
        let expected = A_t_to_i8(5)
        let result = Int8(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint8_tUsingamperes_tCInt_minExpectingInt8Int8_min() {
        let expected = A_t_to_i8(amperes_t(CInt.min))
        let result = Int8(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint8_tUsingamperes_tCInt_maxExpectingInt8Int8_max() {
        let expected = A_t_to_i8(amperes_t(CInt.max))
        let result = Int8(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_tUsing0Expecting0() {
        let expected = i8_to_A_t(0)
        let result = Amperes_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_tUsing5Expecting5() {
        let expected = i8_to_A_t(5)
        let result = Amperes_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_tUsingInt8Int8_minExpectingamperes_tInt8_min() {
        let expected = i8_to_A_t(Int8(Int8.min))
        let result = Amperes_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_tUsingInt8Int8_maxExpectingamperes_tInt8_max() {
        let expected = i8_to_A_t(Int8(Int8.max))
        let result = Amperes_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint16_tUsing0Expecting0() {
        let expected = A_t_to_i16(0)
        let result = Int16(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint16_tUsing5Expecting5() {
        let expected = A_t_to_i16(5)
        let result = Int16(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint16_tUsingamperes_tCInt_minExpectingInt16Int16_min() {
        let expected = A_t_to_i16(amperes_t(CInt.min))
        let result = Int16(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint16_tUsingamperes_tCInt_maxExpectingInt16Int16_max() {
        let expected = A_t_to_i16(amperes_t(CInt.max))
        let result = Int16(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_tUsing0Expecting0() {
        let expected = i16_to_A_t(0)
        let result = Amperes_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_tUsing5Expecting5() {
        let expected = i16_to_A_t(5)
        let result = Amperes_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_tUsingInt16Int16_minExpectingamperes_tInt16_min() {
        let expected = i16_to_A_t(Int16(Int16.min))
        let result = Amperes_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_tUsingInt16Int16_maxExpectingamperes_tInt16_max() {
        let expected = i16_to_A_t(Int16(Int16.max))
        let result = Amperes_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint32_tUsing0Expecting0() {
        let expected = A_t_to_i32(0)
        let result = Int32(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint32_tUsing5Expecting5() {
        let expected = A_t_to_i32(5)
        let result = Int32(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint32_tUsingamperes_tCInt_minExpectingInt32CInt_min() {
        let expected = A_t_to_i32(amperes_t(CInt.min))
        let result = Int32(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint32_tUsingamperes_tCInt_maxExpectingInt32CInt_max() {
        let expected = A_t_to_i32(amperes_t(CInt.max))
        let result = Int32(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_tUsing0Expecting0() {
        let expected = i32_to_A_t(0)
        let result = Amperes_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_tUsing5Expecting5() {
        let expected = i32_to_A_t(5)
        let result = Amperes_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_tUsingInt32Int32_minExpectingamperes_tCInt_min() {
        let expected = i32_to_A_t(Int32(Int32.min))
        let result = Amperes_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_tUsingInt32Int32_maxExpectingamperes_tCInt_max() {
        let expected = i32_to_A_t(Int32(Int32.max))
        let result = Amperes_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint64_tUsing0Expecting0() {
        let expected = A_t_to_i64(0)
        let result = Int64(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint64_tUsing5Expecting5() {
        let expected = A_t_to_i64(5)
        let result = Int64(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint64_tUsingamperes_tCInt_minExpectingInt64CInt_min() {
        let expected = A_t_to_i64(amperes_t(CInt.min))
        let result = Int64(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tToint64_tUsingamperes_tCInt_maxExpectingInt64CInt_max() {
        let expected = A_t_to_i64(amperes_t(CInt.max))
        let result = Int64(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_tUsing0Expecting0() {
        let expected = i64_to_A_t(0)
        let result = Amperes_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_tUsing5Expecting5() {
        let expected = i64_to_A_t(5)
        let result = Amperes_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_tUsingInt64Int64_minExpectingamperes_tCInt_min() {
        let expected = i64_to_A_t(Int64(Int64.min))
        let result = Amperes_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_tUsingInt64Int64_maxExpectingamperes_tCInt_max() {
        let expected = i64_to_A_t(Int64(Int64.max))
        let result = Amperes_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTounsignedintUsing0Expecting0() {
        let expected = A_t_to_u(0)
        let result = CUnsignedInt(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTounsignedintUsing5Expecting5() {
        let expected = A_t_to_u(5)
        let result = CUnsignedInt(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTounsignedintUsingamperes_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = A_t_to_u(amperes_t(CInt.min))
        let result = CUnsignedInt(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTounsignedintUsingamperes_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = A_t_to_u(amperes_t(CInt.max))
        let result = CUnsignedInt(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_tUsing0Expecting0() {
        let expected = u_to_A_t(0)
        let result = Amperes_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_tUsing5Expecting5() {
        let expected = u_to_A_t(5)
        let result = Amperes_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_tUsingCUnsignedIntCUnsignedInt_minExpectingamperes_tCUnsignedInt_min() {
        let expected = u_to_A_t(CUnsignedInt(CUnsignedInt.min))
        let result = Amperes_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_tUsingCUnsignedIntCUnsignedInt_maxExpectingamperes_tCInt_max() {
        let expected = u_to_A_t(CUnsignedInt(CUnsignedInt.max))
        let result = Amperes_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint8_tUsing0Expecting0() {
        let expected = A_t_to_u8(0)
        let result = UInt8(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint8_tUsing5Expecting5() {
        let expected = A_t_to_u8(5)
        let result = UInt8(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint8_tUsingamperes_tCInt_minExpectingUInt8UInt8_min() {
        let expected = A_t_to_u8(amperes_t(CInt.min))
        let result = UInt8(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint8_tUsingamperes_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = A_t_to_u8(amperes_t(CInt.max))
        let result = UInt8(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_tUsing0Expecting0() {
        let expected = u8_to_A_t(0)
        let result = Amperes_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_tUsing5Expecting5() {
        let expected = u8_to_A_t(5)
        let result = Amperes_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_tUsingUInt8UInt8_minExpectingamperes_tUInt8_min() {
        let expected = u8_to_A_t(UInt8(UInt8.min))
        let result = Amperes_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_tUsingUInt8UInt8_maxExpectingamperes_tUInt8_max() {
        let expected = u8_to_A_t(UInt8(UInt8.max))
        let result = Amperes_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint16_tUsing0Expecting0() {
        let expected = A_t_to_u16(0)
        let result = UInt16(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint16_tUsing5Expecting5() {
        let expected = A_t_to_u16(5)
        let result = UInt16(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint16_tUsingamperes_tCInt_minExpectingUInt16UInt16_min() {
        let expected = A_t_to_u16(amperes_t(CInt.min))
        let result = UInt16(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint16_tUsingamperes_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = A_t_to_u16(amperes_t(CInt.max))
        let result = UInt16(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_tUsing0Expecting0() {
        let expected = u16_to_A_t(0)
        let result = Amperes_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_tUsing5Expecting5() {
        let expected = u16_to_A_t(5)
        let result = Amperes_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_tUsingUInt16UInt16_minExpectingamperes_tUInt16_min() {
        let expected = u16_to_A_t(UInt16(UInt16.min))
        let result = Amperes_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_tUsingUInt16UInt16_maxExpectingamperes_tUInt16_max() {
        let expected = u16_to_A_t(UInt16(UInt16.max))
        let result = Amperes_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint32_tUsing0Expecting0() {
        let expected = A_t_to_u32(0)
        let result = UInt32(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint32_tUsing5Expecting5() {
        let expected = A_t_to_u32(5)
        let result = UInt32(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint32_tUsingamperes_tCInt_minExpectingUInt32UInt32_min() {
        let expected = A_t_to_u32(amperes_t(CInt.min))
        let result = UInt32(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint32_tUsingamperes_tCInt_maxExpectingUInt32CInt_max() {
        let expected = A_t_to_u32(amperes_t(CInt.max))
        let result = UInt32(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_tUsing0Expecting0() {
        let expected = u32_to_A_t(0)
        let result = Amperes_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_tUsing5Expecting5() {
        let expected = u32_to_A_t(5)
        let result = Amperes_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_tUsingUInt32UInt32_minExpectingamperes_tUInt32_min() {
        let expected = u32_to_A_t(UInt32(UInt32.min))
        let result = Amperes_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_tUsingUInt32UInt32_maxExpectingamperes_tCInt_max() {
        let expected = u32_to_A_t(UInt32(UInt32.max))
        let result = Amperes_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint64_tUsing0Expecting0() {
        let expected = A_t_to_u64(0)
        let result = UInt64(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint64_tUsing5Expecting5() {
        let expected = A_t_to_u64(5)
        let result = UInt64(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint64_tUsingamperes_tCInt_minExpectingUInt64UInt64_min() {
        let expected = A_t_to_u64(amperes_t(CInt.min))
        let result = UInt64(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTouint64_tUsingamperes_tCInt_maxExpectingUInt64CInt_max() {
        let expected = A_t_to_u64(amperes_t(CInt.max))
        let result = UInt64(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_tUsing0Expecting0() {
        let expected = u64_to_A_t(0)
        let result = Amperes_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_tUsing5Expecting5() {
        let expected = u64_to_A_t(5)
        let result = Amperes_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_tUsingUInt64UInt64_minExpectingamperes_tUInt64_min() {
        let expected = u64_to_A_t(UInt64(UInt64.min))
        let result = Amperes_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_tUsingUInt64UInt64_maxExpectingamperes_tCInt_max() {
        let expected = u64_to_A_t(UInt64(UInt64.max))
        let result = Amperes_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTofloatUsing0Expecting0_0() {
        let expected = A_t_to_f(0)
        let result = Float(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTofloatUsing5Expecting5_0() {
        let expected = A_t_to_f(5)
        let result = Float(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTofloatUsingamperes_tCInt_minExpectingFloatCInt_min() {
        let expected = A_t_to_f(amperes_t(CInt.min))
        let result = Float(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTofloatUsingamperes_tCInt_maxExpectingFloatCInt_max() {
        let expected = A_t_to_f(amperes_t(CInt.max))
        let result = Float(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_tUsing0_0Expecting0() {
        let expected = f_to_A_t(0.0)
        let result = Amperes_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_tUsing5_0Expecting5() {
        let expected = f_to_A_t(5.0)
        let result = Amperes_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let expected = f_to_A_t(Float(-Float.greatestFiniteMagnitude))
        let result = Amperes_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_tUsingFloatFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let expected = f_to_A_t(Float(Float.greatestFiniteMagnitude))
        let result = Amperes_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTodoubleUsing0Expecting0_0() {
        let expected = A_t_to_d(0)
        let result = Double(Amperes_t(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTodoubleUsing5Expecting5_0() {
        let expected = A_t_to_d(5)
        let result = Double(Amperes_t(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTodoubleUsingamperes_tCInt_minExpectingDoubleCInt_min() {
        let expected = A_t_to_d(amperes_t(CInt.min))
        let result = Double(Amperes_t(amperes_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_tTodoubleUsingamperes_tCInt_maxExpectingDoubleCInt_max() {
        let expected = A_t_to_d(amperes_t(CInt.max))
        let result = Double(Amperes_t(amperes_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_tUsing0_0Expecting0() {
        let expected = d_to_A_t(0.0)
        let result = Amperes_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_tUsing5_0Expecting5() {
        let expected = d_to_A_t(5.0)
        let result = Amperes_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let expected = d_to_A_t(Double(-Double.greatestFiniteMagnitude))
        let result = Amperes_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let expected = d_to_A_t(Double(Double.greatestFiniteMagnitude))
        let result = Amperes_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides amperes_u unit tests.
final class Amperes_uTests: XCTestCase {

    func testamperes_uTomicroamperes_tUsing15Expectingmicroamperes_t151000000() {
        let unit = Amperes_u(15)
        let expected = A_u_to_uA_t(15)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsing25Expectingmicroamperes_t251000000() {
        let unit = Amperes_u(25)
        let expected = A_u_to_uA_t(25)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsing250Expectingmicroamperes_t2501000000() {
        let unit = Amperes_u(250)
        let expected = A_u_to_uA_t(250)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsing0Expectingmicroamperes_t01000000() {
        let unit = Amperes_u(0)
        let expected = A_u_to_uA_t(0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsing2500Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_uA_t(2500)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsing25000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_uA_t(25000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsing250000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_uA_t(250000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsingCUnsignedInt_minExpectingmicroamperes_tCUnsignedInt_min1000000() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_uA_t(CUnsignedInt.min)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_tUsingCUnsignedInt_maxExpectingmicroamperes_tCInt_max() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_uA_t(CUnsignedInt.max)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing15Expectingmilliamperes_t151000() {
        let unit = Amperes_u(15)
        let expected = A_u_to_mA_t(15)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing25Expectingmilliamperes_t251000() {
        let unit = Amperes_u(25)
        let expected = A_u_to_mA_t(25)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing250Expectingmilliamperes_t2501000() {
        let unit = Amperes_u(250)
        let expected = A_u_to_mA_t(250)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing0Expectingmilliamperes_t01000() {
        let unit = Amperes_u(0)
        let expected = A_u_to_mA_t(0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing2500Expectingmilliamperes_t25001000() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_mA_t(2500)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing25000Expectingmilliamperes_t250001000() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_mA_t(25000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing250000Expectingmilliamperes_t2500001000() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_mA_t(250000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsing2500000Expectingmilliamperes_tCInt_max() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_mA_t(2500000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsingCUnsignedInt_minExpectingmilliamperes_tCUnsignedInt_min1000() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_mA_t(CUnsignedInt.min)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_tUsingCUnsignedInt_maxExpectingmilliamperes_tCInt_max() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_mA_t(CUnsignedInt.max)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_tUsing0Expecting0() {
        let unit = Amperes_u(0)
        let expected = A_u_to_A_t(0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_tUsingamperes_uCUnsignedInt_minExpectingamperes_tCUnsignedInt_min() {
        let unit = Amperes_u(amperes_u(CUnsignedInt.min))
        let expected = A_u_to_A_t(amperes_u(CUnsignedInt.min))
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_tUsingamperes_uCUnsignedInt_maxExpectingamperes_tCInt_max() {
        let unit = Amperes_u(amperes_u(CUnsignedInt.max))
        let expected = A_u_to_A_t(amperes_u(CUnsignedInt.max))
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_tUsing5Expecting5() {
        let unit = Amperes_u(5)
        let expected = A_u_to_A_t(5)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing15Expectingmicroamperes_u151000000() {
        let unit = Amperes_u(15)
        let expected = A_u_to_uA_u(15)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing25Expectingmicroamperes_u251000000() {
        let unit = Amperes_u(25)
        let expected = A_u_to_uA_u(25)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing250Expectingmicroamperes_u2501000000() {
        let unit = Amperes_u(250)
        let expected = A_u_to_uA_u(250)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing0Expectingmicroamperes_u01000000() {
        let unit = Amperes_u(0)
        let expected = A_u_to_uA_u(0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing2500Expectingmicroamperes_u25001000000() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_uA_u(2500)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing25000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_uA_u(25000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing250000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_uA_u(250000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsing2500000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_uA_u(2500000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsingCUnsignedInt_minExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_uA_u(CUnsignedInt.min)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_uUsingCUnsignedInt_maxExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_uA_u(CUnsignedInt.max)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing15Expectingmilliamperes_u151000() {
        let unit = Amperes_u(15)
        let expected = A_u_to_mA_u(15)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing25Expectingmilliamperes_u251000() {
        let unit = Amperes_u(25)
        let expected = A_u_to_mA_u(25)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing250Expectingmilliamperes_u2501000() {
        let unit = Amperes_u(250)
        let expected = A_u_to_mA_u(250)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing0Expectingmilliamperes_u01000() {
        let unit = Amperes_u(0)
        let expected = A_u_to_mA_u(0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing2500Expectingmilliamperes_u25001000() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_mA_u(2500)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing25000Expectingmilliamperes_u250001000() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_mA_u(25000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing250000Expectingmilliamperes_u2500001000() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_mA_u(250000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsing2500000Expectingmilliamperes_u25000001000() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_mA_u(2500000)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsingCUnsignedInt_minExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_mA_u(CUnsignedInt.min)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_uUsingCUnsignedInt_maxExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_mA_u(CUnsignedInt.max)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing15Expectingmicroamperes_f15_01000000_0() {
        let unit = Amperes_u(15)
        let expected = A_u_to_uA_f(15)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing25Expectingmicroamperes_f25_01000000_0() {
        let unit = Amperes_u(25)
        let expected = A_u_to_uA_f(25)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing250Expectingmicroamperes_f250_01000000_0() {
        let unit = Amperes_u(250)
        let expected = A_u_to_uA_f(250)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing0Expectingmicroamperes_f0_01000000_0() {
        let unit = Amperes_u(0)
        let expected = A_u_to_uA_f(0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing2500Expectingmicroamperes_f2500_01000000_0() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_uA_f(2500)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing25000Expectingmicroamperes_f25000_01000000_0() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_uA_f(25000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing250000Expectingmicroamperes_f250000_01000000_0() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_uA_f(250000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsing2500000Expectingmicroamperes_f2500000_01000000_0() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_uA_f(2500000)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsingCUnsignedInt_minExpectingmicroamperes_fCUnsignedInt_min1000000_0() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_uA_f(CUnsignedInt.min)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_fUsingCUnsignedInt_maxExpectingmicroamperes_fCUnsignedInt_max1000000_0() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_uA_f(CUnsignedInt.max)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing15Expectingmilliamperes_f15_01000_0() {
        let unit = Amperes_u(15)
        let expected = A_u_to_mA_f(15)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing25Expectingmilliamperes_f25_01000_0() {
        let unit = Amperes_u(25)
        let expected = A_u_to_mA_f(25)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing250Expectingmilliamperes_f250_01000_0() {
        let unit = Amperes_u(250)
        let expected = A_u_to_mA_f(250)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing0Expectingmilliamperes_f0_01000_0() {
        let unit = Amperes_u(0)
        let expected = A_u_to_mA_f(0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing2500Expectingmilliamperes_f2500_01000_0() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_mA_f(2500)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing25000Expectingmilliamperes_f25000_01000_0() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_mA_f(25000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing250000Expectingmilliamperes_f250000_01000_0() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_mA_f(250000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsing2500000Expectingmilliamperes_f2500000_01000_0() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_mA_f(2500000)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsingCUnsignedInt_minExpectingmilliamperes_fCUnsignedInt_min1000_0() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_mA_f(CUnsignedInt.min)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_fUsingCUnsignedInt_maxExpectingmilliamperes_fCUnsignedInt_max1000_0() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_mA_f(CUnsignedInt.max)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_fUsing0Expecting0_0() {
        let unit = Amperes_u(0)
        let expected = A_u_to_A_f(0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_fUsingamperes_uCUnsignedInt_minExpectingamperes_fCUnsignedInt_min() {
        let unit = Amperes_u(amperes_u(CUnsignedInt.min))
        let expected = A_u_to_A_f(amperes_u(CUnsignedInt.min))
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_fUsingamperes_uCUnsignedInt_maxExpectingamperes_fCUnsignedInt_max() {
        let unit = Amperes_u(amperes_u(CUnsignedInt.max))
        let expected = A_u_to_A_f(amperes_u(CUnsignedInt.max))
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_fUsing5Expecting5_0() {
        let unit = Amperes_u(5)
        let expected = A_u_to_A_f(5)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing15Expectingmicroamperes_d15_01000000_0() {
        let unit = Amperes_u(15)
        let expected = A_u_to_uA_d(15)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing25Expectingmicroamperes_d25_01000000_0() {
        let unit = Amperes_u(25)
        let expected = A_u_to_uA_d(25)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing250Expectingmicroamperes_d250_01000000_0() {
        let unit = Amperes_u(250)
        let expected = A_u_to_uA_d(250)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing0Expectingmicroamperes_d0_01000000_0() {
        let unit = Amperes_u(0)
        let expected = A_u_to_uA_d(0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing2500Expectingmicroamperes_d2500_01000000_0() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_uA_d(2500)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing25000Expectingmicroamperes_d25000_01000000_0() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_uA_d(25000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing250000Expectingmicroamperes_d250000_01000000_0() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_uA_d(250000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsing2500000Expectingmicroamperes_d2500000_01000000_0() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_uA_d(2500000)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsingCUnsignedInt_minExpectingmicroamperes_dCUnsignedInt_min1000000_0() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_uA_d(CUnsignedInt.min)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomicroamperes_dUsingCUnsignedInt_maxExpectingmicroamperes_dCUnsignedInt_max1000000_0() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_uA_d(CUnsignedInt.max)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing15Expectingmilliamperes_d15_01000_0() {
        let unit = Amperes_u(15)
        let expected = A_u_to_mA_d(15)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing25Expectingmilliamperes_d25_01000_0() {
        let unit = Amperes_u(25)
        let expected = A_u_to_mA_d(25)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing250Expectingmilliamperes_d250_01000_0() {
        let unit = Amperes_u(250)
        let expected = A_u_to_mA_d(250)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing0Expectingmilliamperes_d0_01000_0() {
        let unit = Amperes_u(0)
        let expected = A_u_to_mA_d(0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing2500Expectingmilliamperes_d2500_01000_0() {
        let unit = Amperes_u(2500)
        let expected = A_u_to_mA_d(2500)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing25000Expectingmilliamperes_d25000_01000_0() {
        let unit = Amperes_u(25000)
        let expected = A_u_to_mA_d(25000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing250000Expectingmilliamperes_d250000_01000_0() {
        let unit = Amperes_u(250000)
        let expected = A_u_to_mA_d(250000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsing2500000Expectingmilliamperes_d2500000_01000_0() {
        let unit = Amperes_u(2500000)
        let expected = A_u_to_mA_d(2500000)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsingCUnsignedInt_minExpectingmilliamperes_dCUnsignedInt_min1000_0() {
        let unit = Amperes_u(CUnsignedInt.min)
        let expected = A_u_to_mA_d(CUnsignedInt.min)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTomilliamperes_dUsingCUnsignedInt_maxExpectingmilliamperes_dCUnsignedInt_max1000_0() {
        let unit = Amperes_u(CUnsignedInt.max)
        let expected = A_u_to_mA_d(CUnsignedInt.max)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_dUsing0Expecting0_0() {
        let unit = Amperes_u(0)
        let expected = A_u_to_A_d(0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_dUsingamperes_uCUnsignedInt_minExpectingamperes_dCUnsignedInt_min() {
        let unit = Amperes_u(amperes_u(CUnsignedInt.min))
        let expected = A_u_to_A_d(amperes_u(CUnsignedInt.min))
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_dUsingamperes_uCUnsignedInt_maxExpectingamperes_dCUnsignedInt_max() {
        let unit = Amperes_u(amperes_u(CUnsignedInt.max))
        let expected = A_u_to_A_d(amperes_u(CUnsignedInt.max))
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uToamperes_dUsing5Expecting5_0() {
        let unit = Amperes_u(5)
        let expected = A_u_to_A_d(5)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_uTointUsing0Expecting0() {
        let expected = A_u_to_i(0)
        let result = CInt(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTointUsing5Expecting5() {
        let expected = A_u_to_i(5)
        let result = CInt(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTointUsingamperes_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = A_u_to_i(amperes_u(CUnsignedInt.min))
        let result = CInt(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTointUsingamperes_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = A_u_to_i(amperes_u(CUnsignedInt.max))
        let result = CInt(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_uUsing0Expecting0() {
        let expected = i_to_A_u(0)
        let result = Amperes_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_uUsing5Expecting5() {
        let expected = i_to_A_u(5)
        let result = Amperes_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_uUsingCIntCInt_minExpectingamperes_uCUnsignedInt_min() {
        let expected = i_to_A_u(CInt(CInt.min))
        let result = Amperes_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_uUsingCIntCInt_maxExpectingamperes_uCInt_max() {
        let expected = i_to_A_u(CInt(CInt.max))
        let result = Amperes_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint8_tUsing0Expecting0() {
        let expected = A_u_to_i8(0)
        let result = Int8(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint8_tUsing5Expecting5() {
        let expected = A_u_to_i8(5)
        let result = Int8(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint8_tUsingamperes_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = A_u_to_i8(amperes_u(CUnsignedInt.min))
        let result = Int8(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint8_tUsingamperes_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = A_u_to_i8(amperes_u(CUnsignedInt.max))
        let result = Int8(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_uUsing0Expecting0() {
        let expected = i8_to_A_u(0)
        let result = Amperes_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_uUsing5Expecting5() {
        let expected = i8_to_A_u(5)
        let result = Amperes_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_uUsingInt8Int8_minExpectingamperes_uCUnsignedInt_min() {
        let expected = i8_to_A_u(Int8(Int8.min))
        let result = Amperes_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_uUsingInt8Int8_maxExpectingamperes_uInt8_max() {
        let expected = i8_to_A_u(Int8(Int8.max))
        let result = Amperes_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint16_tUsing0Expecting0() {
        let expected = A_u_to_i16(0)
        let result = Int16(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint16_tUsing5Expecting5() {
        let expected = A_u_to_i16(5)
        let result = Int16(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint16_tUsingamperes_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = A_u_to_i16(amperes_u(CUnsignedInt.min))
        let result = Int16(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint16_tUsingamperes_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = A_u_to_i16(amperes_u(CUnsignedInt.max))
        let result = Int16(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_uUsing0Expecting0() {
        let expected = i16_to_A_u(0)
        let result = Amperes_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_uUsing5Expecting5() {
        let expected = i16_to_A_u(5)
        let result = Amperes_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_uUsingInt16Int16_minExpectingamperes_uCUnsignedInt_min() {
        let expected = i16_to_A_u(Int16(Int16.min))
        let result = Amperes_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_uUsingInt16Int16_maxExpectingamperes_uInt16_max() {
        let expected = i16_to_A_u(Int16(Int16.max))
        let result = Amperes_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint32_tUsing0Expecting0() {
        let expected = A_u_to_i32(0)
        let result = Int32(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint32_tUsing5Expecting5() {
        let expected = A_u_to_i32(5)
        let result = Int32(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint32_tUsingamperes_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = A_u_to_i32(amperes_u(CUnsignedInt.min))
        let result = Int32(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint32_tUsingamperes_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = A_u_to_i32(amperes_u(CUnsignedInt.max))
        let result = Int32(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_uUsing0Expecting0() {
        let expected = i32_to_A_u(0)
        let result = Amperes_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_uUsing5Expecting5() {
        let expected = i32_to_A_u(5)
        let result = Amperes_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_uUsingInt32Int32_minExpectingamperes_uCUnsignedInt_min() {
        let expected = i32_to_A_u(Int32(Int32.min))
        let result = Amperes_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_uUsingInt32Int32_maxExpectingamperes_uInt32_max() {
        let expected = i32_to_A_u(Int32(Int32.max))
        let result = Amperes_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint64_tUsing0Expecting0() {
        let expected = A_u_to_i64(0)
        let result = Int64(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint64_tUsing5Expecting5() {
        let expected = A_u_to_i64(5)
        let result = Int64(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint64_tUsingamperes_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = A_u_to_i64(amperes_u(CUnsignedInt.min))
        let result = Int64(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uToint64_tUsingamperes_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = A_u_to_i64(amperes_u(CUnsignedInt.max))
        let result = Int64(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_uUsing0Expecting0() {
        let expected = i64_to_A_u(0)
        let result = Amperes_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_uUsing5Expecting5() {
        let expected = i64_to_A_u(5)
        let result = Amperes_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_uUsingInt64Int64_minExpectingamperes_uCUnsignedInt_min() {
        let expected = i64_to_A_u(Int64(Int64.min))
        let result = Amperes_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_uUsingInt64Int64_maxExpectingamperes_uCUnsignedInt_max() {
        let expected = i64_to_A_u(Int64(Int64.max))
        let result = Amperes_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTounsignedintUsing0Expecting0() {
        let expected = A_u_to_u(0)
        let result = CUnsignedInt(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTounsignedintUsing5Expecting5() {
        let expected = A_u_to_u(5)
        let result = CUnsignedInt(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTounsignedintUsingamperes_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = A_u_to_u(amperes_u(CUnsignedInt.min))
        let result = CUnsignedInt(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTounsignedintUsingamperes_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = A_u_to_u(amperes_u(CUnsignedInt.max))
        let result = CUnsignedInt(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_uUsing0Expecting0() {
        let expected = u_to_A_u(0)
        let result = Amperes_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_uUsing5Expecting5() {
        let expected = u_to_A_u(5)
        let result = Amperes_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint8_tUsing0Expecting0() {
        let expected = A_u_to_u8(0)
        let result = UInt8(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint8_tUsing5Expecting5() {
        let expected = A_u_to_u8(5)
        let result = UInt8(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint8_tUsingamperes_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = A_u_to_u8(amperes_u(CUnsignedInt.min))
        let result = UInt8(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint8_tUsingamperes_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = A_u_to_u8(amperes_u(CUnsignedInt.max))
        let result = UInt8(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_uUsing0Expecting0() {
        let expected = u8_to_A_u(0)
        let result = Amperes_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_uUsing5Expecting5() {
        let expected = u8_to_A_u(5)
        let result = Amperes_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_uUsingUInt8UInt8_minExpectingamperes_uCUnsignedInt_min() {
        let expected = u8_to_A_u(UInt8(UInt8.min))
        let result = Amperes_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_uUsingUInt8UInt8_maxExpectingamperes_uUInt8_max() {
        let expected = u8_to_A_u(UInt8(UInt8.max))
        let result = Amperes_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint16_tUsing0Expecting0() {
        let expected = A_u_to_u16(0)
        let result = UInt16(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint16_tUsing5Expecting5() {
        let expected = A_u_to_u16(5)
        let result = UInt16(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint16_tUsingamperes_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = A_u_to_u16(amperes_u(CUnsignedInt.min))
        let result = UInt16(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint16_tUsingamperes_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = A_u_to_u16(amperes_u(CUnsignedInt.max))
        let result = UInt16(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_uUsing0Expecting0() {
        let expected = u16_to_A_u(0)
        let result = Amperes_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_uUsing5Expecting5() {
        let expected = u16_to_A_u(5)
        let result = Amperes_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_uUsingUInt16UInt16_minExpectingamperes_uCUnsignedInt_min() {
        let expected = u16_to_A_u(UInt16(UInt16.min))
        let result = Amperes_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_uUsingUInt16UInt16_maxExpectingamperes_uUInt16_max() {
        let expected = u16_to_A_u(UInt16(UInt16.max))
        let result = Amperes_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint32_tUsing0Expecting0() {
        let expected = A_u_to_u32(0)
        let result = UInt32(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint32_tUsing5Expecting5() {
        let expected = A_u_to_u32(5)
        let result = UInt32(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint32_tUsingamperes_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = A_u_to_u32(amperes_u(CUnsignedInt.min))
        let result = UInt32(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint32_tUsingamperes_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = A_u_to_u32(amperes_u(CUnsignedInt.max))
        let result = UInt32(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_uUsing0Expecting0() {
        let expected = u32_to_A_u(0)
        let result = Amperes_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_uUsing5Expecting5() {
        let expected = u32_to_A_u(5)
        let result = Amperes_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_uUsingUInt32UInt32_minExpectingamperes_uCUnsignedInt_min() {
        let expected = u32_to_A_u(UInt32(UInt32.min))
        let result = Amperes_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_uUsingUInt32UInt32_maxExpectingamperes_uCUnsignedInt_max() {
        let expected = u32_to_A_u(UInt32(UInt32.max))
        let result = Amperes_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint64_tUsing0Expecting0() {
        let expected = A_u_to_u64(0)
        let result = UInt64(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint64_tUsing5Expecting5() {
        let expected = A_u_to_u64(5)
        let result = UInt64(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint64_tUsingamperes_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = A_u_to_u64(amperes_u(CUnsignedInt.min))
        let result = UInt64(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTouint64_tUsingamperes_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = A_u_to_u64(amperes_u(CUnsignedInt.max))
        let result = UInt64(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_uUsing0Expecting0() {
        let expected = u64_to_A_u(0)
        let result = Amperes_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_uUsing5Expecting5() {
        let expected = u64_to_A_u(5)
        let result = Amperes_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_uUsingUInt64UInt64_minExpectingamperes_uCUnsignedInt_min() {
        let expected = u64_to_A_u(UInt64(UInt64.min))
        let result = Amperes_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_uUsingUInt64UInt64_maxExpectingamperes_uCUnsignedInt_max() {
        let expected = u64_to_A_u(UInt64(UInt64.max))
        let result = Amperes_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTofloatUsing0Expecting0_0() {
        let expected = A_u_to_f(0)
        let result = Float(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTofloatUsing5Expecting5_0() {
        let expected = A_u_to_f(5)
        let result = Float(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTofloatUsingamperes_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = A_u_to_f(amperes_u(CUnsignedInt.min))
        let result = Float(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTofloatUsingamperes_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = A_u_to_f(amperes_u(CUnsignedInt.max))
        let result = Float(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_uUsing0_0Expecting0() {
        let expected = f_to_A_u(0.0)
        let result = Amperes_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_uUsing5_0Expecting5() {
        let expected = f_to_A_u(5.0)
        let result = Amperes_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let expected = f_to_A_u(Float(-Float.greatestFiniteMagnitude))
        let result = Amperes_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_uUsingFloatFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let expected = f_to_A_u(Float(Float.greatestFiniteMagnitude))
        let result = Amperes_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTodoubleUsing0Expecting0_0() {
        let expected = A_u_to_d(0)
        let result = Double(Amperes_u(0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTodoubleUsing5Expecting5_0() {
        let expected = A_u_to_d(5)
        let result = Double(Amperes_u(5))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTodoubleUsingamperes_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = A_u_to_d(amperes_u(CUnsignedInt.min))
        let result = Double(Amperes_u(amperes_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_uTodoubleUsingamperes_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = A_u_to_d(amperes_u(CUnsignedInt.max))
        let result = Double(Amperes_u(amperes_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_uUsing0_0Expecting0() {
        let expected = d_to_A_u(0.0)
        let result = Amperes_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_uUsing5_0Expecting5() {
        let expected = d_to_A_u(5.0)
        let result = Amperes_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let expected = d_to_A_u(Double(-Double.greatestFiniteMagnitude))
        let result = Amperes_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let expected = d_to_A_u(Double(Double.greatestFiniteMagnitude))
        let result = Amperes_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides amperes_f unit tests.
final class Amperes_fTests: XCTestCase {

    func testamperes_fTomicroamperes_tUsing15_0Expectingmicroamperes_t15_01000000_0_rounded() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_uA_t(15.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsing25_0Expectingmicroamperes_t25_01000000_0_rounded() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_uA_t(25.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsing250_0Expectingmicroamperes_t250_01000000_0_rounded() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_uA_t(250.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsing0_0Expectingmicroamperes_t0_01000000_0_rounded() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_uA_t(0.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsing2500Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_f(2500)
        let expected = A_f_to_uA_t(2500)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsing25000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_f(25000)
        let expected = A_f_to_uA_t(25000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsing250000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_f(250000)
        let expected = A_f_to_uA_t(250000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_f(2500000)
        let expected = A_f_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsingNeg323_0Expectingmicroamperes_tNeg323_01000000_0_rounded() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_uA_t(-323.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsingNeg10_0Expectingmicroamperes_tNeg10_01000000_0_rounded() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_uA_t(-10.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsingNeg1000_0Expectingmicroamperes_tNeg1000_01000000_0_rounded() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_uA_t(-1000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsingNeg5_0Expectingmicroamperes_tNeg5_01000000_0_rounded() {
        let unit = Amperes_f(-5.0)
        let expected = A_f_to_uA_t(-5.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_t(-Float.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_tUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_t(Float.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing15_0Expectingmilliamperes_t15_01000_0_rounded() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_mA_t(15.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing25_0Expectingmilliamperes_t25_01000_0_rounded() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_mA_t(25.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing250_0Expectingmilliamperes_t250_01000_0_rounded() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_mA_t(250.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing0_0Expectingmilliamperes_t0_01000_0_rounded() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_mA_t(0.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing2500_0Expectingmilliamperes_t2500_01000_0_rounded() {
        let unit = Amperes_f(2500.0)
        let expected = A_f_to_mA_t(2500.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing25000_0Expectingmilliamperes_t25000_01000_0_rounded() {
        let unit = Amperes_f(25000.0)
        let expected = A_f_to_mA_t(25000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing250000_0Expectingmilliamperes_t250000_01000_0_rounded() {
        let unit = Amperes_f(250000.0)
        let expected = A_f_to_mA_t(250000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsing2500000Expectingmilliamperes_tCInt_max() {
        let unit = Amperes_f(2500000)
        let expected = A_f_to_mA_t(2500000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsingNeg323_0Expectingmilliamperes_tNeg323_01000_0_rounded() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_mA_t(-323.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsingNeg10_0Expectingmilliamperes_tNeg10_01000_0_rounded() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_mA_t(-10.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsingNeg1000_0Expectingmilliamperes_tNeg1000_01000_0_rounded() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_mA_t(-1000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsingNeg5_0Expectingmilliamperes_tNeg5_01000_0_rounded() {
        let unit = Amperes_f(-5.0)
        let expected = A_f_to_mA_t(-5.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_t(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_tUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_t(Float.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_tUsing0_0Expecting0() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_A_t(0.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let unit = Amperes_f(amperes_f(-Float.greatestFiniteMagnitude))
        let expected = A_f_to_A_t(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let unit = Amperes_f(amperes_f(Float.greatestFiniteMagnitude))
        let expected = A_f_to_A_t(amperes_f(Float.greatestFiniteMagnitude))
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_tUsing5_0Expecting5() {
        let unit = Amperes_f(5.0)
        let expected = A_f_to_A_t(5.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing15_0Expectingmicroamperes_u15_01000000_0_rounded() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_uA_u(15.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing25_0Expectingmicroamperes_u25_01000000_0_rounded() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_uA_u(25.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing250_0Expectingmicroamperes_u250_01000000_0_rounded() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_uA_u(250.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing0_0Expectingmicroamperes_u0_01000000_0_rounded() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_uA_u(0.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing2500_0Expectingmicroamperes_u2500_01000000_0_rounded() {
        let unit = Amperes_f(2500.0)
        let expected = A_f_to_uA_u(2500.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing25000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_f(25000)
        let expected = A_f_to_uA_u(25000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing250000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_f(250000)
        let expected = A_f_to_uA_u(250000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsing2500000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_f(2500000)
        let expected = A_f_to_uA_u(2500000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsingNeg323_0Expecting0() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_uA_u(-323.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsingNeg10_0Expecting0() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_uA_u(-10.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsingNeg1000_0Expecting0() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_uA_u(-1000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsingNeg6_0Expecting0() {
        let unit = Amperes_f(-6.0)
        let expected = A_f_to_uA_u(-6.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_u(-Float.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_uUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_u(Float.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing15_0Expectingmilliamperes_u15_01000_0_rounded() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_mA_u(15.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing25_0Expectingmilliamperes_u25_01000_0_rounded() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_mA_u(25.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing250_0Expectingmilliamperes_u250_01000_0_rounded() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_mA_u(250.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing0_0Expectingmilliamperes_u0_01000_0_rounded() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_mA_u(0.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing2500_0Expectingmilliamperes_u2500_01000_0_rounded() {
        let unit = Amperes_f(2500.0)
        let expected = A_f_to_mA_u(2500.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing25000_0Expectingmilliamperes_u25000_01000_0_rounded() {
        let unit = Amperes_f(25000.0)
        let expected = A_f_to_mA_u(25000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing250000_0Expectingmilliamperes_u250000_01000_0_rounded() {
        let unit = Amperes_f(250000.0)
        let expected = A_f_to_mA_u(250000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsing2500000_0Expectingmilliamperes_u2500000_01000_0_rounded() {
        let unit = Amperes_f(2500000.0)
        let expected = A_f_to_mA_u(2500000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsingNeg323_0Expecting0() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_mA_u(-323.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsingNeg10_0Expecting0() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_mA_u(-10.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsingNeg1000_0Expecting0() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_mA_u(-1000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsingNeg6_0Expecting0() {
        let unit = Amperes_f(-6.0)
        let expected = A_f_to_mA_u(-6.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_u(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_uUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_u(Float.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_uUsing0_0Expecting0() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_A_u(0.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_uUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let unit = Amperes_f(amperes_f(-Float.greatestFiniteMagnitude))
        let expected = A_f_to_A_u(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_uUsingamperes_fFloat_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let unit = Amperes_f(amperes_f(Float.greatestFiniteMagnitude))
        let expected = A_f_to_A_u(amperes_f(Float.greatestFiniteMagnitude))
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_uUsing5_0Expecting5() {
        let unit = Amperes_f(5.0)
        let expected = A_f_to_A_u(5.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing15_0Expectingmicroamperes_f15_01000000_0() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_uA_f(15.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing25_0Expectingmicroamperes_f25_01000000_0() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_uA_f(25.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing250_0Expectingmicroamperes_f250_01000000_0() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_uA_f(250.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing0_0Expectingmicroamperes_f0_01000000_0() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_uA_f(0.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing2500_0Expectingmicroamperes_f2500_01000000_0() {
        let unit = Amperes_f(2500.0)
        let expected = A_f_to_uA_f(2500.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing25000_0Expectingmicroamperes_f25000_01000000_0() {
        let unit = Amperes_f(25000.0)
        let expected = A_f_to_uA_f(25000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing250000_0Expectingmicroamperes_f250000_01000000_0() {
        let unit = Amperes_f(250000.0)
        let expected = A_f_to_uA_f(250000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsing2500000_0Expectingmicroamperes_f2500000_01000000_0() {
        let unit = Amperes_f(2500000.0)
        let expected = A_f_to_uA_f(2500000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsingNeg323_0Expectingmicroamperes_fNeg323_01000000_0() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_uA_f(-323.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsingNeg10_0Expectingmicroamperes_fNeg10_01000000_0() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_uA_f(-10.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsingNeg1000_0Expectingmicroamperes_fNeg1000_01000000_0() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_uA_f(-1000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsingNeg5_0Expectingmicroamperes_fNeg5_01000000_0() {
        let unit = Amperes_f(-5.0)
        let expected = A_f_to_uA_f(-5.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_f(-Float.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_fUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_f(Float.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing15_0Expectingmilliamperes_f15_01000_0() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_mA_f(15.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing25_0Expectingmilliamperes_f25_01000_0() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_mA_f(25.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing250_0Expectingmilliamperes_f250_01000_0() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_mA_f(250.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing0_0Expectingmilliamperes_f0_01000_0() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_mA_f(0.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing2500_0Expectingmilliamperes_f2500_01000_0() {
        let unit = Amperes_f(2500.0)
        let expected = A_f_to_mA_f(2500.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing25000_0Expectingmilliamperes_f25000_01000_0() {
        let unit = Amperes_f(25000.0)
        let expected = A_f_to_mA_f(25000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing250000_0Expectingmilliamperes_f250000_01000_0() {
        let unit = Amperes_f(250000.0)
        let expected = A_f_to_mA_f(250000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsing2500000_0Expectingmilliamperes_f2500000_01000_0() {
        let unit = Amperes_f(2500000.0)
        let expected = A_f_to_mA_f(2500000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsingNeg323_0Expectingmilliamperes_fNeg323_01000_0() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_mA_f(-323.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsingNeg10_0Expectingmilliamperes_fNeg10_01000_0() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_mA_f(-10.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsingNeg1000_0Expectingmilliamperes_fNeg1000_01000_0() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_mA_f(-1000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsingNeg5_0Expectingmilliamperes_fNeg5_01000_0() {
        let unit = Amperes_f(-5.0)
        let expected = A_f_to_mA_f(-5.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_f(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_fUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_f(Float.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing15_0Expectingmicroamperes_d15_01000000_0() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_uA_d(15.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing25_0Expectingmicroamperes_d25_01000000_0() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_uA_d(25.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing250_0Expectingmicroamperes_d250_01000000_0() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_uA_d(250.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing0_0Expectingmicroamperes_d0_01000000_0() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_uA_d(0.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing2500_0Expectingmicroamperes_d2500_01000000_0() {
        let unit = Amperes_f(2500.0)
        let expected = A_f_to_uA_d(2500.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing25000_0Expectingmicroamperes_d25000_01000000_0() {
        let unit = Amperes_f(25000.0)
        let expected = A_f_to_uA_d(25000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing250000_0Expectingmicroamperes_d250000_01000000_0() {
        let unit = Amperes_f(250000.0)
        let expected = A_f_to_uA_d(250000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsing2500000_0Expectingmicroamperes_d2500000_01000000_0() {
        let unit = Amperes_f(2500000.0)
        let expected = A_f_to_uA_d(2500000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsingNeg323_0Expectingmicroamperes_dNeg323_01000000_0() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_uA_d(-323.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsingNeg10_0Expectingmicroamperes_dNeg10_01000000_0() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_uA_d(-10.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsingNeg1000_0Expectingmicroamperes_dNeg1000_01000000_0() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_uA_d(-1000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsingNeg5_0Expectingmicroamperes_dNeg5_01000000_0() {
        let unit = Amperes_f(-5.0)
        let expected = A_f_to_uA_d(-5.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsingNegFloat_greatestFiniteMagnitudeExpectingmicroamperes_dNegFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_d(-Float.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomicroamperes_dUsingFloat_greatestFiniteMagnitudeExpectingmicroamperes_dFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_uA_d(Float.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing15_0Expectingmilliamperes_d15_01000_0() {
        let unit = Amperes_f(15.0)
        let expected = A_f_to_mA_d(15.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing25_0Expectingmilliamperes_d25_01000_0() {
        let unit = Amperes_f(25.0)
        let expected = A_f_to_mA_d(25.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing250_0Expectingmilliamperes_d250_01000_0() {
        let unit = Amperes_f(250.0)
        let expected = A_f_to_mA_d(250.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing0_0Expectingmilliamperes_d0_01000_0() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_mA_d(0.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing2500_0Expectingmilliamperes_d2500_01000_0() {
        let unit = Amperes_f(2500.0)
        let expected = A_f_to_mA_d(2500.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing25000_0Expectingmilliamperes_d25000_01000_0() {
        let unit = Amperes_f(25000.0)
        let expected = A_f_to_mA_d(25000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing250000_0Expectingmilliamperes_d250000_01000_0() {
        let unit = Amperes_f(250000.0)
        let expected = A_f_to_mA_d(250000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsing2500000_0Expectingmilliamperes_d2500000_01000_0() {
        let unit = Amperes_f(2500000.0)
        let expected = A_f_to_mA_d(2500000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsingNeg323_0Expectingmilliamperes_dNeg323_01000_0() {
        let unit = Amperes_f(-323.0)
        let expected = A_f_to_mA_d(-323.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsingNeg10_0Expectingmilliamperes_dNeg10_01000_0() {
        let unit = Amperes_f(-10.0)
        let expected = A_f_to_mA_d(-10.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsingNeg1000_0Expectingmilliamperes_dNeg1000_01000_0() {
        let unit = Amperes_f(-1000.0)
        let expected = A_f_to_mA_d(-1000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsingNeg5_0Expectingmilliamperes_dNeg5_01000_0() {
        let unit = Amperes_f(-5.0)
        let expected = A_f_to_mA_d(-5.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsingNegFloat_greatestFiniteMagnitudeExpectingmilliamperes_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Amperes_f(-Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_d(-Float.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTomilliamperes_dUsingFloat_greatestFiniteMagnitudeExpectingmilliamperes_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Amperes_f(Float.greatestFiniteMagnitude)
        let expected = A_f_to_mA_d(Float.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_dUsing0_0Expecting0_0() {
        let unit = Amperes_f(0.0)
        let expected = A_f_to_A_d(0.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_dUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingamperes_dNegFloat_greatestFiniteMagnitude() {
        let unit = Amperes_f(amperes_f(-Float.greatestFiniteMagnitude))
        let expected = A_f_to_A_d(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_dUsingamperes_fFloat_greatestFiniteMagnitudeExpectingamperes_dFloat_greatestFiniteMagnitude() {
        let unit = Amperes_f(amperes_f(Float.greatestFiniteMagnitude))
        let expected = A_f_to_A_d(amperes_f(Float.greatestFiniteMagnitude))
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fToamperes_dUsing5_0Expecting5_0() {
        let unit = Amperes_f(5.0)
        let expected = A_f_to_A_d(5.0)
        let result = Amperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_d = 1.0
        let categoryResult = Current(unit).amperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_fTointUsing0_0Expecting0() {
        let expected = A_f_to_i(0.0)
        let result = CInt(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTointUsing5_0Expecting5() {
        let expected = A_f_to_i(5.0)
        let result = CInt(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTointUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = A_f_to_i(amperes_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTointUsingamperes_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = A_f_to_i(amperes_f(Float.greatestFiniteMagnitude))
        let result = CInt(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_fUsing0Expecting0_0() {
        let expected = i_to_A_f(0)
        let result = Amperes_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_fUsing5Expecting5_0() {
        let expected = i_to_A_f(5)
        let result = Amperes_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_fUsingCIntCInt_minExpectingamperes_fCInt_min() {
        let expected = i_to_A_f(CInt(CInt.min))
        let result = Amperes_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_fUsingCIntCInt_maxExpectingamperes_fCInt_max() {
        let expected = i_to_A_f(CInt(CInt.max))
        let result = Amperes_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint8_tUsing0_0Expecting0() {
        let expected = A_f_to_i8(0.0)
        let result = Int8(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint8_tUsing5_0Expecting5() {
        let expected = A_f_to_i8(5.0)
        let result = Int8(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint8_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = A_f_to_i8(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint8_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = A_f_to_i8(amperes_f(Float.greatestFiniteMagnitude))
        let result = Int8(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_fUsing0Expecting0_0() {
        let expected = i8_to_A_f(0)
        let result = Amperes_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_fUsing5Expecting5_0() {
        let expected = i8_to_A_f(5)
        let result = Amperes_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_fUsingInt8Int8_minExpectingamperes_fInt8_min() {
        let expected = i8_to_A_f(Int8(Int8.min))
        let result = Amperes_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_fUsingInt8Int8_maxExpectingamperes_fInt8_max() {
        let expected = i8_to_A_f(Int8(Int8.max))
        let result = Amperes_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint16_tUsing0_0Expecting0() {
        let expected = A_f_to_i16(0.0)
        let result = Int16(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint16_tUsing5_0Expecting5() {
        let expected = A_f_to_i16(5.0)
        let result = Int16(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint16_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = A_f_to_i16(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint16_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = A_f_to_i16(amperes_f(Float.greatestFiniteMagnitude))
        let result = Int16(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_fUsing0Expecting0_0() {
        let expected = i16_to_A_f(0)
        let result = Amperes_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_fUsing5Expecting5_0() {
        let expected = i16_to_A_f(5)
        let result = Amperes_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_fUsingInt16Int16_minExpectingamperes_fInt16_min() {
        let expected = i16_to_A_f(Int16(Int16.min))
        let result = Amperes_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_fUsingInt16Int16_maxExpectingamperes_fInt16_max() {
        let expected = i16_to_A_f(Int16(Int16.max))
        let result = Amperes_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint32_tUsing0_0Expecting0() {
        let expected = A_f_to_i32(0.0)
        let result = Int32(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint32_tUsing5_0Expecting5() {
        let expected = A_f_to_i32(5.0)
        let result = Int32(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint32_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = A_f_to_i32(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint32_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = A_f_to_i32(amperes_f(Float.greatestFiniteMagnitude))
        let result = Int32(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_fUsing0Expecting0_0() {
        let expected = i32_to_A_f(0)
        let result = Amperes_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_fUsing5Expecting5_0() {
        let expected = i32_to_A_f(5)
        let result = Amperes_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_fUsingInt32Int32_minExpectingamperes_fInt32_min() {
        let expected = i32_to_A_f(Int32(Int32.min))
        let result = Amperes_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_fUsingInt32Int32_maxExpectingamperes_fInt32_max() {
        let expected = i32_to_A_f(Int32(Int32.max))
        let result = Amperes_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint64_tUsing0_0Expecting0() {
        let expected = A_f_to_i64(0.0)
        let result = Int64(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint64_tUsing5_0Expecting5() {
        let expected = A_f_to_i64(5.0)
        let result = Int64(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint64_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = A_f_to_i64(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fToint64_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = A_f_to_i64(amperes_f(Float.greatestFiniteMagnitude))
        let result = Int64(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_fUsing0Expecting0_0() {
        let expected = i64_to_A_f(0)
        let result = Amperes_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_fUsing5Expecting5_0() {
        let expected = i64_to_A_f(5)
        let result = Amperes_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_fUsingInt64Int64_minExpectingamperes_fInt64_min() {
        let expected = i64_to_A_f(Int64(Int64.min))
        let result = Amperes_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_fUsingInt64Int64_maxExpectingamperes_fInt64_max() {
        let expected = i64_to_A_f(Int64(Int64.max))
        let result = Amperes_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTounsignedintUsing0_0Expecting0() {
        let expected = A_f_to_u(0.0)
        let result = CUnsignedInt(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTounsignedintUsing5_0Expecting5() {
        let expected = A_f_to_u(5.0)
        let result = CUnsignedInt(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTounsignedintUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = A_f_to_u(amperes_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTounsignedintUsingamperes_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = A_f_to_u(amperes_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_fUsing0Expecting0_0() {
        let expected = u_to_A_f(0)
        let result = Amperes_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_fUsing5Expecting5_0() {
        let expected = u_to_A_f(5)
        let result = Amperes_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_fUsingCUnsignedIntCUnsignedInt_minExpectingamperes_fCUnsignedInt_min() {
        let expected = u_to_A_f(CUnsignedInt(CUnsignedInt.min))
        let result = Amperes_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_fUsingCUnsignedIntCUnsignedInt_maxExpectingamperes_fCUnsignedInt_max() {
        let expected = u_to_A_f(CUnsignedInt(CUnsignedInt.max))
        let result = Amperes_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint8_tUsing0_0Expecting0() {
        let expected = A_f_to_u8(0.0)
        let result = UInt8(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint8_tUsing5_0Expecting5() {
        let expected = A_f_to_u8(5.0)
        let result = UInt8(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint8_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = A_f_to_u8(amperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint8_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = A_f_to_u8(amperes_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_fUsing0Expecting0_0() {
        let expected = u8_to_A_f(0)
        let result = Amperes_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_fUsing5Expecting5_0() {
        let expected = u8_to_A_f(5)
        let result = Amperes_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_fUsingUInt8UInt8_minExpectingamperes_fUInt8_min() {
        let expected = u8_to_A_f(UInt8(UInt8.min))
        let result = Amperes_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_fUsingUInt8UInt8_maxExpectingamperes_fUInt8_max() {
        let expected = u8_to_A_f(UInt8(UInt8.max))
        let result = Amperes_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint16_tUsing0_0Expecting0() {
        let expected = A_f_to_u16(0.0)
        let result = UInt16(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint16_tUsing5_0Expecting5() {
        let expected = A_f_to_u16(5.0)
        let result = UInt16(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint16_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = A_f_to_u16(amperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint16_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = A_f_to_u16(amperes_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_fUsing0Expecting0_0() {
        let expected = u16_to_A_f(0)
        let result = Amperes_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_fUsing5Expecting5_0() {
        let expected = u16_to_A_f(5)
        let result = Amperes_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_fUsingUInt16UInt16_minExpectingamperes_fUInt16_min() {
        let expected = u16_to_A_f(UInt16(UInt16.min))
        let result = Amperes_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_fUsingUInt16UInt16_maxExpectingamperes_fUInt16_max() {
        let expected = u16_to_A_f(UInt16(UInt16.max))
        let result = Amperes_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint32_tUsing0_0Expecting0() {
        let expected = A_f_to_u32(0.0)
        let result = UInt32(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint32_tUsing5_0Expecting5() {
        let expected = A_f_to_u32(5.0)
        let result = UInt32(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint32_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = A_f_to_u32(amperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint32_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = A_f_to_u32(amperes_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_fUsing0Expecting0_0() {
        let expected = u32_to_A_f(0)
        let result = Amperes_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_fUsing5Expecting5_0() {
        let expected = u32_to_A_f(5)
        let result = Amperes_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_fUsingUInt32UInt32_minExpectingamperes_fUInt32_min() {
        let expected = u32_to_A_f(UInt32(UInt32.min))
        let result = Amperes_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_fUsingUInt32UInt32_maxExpectingamperes_fUInt32_max() {
        let expected = u32_to_A_f(UInt32(UInt32.max))
        let result = Amperes_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint64_tUsing0_0Expecting0() {
        let expected = A_f_to_u64(0.0)
        let result = UInt64(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint64_tUsing5_0Expecting5() {
        let expected = A_f_to_u64(5.0)
        let result = UInt64(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint64_tUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = A_f_to_u64(amperes_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTouint64_tUsingamperes_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = A_f_to_u64(amperes_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_fUsing0Expecting0_0() {
        let expected = u64_to_A_f(0)
        let result = Amperes_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_fUsing5Expecting5_0() {
        let expected = u64_to_A_f(5)
        let result = Amperes_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_fUsingUInt64UInt64_minExpectingamperes_fUInt64_min() {
        let expected = u64_to_A_f(UInt64(UInt64.min))
        let result = Amperes_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_fUsingUInt64UInt64_maxExpectingamperes_fUInt64_max() {
        let expected = u64_to_A_f(UInt64(UInt64.max))
        let result = Amperes_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTofloatUsing0_0Expecting0_0() {
        let expected = A_f_to_f(0.0)
        let result = Float(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTofloatUsing5_0Expecting5_0() {
        let expected = A_f_to_f(5.0)
        let result = Float(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTofloatUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = A_f_to_f(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Float(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTofloatUsingamperes_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = A_f_to_f(amperes_f(Float.greatestFiniteMagnitude))
        let result = Float(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_fUsing0_0Expecting0_0() {
        let expected = f_to_A_f(0.0)
        let result = Amperes_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_fUsing5_0Expecting5_0() {
        let expected = f_to_A_f(5.0)
        let result = Amperes_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTodoubleUsing0_0Expecting0_0() {
        let expected = A_f_to_d(0.0)
        let result = Double(Amperes_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTodoubleUsing5_0Expecting5_0() {
        let expected = A_f_to_d(5.0)
        let result = Double(Amperes_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTodoubleUsingamperes_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = A_f_to_d(amperes_f(-Float.greatestFiniteMagnitude))
        let result = Double(Amperes_f(amperes_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_fTodoubleUsingamperes_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = A_f_to_d(amperes_f(Float.greatestFiniteMagnitude))
        let result = Double(Amperes_f(amperes_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_fUsing0_0Expecting0_0() {
        let expected = d_to_A_f(0.0)
        let result = Amperes_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_fUsing5_0Expecting5_0() {
        let expected = d_to_A_f(5.0)
        let result = Amperes_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingamperes_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_A_f(Double(-Double.greatestFiniteMagnitude))
        let result = Amperes_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingamperes_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_A_f(Double(Double.greatestFiniteMagnitude))
        let result = Amperes_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides amperes_d unit tests.
final class Amperes_dTests: XCTestCase {

    func testamperes_dTomicroamperes_tUsing15_0Expectingmicroamperes_t15_01000000_0_rounded() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_uA_t(15.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsing25_0Expectingmicroamperes_t25_01000000_0_rounded() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_uA_t(25.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsing250_0Expectingmicroamperes_t250_01000000_0_rounded() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_uA_t(250.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsing0_0Expectingmicroamperes_t0_01000000_0_rounded() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_uA_t(0.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsing2500Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_d(2500)
        let expected = A_d_to_uA_t(2500)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsing25000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_d(25000)
        let expected = A_d_to_uA_t(25000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsing250000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_d(250000)
        let expected = A_d_to_uA_t(250000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsing2500000Expectingmicroamperes_tCInt_max() {
        let unit = Amperes_d(2500000)
        let expected = A_d_to_uA_t(2500000)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsingNeg323_0Expectingmicroamperes_tNeg323_01000000_0_rounded() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_uA_t(-323.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsingNeg10_0Expectingmicroamperes_tNeg10_01000000_0_rounded() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_uA_t(-10.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsingNeg1000_0Expectingmicroamperes_tNeg1000_01000000_0_rounded() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_uA_t(-1000.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsingNeg5_0Expectingmicroamperes_tNeg5_01000000_0_rounded() {
        let unit = Amperes_d(-5.0)
        let expected = A_d_to_uA_t(-5.0)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_t = 1
        let categoryResult = Current(unit).microamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_tUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_min() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_t(-Double.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomicroamperes_tUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_tCInt_max() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_t(Double.greatestFiniteMagnitude)
        let result = Microamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_tUsing15_0Expectingmilliamperes_t15_01000_0_rounded() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_mA_t(15.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsing25_0Expectingmilliamperes_t25_01000_0_rounded() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_mA_t(25.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsing250_0Expectingmilliamperes_t250_01000_0_rounded() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_mA_t(250.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsing0_0Expectingmilliamperes_t0_01000_0_rounded() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_mA_t(0.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsing2500_0Expectingmilliamperes_t2500_01000_0_rounded() {
        let unit = Amperes_d(2500.0)
        let expected = A_d_to_mA_t(2500.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsing25000_0Expectingmilliamperes_t25000_01000_0_rounded() {
        let unit = Amperes_d(25000.0)
        let expected = A_d_to_mA_t(25000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsing250000_0Expectingmilliamperes_t250000_01000_0_rounded() {
        let unit = Amperes_d(250000.0)
        let expected = A_d_to_mA_t(250000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsing2500000Expectingmilliamperes_tCInt_max() {
        let unit = Amperes_d(2500000)
        let expected = A_d_to_mA_t(2500000)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsingNeg323_0Expectingmilliamperes_tNeg323_01000_0_rounded() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_mA_t(-323.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsingNeg10_0Expectingmilliamperes_tNeg10_01000_0_rounded() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_mA_t(-10.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsingNeg1000_0Expectingmilliamperes_tNeg1000_01000_0_rounded() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_mA_t(-1000.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsingNeg5_0Expectingmilliamperes_tNeg5_01000_0_rounded() {
        let unit = Amperes_d(-5.0)
        let expected = A_d_to_mA_t(-5.0)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_t = 1
        let categoryResult = Current(unit).milliamperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_tUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_min() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_t(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_tUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_tCInt_max() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_t(Double.greatestFiniteMagnitude)
        let result = Milliamperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToamperes_tUsing0_0Expecting0() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_A_t(0.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_min() {
        let unit = Amperes_d(amperes_d(-Double.greatestFiniteMagnitude))
        let expected = A_d_to_A_t(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingamperes_tCInt_max() {
        let unit = Amperes_d(amperes_d(Double.greatestFiniteMagnitude))
        let expected = A_d_to_A_t(amperes_d(Double.greatestFiniteMagnitude))
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_tUsing5_0Expecting5() {
        let unit = Amperes_d(5.0)
        let expected = A_d_to_A_t(5.0)
        let result = Amperes_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_t = 1
        let categoryResult = Current(unit).amperes_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing15_0Expectingmicroamperes_u15_01000000_0_rounded() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_uA_u(15.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing25_0Expectingmicroamperes_u25_01000000_0_rounded() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_uA_u(25.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing250_0Expectingmicroamperes_u250_01000000_0_rounded() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_uA_u(250.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing0_0Expectingmicroamperes_u0_01000000_0_rounded() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_uA_u(0.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing2500_0Expectingmicroamperes_u2500_01000000_0_rounded() {
        let unit = Amperes_d(2500.0)
        let expected = A_d_to_uA_u(2500.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing25000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_d(25000)
        let expected = A_d_to_uA_u(25000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing250000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_d(250000)
        let expected = A_d_to_uA_u(250000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsing2500000Expectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_d(2500000)
        let expected = A_d_to_uA_u(2500000)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsingNeg323_0Expecting0() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_uA_u(-323.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsingNeg10_0Expecting0() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_uA_u(-10.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsingNeg1000_0Expecting0() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_uA_u(-1000.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsingNeg6_0Expecting0() {
        let unit = Amperes_d(-6.0)
        let expected = A_d_to_uA_u(-6.0)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_u = 1
        let categoryResult = Current(unit).microamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_uUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_min() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_u(-Double.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomicroamperes_uUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_uCUnsignedInt_max() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_u(Double.greatestFiniteMagnitude)
        let result = Microamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_uUsing15_0Expectingmilliamperes_u15_01000_0_rounded() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_mA_u(15.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsing25_0Expectingmilliamperes_u25_01000_0_rounded() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_mA_u(25.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsing250_0Expectingmilliamperes_u250_01000_0_rounded() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_mA_u(250.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsing0_0Expectingmilliamperes_u0_01000_0_rounded() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_mA_u(0.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsing2500_0Expectingmilliamperes_u2500_01000_0_rounded() {
        let unit = Amperes_d(2500.0)
        let expected = A_d_to_mA_u(2500.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsing25000_0Expectingmilliamperes_u25000_01000_0_rounded() {
        let unit = Amperes_d(25000.0)
        let expected = A_d_to_mA_u(25000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsing250000_0Expectingmilliamperes_u250000_01000_0_rounded() {
        let unit = Amperes_d(250000.0)
        let expected = A_d_to_mA_u(250000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsing2500000_0Expectingmilliamperes_u2500000_01000_0_rounded() {
        let unit = Amperes_d(2500000.0)
        let expected = A_d_to_mA_u(2500000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsingNeg323_0Expecting0() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_mA_u(-323.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsingNeg10_0Expecting0() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_mA_u(-10.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsingNeg1000_0Expecting0() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_mA_u(-1000.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsingNeg6_0Expecting0() {
        let unit = Amperes_d(-6.0)
        let expected = A_d_to_mA_u(-6.0)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_u = 1
        let categoryResult = Current(unit).milliamperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_uUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_min() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_u(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_uUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_uCUnsignedInt_max() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_u(Double.greatestFiniteMagnitude)
        let result = Milliamperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToamperes_uUsing0_0Expecting0() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_A_u(0.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_uUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_min() {
        let unit = Amperes_d(amperes_d(-Double.greatestFiniteMagnitude))
        let expected = A_d_to_A_u(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_uUsingamperes_dDouble_greatestFiniteMagnitudeExpectingamperes_uCUnsignedInt_max() {
        let unit = Amperes_d(amperes_d(Double.greatestFiniteMagnitude))
        let expected = A_d_to_A_u(amperes_d(Double.greatestFiniteMagnitude))
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_uUsing5_0Expecting5() {
        let unit = Amperes_d(5.0)
        let expected = A_d_to_A_u(5.0)
        let result = Amperes_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_u = 1
        let categoryResult = Current(unit).amperes_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing15_0Expectingmicroamperes_f15_01000000_0() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_uA_f(15.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing25_0Expectingmicroamperes_f25_01000000_0() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_uA_f(25.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing250_0Expectingmicroamperes_f250_01000000_0() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_uA_f(250.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing0_0Expectingmicroamperes_f0_01000000_0() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_uA_f(0.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing2500_0Expectingmicroamperes_f2500_01000000_0() {
        let unit = Amperes_d(2500.0)
        let expected = A_d_to_uA_f(2500.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing25000_0Expectingmicroamperes_f25000_01000000_0() {
        let unit = Amperes_d(25000.0)
        let expected = A_d_to_uA_f(25000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing250000_0Expectingmicroamperes_f250000_01000000_0() {
        let unit = Amperes_d(250000.0)
        let expected = A_d_to_uA_f(250000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsing2500000_0Expectingmicroamperes_f2500000_01000000_0() {
        let unit = Amperes_d(2500000.0)
        let expected = A_d_to_uA_f(2500000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsingNeg323_0Expectingmicroamperes_fNeg323_01000000_0() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_uA_f(-323.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsingNeg10_0Expectingmicroamperes_fNeg10_01000000_0() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_uA_f(-10.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsingNeg1000_0Expectingmicroamperes_fNeg1000_01000000_0() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_uA_f(-1000.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsingNeg5_0Expectingmicroamperes_fNeg5_01000000_0() {
        let unit = Amperes_d(-5.0)
        let expected = A_d_to_uA_f(-5.0)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_f = 1.0
        let categoryResult = Current(unit).microamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_fUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_f(-Double.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomicroamperes_fUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_f(Double.greatestFiniteMagnitude)
        let result = Microamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_fUsing15_0Expectingmilliamperes_f15_01000_0() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_mA_f(15.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsing25_0Expectingmilliamperes_f25_01000_0() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_mA_f(25.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsing250_0Expectingmilliamperes_f250_01000_0() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_mA_f(250.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsing0_0Expectingmilliamperes_f0_01000_0() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_mA_f(0.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsing2500_0Expectingmilliamperes_f2500_01000_0() {
        let unit = Amperes_d(2500.0)
        let expected = A_d_to_mA_f(2500.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsing25000_0Expectingmilliamperes_f25000_01000_0() {
        let unit = Amperes_d(25000.0)
        let expected = A_d_to_mA_f(25000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsing250000_0Expectingmilliamperes_f250000_01000_0() {
        let unit = Amperes_d(250000.0)
        let expected = A_d_to_mA_f(250000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsing2500000_0Expectingmilliamperes_f2500000_01000_0() {
        let unit = Amperes_d(2500000.0)
        let expected = A_d_to_mA_f(2500000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsingNeg323_0Expectingmilliamperes_fNeg323_01000_0() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_mA_f(-323.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsingNeg10_0Expectingmilliamperes_fNeg10_01000_0() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_mA_f(-10.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsingNeg1000_0Expectingmilliamperes_fNeg1000_01000_0() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_mA_f(-1000.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsingNeg5_0Expectingmilliamperes_fNeg5_01000_0() {
        let unit = Amperes_d(-5.0)
        let expected = A_d_to_mA_f(-5.0)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_f = 1.0
        let categoryResult = Current(unit).milliamperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_fUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_f(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_fUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_f(Double.greatestFiniteMagnitude)
        let result = Milliamperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToamperes_fUsing0_0Expecting0_0() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_A_f(0.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_fUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingamperes_fNegFloat_greatestFiniteMagnitude() {
        let unit = Amperes_d(amperes_d(-Double.greatestFiniteMagnitude))
        let expected = A_d_to_A_f(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_fUsingamperes_dDouble_greatestFiniteMagnitudeExpectingamperes_fFloat_greatestFiniteMagnitude() {
        let unit = Amperes_d(amperes_d(Double.greatestFiniteMagnitude))
        let expected = A_d_to_A_f(amperes_d(Double.greatestFiniteMagnitude))
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dToamperes_fUsing5_0Expecting5_0() {
        let unit = Amperes_d(5.0)
        let expected = A_d_to_A_f(5.0)
        let result = Amperes_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: amperes_f = 1.0
        let categoryResult = Current(unit).amperes_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing15_0Expectingmicroamperes_d15_01000000_0() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_uA_d(15.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing25_0Expectingmicroamperes_d25_01000000_0() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_uA_d(25.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing250_0Expectingmicroamperes_d250_01000000_0() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_uA_d(250.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing0_0Expectingmicroamperes_d0_01000000_0() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_uA_d(0.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing2500_0Expectingmicroamperes_d2500_01000000_0() {
        let unit = Amperes_d(2500.0)
        let expected = A_d_to_uA_d(2500.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing25000_0Expectingmicroamperes_d25000_01000000_0() {
        let unit = Amperes_d(25000.0)
        let expected = A_d_to_uA_d(25000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing250000_0Expectingmicroamperes_d250000_01000000_0() {
        let unit = Amperes_d(250000.0)
        let expected = A_d_to_uA_d(250000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsing2500000_0Expectingmicroamperes_d2500000_01000000_0() {
        let unit = Amperes_d(2500000.0)
        let expected = A_d_to_uA_d(2500000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsingNeg323_0Expectingmicroamperes_dNeg323_01000000_0() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_uA_d(-323.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsingNeg10_0Expectingmicroamperes_dNeg10_01000000_0() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_uA_d(-10.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsingNeg1000_0Expectingmicroamperes_dNeg1000_01000000_0() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_uA_d(-1000.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsingNeg5_0Expectingmicroamperes_dNeg5_01000000_0() {
        let unit = Amperes_d(-5.0)
        let expected = A_d_to_uA_d(-5.0)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microamperes_d = 1.0
        let categoryResult = Current(unit).microamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomicroamperes_dUsingNegDouble_greatestFiniteMagnitudeExpectingmicroamperes_dNegDouble_greatestFiniteMagnitude() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_d(-Double.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomicroamperes_dUsingDouble_greatestFiniteMagnitudeExpectingmicroamperes_dDouble_greatestFiniteMagnitude() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_uA_d(Double.greatestFiniteMagnitude)
        let result = Microamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_dUsing15_0Expectingmilliamperes_d15_01000_0() {
        let unit = Amperes_d(15.0)
        let expected = A_d_to_mA_d(15.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsing25_0Expectingmilliamperes_d25_01000_0() {
        let unit = Amperes_d(25.0)
        let expected = A_d_to_mA_d(25.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsing250_0Expectingmilliamperes_d250_01000_0() {
        let unit = Amperes_d(250.0)
        let expected = A_d_to_mA_d(250.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsing0_0Expectingmilliamperes_d0_01000_0() {
        let unit = Amperes_d(0.0)
        let expected = A_d_to_mA_d(0.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsing2500_0Expectingmilliamperes_d2500_01000_0() {
        let unit = Amperes_d(2500.0)
        let expected = A_d_to_mA_d(2500.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsing25000_0Expectingmilliamperes_d25000_01000_0() {
        let unit = Amperes_d(25000.0)
        let expected = A_d_to_mA_d(25000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsing250000_0Expectingmilliamperes_d250000_01000_0() {
        let unit = Amperes_d(250000.0)
        let expected = A_d_to_mA_d(250000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsing2500000_0Expectingmilliamperes_d2500000_01000_0() {
        let unit = Amperes_d(2500000.0)
        let expected = A_d_to_mA_d(2500000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsingNeg323_0Expectingmilliamperes_dNeg323_01000_0() {
        let unit = Amperes_d(-323.0)
        let expected = A_d_to_mA_d(-323.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsingNeg10_0Expectingmilliamperes_dNeg10_01000_0() {
        let unit = Amperes_d(-10.0)
        let expected = A_d_to_mA_d(-10.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsingNeg1000_0Expectingmilliamperes_dNeg1000_01000_0() {
        let unit = Amperes_d(-1000.0)
        let expected = A_d_to_mA_d(-1000.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsingNeg5_0Expectingmilliamperes_dNeg5_01000_0() {
        let unit = Amperes_d(-5.0)
        let expected = A_d_to_mA_d(-5.0)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliamperes_d = 1.0
        let categoryResult = Current(unit).milliamperes_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testamperes_dTomilliamperes_dUsingNegDouble_greatestFiniteMagnitudeExpectingmilliamperes_dNegDouble_greatestFiniteMagnitude() {
        let unit = Amperes_d(-Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_d(-Double.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTomilliamperes_dUsingDouble_greatestFiniteMagnitudeExpectingmilliamperes_dDouble_greatestFiniteMagnitude() {
        let unit = Amperes_d(Double.greatestFiniteMagnitude)
        let expected = A_d_to_mA_d(Double.greatestFiniteMagnitude)
        let result = Milliamperes_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTointUsing0_0Expecting0() {
        let expected = A_d_to_i(0.0)
        let result = CInt(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTointUsing5_0Expecting5() {
        let expected = A_d_to_i(5.0)
        let result = CInt(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTointUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = A_d_to_i(amperes_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTointUsingamperes_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = A_d_to_i(amperes_d(Double.greatestFiniteMagnitude))
        let result = CInt(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_dUsing0Expecting0_0() {
        let expected = i_to_A_d(0)
        let result = Amperes_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_dUsing5Expecting5_0() {
        let expected = i_to_A_d(5)
        let result = Amperes_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_dUsingCIntCInt_minExpectingamperes_dCInt_min() {
        let expected = i_to_A_d(CInt(CInt.min))
        let result = Amperes_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToamperes_dUsingCIntCInt_maxExpectingamperes_dCInt_max() {
        let expected = i_to_A_d(CInt(CInt.max))
        let result = Amperes_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint8_tUsing0_0Expecting0() {
        let expected = A_d_to_i8(0.0)
        let result = Int8(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint8_tUsing5_0Expecting5() {
        let expected = A_d_to_i8(5.0)
        let result = Int8(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint8_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = A_d_to_i8(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint8_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = A_d_to_i8(amperes_d(Double.greatestFiniteMagnitude))
        let result = Int8(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_dUsing0Expecting0_0() {
        let expected = i8_to_A_d(0)
        let result = Amperes_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_dUsing5Expecting5_0() {
        let expected = i8_to_A_d(5)
        let result = Amperes_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_dUsingInt8Int8_minExpectingamperes_dInt8_min() {
        let expected = i8_to_A_d(Int8(Int8.min))
        let result = Amperes_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToamperes_dUsingInt8Int8_maxExpectingamperes_dInt8_max() {
        let expected = i8_to_A_d(Int8(Int8.max))
        let result = Amperes_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint16_tUsing0_0Expecting0() {
        let expected = A_d_to_i16(0.0)
        let result = Int16(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint16_tUsing5_0Expecting5() {
        let expected = A_d_to_i16(5.0)
        let result = Int16(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint16_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = A_d_to_i16(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint16_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = A_d_to_i16(amperes_d(Double.greatestFiniteMagnitude))
        let result = Int16(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_dUsing0Expecting0_0() {
        let expected = i16_to_A_d(0)
        let result = Amperes_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_dUsing5Expecting5_0() {
        let expected = i16_to_A_d(5)
        let result = Amperes_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_dUsingInt16Int16_minExpectingamperes_dInt16_min() {
        let expected = i16_to_A_d(Int16(Int16.min))
        let result = Amperes_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToamperes_dUsingInt16Int16_maxExpectingamperes_dInt16_max() {
        let expected = i16_to_A_d(Int16(Int16.max))
        let result = Amperes_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint32_tUsing0_0Expecting0() {
        let expected = A_d_to_i32(0.0)
        let result = Int32(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint32_tUsing5_0Expecting5() {
        let expected = A_d_to_i32(5.0)
        let result = Int32(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint32_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = A_d_to_i32(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint32_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = A_d_to_i32(amperes_d(Double.greatestFiniteMagnitude))
        let result = Int32(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_dUsing0Expecting0_0() {
        let expected = i32_to_A_d(0)
        let result = Amperes_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_dUsing5Expecting5_0() {
        let expected = i32_to_A_d(5)
        let result = Amperes_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_dUsingInt32Int32_minExpectingamperes_dInt32_min() {
        let expected = i32_to_A_d(Int32(Int32.min))
        let result = Amperes_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToamperes_dUsingInt32Int32_maxExpectingamperes_dInt32_max() {
        let expected = i32_to_A_d(Int32(Int32.max))
        let result = Amperes_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint64_tUsing0_0Expecting0() {
        let expected = A_d_to_i64(0.0)
        let result = Int64(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint64_tUsing5_0Expecting5() {
        let expected = A_d_to_i64(5.0)
        let result = Int64(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint64_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = A_d_to_i64(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dToint64_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = A_d_to_i64(amperes_d(Double.greatestFiniteMagnitude))
        let result = Int64(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_dUsing0Expecting0_0() {
        let expected = i64_to_A_d(0)
        let result = Amperes_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_dUsing5Expecting5_0() {
        let expected = i64_to_A_d(5)
        let result = Amperes_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_dUsingInt64Int64_minExpectingamperes_dInt64_min() {
        let expected = i64_to_A_d(Int64(Int64.min))
        let result = Amperes_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToamperes_dUsingInt64Int64_maxExpectingamperes_dInt64_max() {
        let expected = i64_to_A_d(Int64(Int64.max))
        let result = Amperes_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTounsignedintUsing0_0Expecting0() {
        let expected = A_d_to_u(0.0)
        let result = CUnsignedInt(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTounsignedintUsing5_0Expecting5() {
        let expected = A_d_to_u(5.0)
        let result = CUnsignedInt(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTounsignedintUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = A_d_to_u(amperes_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTounsignedintUsingamperes_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = A_d_to_u(amperes_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_dUsing0Expecting0_0() {
        let expected = u_to_A_d(0)
        let result = Amperes_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_dUsing5Expecting5_0() {
        let expected = u_to_A_d(5)
        let result = Amperes_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_dUsingCUnsignedIntCUnsignedInt_minExpectingamperes_dCUnsignedInt_min() {
        let expected = u_to_A_d(CUnsignedInt(CUnsignedInt.min))
        let result = Amperes_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToamperes_dUsingCUnsignedIntCUnsignedInt_maxExpectingamperes_dCUnsignedInt_max() {
        let expected = u_to_A_d(CUnsignedInt(CUnsignedInt.max))
        let result = Amperes_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint8_tUsing0_0Expecting0() {
        let expected = A_d_to_u8(0.0)
        let result = UInt8(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint8_tUsing5_0Expecting5() {
        let expected = A_d_to_u8(5.0)
        let result = UInt8(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint8_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = A_d_to_u8(amperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint8_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = A_d_to_u8(amperes_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_dUsing0Expecting0_0() {
        let expected = u8_to_A_d(0)
        let result = Amperes_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_dUsing5Expecting5_0() {
        let expected = u8_to_A_d(5)
        let result = Amperes_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_dUsingUInt8UInt8_minExpectingamperes_dUInt8_min() {
        let expected = u8_to_A_d(UInt8(UInt8.min))
        let result = Amperes_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToamperes_dUsingUInt8UInt8_maxExpectingamperes_dUInt8_max() {
        let expected = u8_to_A_d(UInt8(UInt8.max))
        let result = Amperes_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint16_tUsing0_0Expecting0() {
        let expected = A_d_to_u16(0.0)
        let result = UInt16(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint16_tUsing5_0Expecting5() {
        let expected = A_d_to_u16(5.0)
        let result = UInt16(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint16_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = A_d_to_u16(amperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint16_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = A_d_to_u16(amperes_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_dUsing0Expecting0_0() {
        let expected = u16_to_A_d(0)
        let result = Amperes_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_dUsing5Expecting5_0() {
        let expected = u16_to_A_d(5)
        let result = Amperes_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_dUsingUInt16UInt16_minExpectingamperes_dUInt16_min() {
        let expected = u16_to_A_d(UInt16(UInt16.min))
        let result = Amperes_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToamperes_dUsingUInt16UInt16_maxExpectingamperes_dUInt16_max() {
        let expected = u16_to_A_d(UInt16(UInt16.max))
        let result = Amperes_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint32_tUsing0_0Expecting0() {
        let expected = A_d_to_u32(0.0)
        let result = UInt32(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint32_tUsing5_0Expecting5() {
        let expected = A_d_to_u32(5.0)
        let result = UInt32(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint32_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = A_d_to_u32(amperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint32_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = A_d_to_u32(amperes_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_dUsing0Expecting0_0() {
        let expected = u32_to_A_d(0)
        let result = Amperes_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_dUsing5Expecting5_0() {
        let expected = u32_to_A_d(5)
        let result = Amperes_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_dUsingUInt32UInt32_minExpectingamperes_dUInt32_min() {
        let expected = u32_to_A_d(UInt32(UInt32.min))
        let result = Amperes_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToamperes_dUsingUInt32UInt32_maxExpectingamperes_dUInt32_max() {
        let expected = u32_to_A_d(UInt32(UInt32.max))
        let result = Amperes_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint64_tUsing0_0Expecting0() {
        let expected = A_d_to_u64(0.0)
        let result = UInt64(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint64_tUsing5_0Expecting5() {
        let expected = A_d_to_u64(5.0)
        let result = UInt64(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint64_tUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = A_d_to_u64(amperes_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTouint64_tUsingamperes_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = A_d_to_u64(amperes_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_dUsing0Expecting0_0() {
        let expected = u64_to_A_d(0)
        let result = Amperes_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_dUsing5Expecting5_0() {
        let expected = u64_to_A_d(5)
        let result = Amperes_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_dUsingUInt64UInt64_minExpectingamperes_dUInt64_min() {
        let expected = u64_to_A_d(UInt64(UInt64.min))
        let result = Amperes_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToamperes_dUsingUInt64UInt64_maxExpectingamperes_dUInt64_max() {
        let expected = u64_to_A_d(UInt64(UInt64.max))
        let result = Amperes_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTofloatUsing0_0Expecting0_0() {
        let expected = A_d_to_f(0.0)
        let result = Float(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTofloatUsing5_0Expecting5_0() {
        let expected = A_d_to_f(5.0)
        let result = Float(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTofloatUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = A_d_to_f(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Float(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTofloatUsingamperes_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = A_d_to_f(amperes_d(Double.greatestFiniteMagnitude))
        let result = Float(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_dUsing0_0Expecting0_0() {
        let expected = f_to_A_d(0.0)
        let result = Amperes_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_dUsing5_0Expecting5_0() {
        let expected = f_to_A_d(5.0)
        let result = Amperes_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingamperes_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_A_d(Float(-Float.greatestFiniteMagnitude))
        let result = Amperes_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToamperes_dUsingFloatFloat_greatestFiniteMagnitudeExpectingamperes_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_A_d(Float(Float.greatestFiniteMagnitude))
        let result = Amperes_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTodoubleUsing0_0Expecting0_0() {
        let expected = A_d_to_d(0.0)
        let result = Double(Amperes_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTodoubleUsing5_0Expecting5_0() {
        let expected = A_d_to_d(5.0)
        let result = Double(Amperes_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTodoubleUsingamperes_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = A_d_to_d(amperes_d(-Double.greatestFiniteMagnitude))
        let result = Double(Amperes_d(amperes_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testamperes_dTodoubleUsingamperes_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = A_d_to_d(amperes_d(Double.greatestFiniteMagnitude))
        let result = Double(Amperes_d(amperes_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_dUsing0_0Expecting0_0() {
        let expected = d_to_A_d(0.0)
        let result = Amperes_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToamperes_dUsing5_0Expecting5_0() {
        let expected = d_to_A_d(5.0)
        let result = Amperes_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}
