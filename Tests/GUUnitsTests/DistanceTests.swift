/*
* DistanceTests.swift
* GUUnitsTests
*
* Created by Callum McColl on 05/06/2019.
* Copyright Â© 2019 Callum McColl. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above
*    copyright notice, this list of conditions and the following
*    disclaimer in the documentation and/or other materials
*    provided with the distribution.
*
* 3. All advertising materials mentioning features or use of this
*    software must display the following acknowledgement:
*
*        This product includes software developed by Callum McColl.
*
* 4. Neither the name of the author nor the names of contributors
*    may be used to endorse or promote products derived from this
*    software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* -----------------------------------------------------------------------
* This program is free software; you can redistribute it and/or
* modify it under the above terms or under the terms of the GNU
* General Public License as published by the Free Software Foundation;
* either version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see http://www.gnu.org/licenses/
* or write to the Free Software Foundation, Inc., 51 Franklin Street,
* Fifth Floor, Boston, MA  02110-1301, USA.
*
*/

import CGUUnits
@testable import GUUnits
import XCTest

final class MillimetresTypeTests: XCTestCase {

    func testMillimetres_tEquality() {
        XCTAssertEqual(Millimetres_t(5), Millimetres_t(5))
    }

    func testMillimetres_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Millimetres_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Millimetres_t.self, from: try encoder.encode(original))
        )
    }

    func testMillimetres_tSelfInit() {
        let expected = Millimetres_t(15)
        XCTAssertEqual(expected, Millimetres_t(expected))
    }

    func testMillimetres_tSelfExactlyInit() {
        let expected = Millimetres_t(15)
        XCTAssertEqual(expected, Millimetres_t(exactly: expected))
    }

    func testMillimetres_tComparable() {
        let lhs = Millimetres_t(1)
        let rhs = Millimetres_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMillimetres_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Millimetres_t(5).magnitude, expected)
    }

    func testMillimetres_tTruncatingInit() {
        let expected = Millimetres_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Millimetres_t(truncatingIfNeeded: expected), expected)
    }

    func testMillimetres_tClampingInit() {
        let expected = Millimetres_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Millimetres_t(clamping: expected), expected)
    }

    func testMillimetres_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Millimetres_t(5).bitWidth, expected)
    }

    func testMillimetres_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Millimetres_t(5).leadingZeroBitCount, expected)
    }

    func testMillimetres_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Millimetres_t(5).nonzeroBitCount, expected)
    }

    func testMillimetres_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Millimetres_t(expected), Millimetres_t(integerLiteral: CInt.max))
    }

    func testMillimetres_tTruncatingBits() {
        let expected = Millimetres_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Millimetres_t(_truncatingBits: UInt.max))
    }

    func testMillimetres_tAddition() {
        let expected = Millimetres_t(CInt(5) + CInt(3))
        XCTAssertEqual(Millimetres_t(5) + Millimetres_t(3), expected)
    }

    func testMillimetres_tSubtraction() {
        let expected = Millimetres_t(CInt(5) - CInt(3))
        XCTAssertEqual(Millimetres_t(5) - Millimetres_t(3), expected)
    }

    func testMillimetres_tMultiplication() {
        let expected = Millimetres_t(CInt(5) * CInt(3))
        XCTAssertEqual(Millimetres_t(5) * Millimetres_t(3), expected)
    }

    func testMillimetres_tDivision() {
        let expected = Millimetres_t(CInt(6) / CInt(3))
        XCTAssertEqual(Millimetres_t(6) / Millimetres_t(3), expected)
    }

    func testMillimetres_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Millimetres_t(rawOriginal)
        let result = original.addingReportingOverflow(Millimetres_t(1))
        XCTAssertEqual(result.0, Millimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMillimetres_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Millimetres_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Millimetres_t(2))
        XCTAssertEqual(result.0, Millimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMillimetres_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Millimetres_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Millimetres_t(1))
        XCTAssertEqual(result.0, Millimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMillimetres_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Millimetres_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Millimetres_t(CInt.max))
        XCTAssertEqual(result.0, Millimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMillimetres_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Millimetres_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Millimetres_t(CInt.max))
        XCTAssertEqual(result.0, Millimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMillimetres_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Millimetres_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMillimetres_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Millimetres_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Millimetres_t(original))
    }

    func testMillimetres_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Millimetres_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Millimetres_t(original))
    }

    func testMillimetres_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Millimetres_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Millimetres_t(original))
    }

    func testMillimetres_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Millimetres_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Millimetres_t(original))
    }

    func testMillimetres_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Millimetres_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Millimetres_t(original))
    }

    func testMillimetres_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Millimetres_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Millimetres_t(original))
    }

    func testMillimetres_tMod() {
        let original = CInt(4)
        let expected = Millimetres_t(original % 2)
        XCTAssertEqual(Millimetres_t(original) % 2, expected)
    }

    func testMillimetres_uEquality() {
        XCTAssertEqual(Millimetres_u(5), Millimetres_u(5))
    }

    func testMillimetres_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Millimetres_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Millimetres_u.self, from: try encoder.encode(original))
        )
    }

    func testMillimetres_uSelfInit() {
        let expected = Millimetres_u(15)
        XCTAssertEqual(expected, Millimetres_u(expected))
    }

    func testMillimetres_uSelfExactlyInit() {
        let expected = Millimetres_u(15)
        XCTAssertEqual(expected, Millimetres_u(exactly: expected))
    }

    func testMillimetres_uComparable() {
        let lhs = Millimetres_u(1)
        let rhs = Millimetres_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMillimetres_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Millimetres_u(5).magnitude, expected)
    }

    func testMillimetres_uTruncatingInit() {
        let expected = Millimetres_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Millimetres_u(truncatingIfNeeded: expected), expected)
    }

    func testMillimetres_uClampingInit() {
        let expected = Millimetres_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Millimetres_u(clamping: expected), expected)
    }

    func testMillimetres_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Millimetres_u(5).bitWidth, expected)
    }

    func testMillimetres_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Millimetres_u(5).leadingZeroBitCount, expected)
    }

    func testMillimetres_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Millimetres_u(5).nonzeroBitCount, expected)
    }

    func testMillimetres_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Millimetres_u(expected), Millimetres_u(integerLiteral: CUnsignedInt.max))
    }

    func testMillimetres_uTruncatingBits() {
        let expected = Millimetres_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Millimetres_u(_truncatingBits: UInt.max))
    }

    func testMillimetres_uAddition() {
        let expected = Millimetres_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Millimetres_u(5) + Millimetres_u(3), expected)
    }

    func testMillimetres_uSubtraction() {
        let expected = Millimetres_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Millimetres_u(5) - Millimetres_u(3), expected)
    }

    func testMillimetres_uMultiplication() {
        let expected = Millimetres_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Millimetres_u(5) * Millimetres_u(3), expected)
    }

    func testMillimetres_uDivision() {
        let expected = Millimetres_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Millimetres_u(6) / Millimetres_u(3), expected)
    }

    func testMillimetres_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Millimetres_u(rawOriginal)
        let result = original.addingReportingOverflow(Millimetres_u(1))
        XCTAssertEqual(result.0, Millimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMillimetres_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Millimetres_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Millimetres_u(2))
        XCTAssertEqual(result.0, Millimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMillimetres_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Millimetres_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Millimetres_u(1))
        XCTAssertEqual(result.0, Millimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMillimetres_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Millimetres_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Millimetres_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Millimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMillimetres_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Millimetres_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Millimetres_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Millimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMillimetres_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Millimetres_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMillimetres_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Millimetres_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Millimetres_u(original))
    }

    func testMillimetres_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Millimetres_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Millimetres_u(original))
    }

    func testMillimetres_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Millimetres_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Millimetres_u(original))
    }

    func testMillimetres_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Millimetres_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Millimetres_u(original))
    }

    func testMillimetres_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Millimetres_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Millimetres_u(original))
    }

    func testMillimetres_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Millimetres_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Millimetres_u(original))
    }

    func testMillimetres_uMod() {
        let original = CUnsignedInt(4)
        let expected = Millimetres_u(original % 2)
        XCTAssertEqual(Millimetres_u(original) % 2, expected)
    }

    func testMillimetres_fEquality() {
        XCTAssertEqual(Millimetres_f(5), Millimetres_f(5))
    }

    func testMillimetres_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Millimetres_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Millimetres_f.self, from: try encoder.encode(original))
        )
    }

    func testMillimetres_fSelfInit() {
        let expected = Millimetres_f(15)
        XCTAssertEqual(expected, Millimetres_f(expected))
    }

    func testMillimetres_fSelfExactlyInit() {
        let expected = Millimetres_f(15)
        XCTAssertEqual(expected, Millimetres_f(exactly: expected))
    }

    func testMillimetres_fComparable() {
        let lhs = Millimetres_f(1)
        let rhs = Millimetres_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMillimetres_fRadix() {
        XCTAssertEqual(Millimetres_f.radix, Float.radix)
    }

    func testMillimetres_fExponentBitCount() {
        XCTAssertEqual(Millimetres_f.exponentBitCount, Float.exponentBitCount)
    }

    func testMillimetres_fSignificandBitCount() {
        XCTAssertEqual(Millimetres_f.significandBitCount, Float.significandBitCount)
    }

    func testMillimetres_fMagnitude() {
        let expected = Millimetres_f(Float(5).magnitude)
        XCTAssertEqual(Millimetres_f(5).magnitude, expected)
    }

    func testMillimetres_fExactlyInit() {
        let expected = Millimetres_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Millimetres_f(exactly: Int(5)), expected)
    }

    func testMillimetres_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Millimetres_f(param).isTotallyOrdered(belowOrEqualTo: Millimetres_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMillimetres_fBinade() {
        let raw = Float(5)
        let expected = Millimetres_f(raw.binade)
        XCTAssertEqual(Millimetres_f(raw).binade, expected)
    }

    func testMillimetres_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Millimetres_f(raw).significandWidth, raw.significandWidth)
    }

    func testMillimetres_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Millimetres_f(raw).debugDescription, raw.debugDescription)
    }

    func testMillimetres_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Millimetres_f("5.0"), Millimetres_f(raw))
    }

    func testMillimetres_fStaticVars() {
        XCTAssertEqual(Millimetres_f.nan.isNaN, Millimetres_f(Float.nan).isNaN)
        XCTAssertEqual(
            Millimetres_f.signalingNaN.isSignalingNaN,
            Millimetres_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Millimetres_f.infinity, Millimetres_f(Float.infinity))
        XCTAssertEqual(Millimetres_f.greatestFiniteMagnitude, Millimetres_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Millimetres_f.pi, Millimetres_f(Float.pi))
        XCTAssertEqual(Millimetres_f.leastNormalMagnitude, Millimetres_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Millimetres_f.leastNonzeroMagnitude, Millimetres_f(Float.leastNonzeroMagnitude))
    }

    func testMillimetres_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Millimetres_f(raw).ulp, Millimetres_f(raw.ulp))
    }

    func testMillimetres_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Millimetres_f(raw).sign, raw.sign)
    }

    func testMillimetres_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Millimetres_f(raw).significand, Millimetres_f(raw.significand))
    }

    func testMillimetres_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Millimetres_f(raw).nextUp, Millimetres_f(raw.nextUp))
    }

    func testMillimetres_fVars() {
        XCTAssertEqual(Millimetres_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Millimetres_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Millimetres_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Millimetres_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Millimetres_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Millimetres_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Millimetres_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Millimetres_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Millimetres_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Millimetres_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Millimetres_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Millimetres_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Millimetres_f(5).description, Float(5).description)
        XCTAssertEqual(Millimetres_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Millimetres_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Millimetres_f(5).exponent, Float(5).exponent)
    }

    func testMillimetres_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Millimetres_f(Float(4))
        result.formRemainder(dividingBy: Millimetres_f(denominator))
        XCTAssertEqual(result, Millimetres_f(original))
    }

    func testMillimetres_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Millimetres_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Millimetres_f(denominator))
        XCTAssertEqual(result, Millimetres_f(original))
    }

    func testMillimetres_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Millimetres_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Millimetres_f(original))
    }

    func testMillimetres_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Millimetres_f(Float(4))
        result.addProduct(Millimetres_f(lhs), Millimetres_f(rhs))
        XCTAssertEqual(result, Millimetres_f(original))
    }

    func testMillimetres_fIsEqual() {
        let this = Millimetres_f(5)
        let other = Millimetres_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMillimetres_fIsLess() {
        let this = Millimetres_f(5)
        let other = Millimetres_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMillimetres_fIsLessThanOrEqual() {
        let this = Millimetres_f(5)
        let other = Millimetres_f(6)
        let other2 = Millimetres_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMillimetres_fOperations() {
        let lhs = Millimetres_f(6)
        let rhs = Millimetres_f(3)
        XCTAssertEqual(lhs + rhs, Millimetres_f(9))
        XCTAssertEqual(lhs - rhs, Millimetres_f(3))
        XCTAssertEqual(lhs * rhs, Millimetres_f(18))
        XCTAssertEqual(lhs / rhs, Millimetres_f(2))
    }

    func testMillimetres_fTimesEqual() {
        var this = Millimetres_f(3)
        this *= Millimetres_f(4)
        XCTAssertEqual(this, Millimetres_f(12))
    }

    func testMillimetres_fDivideEqual() {
        var this = Millimetres_f(6)
        this /= Millimetres_f(3)
        XCTAssertEqual(this, Millimetres_f(2))
    }

    func testMillimetres_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Millimetres_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Millimetres_f(expected))
    }

    func testMillimetres_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Millimetres_f(original).distance(to: Millimetres_f(other)), expected)
    }

    func testMillimetres_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Millimetres_f(original).advanced(by: 3), Millimetres_f(expected))
    }

    func testMillimetres_dEquality() {
        XCTAssertEqual(Millimetres_d(5), Millimetres_d(5))
    }

    func testMillimetres_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Millimetres_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Millimetres_d.self, from: try encoder.encode(original))
        )
    }

    func testMillimetres_dSelfInit() {
        let expected = Millimetres_d(15)
        XCTAssertEqual(expected, Millimetres_d(expected))
    }

    func testMillimetres_dSelfExactlyInit() {
        let expected = Millimetres_d(15)
        XCTAssertEqual(expected, Millimetres_d(exactly: expected))
    }

    func testMillimetres_dComparable() {
        let lhs = Millimetres_d(1)
        let rhs = Millimetres_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMillimetres_dRadix() {
        XCTAssertEqual(Millimetres_d.radix, Double.radix)
    }

    func testMillimetres_dExponentBitCount() {
        XCTAssertEqual(Millimetres_d.exponentBitCount, Double.exponentBitCount)
    }

    func testMillimetres_dSignificandBitCount() {
        XCTAssertEqual(Millimetres_d.significandBitCount, Double.significandBitCount)
    }

    func testMillimetres_dMagnitude() {
        let expected = Millimetres_d(Double(5).magnitude)
        XCTAssertEqual(Millimetres_d(5).magnitude, expected)
    }

    func testMillimetres_dExactlyInit() {
        let expected = Millimetres_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Millimetres_d(exactly: Int(5)), expected)
    }

    func testMillimetres_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Millimetres_d(param).isTotallyOrdered(belowOrEqualTo: Millimetres_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMillimetres_dBinade() {
        let raw = Double(5)
        let expected = Millimetres_d(raw.binade)
        XCTAssertEqual(Millimetres_d(raw).binade, expected)
    }

    func testMillimetres_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Millimetres_d(raw).significandWidth, raw.significandWidth)
    }

    func testMillimetres_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Millimetres_d(raw).debugDescription, raw.debugDescription)
    }

    func testMillimetres_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Millimetres_d("5.0"), Millimetres_d(raw))
    }

    func testMillimetres_dStaticVars() {
        XCTAssertEqual(Millimetres_d.nan.isNaN, Millimetres_d(Double.nan).isNaN)
        XCTAssertEqual(
            Millimetres_d.signalingNaN.isSignalingNaN,
            Millimetres_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Millimetres_d.infinity, Millimetres_d(Double.infinity))
        XCTAssertEqual(Millimetres_d.greatestFiniteMagnitude, Millimetres_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Millimetres_d.pi, Millimetres_d(Double.pi))
        XCTAssertEqual(Millimetres_d.leastNormalMagnitude, Millimetres_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Millimetres_d.leastNonzeroMagnitude, Millimetres_d(Double.leastNonzeroMagnitude))
    }

    func testMillimetres_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Millimetres_d(raw).ulp, Millimetres_d(raw.ulp))
    }

    func testMillimetres_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Millimetres_d(raw).sign, raw.sign)
    }

    func testMillimetres_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Millimetres_d(raw).significand, Millimetres_d(raw.significand))
    }

    func testMillimetres_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Millimetres_d(raw).nextUp, Millimetres_d(raw.nextUp))
    }

    func testMillimetres_dVars() {
        XCTAssertEqual(Millimetres_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Millimetres_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Millimetres_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Millimetres_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Millimetres_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Millimetres_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Millimetres_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Millimetres_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Millimetres_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Millimetres_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Millimetres_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Millimetres_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Millimetres_d(5).description, Double(5).description)
        XCTAssertEqual(Millimetres_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Millimetres_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Millimetres_d(5).exponent, Double(5).exponent)
    }

    func testMillimetres_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Millimetres_d(Double(4))
        result.formRemainder(dividingBy: Millimetres_d(denominator))
        XCTAssertEqual(result, Millimetres_d(original))
    }

    func testMillimetres_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Millimetres_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Millimetres_d(denominator))
        XCTAssertEqual(result, Millimetres_d(original))
    }

    func testMillimetres_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Millimetres_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Millimetres_d(original))
    }

    func testMillimetres_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Millimetres_d(Double(4))
        result.addProduct(Millimetres_d(lhs), Millimetres_d(rhs))
        XCTAssertEqual(result, Millimetres_d(original))
    }

    func testMillimetres_dIsEqual() {
        let this = Millimetres_d(5)
        let other = Millimetres_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMillimetres_dIsLess() {
        let this = Millimetres_d(5)
        let other = Millimetres_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMillimetres_dIsLessThanOrEqual() {
        let this = Millimetres_d(5)
        let other = Millimetres_d(6)
        let other2 = Millimetres_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMillimetres_dOperations() {
        let lhs = Millimetres_d(6)
        let rhs = Millimetres_d(3)
        XCTAssertEqual(lhs + rhs, Millimetres_d(9))
        XCTAssertEqual(lhs - rhs, Millimetres_d(3))
        XCTAssertEqual(lhs * rhs, Millimetres_d(18))
        XCTAssertEqual(lhs / rhs, Millimetres_d(2))
    }

    func testMillimetres_dTimesEqual() {
        var this = Millimetres_d(3)
        this *= Millimetres_d(4)
        XCTAssertEqual(this, Millimetres_d(12))
    }

    func testMillimetres_dDivideEqual() {
        var this = Millimetres_d(6)
        this /= Millimetres_d(3)
        XCTAssertEqual(this, Millimetres_d(2))
    }

    func testMillimetres_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Millimetres_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Millimetres_d(expected))
    }

    func testMillimetres_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Millimetres_d(original).distance(to: Millimetres_d(other)), expected)
    }

    func testMillimetres_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Millimetres_d(original).advanced(by: 3), Millimetres_d(expected))
    }

}

final class CentimetresTypeTests: XCTestCase {

    func testCentimetres_tEquality() {
        XCTAssertEqual(Centimetres_t(5), Centimetres_t(5))
    }

    func testCentimetres_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Centimetres_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Centimetres_t.self, from: try encoder.encode(original))
        )
    }

    func testCentimetres_tSelfInit() {
        let expected = Centimetres_t(15)
        XCTAssertEqual(expected, Centimetres_t(expected))
    }

    func testCentimetres_tSelfExactlyInit() {
        let expected = Centimetres_t(15)
        XCTAssertEqual(expected, Centimetres_t(exactly: expected))
    }

    func testCentimetres_tComparable() {
        let lhs = Centimetres_t(1)
        let rhs = Centimetres_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCentimetres_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Centimetres_t(5).magnitude, expected)
    }

    func testCentimetres_tTruncatingInit() {
        let expected = Centimetres_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Centimetres_t(truncatingIfNeeded: expected), expected)
    }

    func testCentimetres_tClampingInit() {
        let expected = Centimetres_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Centimetres_t(clamping: expected), expected)
    }

    func testCentimetres_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Centimetres_t(5).bitWidth, expected)
    }

    func testCentimetres_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Centimetres_t(5).leadingZeroBitCount, expected)
    }

    func testCentimetres_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Centimetres_t(5).nonzeroBitCount, expected)
    }

    func testCentimetres_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Centimetres_t(expected), Centimetres_t(integerLiteral: CInt.max))
    }

    func testCentimetres_tTruncatingBits() {
        let expected = Centimetres_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Centimetres_t(_truncatingBits: UInt.max))
    }

    func testCentimetres_tAddition() {
        let expected = Centimetres_t(CInt(5) + CInt(3))
        XCTAssertEqual(Centimetres_t(5) + Centimetres_t(3), expected)
    }

    func testCentimetres_tSubtraction() {
        let expected = Centimetres_t(CInt(5) - CInt(3))
        XCTAssertEqual(Centimetres_t(5) - Centimetres_t(3), expected)
    }

    func testCentimetres_tMultiplication() {
        let expected = Centimetres_t(CInt(5) * CInt(3))
        XCTAssertEqual(Centimetres_t(5) * Centimetres_t(3), expected)
    }

    func testCentimetres_tDivision() {
        let expected = Centimetres_t(CInt(6) / CInt(3))
        XCTAssertEqual(Centimetres_t(6) / Centimetres_t(3), expected)
    }

    func testCentimetres_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Centimetres_t(rawOriginal)
        let result = original.addingReportingOverflow(Centimetres_t(1))
        XCTAssertEqual(result.0, Centimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCentimetres_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Centimetres_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Centimetres_t(2))
        XCTAssertEqual(result.0, Centimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCentimetres_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Centimetres_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Centimetres_t(1))
        XCTAssertEqual(result.0, Centimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCentimetres_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Centimetres_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Centimetres_t(CInt.max))
        XCTAssertEqual(result.0, Centimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCentimetres_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Centimetres_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Centimetres_t(CInt.max))
        XCTAssertEqual(result.0, Centimetres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCentimetres_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Centimetres_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testCentimetres_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Centimetres_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Centimetres_t(original))
    }

    func testCentimetres_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Centimetres_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Centimetres_t(original))
    }

    func testCentimetres_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Centimetres_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Centimetres_t(original))
    }

    func testCentimetres_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Centimetres_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Centimetres_t(original))
    }

    func testCentimetres_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Centimetres_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Centimetres_t(original))
    }

    func testCentimetres_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Centimetres_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Centimetres_t(original))
    }

    func testCentimetres_tMod() {
        let original = CInt(4)
        let expected = Centimetres_t(original % 2)
        XCTAssertEqual(Centimetres_t(original) % 2, expected)
    }

    func testCentimetres_uEquality() {
        XCTAssertEqual(Centimetres_u(5), Centimetres_u(5))
    }

    func testCentimetres_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Centimetres_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Centimetres_u.self, from: try encoder.encode(original))
        )
    }

    func testCentimetres_uSelfInit() {
        let expected = Centimetres_u(15)
        XCTAssertEqual(expected, Centimetres_u(expected))
    }

    func testCentimetres_uSelfExactlyInit() {
        let expected = Centimetres_u(15)
        XCTAssertEqual(expected, Centimetres_u(exactly: expected))
    }

    func testCentimetres_uComparable() {
        let lhs = Centimetres_u(1)
        let rhs = Centimetres_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCentimetres_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Centimetres_u(5).magnitude, expected)
    }

    func testCentimetres_uTruncatingInit() {
        let expected = Centimetres_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Centimetres_u(truncatingIfNeeded: expected), expected)
    }

    func testCentimetres_uClampingInit() {
        let expected = Centimetres_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Centimetres_u(clamping: expected), expected)
    }

    func testCentimetres_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Centimetres_u(5).bitWidth, expected)
    }

    func testCentimetres_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Centimetres_u(5).leadingZeroBitCount, expected)
    }

    func testCentimetres_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Centimetres_u(5).nonzeroBitCount, expected)
    }

    func testCentimetres_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Centimetres_u(expected), Centimetres_u(integerLiteral: CUnsignedInt.max))
    }

    func testCentimetres_uTruncatingBits() {
        let expected = Centimetres_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Centimetres_u(_truncatingBits: UInt.max))
    }

    func testCentimetres_uAddition() {
        let expected = Centimetres_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Centimetres_u(5) + Centimetres_u(3), expected)
    }

    func testCentimetres_uSubtraction() {
        let expected = Centimetres_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Centimetres_u(5) - Centimetres_u(3), expected)
    }

    func testCentimetres_uMultiplication() {
        let expected = Centimetres_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Centimetres_u(5) * Centimetres_u(3), expected)
    }

    func testCentimetres_uDivision() {
        let expected = Centimetres_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Centimetres_u(6) / Centimetres_u(3), expected)
    }

    func testCentimetres_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Centimetres_u(rawOriginal)
        let result = original.addingReportingOverflow(Centimetres_u(1))
        XCTAssertEqual(result.0, Centimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCentimetres_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Centimetres_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Centimetres_u(2))
        XCTAssertEqual(result.0, Centimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCentimetres_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Centimetres_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Centimetres_u(1))
        XCTAssertEqual(result.0, Centimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testCentimetres_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Centimetres_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Centimetres_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Centimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCentimetres_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Centimetres_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Centimetres_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Centimetres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testCentimetres_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Centimetres_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testCentimetres_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Centimetres_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Centimetres_u(original))
    }

    func testCentimetres_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Centimetres_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Centimetres_u(original))
    }

    func testCentimetres_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Centimetres_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Centimetres_u(original))
    }

    func testCentimetres_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Centimetres_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Centimetres_u(original))
    }

    func testCentimetres_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Centimetres_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Centimetres_u(original))
    }

    func testCentimetres_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Centimetres_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Centimetres_u(original))
    }

    func testCentimetres_uMod() {
        let original = CUnsignedInt(4)
        let expected = Centimetres_u(original % 2)
        XCTAssertEqual(Centimetres_u(original) % 2, expected)
    }

    func testCentimetres_fEquality() {
        XCTAssertEqual(Centimetres_f(5), Centimetres_f(5))
    }

    func testCentimetres_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Centimetres_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Centimetres_f.self, from: try encoder.encode(original))
        )
    }

    func testCentimetres_fSelfInit() {
        let expected = Centimetres_f(15)
        XCTAssertEqual(expected, Centimetres_f(expected))
    }

    func testCentimetres_fSelfExactlyInit() {
        let expected = Centimetres_f(15)
        XCTAssertEqual(expected, Centimetres_f(exactly: expected))
    }

    func testCentimetres_fComparable() {
        let lhs = Centimetres_f(1)
        let rhs = Centimetres_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCentimetres_fRadix() {
        XCTAssertEqual(Centimetres_f.radix, Float.radix)
    }

    func testCentimetres_fExponentBitCount() {
        XCTAssertEqual(Centimetres_f.exponentBitCount, Float.exponentBitCount)
    }

    func testCentimetres_fSignificandBitCount() {
        XCTAssertEqual(Centimetres_f.significandBitCount, Float.significandBitCount)
    }

    func testCentimetres_fMagnitude() {
        let expected = Centimetres_f(Float(5).magnitude)
        XCTAssertEqual(Centimetres_f(5).magnitude, expected)
    }

    func testCentimetres_fExactlyInit() {
        let expected = Centimetres_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Centimetres_f(exactly: Int(5)), expected)
    }

    func testCentimetres_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Centimetres_f(param).isTotallyOrdered(belowOrEqualTo: Centimetres_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testCentimetres_fBinade() {
        let raw = Float(5)
        let expected = Centimetres_f(raw.binade)
        XCTAssertEqual(Centimetres_f(raw).binade, expected)
    }

    func testCentimetres_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Centimetres_f(raw).significandWidth, raw.significandWidth)
    }

    func testCentimetres_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Centimetres_f(raw).debugDescription, raw.debugDescription)
    }

    func testCentimetres_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Centimetres_f("5.0"), Centimetres_f(raw))
    }

    func testCentimetres_fStaticVars() {
        XCTAssertEqual(Centimetres_f.nan.isNaN, Centimetres_f(Float.nan).isNaN)
        XCTAssertEqual(
            Centimetres_f.signalingNaN.isSignalingNaN,
            Centimetres_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Centimetres_f.infinity, Centimetres_f(Float.infinity))
        XCTAssertEqual(Centimetres_f.greatestFiniteMagnitude, Centimetres_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Centimetres_f.pi, Centimetres_f(Float.pi))
        XCTAssertEqual(Centimetres_f.leastNormalMagnitude, Centimetres_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Centimetres_f.leastNonzeroMagnitude, Centimetres_f(Float.leastNonzeroMagnitude))
    }

    func testCentimetres_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Centimetres_f(raw).ulp, Centimetres_f(raw.ulp))
    }

    func testCentimetres_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Centimetres_f(raw).sign, raw.sign)
    }

    func testCentimetres_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Centimetres_f(raw).significand, Centimetres_f(raw.significand))
    }

    func testCentimetres_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Centimetres_f(raw).nextUp, Centimetres_f(raw.nextUp))
    }

    func testCentimetres_fVars() {
        XCTAssertEqual(Centimetres_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Centimetres_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Centimetres_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Centimetres_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Centimetres_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Centimetres_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Centimetres_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Centimetres_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Centimetres_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Centimetres_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Centimetres_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Centimetres_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Centimetres_f(5).description, Float(5).description)
        XCTAssertEqual(Centimetres_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Centimetres_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Centimetres_f(5).exponent, Float(5).exponent)
    }

    func testCentimetres_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Centimetres_f(Float(4))
        result.formRemainder(dividingBy: Centimetres_f(denominator))
        XCTAssertEqual(result, Centimetres_f(original))
    }

    func testCentimetres_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Centimetres_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Centimetres_f(denominator))
        XCTAssertEqual(result, Centimetres_f(original))
    }

    func testCentimetres_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Centimetres_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Centimetres_f(original))
    }

    func testCentimetres_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Centimetres_f(Float(4))
        result.addProduct(Centimetres_f(lhs), Centimetres_f(rhs))
        XCTAssertEqual(result, Centimetres_f(original))
    }

    func testCentimetres_fIsEqual() {
        let this = Centimetres_f(5)
        let other = Centimetres_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testCentimetres_fIsLess() {
        let this = Centimetres_f(5)
        let other = Centimetres_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testCentimetres_fIsLessThanOrEqual() {
        let this = Centimetres_f(5)
        let other = Centimetres_f(6)
        let other2 = Centimetres_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testCentimetres_fOperations() {
        let lhs = Centimetres_f(6)
        let rhs = Centimetres_f(3)
        XCTAssertEqual(lhs + rhs, Centimetres_f(9))
        XCTAssertEqual(lhs - rhs, Centimetres_f(3))
        XCTAssertEqual(lhs * rhs, Centimetres_f(18))
        XCTAssertEqual(lhs / rhs, Centimetres_f(2))
    }

    func testCentimetres_fTimesEqual() {
        var this = Centimetres_f(3)
        this *= Centimetres_f(4)
        XCTAssertEqual(this, Centimetres_f(12))
    }

    func testCentimetres_fDivideEqual() {
        var this = Centimetres_f(6)
        this /= Centimetres_f(3)
        XCTAssertEqual(this, Centimetres_f(2))
    }

    func testCentimetres_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Centimetres_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Centimetres_f(expected))
    }

    func testCentimetres_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Centimetres_f(original).distance(to: Centimetres_f(other)), expected)
    }

    func testCentimetres_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Centimetres_f(original).advanced(by: 3), Centimetres_f(expected))
    }

    func testCentimetres_dEquality() {
        XCTAssertEqual(Centimetres_d(5), Centimetres_d(5))
    }

    func testCentimetres_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Centimetres_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Centimetres_d.self, from: try encoder.encode(original))
        )
    }

    func testCentimetres_dSelfInit() {
        let expected = Centimetres_d(15)
        XCTAssertEqual(expected, Centimetres_d(expected))
    }

    func testCentimetres_dSelfExactlyInit() {
        let expected = Centimetres_d(15)
        XCTAssertEqual(expected, Centimetres_d(exactly: expected))
    }

    func testCentimetres_dComparable() {
        let lhs = Centimetres_d(1)
        let rhs = Centimetres_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testCentimetres_dRadix() {
        XCTAssertEqual(Centimetres_d.radix, Double.radix)
    }

    func testCentimetres_dExponentBitCount() {
        XCTAssertEqual(Centimetres_d.exponentBitCount, Double.exponentBitCount)
    }

    func testCentimetres_dSignificandBitCount() {
        XCTAssertEqual(Centimetres_d.significandBitCount, Double.significandBitCount)
    }

    func testCentimetres_dMagnitude() {
        let expected = Centimetres_d(Double(5).magnitude)
        XCTAssertEqual(Centimetres_d(5).magnitude, expected)
    }

    func testCentimetres_dExactlyInit() {
        let expected = Centimetres_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Centimetres_d(exactly: Int(5)), expected)
    }

    func testCentimetres_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Centimetres_d(param).isTotallyOrdered(belowOrEqualTo: Centimetres_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testCentimetres_dBinade() {
        let raw = Double(5)
        let expected = Centimetres_d(raw.binade)
        XCTAssertEqual(Centimetres_d(raw).binade, expected)
    }

    func testCentimetres_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Centimetres_d(raw).significandWidth, raw.significandWidth)
    }

    func testCentimetres_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Centimetres_d(raw).debugDescription, raw.debugDescription)
    }

    func testCentimetres_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Centimetres_d("5.0"), Centimetres_d(raw))
    }

    func testCentimetres_dStaticVars() {
        XCTAssertEqual(Centimetres_d.nan.isNaN, Centimetres_d(Double.nan).isNaN)
        XCTAssertEqual(
            Centimetres_d.signalingNaN.isSignalingNaN,
            Centimetres_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Centimetres_d.infinity, Centimetres_d(Double.infinity))
        XCTAssertEqual(Centimetres_d.greatestFiniteMagnitude, Centimetres_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Centimetres_d.pi, Centimetres_d(Double.pi))
        XCTAssertEqual(Centimetres_d.leastNormalMagnitude, Centimetres_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Centimetres_d.leastNonzeroMagnitude, Centimetres_d(Double.leastNonzeroMagnitude))
    }

    func testCentimetres_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Centimetres_d(raw).ulp, Centimetres_d(raw.ulp))
    }

    func testCentimetres_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Centimetres_d(raw).sign, raw.sign)
    }

    func testCentimetres_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Centimetres_d(raw).significand, Centimetres_d(raw.significand))
    }

    func testCentimetres_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Centimetres_d(raw).nextUp, Centimetres_d(raw.nextUp))
    }

    func testCentimetres_dVars() {
        XCTAssertEqual(Centimetres_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Centimetres_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Centimetres_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Centimetres_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Centimetres_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Centimetres_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Centimetres_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Centimetres_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Centimetres_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Centimetres_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Centimetres_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Centimetres_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Centimetres_d(5).description, Double(5).description)
        XCTAssertEqual(Centimetres_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Centimetres_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Centimetres_d(5).exponent, Double(5).exponent)
    }

    func testCentimetres_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Centimetres_d(Double(4))
        result.formRemainder(dividingBy: Centimetres_d(denominator))
        XCTAssertEqual(result, Centimetres_d(original))
    }

    func testCentimetres_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Centimetres_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Centimetres_d(denominator))
        XCTAssertEqual(result, Centimetres_d(original))
    }

    func testCentimetres_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Centimetres_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Centimetres_d(original))
    }

    func testCentimetres_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Centimetres_d(Double(4))
        result.addProduct(Centimetres_d(lhs), Centimetres_d(rhs))
        XCTAssertEqual(result, Centimetres_d(original))
    }

    func testCentimetres_dIsEqual() {
        let this = Centimetres_d(5)
        let other = Centimetres_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testCentimetres_dIsLess() {
        let this = Centimetres_d(5)
        let other = Centimetres_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testCentimetres_dIsLessThanOrEqual() {
        let this = Centimetres_d(5)
        let other = Centimetres_d(6)
        let other2 = Centimetres_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testCentimetres_dOperations() {
        let lhs = Centimetres_d(6)
        let rhs = Centimetres_d(3)
        XCTAssertEqual(lhs + rhs, Centimetres_d(9))
        XCTAssertEqual(lhs - rhs, Centimetres_d(3))
        XCTAssertEqual(lhs * rhs, Centimetres_d(18))
        XCTAssertEqual(lhs / rhs, Centimetres_d(2))
    }

    func testCentimetres_dTimesEqual() {
        var this = Centimetres_d(3)
        this *= Centimetres_d(4)
        XCTAssertEqual(this, Centimetres_d(12))
    }

    func testCentimetres_dDivideEqual() {
        var this = Centimetres_d(6)
        this /= Centimetres_d(3)
        XCTAssertEqual(this, Centimetres_d(2))
    }

    func testCentimetres_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Centimetres_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Centimetres_d(expected))
    }

    func testCentimetres_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Centimetres_d(original).distance(to: Centimetres_d(other)), expected)
    }

    func testCentimetres_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Centimetres_d(original).advanced(by: 3), Centimetres_d(expected))
    }

}

final class MetresTypeTests: XCTestCase {

    func testMetres_tEquality() {
        XCTAssertEqual(Metres_t(5), Metres_t(5))
    }

    func testMetres_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Metres_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Metres_t.self, from: try encoder.encode(original))
        )
    }

    func testMetres_tSelfInit() {
        let expected = Metres_t(15)
        XCTAssertEqual(expected, Metres_t(expected))
    }

    func testMetres_tSelfExactlyInit() {
        let expected = Metres_t(15)
        XCTAssertEqual(expected, Metres_t(exactly: expected))
    }

    func testMetres_tComparable() {
        let lhs = Metres_t(1)
        let rhs = Metres_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMetres_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Metres_t(5).magnitude, expected)
    }

    func testMetres_tTruncatingInit() {
        let expected = Metres_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Metres_t(truncatingIfNeeded: expected), expected)
    }

    func testMetres_tClampingInit() {
        let expected = Metres_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Metres_t(clamping: expected), expected)
    }

    func testMetres_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Metres_t(5).bitWidth, expected)
    }

    func testMetres_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Metres_t(5).leadingZeroBitCount, expected)
    }

    func testMetres_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Metres_t(5).nonzeroBitCount, expected)
    }

    func testMetres_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Metres_t(expected), Metres_t(integerLiteral: CInt.max))
    }

    func testMetres_tTruncatingBits() {
        let expected = Metres_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Metres_t(_truncatingBits: UInt.max))
    }

    func testMetres_tAddition() {
        let expected = Metres_t(CInt(5) + CInt(3))
        XCTAssertEqual(Metres_t(5) + Metres_t(3), expected)
    }

    func testMetres_tSubtraction() {
        let expected = Metres_t(CInt(5) - CInt(3))
        XCTAssertEqual(Metres_t(5) - Metres_t(3), expected)
    }

    func testMetres_tMultiplication() {
        let expected = Metres_t(CInt(5) * CInt(3))
        XCTAssertEqual(Metres_t(5) * Metres_t(3), expected)
    }

    func testMetres_tDivision() {
        let expected = Metres_t(CInt(6) / CInt(3))
        XCTAssertEqual(Metres_t(6) / Metres_t(3), expected)
    }

    func testMetres_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Metres_t(rawOriginal)
        let result = original.addingReportingOverflow(Metres_t(1))
        XCTAssertEqual(result.0, Metres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMetres_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Metres_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Metres_t(2))
        XCTAssertEqual(result.0, Metres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMetres_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Metres_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Metres_t(1))
        XCTAssertEqual(result.0, Metres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMetres_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Metres_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Metres_t(CInt.max))
        XCTAssertEqual(result.0, Metres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMetres_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Metres_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Metres_t(CInt.max))
        XCTAssertEqual(result.0, Metres_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMetres_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Metres_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMetres_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Metres_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Metres_t(original))
    }

    func testMetres_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Metres_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Metres_t(original))
    }

    func testMetres_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Metres_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Metres_t(original))
    }

    func testMetres_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Metres_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Metres_t(original))
    }

    func testMetres_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Metres_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Metres_t(original))
    }

    func testMetres_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Metres_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Metres_t(original))
    }

    func testMetres_tMod() {
        let original = CInt(4)
        let expected = Metres_t(original % 2)
        XCTAssertEqual(Metres_t(original) % 2, expected)
    }

    func testMetres_uEquality() {
        XCTAssertEqual(Metres_u(5), Metres_u(5))
    }

    func testMetres_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Metres_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Metres_u.self, from: try encoder.encode(original))
        )
    }

    func testMetres_uSelfInit() {
        let expected = Metres_u(15)
        XCTAssertEqual(expected, Metres_u(expected))
    }

    func testMetres_uSelfExactlyInit() {
        let expected = Metres_u(15)
        XCTAssertEqual(expected, Metres_u(exactly: expected))
    }

    func testMetres_uComparable() {
        let lhs = Metres_u(1)
        let rhs = Metres_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMetres_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Metres_u(5).magnitude, expected)
    }

    func testMetres_uTruncatingInit() {
        let expected = Metres_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Metres_u(truncatingIfNeeded: expected), expected)
    }

    func testMetres_uClampingInit() {
        let expected = Metres_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Metres_u(clamping: expected), expected)
    }

    func testMetres_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Metres_u(5).bitWidth, expected)
    }

    func testMetres_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Metres_u(5).leadingZeroBitCount, expected)
    }

    func testMetres_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Metres_u(5).nonzeroBitCount, expected)
    }

    func testMetres_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Metres_u(expected), Metres_u(integerLiteral: CUnsignedInt.max))
    }

    func testMetres_uTruncatingBits() {
        let expected = Metres_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Metres_u(_truncatingBits: UInt.max))
    }

    func testMetres_uAddition() {
        let expected = Metres_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Metres_u(5) + Metres_u(3), expected)
    }

    func testMetres_uSubtraction() {
        let expected = Metres_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Metres_u(5) - Metres_u(3), expected)
    }

    func testMetres_uMultiplication() {
        let expected = Metres_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Metres_u(5) * Metres_u(3), expected)
    }

    func testMetres_uDivision() {
        let expected = Metres_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Metres_u(6) / Metres_u(3), expected)
    }

    func testMetres_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Metres_u(rawOriginal)
        let result = original.addingReportingOverflow(Metres_u(1))
        XCTAssertEqual(result.0, Metres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMetres_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Metres_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Metres_u(2))
        XCTAssertEqual(result.0, Metres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMetres_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Metres_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Metres_u(1))
        XCTAssertEqual(result.0, Metres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMetres_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Metres_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Metres_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Metres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMetres_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Metres_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Metres_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Metres_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMetres_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Metres_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMetres_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Metres_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Metres_u(original))
    }

    func testMetres_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Metres_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Metres_u(original))
    }

    func testMetres_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Metres_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Metres_u(original))
    }

    func testMetres_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Metres_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Metres_u(original))
    }

    func testMetres_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Metres_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Metres_u(original))
    }

    func testMetres_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Metres_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Metres_u(original))
    }

    func testMetres_uMod() {
        let original = CUnsignedInt(4)
        let expected = Metres_u(original % 2)
        XCTAssertEqual(Metres_u(original) % 2, expected)
    }

    func testMetres_fEquality() {
        XCTAssertEqual(Metres_f(5), Metres_f(5))
    }

    func testMetres_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Metres_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Metres_f.self, from: try encoder.encode(original))
        )
    }

    func testMetres_fSelfInit() {
        let expected = Metres_f(15)
        XCTAssertEqual(expected, Metres_f(expected))
    }

    func testMetres_fSelfExactlyInit() {
        let expected = Metres_f(15)
        XCTAssertEqual(expected, Metres_f(exactly: expected))
    }

    func testMetres_fComparable() {
        let lhs = Metres_f(1)
        let rhs = Metres_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMetres_fRadix() {
        XCTAssertEqual(Metres_f.radix, Float.radix)
    }

    func testMetres_fExponentBitCount() {
        XCTAssertEqual(Metres_f.exponentBitCount, Float.exponentBitCount)
    }

    func testMetres_fSignificandBitCount() {
        XCTAssertEqual(Metres_f.significandBitCount, Float.significandBitCount)
    }

    func testMetres_fMagnitude() {
        let expected = Metres_f(Float(5).magnitude)
        XCTAssertEqual(Metres_f(5).magnitude, expected)
    }

    func testMetres_fExactlyInit() {
        let expected = Metres_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Metres_f(exactly: Int(5)), expected)
    }

    func testMetres_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Metres_f(param).isTotallyOrdered(belowOrEqualTo: Metres_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMetres_fBinade() {
        let raw = Float(5)
        let expected = Metres_f(raw.binade)
        XCTAssertEqual(Metres_f(raw).binade, expected)
    }

    func testMetres_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Metres_f(raw).significandWidth, raw.significandWidth)
    }

    func testMetres_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Metres_f(raw).debugDescription, raw.debugDescription)
    }

    func testMetres_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Metres_f("5.0"), Metres_f(raw))
    }

    func testMetres_fStaticVars() {
        XCTAssertEqual(Metres_f.nan.isNaN, Metres_f(Float.nan).isNaN)
        XCTAssertEqual(
            Metres_f.signalingNaN.isSignalingNaN,
            Metres_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Metres_f.infinity, Metres_f(Float.infinity))
        XCTAssertEqual(Metres_f.greatestFiniteMagnitude, Metres_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Metres_f.pi, Metres_f(Float.pi))
        XCTAssertEqual(Metres_f.leastNormalMagnitude, Metres_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Metres_f.leastNonzeroMagnitude, Metres_f(Float.leastNonzeroMagnitude))
    }

    func testMetres_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Metres_f(raw).ulp, Metres_f(raw.ulp))
    }

    func testMetres_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Metres_f(raw).sign, raw.sign)
    }

    func testMetres_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Metres_f(raw).significand, Metres_f(raw.significand))
    }

    func testMetres_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Metres_f(raw).nextUp, Metres_f(raw.nextUp))
    }

    func testMetres_fVars() {
        XCTAssertEqual(Metres_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Metres_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Metres_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Metres_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Metres_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Metres_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Metres_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Metres_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Metres_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Metres_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Metres_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Metres_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Metres_f(5).description, Float(5).description)
        XCTAssertEqual(Metres_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Metres_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Metres_f(5).exponent, Float(5).exponent)
    }

    func testMetres_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Metres_f(Float(4))
        result.formRemainder(dividingBy: Metres_f(denominator))
        XCTAssertEqual(result, Metres_f(original))
    }

    func testMetres_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Metres_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Metres_f(denominator))
        XCTAssertEqual(result, Metres_f(original))
    }

    func testMetres_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Metres_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Metres_f(original))
    }

    func testMetres_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Metres_f(Float(4))
        result.addProduct(Metres_f(lhs), Metres_f(rhs))
        XCTAssertEqual(result, Metres_f(original))
    }

    func testMetres_fIsEqual() {
        let this = Metres_f(5)
        let other = Metres_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMetres_fIsLess() {
        let this = Metres_f(5)
        let other = Metres_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMetres_fIsLessThanOrEqual() {
        let this = Metres_f(5)
        let other = Metres_f(6)
        let other2 = Metres_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMetres_fOperations() {
        let lhs = Metres_f(6)
        let rhs = Metres_f(3)
        XCTAssertEqual(lhs + rhs, Metres_f(9))
        XCTAssertEqual(lhs - rhs, Metres_f(3))
        XCTAssertEqual(lhs * rhs, Metres_f(18))
        XCTAssertEqual(lhs / rhs, Metres_f(2))
    }

    func testMetres_fTimesEqual() {
        var this = Metres_f(3)
        this *= Metres_f(4)
        XCTAssertEqual(this, Metres_f(12))
    }

    func testMetres_fDivideEqual() {
        var this = Metres_f(6)
        this /= Metres_f(3)
        XCTAssertEqual(this, Metres_f(2))
    }

    func testMetres_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Metres_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Metres_f(expected))
    }

    func testMetres_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Metres_f(original).distance(to: Metres_f(other)), expected)
    }

    func testMetres_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Metres_f(original).advanced(by: 3), Metres_f(expected))
    }

    func testMetres_dEquality() {
        XCTAssertEqual(Metres_d(5), Metres_d(5))
    }

    func testMetres_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Metres_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Metres_d.self, from: try encoder.encode(original))
        )
    }

    func testMetres_dSelfInit() {
        let expected = Metres_d(15)
        XCTAssertEqual(expected, Metres_d(expected))
    }

    func testMetres_dSelfExactlyInit() {
        let expected = Metres_d(15)
        XCTAssertEqual(expected, Metres_d(exactly: expected))
    }

    func testMetres_dComparable() {
        let lhs = Metres_d(1)
        let rhs = Metres_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMetres_dRadix() {
        XCTAssertEqual(Metres_d.radix, Double.radix)
    }

    func testMetres_dExponentBitCount() {
        XCTAssertEqual(Metres_d.exponentBitCount, Double.exponentBitCount)
    }

    func testMetres_dSignificandBitCount() {
        XCTAssertEqual(Metres_d.significandBitCount, Double.significandBitCount)
    }

    func testMetres_dMagnitude() {
        let expected = Metres_d(Double(5).magnitude)
        XCTAssertEqual(Metres_d(5).magnitude, expected)
    }

    func testMetres_dExactlyInit() {
        let expected = Metres_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Metres_d(exactly: Int(5)), expected)
    }

    func testMetres_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Metres_d(param).isTotallyOrdered(belowOrEqualTo: Metres_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMetres_dBinade() {
        let raw = Double(5)
        let expected = Metres_d(raw.binade)
        XCTAssertEqual(Metres_d(raw).binade, expected)
    }

    func testMetres_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Metres_d(raw).significandWidth, raw.significandWidth)
    }

    func testMetres_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Metres_d(raw).debugDescription, raw.debugDescription)
    }

    func testMetres_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Metres_d("5.0"), Metres_d(raw))
    }

    func testMetres_dStaticVars() {
        XCTAssertEqual(Metres_d.nan.isNaN, Metres_d(Double.nan).isNaN)
        XCTAssertEqual(
            Metres_d.signalingNaN.isSignalingNaN,
            Metres_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Metres_d.infinity, Metres_d(Double.infinity))
        XCTAssertEqual(Metres_d.greatestFiniteMagnitude, Metres_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Metres_d.pi, Metres_d(Double.pi))
        XCTAssertEqual(Metres_d.leastNormalMagnitude, Metres_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Metres_d.leastNonzeroMagnitude, Metres_d(Double.leastNonzeroMagnitude))
    }

    func testMetres_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Metres_d(raw).ulp, Metres_d(raw.ulp))
    }

    func testMetres_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Metres_d(raw).sign, raw.sign)
    }

    func testMetres_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Metres_d(raw).significand, Metres_d(raw.significand))
    }

    func testMetres_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Metres_d(raw).nextUp, Metres_d(raw.nextUp))
    }

    func testMetres_dVars() {
        XCTAssertEqual(Metres_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Metres_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Metres_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Metres_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Metres_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Metres_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Metres_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Metres_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Metres_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Metres_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Metres_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Metres_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Metres_d(5).description, Double(5).description)
        XCTAssertEqual(Metres_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Metres_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Metres_d(5).exponent, Double(5).exponent)
    }

    func testMetres_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Metres_d(Double(4))
        result.formRemainder(dividingBy: Metres_d(denominator))
        XCTAssertEqual(result, Metres_d(original))
    }

    func testMetres_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Metres_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Metres_d(denominator))
        XCTAssertEqual(result, Metres_d(original))
    }

    func testMetres_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Metres_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Metres_d(original))
    }

    func testMetres_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Metres_d(Double(4))
        result.addProduct(Metres_d(lhs), Metres_d(rhs))
        XCTAssertEqual(result, Metres_d(original))
    }

    func testMetres_dIsEqual() {
        let this = Metres_d(5)
        let other = Metres_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMetres_dIsLess() {
        let this = Metres_d(5)
        let other = Metres_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMetres_dIsLessThanOrEqual() {
        let this = Metres_d(5)
        let other = Metres_d(6)
        let other2 = Metres_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMetres_dOperations() {
        let lhs = Metres_d(6)
        let rhs = Metres_d(3)
        XCTAssertEqual(lhs + rhs, Metres_d(9))
        XCTAssertEqual(lhs - rhs, Metres_d(3))
        XCTAssertEqual(lhs * rhs, Metres_d(18))
        XCTAssertEqual(lhs / rhs, Metres_d(2))
    }

    func testMetres_dTimesEqual() {
        var this = Metres_d(3)
        this *= Metres_d(4)
        XCTAssertEqual(this, Metres_d(12))
    }

    func testMetres_dDivideEqual() {
        var this = Metres_d(6)
        this /= Metres_d(3)
        XCTAssertEqual(this, Metres_d(2))
    }

    func testMetres_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Metres_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Metres_d(expected))
    }

    func testMetres_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Metres_d(original).distance(to: Metres_d(other)), expected)
    }

    func testMetres_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Metres_d(original).advanced(by: 3), Metres_d(expected))
    }

}

final class MillimetresConversionTests: XCTestCase {

    func testMillimetres_tToMillimetres_uDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testMillimetres_tToMillimetres_fDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testMillimetres_tToMillimetres_dDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testMillimetres_tToCentimetres_tDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMillimetres_tToCentimetres_uDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMillimetres_tToCentimetres_fDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMillimetres_tToCentimetres_dDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMillimetres_tToMetres_tDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testMillimetres_tToMetres_uDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testMillimetres_tToMetres_fDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testMillimetres_tToMetres_dDistanceConversions() {
        let original = Millimetres_t(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToMillimetres_tConversions() {
        let ctype1 = millimetres_t(5)
        let swiftType1 = Millimetres_t(rawValue: ctype1)
        let ctype2 = mm_t_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testMillimetres_tInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.millimetres_t(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMillimetres_tInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mm_t(5)
        let expected2 = Int8(
            mm_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mm_t_to_i8(ctype))
        )
    }

    func testMillimetres_tInt8RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_i8(raw)
        let expected = Millimetres_t(Int8(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceInt8Init() {
        let raw = Millimetres_t(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mm_t(5)
        let expected2 = Int16(
            mm_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mm_t_to_i16(ctype))
        )
    }

    func testMillimetres_tInt16RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_i16(raw)
        let expected = Millimetres_t(Int16(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceInt16Init() {
        let raw = Millimetres_t(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_t(5)
        let expected2 = Int32(
            mm_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mm_t_to_i32(ctype))
        )
    }

    func testMillimetres_tInt32RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_i32(raw)
        let expected = Millimetres_t(Int32(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceInt32Init() {
        let raw = Millimetres_t(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_t(5)
        let expected2 = Int64(
            mm_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mm_t_to_i64(ctype))
        )
    }

    func testMillimetres_tInt64RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_i64(raw)
        let expected = Millimetres_t(Int64(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceInt64Init() {
        let raw = Millimetres_t(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tIntInits() {
        let raw = Int(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_t(5)
        let expected2 = Int(
            mm_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mm_t_to_i64(ctype))
        )
    }

    func testMillimetres_tIntRawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_i64(raw)
        let expected = Millimetres_t(Int(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceIntInit() {
        let raw = Millimetres_t(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tCIntInits() {
        let raw = CInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_t(5)
        let expected2 = CInt(
            mm_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mm_t_to_i32(ctype))
        )
    }

    func testMillimetres_tCIntRawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_i32(raw)
        let expected = Millimetres_t(CInt(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceCIntInit() {
        let raw = Millimetres_t(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mm_t(5)
        let expected2 = UInt8(
            mm_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mm_t_to_u8(ctype))
        )
    }

    func testMillimetres_tUInt8RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_u8(raw)
        let expected = Millimetres_t(UInt8(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceUInt8Init() {
        let raw = Millimetres_t(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mm_t(5)
        let expected2 = UInt16(
            mm_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mm_t_to_u16(ctype))
        )
    }

    func testMillimetres_tUInt16RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_u16(raw)
        let expected = Millimetres_t(UInt16(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceUInt16Init() {
        let raw = Millimetres_t(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_t(5)
        let expected2 = UInt32(
            mm_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mm_t_to_u32(ctype))
        )
    }

    func testMillimetres_tUInt32RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_u32(raw)
        let expected = Millimetres_t(UInt32(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceUInt32Init() {
        let raw = Millimetres_t(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_t(5)
        let expected2 = UInt64(
            mm_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mm_t_to_u64(ctype))
        )
    }

    func testMillimetres_tUInt64RawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_u64(raw)
        let expected = Millimetres_t(UInt64(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceUInt64Init() {
        let raw = Millimetres_t(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tUIntInits() {
        let raw = UInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_t(5)
        let expected2 = UInt(
            mm_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mm_t_to_u64(ctype))
        )
    }

    func testMillimetres_tUIntRawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_u64(raw)
        let expected = Millimetres_t(UInt(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceUIntInit() {
        let raw = Millimetres_t(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_t(5)
        let expected2 = CUnsignedInt(
            mm_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mm_t_to_u32(ctype))
        )
    }

    func testMillimetres_tCUnsignedIntRawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_u32(raw)
        let expected = Millimetres_t(CUnsignedInt(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceCUnsignedIntInit() {
        let raw = Millimetres_t(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tFloatInits() {
        let raw = Float(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mm_t(5)
        let expected2 = Float(
            mm_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mm_t_to_f(ctype))
        )
    }

    func testMillimetres_tFloatRawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_f(raw)
        let expected = Millimetres_t(Float(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceFloatInit() {
        let raw = Millimetres_t(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_tDoubleInits() {
        let raw = Double(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mm_t(5)
        let expected2 = Double(
            mm_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mm_t(5)
        let expected = Millimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mm_t_to_d(ctype))
        )
    }

    func testMillimetres_tDoubleRawValueInit() {
        let raw = millimetres_t(5)
        let ctype = mm_t_to_d(raw)
        let expected = Millimetres_t(Double(ctype))
        XCTAssertEqual(Millimetres_t(rawValue: raw), expected)
    }

    func testMillimetres_tDistanceDoubleInit() {
        let raw = Millimetres_t(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testMillimetres_uToMillimetres_tDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testMillimetres_uToMillimetres_fDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testMillimetres_uToMillimetres_dDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testMillimetres_uToCentimetres_tDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMillimetres_uToCentimetres_uDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMillimetres_uToCentimetres_fDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMillimetres_uToCentimetres_dDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMillimetres_uToMetres_tDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testMillimetres_uToMetres_uDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testMillimetres_uToMetres_fDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testMillimetres_uToMetres_dDistanceConversions() {
        let original = Millimetres_u(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToMillimetres_uConversions() {
        let ctype1 = millimetres_u(5)
        let swiftType1 = Millimetres_u(rawValue: ctype1)
        let ctype2 = mm_u_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testMillimetres_uInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.millimetres_u(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMillimetres_uInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mm_u(5)
        let expected2 = Int8(
            mm_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mm_u_to_i8(ctype))
        )
    }

    func testMillimetres_uInt8RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_i8(raw)
        let expected = Millimetres_u(Int8(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceInt8Init() {
        let raw = Millimetres_u(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mm_u(5)
        let expected2 = Int16(
            mm_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mm_u_to_i16(ctype))
        )
    }

    func testMillimetres_uInt16RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_i16(raw)
        let expected = Millimetres_u(Int16(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceInt16Init() {
        let raw = Millimetres_u(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_u(5)
        let expected2 = Int32(
            mm_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mm_u_to_i32(ctype))
        )
    }

    func testMillimetres_uInt32RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_i32(raw)
        let expected = Millimetres_u(Int32(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceInt32Init() {
        let raw = Millimetres_u(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_u(5)
        let expected2 = Int64(
            mm_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mm_u_to_i64(ctype))
        )
    }

    func testMillimetres_uInt64RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_i64(raw)
        let expected = Millimetres_u(Int64(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceInt64Init() {
        let raw = Millimetres_u(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uIntInits() {
        let raw = Int(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_u(5)
        let expected2 = Int(
            mm_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mm_u_to_i64(ctype))
        )
    }

    func testMillimetres_uIntRawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_i64(raw)
        let expected = Millimetres_u(Int(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceIntInit() {
        let raw = Millimetres_u(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uCIntInits() {
        let raw = CInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_u(5)
        let expected2 = CInt(
            mm_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mm_u_to_i32(ctype))
        )
    }

    func testMillimetres_uCIntRawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_i32(raw)
        let expected = Millimetres_u(CInt(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceCIntInit() {
        let raw = Millimetres_u(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mm_u(5)
        let expected2 = UInt8(
            mm_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mm_u_to_u8(ctype))
        )
    }

    func testMillimetres_uUInt8RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_u8(raw)
        let expected = Millimetres_u(UInt8(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceUInt8Init() {
        let raw = Millimetres_u(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mm_u(5)
        let expected2 = UInt16(
            mm_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mm_u_to_u16(ctype))
        )
    }

    func testMillimetres_uUInt16RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_u16(raw)
        let expected = Millimetres_u(UInt16(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceUInt16Init() {
        let raw = Millimetres_u(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_u(5)
        let expected2 = UInt32(
            mm_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mm_u_to_u32(ctype))
        )
    }

    func testMillimetres_uUInt32RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_u32(raw)
        let expected = Millimetres_u(UInt32(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceUInt32Init() {
        let raw = Millimetres_u(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_u(5)
        let expected2 = UInt64(
            mm_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mm_u_to_u64(ctype))
        )
    }

    func testMillimetres_uUInt64RawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_u64(raw)
        let expected = Millimetres_u(UInt64(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceUInt64Init() {
        let raw = Millimetres_u(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uUIntInits() {
        let raw = UInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_u(5)
        let expected2 = UInt(
            mm_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mm_u_to_u64(ctype))
        )
    }

    func testMillimetres_uUIntRawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_u64(raw)
        let expected = Millimetres_u(UInt(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceUIntInit() {
        let raw = Millimetres_u(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_u(5)
        let expected2 = CUnsignedInt(
            mm_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mm_u_to_u32(ctype))
        )
    }

    func testMillimetres_uCUnsignedIntRawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_u32(raw)
        let expected = Millimetres_u(CUnsignedInt(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceCUnsignedIntInit() {
        let raw = Millimetres_u(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uFloatInits() {
        let raw = Float(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mm_u(5)
        let expected2 = Float(
            mm_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mm_u_to_f(ctype))
        )
    }

    func testMillimetres_uFloatRawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_f(raw)
        let expected = Millimetres_u(Float(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceFloatInit() {
        let raw = Millimetres_u(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_uDoubleInits() {
        let raw = Double(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mm_u(5)
        let expected2 = Double(
            mm_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mm_u(5)
        let expected = Millimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mm_u_to_d(ctype))
        )
    }

    func testMillimetres_uDoubleRawValueInit() {
        let raw = millimetres_u(5)
        let ctype = mm_u_to_d(raw)
        let expected = Millimetres_u(Double(ctype))
        XCTAssertEqual(Millimetres_u(rawValue: raw), expected)
    }

    func testMillimetres_uDistanceDoubleInit() {
        let raw = Millimetres_u(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testMillimetres_fToMillimetres_tDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testMillimetres_fToMillimetres_uDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testMillimetres_fToMillimetres_dDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testMillimetres_fToCentimetres_tDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMillimetres_fToCentimetres_uDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMillimetres_fToCentimetres_fDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMillimetres_fToCentimetres_dDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMillimetres_fToMetres_tDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testMillimetres_fToMetres_uDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testMillimetres_fToMetres_fDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testMillimetres_fToMetres_dDistanceConversions() {
        let original = Millimetres_f(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToMillimetres_fConversions() {
        let ctype1 = millimetres_f(5)
        let swiftType1 = Millimetres_f(rawValue: ctype1)
        let ctype2 = mm_f_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testMillimetres_fInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.millimetres_f(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMillimetres_fInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mm_f(5)
        let expected2 = Int8(
            mm_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mm_f_to_i8(ctype))
        )
    }

    func testMillimetres_fInt8RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_i8(raw)
        let expected = Millimetres_f(Int8(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceInt8Init() {
        let raw = Millimetres_f(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mm_f(5)
        let expected2 = Int16(
            mm_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mm_f_to_i16(ctype))
        )
    }

    func testMillimetres_fInt16RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_i16(raw)
        let expected = Millimetres_f(Int16(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceInt16Init() {
        let raw = Millimetres_f(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_f(5)
        let expected2 = Int32(
            mm_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mm_f_to_i32(ctype))
        )
    }

    func testMillimetres_fInt32RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_i32(raw)
        let expected = Millimetres_f(Int32(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceInt32Init() {
        let raw = Millimetres_f(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_f(5)
        let expected2 = Int64(
            mm_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mm_f_to_i64(ctype))
        )
    }

    func testMillimetres_fInt64RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_i64(raw)
        let expected = Millimetres_f(Int64(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceInt64Init() {
        let raw = Millimetres_f(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fIntInits() {
        let raw = Int(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_f(5)
        let expected2 = Int(
            mm_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mm_f_to_i64(ctype))
        )
    }

    func testMillimetres_fIntRawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_i64(raw)
        let expected = Millimetres_f(Int(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceIntInit() {
        let raw = Millimetres_f(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fCIntInits() {
        let raw = CInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_f(5)
        let expected2 = CInt(
            mm_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mm_f_to_i32(ctype))
        )
    }

    func testMillimetres_fCIntRawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_i32(raw)
        let expected = Millimetres_f(CInt(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceCIntInit() {
        let raw = Millimetres_f(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mm_f(5)
        let expected2 = UInt8(
            mm_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mm_f_to_u8(ctype))
        )
    }

    func testMillimetres_fUInt8RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_u8(raw)
        let expected = Millimetres_f(UInt8(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceUInt8Init() {
        let raw = Millimetres_f(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mm_f(5)
        let expected2 = UInt16(
            mm_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mm_f_to_u16(ctype))
        )
    }

    func testMillimetres_fUInt16RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_u16(raw)
        let expected = Millimetres_f(UInt16(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceUInt16Init() {
        let raw = Millimetres_f(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_f(5)
        let expected2 = UInt32(
            mm_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mm_f_to_u32(ctype))
        )
    }

    func testMillimetres_fUInt32RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_u32(raw)
        let expected = Millimetres_f(UInt32(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceUInt32Init() {
        let raw = Millimetres_f(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_f(5)
        let expected2 = UInt64(
            mm_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mm_f_to_u64(ctype))
        )
    }

    func testMillimetres_fUInt64RawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_u64(raw)
        let expected = Millimetres_f(UInt64(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceUInt64Init() {
        let raw = Millimetres_f(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fUIntInits() {
        let raw = UInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_f(5)
        let expected2 = UInt(
            mm_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mm_f_to_u64(ctype))
        )
    }

    func testMillimetres_fUIntRawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_u64(raw)
        let expected = Millimetres_f(UInt(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceUIntInit() {
        let raw = Millimetres_f(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_f(5)
        let expected2 = CUnsignedInt(
            mm_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mm_f_to_u32(ctype))
        )
    }

    func testMillimetres_fCUnsignedIntRawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_u32(raw)
        let expected = Millimetres_f(CUnsignedInt(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceCUnsignedIntInit() {
        let raw = Millimetres_f(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fFloatInits() {
        let raw = Float(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mm_f(5)
        let expected2 = Float(
            mm_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mm_f_to_f(ctype))
        )
    }

    func testMillimetres_fFloatRawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_f(raw)
        let expected = Millimetres_f(Float(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceFloatInit() {
        let raw = Millimetres_f(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_fDoubleInits() {
        let raw = Double(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mm_f(5)
        let expected2 = Double(
            mm_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mm_f(5)
        let expected = Millimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mm_f_to_d(ctype))
        )
    }

    func testMillimetres_fDoubleRawValueInit() {
        let raw = millimetres_f(5)
        let ctype = mm_f_to_d(raw)
        let expected = Millimetres_f(Double(ctype))
        XCTAssertEqual(Millimetres_f(rawValue: raw), expected)
    }

    func testMillimetres_fDistanceDoubleInit() {
        let raw = Millimetres_f(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testMillimetres_dToMillimetres_tDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testMillimetres_dToMillimetres_uDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testMillimetres_dToMillimetres_fDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testMillimetres_dToCentimetres_tDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMillimetres_dToCentimetres_uDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMillimetres_dToCentimetres_fDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMillimetres_dToCentimetres_dDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMillimetres_dToMetres_tDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testMillimetres_dToMetres_uDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testMillimetres_dToMetres_fDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testMillimetres_dToMetres_dDistanceConversions() {
        let original = Millimetres_d(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToMillimetres_dConversions() {
        let ctype1 = millimetres_d(5)
        let swiftType1 = Millimetres_d(rawValue: ctype1)
        let ctype2 = mm_d_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testMillimetres_dInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.millimetres_d(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMillimetres_dInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_mm_d(5)
        let expected2 = Int8(
            mm_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(mm_d_to_i8(ctype))
        )
    }

    func testMillimetres_dInt8RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_i8(raw)
        let expected = Millimetres_d(Int8(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceInt8Init() {
        let raw = Millimetres_d(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_mm_d(5)
        let expected2 = Int16(
            mm_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(mm_d_to_i16(ctype))
        )
    }

    func testMillimetres_dInt16RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_i16(raw)
        let expected = Millimetres_d(Int16(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceInt16Init() {
        let raw = Millimetres_d(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_d(5)
        let expected2 = Int32(
            mm_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(mm_d_to_i32(ctype))
        )
    }

    func testMillimetres_dInt32RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_i32(raw)
        let expected = Millimetres_d(Int32(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceInt32Init() {
        let raw = Millimetres_d(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_d(5)
        let expected2 = Int64(
            mm_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(mm_d_to_i64(ctype))
        )
    }

    func testMillimetres_dInt64RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_i64(raw)
        let expected = Millimetres_d(Int64(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceInt64Init() {
        let raw = Millimetres_d(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dIntInits() {
        let raw = Int(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_mm_d(5)
        let expected2 = Int(
            mm_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(mm_d_to_i64(ctype))
        )
    }

    func testMillimetres_dIntRawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_i64(raw)
        let expected = Millimetres_d(Int(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceIntInit() {
        let raw = Millimetres_d(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dCIntInits() {
        let raw = CInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_mm_d(5)
        let expected2 = CInt(
            mm_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(mm_d_to_i32(ctype))
        )
    }

    func testMillimetres_dCIntRawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_i32(raw)
        let expected = Millimetres_d(CInt(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceCIntInit() {
        let raw = Millimetres_d(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_mm_d(5)
        let expected2 = UInt8(
            mm_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(mm_d_to_u8(ctype))
        )
    }

    func testMillimetres_dUInt8RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_u8(raw)
        let expected = Millimetres_d(UInt8(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceUInt8Init() {
        let raw = Millimetres_d(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_mm_d(5)
        let expected2 = UInt16(
            mm_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(mm_d_to_u16(ctype))
        )
    }

    func testMillimetres_dUInt16RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_u16(raw)
        let expected = Millimetres_d(UInt16(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceUInt16Init() {
        let raw = Millimetres_d(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_d(5)
        let expected2 = UInt32(
            mm_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(mm_d_to_u32(ctype))
        )
    }

    func testMillimetres_dUInt32RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_u32(raw)
        let expected = Millimetres_d(UInt32(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceUInt32Init() {
        let raw = Millimetres_d(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_d(5)
        let expected2 = UInt64(
            mm_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(mm_d_to_u64(ctype))
        )
    }

    func testMillimetres_dUInt64RawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_u64(raw)
        let expected = Millimetres_d(UInt64(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceUInt64Init() {
        let raw = Millimetres_d(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dUIntInits() {
        let raw = UInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_mm_d(5)
        let expected2 = UInt(
            mm_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(mm_d_to_u64(ctype))
        )
    }

    func testMillimetres_dUIntRawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_u64(raw)
        let expected = Millimetres_d(UInt(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceUIntInit() {
        let raw = Millimetres_d(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_mm_d(5)
        let expected2 = CUnsignedInt(
            mm_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(mm_d_to_u32(ctype))
        )
    }

    func testMillimetres_dCUnsignedIntRawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_u32(raw)
        let expected = Millimetres_d(CUnsignedInt(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceCUnsignedIntInit() {
        let raw = Millimetres_d(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dFloatInits() {
        let raw = Float(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_mm_d(5)
        let expected2 = Float(
            mm_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(mm_d_to_f(ctype))
        )
    }

    func testMillimetres_dFloatRawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_f(raw)
        let expected = Millimetres_d(Float(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceFloatInit() {
        let raw = Millimetres_d(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMillimetres_dDoubleInits() {
        let raw = Double(5)
        let expected = Distance(millimetres: raw)
        let result = Distance.millimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_mm_d(5)
        let expected2 = Double(
            mm_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMillimetres_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_mm_d(5)
        let expected = Millimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(mm_d_to_d(ctype))
        )
    }

    func testMillimetres_dDoubleRawValueInit() {
        let raw = millimetres_d(5)
        let ctype = mm_d_to_d(raw)
        let expected = Millimetres_d(Double(ctype))
        XCTAssertEqual(Millimetres_d(rawValue: raw), expected)
    }

    func testMillimetres_dDistanceDoubleInit() {
        let raw = Millimetres_d(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .millimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class CentimetresConversionTests: XCTestCase {

    func testCentimetres_tToMillimetres_tDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testCentimetres_tToMillimetres_uDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testCentimetres_tToMillimetres_fDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testCentimetres_tToMillimetres_dDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testCentimetres_tToCentimetres_uDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testCentimetres_tToCentimetres_fDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testCentimetres_tToCentimetres_dDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testCentimetres_tToMetres_tDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testCentimetres_tToMetres_uDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testCentimetres_tToMetres_fDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testCentimetres_tToMetres_dDistanceConversions() {
        let original = Centimetres_t(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToCentimetres_tConversions() {
        let ctype1 = centimetres_t(5)
        let swiftType1 = Centimetres_t(rawValue: ctype1)
        let ctype2 = cm_t_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testCentimetres_tInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.centimetres_t(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceCentimetres_tInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_cm_t(5)
        let expected2 = Int8(
            cm_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(cm_t_to_i8(ctype))
        )
    }

    func testCentimetres_tInt8RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_i8(raw)
        let expected = Centimetres_t(Int8(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceInt8Init() {
        let raw = Centimetres_t(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_cm_t(5)
        let expected2 = Int16(
            cm_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(cm_t_to_i16(ctype))
        )
    }

    func testCentimetres_tInt16RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_i16(raw)
        let expected = Centimetres_t(Int16(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceInt16Init() {
        let raw = Centimetres_t(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_t(5)
        let expected2 = Int32(
            cm_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(cm_t_to_i32(ctype))
        )
    }

    func testCentimetres_tInt32RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_i32(raw)
        let expected = Centimetres_t(Int32(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceInt32Init() {
        let raw = Centimetres_t(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_t(5)
        let expected2 = Int64(
            cm_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(cm_t_to_i64(ctype))
        )
    }

    func testCentimetres_tInt64RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_i64(raw)
        let expected = Centimetres_t(Int64(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceInt64Init() {
        let raw = Centimetres_t(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tIntInits() {
        let raw = Int(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_t(5)
        let expected2 = Int(
            cm_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(cm_t_to_i64(ctype))
        )
    }

    func testCentimetres_tIntRawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_i64(raw)
        let expected = Centimetres_t(Int(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceIntInit() {
        let raw = Centimetres_t(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tCIntInits() {
        let raw = CInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_t(5)
        let expected2 = CInt(
            cm_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(cm_t_to_i32(ctype))
        )
    }

    func testCentimetres_tCIntRawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_i32(raw)
        let expected = Centimetres_t(CInt(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceCIntInit() {
        let raw = Centimetres_t(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_cm_t(5)
        let expected2 = UInt8(
            cm_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(cm_t_to_u8(ctype))
        )
    }

    func testCentimetres_tUInt8RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_u8(raw)
        let expected = Centimetres_t(UInt8(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceUInt8Init() {
        let raw = Centimetres_t(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_cm_t(5)
        let expected2 = UInt16(
            cm_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(cm_t_to_u16(ctype))
        )
    }

    func testCentimetres_tUInt16RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_u16(raw)
        let expected = Centimetres_t(UInt16(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceUInt16Init() {
        let raw = Centimetres_t(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_t(5)
        let expected2 = UInt32(
            cm_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(cm_t_to_u32(ctype))
        )
    }

    func testCentimetres_tUInt32RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_u32(raw)
        let expected = Centimetres_t(UInt32(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceUInt32Init() {
        let raw = Centimetres_t(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_t(5)
        let expected2 = UInt64(
            cm_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(cm_t_to_u64(ctype))
        )
    }

    func testCentimetres_tUInt64RawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_u64(raw)
        let expected = Centimetres_t(UInt64(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceUInt64Init() {
        let raw = Centimetres_t(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tUIntInits() {
        let raw = UInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_t(5)
        let expected2 = UInt(
            cm_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(cm_t_to_u64(ctype))
        )
    }

    func testCentimetres_tUIntRawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_u64(raw)
        let expected = Centimetres_t(UInt(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceUIntInit() {
        let raw = Centimetres_t(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_t(5)
        let expected2 = CUnsignedInt(
            cm_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(cm_t_to_u32(ctype))
        )
    }

    func testCentimetres_tCUnsignedIntRawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_u32(raw)
        let expected = Centimetres_t(CUnsignedInt(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceCUnsignedIntInit() {
        let raw = Centimetres_t(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tFloatInits() {
        let raw = Float(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_cm_t(5)
        let expected2 = Float(
            cm_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(cm_t_to_f(ctype))
        )
    }

    func testCentimetres_tFloatRawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_f(raw)
        let expected = Centimetres_t(Float(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceFloatInit() {
        let raw = Centimetres_t(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_tDoubleInits() {
        let raw = Double(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_cm_t(5)
        let expected2 = Double(
            cm_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_cm_t(5)
        let expected = Centimetres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(cm_t_to_d(ctype))
        )
    }

    func testCentimetres_tDoubleRawValueInit() {
        let raw = centimetres_t(5)
        let ctype = cm_t_to_d(raw)
        let expected = Centimetres_t(Double(ctype))
        XCTAssertEqual(Centimetres_t(rawValue: raw), expected)
    }

    func testCentimetres_tDistanceDoubleInit() {
        let raw = Centimetres_t(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testCentimetres_uToMillimetres_tDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testCentimetres_uToMillimetres_uDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testCentimetres_uToMillimetres_fDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testCentimetres_uToMillimetres_dDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testCentimetres_uToCentimetres_tDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testCentimetres_uToCentimetres_fDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testCentimetres_uToCentimetres_dDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testCentimetres_uToMetres_tDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testCentimetres_uToMetres_uDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testCentimetres_uToMetres_fDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testCentimetres_uToMetres_dDistanceConversions() {
        let original = Centimetres_u(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToCentimetres_uConversions() {
        let ctype1 = centimetres_u(5)
        let swiftType1 = Centimetres_u(rawValue: ctype1)
        let ctype2 = cm_u_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testCentimetres_uInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.centimetres_u(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceCentimetres_uInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_cm_u(5)
        let expected2 = Int8(
            cm_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(cm_u_to_i8(ctype))
        )
    }

    func testCentimetres_uInt8RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_i8(raw)
        let expected = Centimetres_u(Int8(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceInt8Init() {
        let raw = Centimetres_u(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_cm_u(5)
        let expected2 = Int16(
            cm_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(cm_u_to_i16(ctype))
        )
    }

    func testCentimetres_uInt16RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_i16(raw)
        let expected = Centimetres_u(Int16(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceInt16Init() {
        let raw = Centimetres_u(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_u(5)
        let expected2 = Int32(
            cm_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(cm_u_to_i32(ctype))
        )
    }

    func testCentimetres_uInt32RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_i32(raw)
        let expected = Centimetres_u(Int32(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceInt32Init() {
        let raw = Centimetres_u(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_u(5)
        let expected2 = Int64(
            cm_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(cm_u_to_i64(ctype))
        )
    }

    func testCentimetres_uInt64RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_i64(raw)
        let expected = Centimetres_u(Int64(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceInt64Init() {
        let raw = Centimetres_u(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uIntInits() {
        let raw = Int(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_u(5)
        let expected2 = Int(
            cm_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(cm_u_to_i64(ctype))
        )
    }

    func testCentimetres_uIntRawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_i64(raw)
        let expected = Centimetres_u(Int(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceIntInit() {
        let raw = Centimetres_u(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uCIntInits() {
        let raw = CInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_u(5)
        let expected2 = CInt(
            cm_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(cm_u_to_i32(ctype))
        )
    }

    func testCentimetres_uCIntRawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_i32(raw)
        let expected = Centimetres_u(CInt(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceCIntInit() {
        let raw = Centimetres_u(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_cm_u(5)
        let expected2 = UInt8(
            cm_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(cm_u_to_u8(ctype))
        )
    }

    func testCentimetres_uUInt8RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_u8(raw)
        let expected = Centimetres_u(UInt8(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceUInt8Init() {
        let raw = Centimetres_u(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_cm_u(5)
        let expected2 = UInt16(
            cm_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(cm_u_to_u16(ctype))
        )
    }

    func testCentimetres_uUInt16RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_u16(raw)
        let expected = Centimetres_u(UInt16(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceUInt16Init() {
        let raw = Centimetres_u(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_u(5)
        let expected2 = UInt32(
            cm_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(cm_u_to_u32(ctype))
        )
    }

    func testCentimetres_uUInt32RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_u32(raw)
        let expected = Centimetres_u(UInt32(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceUInt32Init() {
        let raw = Centimetres_u(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_u(5)
        let expected2 = UInt64(
            cm_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(cm_u_to_u64(ctype))
        )
    }

    func testCentimetres_uUInt64RawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_u64(raw)
        let expected = Centimetres_u(UInt64(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceUInt64Init() {
        let raw = Centimetres_u(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uUIntInits() {
        let raw = UInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_u(5)
        let expected2 = UInt(
            cm_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(cm_u_to_u64(ctype))
        )
    }

    func testCentimetres_uUIntRawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_u64(raw)
        let expected = Centimetres_u(UInt(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceUIntInit() {
        let raw = Centimetres_u(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_u(5)
        let expected2 = CUnsignedInt(
            cm_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(cm_u_to_u32(ctype))
        )
    }

    func testCentimetres_uCUnsignedIntRawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_u32(raw)
        let expected = Centimetres_u(CUnsignedInt(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceCUnsignedIntInit() {
        let raw = Centimetres_u(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uFloatInits() {
        let raw = Float(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_cm_u(5)
        let expected2 = Float(
            cm_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(cm_u_to_f(ctype))
        )
    }

    func testCentimetres_uFloatRawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_f(raw)
        let expected = Centimetres_u(Float(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceFloatInit() {
        let raw = Centimetres_u(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_uDoubleInits() {
        let raw = Double(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_cm_u(5)
        let expected2 = Double(
            cm_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_cm_u(5)
        let expected = Centimetres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(cm_u_to_d(ctype))
        )
    }

    func testCentimetres_uDoubleRawValueInit() {
        let raw = centimetres_u(5)
        let ctype = cm_u_to_d(raw)
        let expected = Centimetres_u(Double(ctype))
        XCTAssertEqual(Centimetres_u(rawValue: raw), expected)
    }

    func testCentimetres_uDistanceDoubleInit() {
        let raw = Centimetres_u(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testCentimetres_fToMillimetres_tDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testCentimetres_fToMillimetres_uDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testCentimetres_fToMillimetres_fDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testCentimetres_fToMillimetres_dDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testCentimetres_fToCentimetres_tDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testCentimetres_fToCentimetres_uDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testCentimetres_fToCentimetres_dDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testCentimetres_fToMetres_tDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testCentimetres_fToMetres_uDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testCentimetres_fToMetres_fDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testCentimetres_fToMetres_dDistanceConversions() {
        let original = Centimetres_f(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToCentimetres_fConversions() {
        let ctype1 = centimetres_f(5)
        let swiftType1 = Centimetres_f(rawValue: ctype1)
        let ctype2 = cm_f_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testCentimetres_fInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.centimetres_f(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceCentimetres_fInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_cm_f(5)
        let expected2 = Int8(
            cm_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(cm_f_to_i8(ctype))
        )
    }

    func testCentimetres_fInt8RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_i8(raw)
        let expected = Centimetres_f(Int8(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceInt8Init() {
        let raw = Centimetres_f(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_cm_f(5)
        let expected2 = Int16(
            cm_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(cm_f_to_i16(ctype))
        )
    }

    func testCentimetres_fInt16RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_i16(raw)
        let expected = Centimetres_f(Int16(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceInt16Init() {
        let raw = Centimetres_f(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_f(5)
        let expected2 = Int32(
            cm_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(cm_f_to_i32(ctype))
        )
    }

    func testCentimetres_fInt32RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_i32(raw)
        let expected = Centimetres_f(Int32(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceInt32Init() {
        let raw = Centimetres_f(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_f(5)
        let expected2 = Int64(
            cm_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(cm_f_to_i64(ctype))
        )
    }

    func testCentimetres_fInt64RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_i64(raw)
        let expected = Centimetres_f(Int64(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceInt64Init() {
        let raw = Centimetres_f(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fIntInits() {
        let raw = Int(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_f(5)
        let expected2 = Int(
            cm_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(cm_f_to_i64(ctype))
        )
    }

    func testCentimetres_fIntRawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_i64(raw)
        let expected = Centimetres_f(Int(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceIntInit() {
        let raw = Centimetres_f(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fCIntInits() {
        let raw = CInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_f(5)
        let expected2 = CInt(
            cm_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(cm_f_to_i32(ctype))
        )
    }

    func testCentimetres_fCIntRawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_i32(raw)
        let expected = Centimetres_f(CInt(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceCIntInit() {
        let raw = Centimetres_f(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_cm_f(5)
        let expected2 = UInt8(
            cm_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(cm_f_to_u8(ctype))
        )
    }

    func testCentimetres_fUInt8RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_u8(raw)
        let expected = Centimetres_f(UInt8(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceUInt8Init() {
        let raw = Centimetres_f(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_cm_f(5)
        let expected2 = UInt16(
            cm_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(cm_f_to_u16(ctype))
        )
    }

    func testCentimetres_fUInt16RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_u16(raw)
        let expected = Centimetres_f(UInt16(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceUInt16Init() {
        let raw = Centimetres_f(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_f(5)
        let expected2 = UInt32(
            cm_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(cm_f_to_u32(ctype))
        )
    }

    func testCentimetres_fUInt32RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_u32(raw)
        let expected = Centimetres_f(UInt32(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceUInt32Init() {
        let raw = Centimetres_f(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_f(5)
        let expected2 = UInt64(
            cm_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(cm_f_to_u64(ctype))
        )
    }

    func testCentimetres_fUInt64RawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_u64(raw)
        let expected = Centimetres_f(UInt64(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceUInt64Init() {
        let raw = Centimetres_f(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fUIntInits() {
        let raw = UInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_f(5)
        let expected2 = UInt(
            cm_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(cm_f_to_u64(ctype))
        )
    }

    func testCentimetres_fUIntRawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_u64(raw)
        let expected = Centimetres_f(UInt(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceUIntInit() {
        let raw = Centimetres_f(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_f(5)
        let expected2 = CUnsignedInt(
            cm_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(cm_f_to_u32(ctype))
        )
    }

    func testCentimetres_fCUnsignedIntRawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_u32(raw)
        let expected = Centimetres_f(CUnsignedInt(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceCUnsignedIntInit() {
        let raw = Centimetres_f(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fFloatInits() {
        let raw = Float(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_cm_f(5)
        let expected2 = Float(
            cm_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(cm_f_to_f(ctype))
        )
    }

    func testCentimetres_fFloatRawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_f(raw)
        let expected = Centimetres_f(Float(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceFloatInit() {
        let raw = Centimetres_f(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_fDoubleInits() {
        let raw = Double(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_cm_f(5)
        let expected2 = Double(
            cm_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_cm_f(5)
        let expected = Centimetres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(cm_f_to_d(ctype))
        )
    }

    func testCentimetres_fDoubleRawValueInit() {
        let raw = centimetres_f(5)
        let ctype = cm_f_to_d(raw)
        let expected = Centimetres_f(Double(ctype))
        XCTAssertEqual(Centimetres_f(rawValue: raw), expected)
    }

    func testCentimetres_fDistanceDoubleInit() {
        let raw = Centimetres_f(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testCentimetres_dToMillimetres_tDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testCentimetres_dToMillimetres_uDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testCentimetres_dToMillimetres_fDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testCentimetres_dToMillimetres_dDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testCentimetres_dToCentimetres_tDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testCentimetres_dToCentimetres_uDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testCentimetres_dToCentimetres_fDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testCentimetres_dToMetres_tDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testCentimetres_dToMetres_uDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testCentimetres_dToMetres_fDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testCentimetres_dToMetres_dDistanceConversions() {
        let original = Centimetres_d(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToCentimetres_dConversions() {
        let ctype1 = centimetres_d(5)
        let swiftType1 = Centimetres_d(rawValue: ctype1)
        let ctype2 = cm_d_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testCentimetres_dInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.centimetres_d(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceCentimetres_dInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_cm_d(5)
        let expected2 = Int8(
            cm_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(cm_d_to_i8(ctype))
        )
    }

    func testCentimetres_dInt8RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_i8(raw)
        let expected = Centimetres_d(Int8(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceInt8Init() {
        let raw = Centimetres_d(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_cm_d(5)
        let expected2 = Int16(
            cm_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(cm_d_to_i16(ctype))
        )
    }

    func testCentimetres_dInt16RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_i16(raw)
        let expected = Centimetres_d(Int16(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceInt16Init() {
        let raw = Centimetres_d(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_d(5)
        let expected2 = Int32(
            cm_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(cm_d_to_i32(ctype))
        )
    }

    func testCentimetres_dInt32RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_i32(raw)
        let expected = Centimetres_d(Int32(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceInt32Init() {
        let raw = Centimetres_d(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_d(5)
        let expected2 = Int64(
            cm_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(cm_d_to_i64(ctype))
        )
    }

    func testCentimetres_dInt64RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_i64(raw)
        let expected = Centimetres_d(Int64(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceInt64Init() {
        let raw = Centimetres_d(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dIntInits() {
        let raw = Int(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_cm_d(5)
        let expected2 = Int(
            cm_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(cm_d_to_i64(ctype))
        )
    }

    func testCentimetres_dIntRawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_i64(raw)
        let expected = Centimetres_d(Int(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceIntInit() {
        let raw = Centimetres_d(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dCIntInits() {
        let raw = CInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_cm_d(5)
        let expected2 = CInt(
            cm_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(cm_d_to_i32(ctype))
        )
    }

    func testCentimetres_dCIntRawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_i32(raw)
        let expected = Centimetres_d(CInt(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceCIntInit() {
        let raw = Centimetres_d(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_cm_d(5)
        let expected2 = UInt8(
            cm_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(cm_d_to_u8(ctype))
        )
    }

    func testCentimetres_dUInt8RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_u8(raw)
        let expected = Centimetres_d(UInt8(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceUInt8Init() {
        let raw = Centimetres_d(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_cm_d(5)
        let expected2 = UInt16(
            cm_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(cm_d_to_u16(ctype))
        )
    }

    func testCentimetres_dUInt16RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_u16(raw)
        let expected = Centimetres_d(UInt16(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceUInt16Init() {
        let raw = Centimetres_d(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_d(5)
        let expected2 = UInt32(
            cm_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(cm_d_to_u32(ctype))
        )
    }

    func testCentimetres_dUInt32RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_u32(raw)
        let expected = Centimetres_d(UInt32(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceUInt32Init() {
        let raw = Centimetres_d(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_d(5)
        let expected2 = UInt64(
            cm_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(cm_d_to_u64(ctype))
        )
    }

    func testCentimetres_dUInt64RawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_u64(raw)
        let expected = Centimetres_d(UInt64(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceUInt64Init() {
        let raw = Centimetres_d(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dUIntInits() {
        let raw = UInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_cm_d(5)
        let expected2 = UInt(
            cm_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(cm_d_to_u64(ctype))
        )
    }

    func testCentimetres_dUIntRawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_u64(raw)
        let expected = Centimetres_d(UInt(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceUIntInit() {
        let raw = Centimetres_d(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_cm_d(5)
        let expected2 = CUnsignedInt(
            cm_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(cm_d_to_u32(ctype))
        )
    }

    func testCentimetres_dCUnsignedIntRawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_u32(raw)
        let expected = Centimetres_d(CUnsignedInt(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceCUnsignedIntInit() {
        let raw = Centimetres_d(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dFloatInits() {
        let raw = Float(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_cm_d(5)
        let expected2 = Float(
            cm_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(cm_d_to_f(ctype))
        )
    }

    func testCentimetres_dFloatRawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_f(raw)
        let expected = Centimetres_d(Float(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceFloatInit() {
        let raw = Centimetres_d(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceCentimetres_dDoubleInits() {
        let raw = Double(5)
        let expected = Distance(centimetres: raw)
        let result = Distance.centimetres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_cm_d(5)
        let expected2 = Double(
            cm_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testCentimetres_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_cm_d(5)
        let expected = Centimetres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(cm_d_to_d(ctype))
        )
    }

    func testCentimetres_dDoubleRawValueInit() {
        let raw = centimetres_d(5)
        let ctype = cm_d_to_d(raw)
        let expected = Centimetres_d(Double(ctype))
        XCTAssertEqual(Centimetres_d(rawValue: raw), expected)
    }

    func testCentimetres_dDistanceDoubleInit() {
        let raw = Centimetres_d(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .centimetres_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class MetresConversionTests: XCTestCase {

    func testMetres_tToMillimetres_tDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testMetres_tToMillimetres_uDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testMetres_tToMillimetres_fDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testMetres_tToMillimetres_dDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testMetres_tToCentimetres_tDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMetres_tToCentimetres_uDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMetres_tToCentimetres_fDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMetres_tToCentimetres_dDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMetres_tToMetres_uDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testMetres_tToMetres_fDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testMetres_tToMetres_dDistanceConversions() {
        let original = Metres_t(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToMetres_tConversions() {
        let ctype1 = metres_t(5)
        let swiftType1 = Metres_t(rawValue: ctype1)
        let ctype2 = m_t_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testMetres_tInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.metres_t(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMetres_tInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_m_t(5)
        let expected2 = Int8(
            m_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(m_t_to_i8(ctype))
        )
    }

    func testMetres_tInt8RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_i8(raw)
        let expected = Metres_t(Int8(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceInt8Init() {
        let raw = Metres_t(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_m_t(5)
        let expected2 = Int16(
            m_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(m_t_to_i16(ctype))
        )
    }

    func testMetres_tInt16RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_i16(raw)
        let expected = Metres_t(Int16(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceInt16Init() {
        let raw = Metres_t(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_t(5)
        let expected2 = Int32(
            m_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(m_t_to_i32(ctype))
        )
    }

    func testMetres_tInt32RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_i32(raw)
        let expected = Metres_t(Int32(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceInt32Init() {
        let raw = Metres_t(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_t(5)
        let expected2 = Int64(
            m_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(m_t_to_i64(ctype))
        )
    }

    func testMetres_tInt64RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_i64(raw)
        let expected = Metres_t(Int64(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceInt64Init() {
        let raw = Metres_t(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tIntInits() {
        let raw = Int(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_t(5)
        let expected2 = Int(
            m_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(m_t_to_i64(ctype))
        )
    }

    func testMetres_tIntRawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_i64(raw)
        let expected = Metres_t(Int(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceIntInit() {
        let raw = Metres_t(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tCIntInits() {
        let raw = CInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_t(5)
        let expected2 = CInt(
            m_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(m_t_to_i32(ctype))
        )
    }

    func testMetres_tCIntRawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_i32(raw)
        let expected = Metres_t(CInt(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceCIntInit() {
        let raw = Metres_t(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_m_t(5)
        let expected2 = UInt8(
            m_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(m_t_to_u8(ctype))
        )
    }

    func testMetres_tUInt8RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_u8(raw)
        let expected = Metres_t(UInt8(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceUInt8Init() {
        let raw = Metres_t(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_m_t(5)
        let expected2 = UInt16(
            m_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(m_t_to_u16(ctype))
        )
    }

    func testMetres_tUInt16RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_u16(raw)
        let expected = Metres_t(UInt16(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceUInt16Init() {
        let raw = Metres_t(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_t(5)
        let expected2 = UInt32(
            m_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(m_t_to_u32(ctype))
        )
    }

    func testMetres_tUInt32RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_u32(raw)
        let expected = Metres_t(UInt32(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceUInt32Init() {
        let raw = Metres_t(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_t(5)
        let expected2 = UInt64(
            m_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(m_t_to_u64(ctype))
        )
    }

    func testMetres_tUInt64RawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_u64(raw)
        let expected = Metres_t(UInt64(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceUInt64Init() {
        let raw = Metres_t(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tUIntInits() {
        let raw = UInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_t(5)
        let expected2 = UInt(
            m_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(m_t_to_u64(ctype))
        )
    }

    func testMetres_tUIntRawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_u64(raw)
        let expected = Metres_t(UInt(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceUIntInit() {
        let raw = Metres_t(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_t(5)
        let expected2 = CUnsignedInt(
            m_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(m_t_to_u32(ctype))
        )
    }

    func testMetres_tCUnsignedIntRawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_u32(raw)
        let expected = Metres_t(CUnsignedInt(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceCUnsignedIntInit() {
        let raw = Metres_t(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tFloatInits() {
        let raw = Float(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_m_t(5)
        let expected2 = Float(
            m_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(m_t_to_f(ctype))
        )
    }

    func testMetres_tFloatRawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_f(raw)
        let expected = Metres_t(Float(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceFloatInit() {
        let raw = Metres_t(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_tDoubleInits() {
        let raw = Double(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_m_t(5)
        let expected2 = Double(
            m_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_m_t(5)
        let expected = Metres_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(m_t_to_d(ctype))
        )
    }

    func testMetres_tDoubleRawValueInit() {
        let raw = metres_t(5)
        let ctype = m_t_to_d(raw)
        let expected = Metres_t(Double(ctype))
        XCTAssertEqual(Metres_t(rawValue: raw), expected)
    }

    func testMetres_tDistanceDoubleInit() {
        let raw = Metres_t(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testMetres_uToMillimetres_tDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testMetres_uToMillimetres_uDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testMetres_uToMillimetres_fDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testMetres_uToMillimetres_dDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testMetres_uToCentimetres_tDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMetres_uToCentimetres_uDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMetres_uToCentimetres_fDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMetres_uToCentimetres_dDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMetres_uToMetres_tDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testMetres_uToMetres_fDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testMetres_uToMetres_dDistanceConversions() {
        let original = Metres_u(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToMetres_uConversions() {
        let ctype1 = metres_u(5)
        let swiftType1 = Metres_u(rawValue: ctype1)
        let ctype2 = m_u_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testMetres_uInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.metres_u(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMetres_uInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_m_u(5)
        let expected2 = Int8(
            m_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(m_u_to_i8(ctype))
        )
    }

    func testMetres_uInt8RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_i8(raw)
        let expected = Metres_u(Int8(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceInt8Init() {
        let raw = Metres_u(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_m_u(5)
        let expected2 = Int16(
            m_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(m_u_to_i16(ctype))
        )
    }

    func testMetres_uInt16RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_i16(raw)
        let expected = Metres_u(Int16(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceInt16Init() {
        let raw = Metres_u(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_u(5)
        let expected2 = Int32(
            m_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(m_u_to_i32(ctype))
        )
    }

    func testMetres_uInt32RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_i32(raw)
        let expected = Metres_u(Int32(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceInt32Init() {
        let raw = Metres_u(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_u(5)
        let expected2 = Int64(
            m_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(m_u_to_i64(ctype))
        )
    }

    func testMetres_uInt64RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_i64(raw)
        let expected = Metres_u(Int64(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceInt64Init() {
        let raw = Metres_u(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uIntInits() {
        let raw = Int(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_u(5)
        let expected2 = Int(
            m_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(m_u_to_i64(ctype))
        )
    }

    func testMetres_uIntRawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_i64(raw)
        let expected = Metres_u(Int(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceIntInit() {
        let raw = Metres_u(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uCIntInits() {
        let raw = CInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_u(5)
        let expected2 = CInt(
            m_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(m_u_to_i32(ctype))
        )
    }

    func testMetres_uCIntRawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_i32(raw)
        let expected = Metres_u(CInt(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceCIntInit() {
        let raw = Metres_u(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_m_u(5)
        let expected2 = UInt8(
            m_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(m_u_to_u8(ctype))
        )
    }

    func testMetres_uUInt8RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_u8(raw)
        let expected = Metres_u(UInt8(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceUInt8Init() {
        let raw = Metres_u(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_m_u(5)
        let expected2 = UInt16(
            m_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(m_u_to_u16(ctype))
        )
    }

    func testMetres_uUInt16RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_u16(raw)
        let expected = Metres_u(UInt16(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceUInt16Init() {
        let raw = Metres_u(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_u(5)
        let expected2 = UInt32(
            m_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(m_u_to_u32(ctype))
        )
    }

    func testMetres_uUInt32RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_u32(raw)
        let expected = Metres_u(UInt32(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceUInt32Init() {
        let raw = Metres_u(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_u(5)
        let expected2 = UInt64(
            m_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(m_u_to_u64(ctype))
        )
    }

    func testMetres_uUInt64RawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_u64(raw)
        let expected = Metres_u(UInt64(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceUInt64Init() {
        let raw = Metres_u(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uUIntInits() {
        let raw = UInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_u(5)
        let expected2 = UInt(
            m_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(m_u_to_u64(ctype))
        )
    }

    func testMetres_uUIntRawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_u64(raw)
        let expected = Metres_u(UInt(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceUIntInit() {
        let raw = Metres_u(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_u(5)
        let expected2 = CUnsignedInt(
            m_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(m_u_to_u32(ctype))
        )
    }

    func testMetres_uCUnsignedIntRawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_u32(raw)
        let expected = Metres_u(CUnsignedInt(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceCUnsignedIntInit() {
        let raw = Metres_u(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uFloatInits() {
        let raw = Float(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_m_u(5)
        let expected2 = Float(
            m_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(m_u_to_f(ctype))
        )
    }

    func testMetres_uFloatRawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_f(raw)
        let expected = Metres_u(Float(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceFloatInit() {
        let raw = Metres_u(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_uDoubleInits() {
        let raw = Double(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_m_u(5)
        let expected2 = Double(
            m_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_m_u(5)
        let expected = Metres_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(m_u_to_d(ctype))
        )
    }

    func testMetres_uDoubleRawValueInit() {
        let raw = metres_u(5)
        let ctype = m_u_to_d(raw)
        let expected = Metres_u(Double(ctype))
        XCTAssertEqual(Metres_u(rawValue: raw), expected)
    }

    func testMetres_uDistanceDoubleInit() {
        let raw = Metres_u(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testMetres_fToMillimetres_tDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testMetres_fToMillimetres_uDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testMetres_fToMillimetres_fDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testMetres_fToMillimetres_dDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testMetres_fToCentimetres_tDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMetres_fToCentimetres_uDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMetres_fToCentimetres_fDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMetres_fToCentimetres_dDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMetres_fToMetres_tDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testMetres_fToMetres_uDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testMetres_fToMetres_dDistanceConversions() {
        let original = Metres_f(5)
        let category = Distance(original)
        let other = category.metres_d
        XCTAssertEqual(other, Metres_d(original))
    }

    func testMetres_dToMetres_fConversions() {
        let ctype1 = metres_f(5)
        let swiftType1 = Metres_f(rawValue: ctype1)
        let ctype2 = m_f_to_m_d(ctype1)
        let swiftType2 = Metres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_d(swiftType1))
    }

    func testMetres_fInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.metres_f(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMetres_fInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_m_f(5)
        let expected2 = Int8(
            m_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(m_f_to_i8(ctype))
        )
    }

    func testMetres_fInt8RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_i8(raw)
        let expected = Metres_f(Int8(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceInt8Init() {
        let raw = Metres_f(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_m_f(5)
        let expected2 = Int16(
            m_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(m_f_to_i16(ctype))
        )
    }

    func testMetres_fInt16RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_i16(raw)
        let expected = Metres_f(Int16(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceInt16Init() {
        let raw = Metres_f(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_f(5)
        let expected2 = Int32(
            m_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(m_f_to_i32(ctype))
        )
    }

    func testMetres_fInt32RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_i32(raw)
        let expected = Metres_f(Int32(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceInt32Init() {
        let raw = Metres_f(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_f(5)
        let expected2 = Int64(
            m_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(m_f_to_i64(ctype))
        )
    }

    func testMetres_fInt64RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_i64(raw)
        let expected = Metres_f(Int64(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceInt64Init() {
        let raw = Metres_f(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fIntInits() {
        let raw = Int(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_f(5)
        let expected2 = Int(
            m_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(m_f_to_i64(ctype))
        )
    }

    func testMetres_fIntRawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_i64(raw)
        let expected = Metres_f(Int(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceIntInit() {
        let raw = Metres_f(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fCIntInits() {
        let raw = CInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_f(5)
        let expected2 = CInt(
            m_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(m_f_to_i32(ctype))
        )
    }

    func testMetres_fCIntRawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_i32(raw)
        let expected = Metres_f(CInt(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceCIntInit() {
        let raw = Metres_f(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_m_f(5)
        let expected2 = UInt8(
            m_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(m_f_to_u8(ctype))
        )
    }

    func testMetres_fUInt8RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_u8(raw)
        let expected = Metres_f(UInt8(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceUInt8Init() {
        let raw = Metres_f(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_m_f(5)
        let expected2 = UInt16(
            m_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(m_f_to_u16(ctype))
        )
    }

    func testMetres_fUInt16RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_u16(raw)
        let expected = Metres_f(UInt16(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceUInt16Init() {
        let raw = Metres_f(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_f(5)
        let expected2 = UInt32(
            m_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(m_f_to_u32(ctype))
        )
    }

    func testMetres_fUInt32RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_u32(raw)
        let expected = Metres_f(UInt32(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceUInt32Init() {
        let raw = Metres_f(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_f(5)
        let expected2 = UInt64(
            m_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(m_f_to_u64(ctype))
        )
    }

    func testMetres_fUInt64RawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_u64(raw)
        let expected = Metres_f(UInt64(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceUInt64Init() {
        let raw = Metres_f(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fUIntInits() {
        let raw = UInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_f(5)
        let expected2 = UInt(
            m_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(m_f_to_u64(ctype))
        )
    }

    func testMetres_fUIntRawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_u64(raw)
        let expected = Metres_f(UInt(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceUIntInit() {
        let raw = Metres_f(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_f(5)
        let expected2 = CUnsignedInt(
            m_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(m_f_to_u32(ctype))
        )
    }

    func testMetres_fCUnsignedIntRawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_u32(raw)
        let expected = Metres_f(CUnsignedInt(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceCUnsignedIntInit() {
        let raw = Metres_f(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fFloatInits() {
        let raw = Float(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_m_f(5)
        let expected2 = Float(
            m_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(m_f_to_f(ctype))
        )
    }

    func testMetres_fFloatRawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_f(raw)
        let expected = Metres_f(Float(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceFloatInit() {
        let raw = Metres_f(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_fDoubleInits() {
        let raw = Double(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_m_f(5)
        let expected2 = Double(
            m_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_m_f(5)
        let expected = Metres_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(m_f_to_d(ctype))
        )
    }

    func testMetres_fDoubleRawValueInit() {
        let raw = metres_f(5)
        let ctype = m_f_to_d(raw)
        let expected = Metres_f(Double(ctype))
        XCTAssertEqual(Metres_f(rawValue: raw), expected)
    }

    func testMetres_fDistanceDoubleInit() {
        let raw = Metres_f(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testMetres_dToMillimetres_tDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.millimetres_t
        XCTAssertEqual(other, Millimetres_t(original))
    }

    func testMillimetres_tToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_mm_t(ctype1)
        let swiftType2 = Millimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_t(swiftType1))
    }

    func testMetres_dToMillimetres_uDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.millimetres_u
        XCTAssertEqual(other, Millimetres_u(original))
    }

    func testMillimetres_uToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_mm_u(ctype1)
        let swiftType2 = Millimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_u(swiftType1))
    }

    func testMetres_dToMillimetres_fDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.millimetres_f
        XCTAssertEqual(other, Millimetres_f(original))
    }

    func testMillimetres_fToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_mm_f(ctype1)
        let swiftType2 = Millimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_f(swiftType1))
    }

    func testMetres_dToMillimetres_dDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.millimetres_d
        XCTAssertEqual(other, Millimetres_d(original))
    }

    func testMillimetres_dToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_mm_d(ctype1)
        let swiftType2 = Millimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Millimetres_d(swiftType1))
    }

    func testMetres_dToCentimetres_tDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.centimetres_t
        XCTAssertEqual(other, Centimetres_t(original))
    }

    func testCentimetres_tToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_cm_t(ctype1)
        let swiftType2 = Centimetres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_t(swiftType1))
    }

    func testMetres_dToCentimetres_uDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.centimetres_u
        XCTAssertEqual(other, Centimetres_u(original))
    }

    func testCentimetres_uToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_cm_u(ctype1)
        let swiftType2 = Centimetres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_u(swiftType1))
    }

    func testMetres_dToCentimetres_fDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.centimetres_f
        XCTAssertEqual(other, Centimetres_f(original))
    }

    func testCentimetres_fToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_cm_f(ctype1)
        let swiftType2 = Centimetres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_f(swiftType1))
    }

    func testMetres_dToCentimetres_dDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.centimetres_d
        XCTAssertEqual(other, Centimetres_d(original))
    }

    func testCentimetres_dToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_cm_d(ctype1)
        let swiftType2 = Centimetres_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Centimetres_d(swiftType1))
    }

    func testMetres_dToMetres_tDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.metres_t
        XCTAssertEqual(other, Metres_t(original))
    }

    func testMetres_tToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_m_t(ctype1)
        let swiftType2 = Metres_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_t(swiftType1))
    }

    func testMetres_dToMetres_uDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.metres_u
        XCTAssertEqual(other, Metres_u(original))
    }

    func testMetres_uToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_m_u(ctype1)
        let swiftType2 = Metres_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_u(swiftType1))
    }

    func testMetres_dToMetres_fDistanceConversions() {
        let original = Metres_d(5)
        let category = Distance(original)
        let other = category.metres_f
        XCTAssertEqual(other, Metres_f(original))
    }

    func testMetres_fToMetres_dConversions() {
        let ctype1 = metres_d(5)
        let swiftType1 = Metres_d(rawValue: ctype1)
        let ctype2 = m_d_to_m_f(ctype1)
        let swiftType2 = Metres_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Metres_f(swiftType1))
    }

    func testMetres_dInitFromTypeEnum() {
        let underlyingType = Distance.DistanceTypes.metres_d(5)
        let category = Distance(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testDistanceMetres_dInt8Inits() {
        let raw = Int8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_m_d(5)
        let expected2 = Int8(
            m_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(m_d_to_i8(ctype))
        )
    }

    func testMetres_dInt8RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_i8(raw)
        let expected = Metres_d(Int8(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceInt8Init() {
        let raw = Metres_d(Int8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dInt16Inits() {
        let raw = Int16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_m_d(5)
        let expected2 = Int16(
            m_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(m_d_to_i16(ctype))
        )
    }

    func testMetres_dInt16RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_i16(raw)
        let expected = Metres_d(Int16(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceInt16Init() {
        let raw = Metres_d(Int16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dInt32Inits() {
        let raw = Int32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_d(5)
        let expected2 = Int32(
            m_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(m_d_to_i32(ctype))
        )
    }

    func testMetres_dInt32RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_i32(raw)
        let expected = Metres_d(Int32(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceInt32Init() {
        let raw = Metres_d(Int32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dInt64Inits() {
        let raw = Int64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_d(5)
        let expected2 = Int64(
            m_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(m_d_to_i64(ctype))
        )
    }

    func testMetres_dInt64RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_i64(raw)
        let expected = Metres_d(Int64(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceInt64Init() {
        let raw = Metres_d(Int64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dIntInits() {
        let raw = Int(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_m_d(5)
        let expected2 = Int(
            m_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(m_d_to_i64(ctype))
        )
    }

    func testMetres_dIntRawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_i64(raw)
        let expected = Metres_d(Int(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceIntInit() {
        let raw = Metres_d(Int(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dCIntInits() {
        let raw = CInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_m_d(5)
        let expected2 = CInt(
            m_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(m_d_to_i32(ctype))
        )
    }

    func testMetres_dCIntRawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_i32(raw)
        let expected = Metres_d(CInt(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceCIntInit() {
        let raw = Metres_d(CInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_m_d(5)
        let expected2 = UInt8(
            m_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(m_d_to_u8(ctype))
        )
    }

    func testMetres_dUInt8RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_u8(raw)
        let expected = Metres_d(UInt8(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceUInt8Init() {
        let raw = Metres_d(UInt8(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_m_d(5)
        let expected2 = UInt16(
            m_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(m_d_to_u16(ctype))
        )
    }

    func testMetres_dUInt16RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_u16(raw)
        let expected = Metres_d(UInt16(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceUInt16Init() {
        let raw = Metres_d(UInt16(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_d(5)
        let expected2 = UInt32(
            m_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(m_d_to_u32(ctype))
        )
    }

    func testMetres_dUInt32RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_u32(raw)
        let expected = Metres_d(UInt32(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceUInt32Init() {
        let raw = Metres_d(UInt32(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_d(5)
        let expected2 = UInt64(
            m_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(m_d_to_u64(ctype))
        )
    }

    func testMetres_dUInt64RawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_u64(raw)
        let expected = Metres_d(UInt64(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceUInt64Init() {
        let raw = Metres_d(UInt64(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dUIntInits() {
        let raw = UInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_m_d(5)
        let expected2 = UInt(
            m_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(m_d_to_u64(ctype))
        )
    }

    func testMetres_dUIntRawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_u64(raw)
        let expected = Metres_d(UInt(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceUIntInit() {
        let raw = Metres_d(UInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_m_d(5)
        let expected2 = CUnsignedInt(
            m_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(m_d_to_u32(ctype))
        )
    }

    func testMetres_dCUnsignedIntRawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_u32(raw)
        let expected = Metres_d(CUnsignedInt(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceCUnsignedIntInit() {
        let raw = Metres_d(CUnsignedInt(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dFloatInits() {
        let raw = Float(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_m_d(5)
        let expected2 = Float(
            m_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(m_d_to_f(ctype))
        )
    }

    func testMetres_dFloatRawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_f(raw)
        let expected = Metres_d(Float(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceFloatInit() {
        let raw = Metres_d(Float(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testDistanceMetres_dDoubleInits() {
        let raw = Double(5)
        let expected = Distance(metres: raw)
        let result = Distance.metres(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_m_d(5)
        let expected2 = Double(
            m_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMetres_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_m_d(5)
        let expected = Metres_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(m_d_to_d(ctype))
        )
    }

    func testMetres_dDoubleRawValueInit() {
        let raw = metres_d(5)
        let ctype = m_d_to_d(raw)
        let expected = Metres_d(Double(ctype))
        XCTAssertEqual(Metres_d(rawValue: raw), expected)
    }

    func testMetres_dDistanceDoubleInit() {
        let raw = Metres_d(Double(5))
        let category = Distance(raw)
        let expected = Distance(rawValue: .metres_d(raw))
        XCTAssertEqual(category, expected)
    }

}

/// Provides millimetres_t unit tests.
final class Millimetres_tTests: XCTestCase {

    func testmillimetres_tTocentimetres_tUsing15Expectingcentimetres_t1510() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_cm_t(15)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsing25Expectingcentimetres_t2510() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_cm_t(25)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsing250Expectingcentimetres_t25010() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_cm_t(250)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsing0Expectingcentimetres_t010() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_cm_t(0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsing2500Expectingcentimetres_t250010() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_cm_t(2500)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsing25000Expectingcentimetres_t2500010() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_cm_t(25000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsing250000Expectingcentimetres_t25000010() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_cm_t(250000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsing2500000Expectingcentimetres_t250000010() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_cm_t(2500000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsingNeg323Expectingcentimetres_tNeg32310() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_cm_t(-323)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsingNeg10Expectingcentimetres_tNeg1010() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_cm_t(-10)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsingNeg1000Expectingcentimetres_tNeg100010() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_cm_t(-1000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsingNeg5Expectingcentimetres_tNeg510() {
        let unit = Millimetres_t(-5)
        let expected = mm_t_to_cm_t(-5)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsingCInt_minExpectingcentimetres_tCInt_min10() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_cm_t(CInt.min)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_tUsingCInt_maxExpectingcentimetres_tCInt_max10() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_cm_t(CInt.max)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing15Expectingmetres_t151000() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_m_t(15)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing25Expectingmetres_t251000() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_m_t(25)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing250Expectingmetres_t2501000() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_m_t(250)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing0Expectingmetres_t01000() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_m_t(0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing2500Expectingmetres_t25001000() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_m_t(2500)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing25000Expectingmetres_t250001000() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_m_t(25000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing250000Expectingmetres_t2500001000() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_m_t(250000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsing2500000Expectingmetres_t25000001000() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_m_t(2500000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsingNeg323Expectingmetres_tNeg3231000() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_m_t(-323)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsingNeg10Expectingmetres_tNeg101000() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_m_t(-10)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsingNeg1000Expectingmetres_tNeg10001000() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_m_t(-1000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsingNeg5Expectingmetres_tNeg51000() {
        let unit = Millimetres_t(-5)
        let expected = mm_t_to_m_t(-5)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsingCInt_minExpectingmetres_tCInt_min1000() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_m_t(CInt.min)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_tUsingCInt_maxExpectingmetres_tCInt_max1000() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_m_t(CInt.max)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_uUsing0Expecting0() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_mm_u(0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_uUsingmillimetres_tCInt_minExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Millimetres_t(millimetres_t(CInt.min))
        let expected = mm_t_to_mm_u(millimetres_t(CInt.min))
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_uUsingmillimetres_tCInt_maxExpectingmillimetres_uCInt_max() {
        let unit = Millimetres_t(millimetres_t(CInt.max))
        let expected = mm_t_to_mm_u(millimetres_t(CInt.max))
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_uUsing5Expecting5() {
        let unit = Millimetres_t(5)
        let expected = mm_t_to_mm_u(5)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing15Expectingcentimetres_u1510() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_cm_u(15)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing25Expectingcentimetres_u2510() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_cm_u(25)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing250Expectingcentimetres_u25010() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_cm_u(250)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing0Expectingcentimetres_u010() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_cm_u(0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing2500Expectingcentimetres_u250010() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_cm_u(2500)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing25000Expectingcentimetres_u2500010() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_cm_u(25000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing250000Expectingcentimetres_u25000010() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_cm_u(250000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsing2500000Expectingcentimetres_u250000010() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_cm_u(2500000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsingNeg323Expecting0() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_cm_u(-323)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsingNeg10Expecting0() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_cm_u(-10)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsingNeg1000Expecting0() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_cm_u(-1000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsingNeg6Expecting0() {
        let unit = Millimetres_t(-6)
        let expected = mm_t_to_cm_u(-6)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsingCInt_minExpecting0() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_cm_u(CInt.min)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_uUsingCInt_maxExpectingcentimetres_uCInt_max10() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_cm_u(CInt.max)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing15Expectingmetres_u151000() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_m_u(15)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing25Expectingmetres_u251000() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_m_u(25)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing250Expectingmetres_u2501000() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_m_u(250)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing0Expectingmetres_u01000() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_m_u(0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing2500Expectingmetres_u25001000() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_m_u(2500)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing25000Expectingmetres_u250001000() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_m_u(25000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing250000Expectingmetres_u2500001000() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_m_u(250000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsing2500000Expectingmetres_u25000001000() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_m_u(2500000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsingNeg323Expecting0() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_m_u(-323)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsingNeg10Expecting0() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_m_u(-10)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsingNeg1000Expecting0() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_m_u(-1000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsingNeg6Expecting0() {
        let unit = Millimetres_t(-6)
        let expected = mm_t_to_m_u(-6)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsingCInt_minExpecting0() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_m_u(CInt.min)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_uUsingCInt_maxExpectingmetres_uCInt_max1000() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_m_u(CInt.max)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_fUsing0Expecting0_0() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_mm_f(0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_fUsingmillimetres_tCInt_minExpectingmillimetres_fCInt_min() {
        let unit = Millimetres_t(millimetres_t(CInt.min))
        let expected = mm_t_to_mm_f(millimetres_t(CInt.min))
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_fUsingmillimetres_tCInt_maxExpectingmillimetres_fCInt_max() {
        let unit = Millimetres_t(millimetres_t(CInt.max))
        let expected = mm_t_to_mm_f(millimetres_t(CInt.max))
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_fUsing5Expecting5_0() {
        let unit = Millimetres_t(5)
        let expected = mm_t_to_mm_f(5)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing15Expectingcentimetres_f15_010_0() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_cm_f(15)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing25Expectingcentimetres_f25_010_0() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_cm_f(25)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing250Expectingcentimetres_f250_010_0() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_cm_f(250)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing0Expectingcentimetres_f0_010_0() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_cm_f(0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing2500Expectingcentimetres_f2500_010_0() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_cm_f(2500)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing25000Expectingcentimetres_f25000_010_0() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_cm_f(25000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing250000Expectingcentimetres_f250000_010_0() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_cm_f(250000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsing2500000Expectingcentimetres_f2500000_010_0() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_cm_f(2500000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsingNeg323Expectingcentimetres_fNeg323_010_0() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_cm_f(-323)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsingNeg10Expectingcentimetres_fNeg10_010_0() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_cm_f(-10)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsingNeg1000Expectingcentimetres_fNeg1000_010_0() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_cm_f(-1000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsingNeg5Expectingcentimetres_fNeg5_010_0() {
        let unit = Millimetres_t(-5)
        let expected = mm_t_to_cm_f(-5)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsingCInt_minExpectingcentimetres_fCInt_min10_0() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_cm_f(CInt.min)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_fUsingCInt_maxExpectingcentimetres_fCInt_max10_0() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_cm_f(CInt.max)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing15Expectingmetres_f15_01000_0() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_m_f(15)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing25Expectingmetres_f25_01000_0() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_m_f(25)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing250Expectingmetres_f250_01000_0() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_m_f(250)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing0Expectingmetres_f0_01000_0() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_m_f(0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing2500Expectingmetres_f2500_01000_0() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_m_f(2500)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing25000Expectingmetres_f25000_01000_0() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_m_f(25000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing250000Expectingmetres_f250000_01000_0() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_m_f(250000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsing2500000Expectingmetres_f2500000_01000_0() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_m_f(2500000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsingNeg323Expectingmetres_fNeg323_01000_0() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_m_f(-323)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsingNeg10Expectingmetres_fNeg10_01000_0() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_m_f(-10)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsingNeg1000Expectingmetres_fNeg1000_01000_0() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_m_f(-1000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsingNeg5Expectingmetres_fNeg5_01000_0() {
        let unit = Millimetres_t(-5)
        let expected = mm_t_to_m_f(-5)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsingCInt_minExpectingmetres_fCInt_min1000_0() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_m_f(CInt.min)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_fUsingCInt_maxExpectingmetres_fCInt_max1000_0() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_m_f(CInt.max)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_dUsing0Expecting0_0() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_mm_d(0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_dUsingmillimetres_tCInt_minExpectingmillimetres_dCInt_min() {
        let unit = Millimetres_t(millimetres_t(CInt.min))
        let expected = mm_t_to_mm_d(millimetres_t(CInt.min))
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_dUsingmillimetres_tCInt_maxExpectingmillimetres_dCInt_max() {
        let unit = Millimetres_t(millimetres_t(CInt.max))
        let expected = mm_t_to_mm_d(millimetres_t(CInt.max))
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTomillimetres_dUsing5Expecting5_0() {
        let unit = Millimetres_t(5)
        let expected = mm_t_to_mm_d(5)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing15Expectingcentimetres_d15_010_0() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_cm_d(15)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing25Expectingcentimetres_d25_010_0() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_cm_d(25)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing250Expectingcentimetres_d250_010_0() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_cm_d(250)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing0Expectingcentimetres_d0_010_0() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_cm_d(0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing2500Expectingcentimetres_d2500_010_0() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_cm_d(2500)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing25000Expectingcentimetres_d25000_010_0() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_cm_d(25000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing250000Expectingcentimetres_d250000_010_0() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_cm_d(250000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsing2500000Expectingcentimetres_d2500000_010_0() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_cm_d(2500000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsingNeg323Expectingcentimetres_dNeg323_010_0() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_cm_d(-323)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsingNeg10Expectingcentimetres_dNeg10_010_0() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_cm_d(-10)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsingNeg1000Expectingcentimetres_dNeg1000_010_0() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_cm_d(-1000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsingNeg5Expectingcentimetres_dNeg5_010_0() {
        let unit = Millimetres_t(-5)
        let expected = mm_t_to_cm_d(-5)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsingCInt_minExpectingcentimetres_dCInt_min10_0() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_cm_d(CInt.min)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTocentimetres_dUsingCInt_maxExpectingcentimetres_dCInt_max10_0() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_cm_d(CInt.max)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing15Expectingmetres_d15_01000_0() {
        let unit = Millimetres_t(15)
        let expected = mm_t_to_m_d(15)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing25Expectingmetres_d25_01000_0() {
        let unit = Millimetres_t(25)
        let expected = mm_t_to_m_d(25)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing250Expectingmetres_d250_01000_0() {
        let unit = Millimetres_t(250)
        let expected = mm_t_to_m_d(250)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing0Expectingmetres_d0_01000_0() {
        let unit = Millimetres_t(0)
        let expected = mm_t_to_m_d(0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing2500Expectingmetres_d2500_01000_0() {
        let unit = Millimetres_t(2500)
        let expected = mm_t_to_m_d(2500)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing25000Expectingmetres_d25000_01000_0() {
        let unit = Millimetres_t(25000)
        let expected = mm_t_to_m_d(25000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing250000Expectingmetres_d250000_01000_0() {
        let unit = Millimetres_t(250000)
        let expected = mm_t_to_m_d(250000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsing2500000Expectingmetres_d2500000_01000_0() {
        let unit = Millimetres_t(2500000)
        let expected = mm_t_to_m_d(2500000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsingNeg323Expectingmetres_dNeg323_01000_0() {
        let unit = Millimetres_t(-323)
        let expected = mm_t_to_m_d(-323)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsingNeg10Expectingmetres_dNeg10_01000_0() {
        let unit = Millimetres_t(-10)
        let expected = mm_t_to_m_d(-10)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsingNeg1000Expectingmetres_dNeg1000_01000_0() {
        let unit = Millimetres_t(-1000)
        let expected = mm_t_to_m_d(-1000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsingNeg5Expectingmetres_dNeg5_01000_0() {
        let unit = Millimetres_t(-5)
        let expected = mm_t_to_m_d(-5)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsingCInt_minExpectingmetres_dCInt_min1000_0() {
        let unit = Millimetres_t(CInt.min)
        let expected = mm_t_to_m_d(CInt.min)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTometres_dUsingCInt_maxExpectingmetres_dCInt_max1000_0() {
        let unit = Millimetres_t(CInt.max)
        let expected = mm_t_to_m_d(CInt.max)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_tTointUsing0Expecting0() {
        let expected = mm_t_to_i(0)
        let result = CInt(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTointUsing5Expecting5() {
        let expected = mm_t_to_i(5)
        let result = CInt(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTointUsingmillimetres_tCInt_minExpectingCIntCInt_min() {
        let expected = mm_t_to_i(millimetres_t(CInt.min))
        let result = CInt(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTointUsingmillimetres_tCInt_maxExpectingCIntCInt_max() {
        let expected = mm_t_to_i(millimetres_t(CInt.max))
        let result = CInt(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_tUsing0Expecting0() {
        let expected = i_to_mm_t(0)
        let result = Millimetres_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_tUsing5Expecting5() {
        let expected = i_to_mm_t(5)
        let result = Millimetres_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint8_tUsing0Expecting0() {
        let expected = mm_t_to_i8(0)
        let result = Int8(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint8_tUsing5Expecting5() {
        let expected = mm_t_to_i8(5)
        let result = Int8(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint8_tUsingmillimetres_tCInt_minExpectingInt8Int8_min() {
        let expected = mm_t_to_i8(millimetres_t(CInt.min))
        let result = Int8(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint8_tUsingmillimetres_tCInt_maxExpectingInt8Int8_max() {
        let expected = mm_t_to_i8(millimetres_t(CInt.max))
        let result = Int8(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_tUsing0Expecting0() {
        let expected = i8_to_mm_t(0)
        let result = Millimetres_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_tUsing5Expecting5() {
        let expected = i8_to_mm_t(5)
        let result = Millimetres_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_tUsingInt8Int8_minExpectingmillimetres_tInt8_min() {
        let expected = i8_to_mm_t(Int8(Int8.min))
        let result = Millimetres_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_tUsingInt8Int8_maxExpectingmillimetres_tInt8_max() {
        let expected = i8_to_mm_t(Int8(Int8.max))
        let result = Millimetres_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint16_tUsing0Expecting0() {
        let expected = mm_t_to_i16(0)
        let result = Int16(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint16_tUsing5Expecting5() {
        let expected = mm_t_to_i16(5)
        let result = Int16(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint16_tUsingmillimetres_tCInt_minExpectingInt16Int16_min() {
        let expected = mm_t_to_i16(millimetres_t(CInt.min))
        let result = Int16(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint16_tUsingmillimetres_tCInt_maxExpectingInt16Int16_max() {
        let expected = mm_t_to_i16(millimetres_t(CInt.max))
        let result = Int16(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_tUsing0Expecting0() {
        let expected = i16_to_mm_t(0)
        let result = Millimetres_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_tUsing5Expecting5() {
        let expected = i16_to_mm_t(5)
        let result = Millimetres_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_tUsingInt16Int16_minExpectingmillimetres_tInt16_min() {
        let expected = i16_to_mm_t(Int16(Int16.min))
        let result = Millimetres_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_tUsingInt16Int16_maxExpectingmillimetres_tInt16_max() {
        let expected = i16_to_mm_t(Int16(Int16.max))
        let result = Millimetres_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint32_tUsing0Expecting0() {
        let expected = mm_t_to_i32(0)
        let result = Int32(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint32_tUsing5Expecting5() {
        let expected = mm_t_to_i32(5)
        let result = Int32(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint32_tUsingmillimetres_tCInt_minExpectingInt32CInt_min() {
        let expected = mm_t_to_i32(millimetres_t(CInt.min))
        let result = Int32(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint32_tUsingmillimetres_tCInt_maxExpectingInt32CInt_max() {
        let expected = mm_t_to_i32(millimetres_t(CInt.max))
        let result = Int32(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_tUsing0Expecting0() {
        let expected = i32_to_mm_t(0)
        let result = Millimetres_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_tUsing5Expecting5() {
        let expected = i32_to_mm_t(5)
        let result = Millimetres_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_tUsingInt32Int32_minExpectingmillimetres_tCInt_min() {
        let expected = i32_to_mm_t(Int32(Int32.min))
        let result = Millimetres_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_tUsingInt32Int32_maxExpectingmillimetres_tCInt_max() {
        let expected = i32_to_mm_t(Int32(Int32.max))
        let result = Millimetres_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint64_tUsing0Expecting0() {
        let expected = mm_t_to_i64(0)
        let result = Int64(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint64_tUsing5Expecting5() {
        let expected = mm_t_to_i64(5)
        let result = Int64(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint64_tUsingmillimetres_tCInt_minExpectingInt64CInt_min() {
        let expected = mm_t_to_i64(millimetres_t(CInt.min))
        let result = Int64(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tToint64_tUsingmillimetres_tCInt_maxExpectingInt64CInt_max() {
        let expected = mm_t_to_i64(millimetres_t(CInt.max))
        let result = Int64(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_tUsing0Expecting0() {
        let expected = i64_to_mm_t(0)
        let result = Millimetres_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_tUsing5Expecting5() {
        let expected = i64_to_mm_t(5)
        let result = Millimetres_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_tUsingInt64Int64_minExpectingmillimetres_tCInt_min() {
        let expected = i64_to_mm_t(Int64(Int64.min))
        let result = Millimetres_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_tUsingInt64Int64_maxExpectingmillimetres_tCInt_max() {
        let expected = i64_to_mm_t(Int64(Int64.max))
        let result = Millimetres_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTounsignedintUsing0Expecting0() {
        let expected = mm_t_to_u(0)
        let result = CUnsignedInt(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTounsignedintUsing5Expecting5() {
        let expected = mm_t_to_u(5)
        let result = CUnsignedInt(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTounsignedintUsingmillimetres_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mm_t_to_u(millimetres_t(CInt.min))
        let result = CUnsignedInt(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTounsignedintUsingmillimetres_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = mm_t_to_u(millimetres_t(CInt.max))
        let result = CUnsignedInt(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_tUsing0Expecting0() {
        let expected = u_to_mm_t(0)
        let result = Millimetres_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_tUsing5Expecting5() {
        let expected = u_to_mm_t(5)
        let result = Millimetres_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_tUsingCUnsignedIntCUnsignedInt_minExpectingmillimetres_tCUnsignedInt_min() {
        let expected = u_to_mm_t(CUnsignedInt(CUnsignedInt.min))
        let result = Millimetres_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_tUsingCUnsignedIntCUnsignedInt_maxExpectingmillimetres_tCInt_max() {
        let expected = u_to_mm_t(CUnsignedInt(CUnsignedInt.max))
        let result = Millimetres_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint8_tUsing0Expecting0() {
        let expected = mm_t_to_u8(0)
        let result = UInt8(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint8_tUsing5Expecting5() {
        let expected = mm_t_to_u8(5)
        let result = UInt8(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint8_tUsingmillimetres_tCInt_minExpectingUInt8UInt8_min() {
        let expected = mm_t_to_u8(millimetres_t(CInt.min))
        let result = UInt8(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint8_tUsingmillimetres_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = mm_t_to_u8(millimetres_t(CInt.max))
        let result = UInt8(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_tUsing0Expecting0() {
        let expected = u8_to_mm_t(0)
        let result = Millimetres_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_tUsing5Expecting5() {
        let expected = u8_to_mm_t(5)
        let result = Millimetres_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_tUsingUInt8UInt8_minExpectingmillimetres_tUInt8_min() {
        let expected = u8_to_mm_t(UInt8(UInt8.min))
        let result = Millimetres_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_tUsingUInt8UInt8_maxExpectingmillimetres_tUInt8_max() {
        let expected = u8_to_mm_t(UInt8(UInt8.max))
        let result = Millimetres_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint16_tUsing0Expecting0() {
        let expected = mm_t_to_u16(0)
        let result = UInt16(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint16_tUsing5Expecting5() {
        let expected = mm_t_to_u16(5)
        let result = UInt16(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint16_tUsingmillimetres_tCInt_minExpectingUInt16UInt16_min() {
        let expected = mm_t_to_u16(millimetres_t(CInt.min))
        let result = UInt16(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint16_tUsingmillimetres_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = mm_t_to_u16(millimetres_t(CInt.max))
        let result = UInt16(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_tUsing0Expecting0() {
        let expected = u16_to_mm_t(0)
        let result = Millimetres_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_tUsing5Expecting5() {
        let expected = u16_to_mm_t(5)
        let result = Millimetres_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_tUsingUInt16UInt16_minExpectingmillimetres_tUInt16_min() {
        let expected = u16_to_mm_t(UInt16(UInt16.min))
        let result = Millimetres_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_tUsingUInt16UInt16_maxExpectingmillimetres_tUInt16_max() {
        let expected = u16_to_mm_t(UInt16(UInt16.max))
        let result = Millimetres_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint32_tUsing0Expecting0() {
        let expected = mm_t_to_u32(0)
        let result = UInt32(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint32_tUsing5Expecting5() {
        let expected = mm_t_to_u32(5)
        let result = UInt32(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint32_tUsingmillimetres_tCInt_minExpectingUInt32UInt32_min() {
        let expected = mm_t_to_u32(millimetres_t(CInt.min))
        let result = UInt32(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint32_tUsingmillimetres_tCInt_maxExpectingUInt32CInt_max() {
        let expected = mm_t_to_u32(millimetres_t(CInt.max))
        let result = UInt32(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_tUsing0Expecting0() {
        let expected = u32_to_mm_t(0)
        let result = Millimetres_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_tUsing5Expecting5() {
        let expected = u32_to_mm_t(5)
        let result = Millimetres_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_tUsingUInt32UInt32_minExpectingmillimetres_tUInt32_min() {
        let expected = u32_to_mm_t(UInt32(UInt32.min))
        let result = Millimetres_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_tUsingUInt32UInt32_maxExpectingmillimetres_tCInt_max() {
        let expected = u32_to_mm_t(UInt32(UInt32.max))
        let result = Millimetres_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint64_tUsing0Expecting0() {
        let expected = mm_t_to_u64(0)
        let result = UInt64(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint64_tUsing5Expecting5() {
        let expected = mm_t_to_u64(5)
        let result = UInt64(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint64_tUsingmillimetres_tCInt_minExpectingUInt64UInt64_min() {
        let expected = mm_t_to_u64(millimetres_t(CInt.min))
        let result = UInt64(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTouint64_tUsingmillimetres_tCInt_maxExpectingUInt64CInt_max() {
        let expected = mm_t_to_u64(millimetres_t(CInt.max))
        let result = UInt64(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_tUsing0Expecting0() {
        let expected = u64_to_mm_t(0)
        let result = Millimetres_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_tUsing5Expecting5() {
        let expected = u64_to_mm_t(5)
        let result = Millimetres_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_tUsingUInt64UInt64_minExpectingmillimetres_tUInt64_min() {
        let expected = u64_to_mm_t(UInt64(UInt64.min))
        let result = Millimetres_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_tUsingUInt64UInt64_maxExpectingmillimetres_tCInt_max() {
        let expected = u64_to_mm_t(UInt64(UInt64.max))
        let result = Millimetres_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTofloatUsing0Expecting0_0() {
        let expected = mm_t_to_f(0)
        let result = Float(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTofloatUsing5Expecting5_0() {
        let expected = mm_t_to_f(5)
        let result = Float(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTofloatUsingmillimetres_tCInt_minExpectingFloatCInt_min() {
        let expected = mm_t_to_f(millimetres_t(CInt.min))
        let result = Float(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTofloatUsingmillimetres_tCInt_maxExpectingFloatCInt_max() {
        let expected = mm_t_to_f(millimetres_t(CInt.max))
        let result = Float(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_tUsing0_0Expecting0() {
        let expected = f_to_mm_t(0.0)
        let result = Millimetres_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_tUsing5_0Expecting5() {
        let expected = f_to_mm_t(5.0)
        let result = Millimetres_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let expected = f_to_mm_t(Float(-Float.greatestFiniteMagnitude))
        let result = Millimetres_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_tUsingFloatFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let expected = f_to_mm_t(Float(Float.greatestFiniteMagnitude))
        let result = Millimetres_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTodoubleUsing0Expecting0_0() {
        let expected = mm_t_to_d(0)
        let result = Double(Millimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTodoubleUsing5Expecting5_0() {
        let expected = mm_t_to_d(5)
        let result = Double(Millimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTodoubleUsingmillimetres_tCInt_minExpectingDoubleCInt_min() {
        let expected = mm_t_to_d(millimetres_t(CInt.min))
        let result = Double(Millimetres_t(millimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_tTodoubleUsingmillimetres_tCInt_maxExpectingDoubleCInt_max() {
        let expected = mm_t_to_d(millimetres_t(CInt.max))
        let result = Double(Millimetres_t(millimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_tUsing0_0Expecting0() {
        let expected = d_to_mm_t(0.0)
        let result = Millimetres_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_tUsing5_0Expecting5() {
        let expected = d_to_mm_t(5.0)
        let result = Millimetres_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let expected = d_to_mm_t(Double(-Double.greatestFiniteMagnitude))
        let result = Millimetres_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let expected = d_to_mm_t(Double(Double.greatestFiniteMagnitude))
        let result = Millimetres_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides millimetres_u unit tests.
final class Millimetres_uTests: XCTestCase {

    func testmillimetres_uTomillimetres_tUsing0Expecting0() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_mm_t(0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_tUsingmillimetres_uCUnsignedInt_minExpectingmillimetres_tCUnsignedInt_min() {
        let unit = Millimetres_u(millimetres_u(CUnsignedInt.min))
        let expected = mm_u_to_mm_t(millimetres_u(CUnsignedInt.min))
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_tUsingmillimetres_uCUnsignedInt_maxExpectingmillimetres_tCInt_max() {
        let unit = Millimetres_u(millimetres_u(CUnsignedInt.max))
        let expected = mm_u_to_mm_t(millimetres_u(CUnsignedInt.max))
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_tUsing5Expecting5() {
        let unit = Millimetres_u(5)
        let expected = mm_u_to_mm_t(5)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing15Expectingcentimetres_t1510() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_cm_t(15)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing25Expectingcentimetres_t2510() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_cm_t(25)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing250Expectingcentimetres_t25010() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_cm_t(250)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing0Expectingcentimetres_t010() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_cm_t(0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing2500Expectingcentimetres_t250010() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_cm_t(2500)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing25000Expectingcentimetres_t2500010() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_cm_t(25000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing250000Expectingcentimetres_t25000010() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_cm_t(250000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsing2500000Expectingcentimetres_t250000010() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_cm_t(2500000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsingCUnsignedInt_minExpectingcentimetres_tCUnsignedInt_min10() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_cm_t(CUnsignedInt.min)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_tUsingCUnsignedInt_maxExpectingcentimetres_tCUnsignedInt_max10() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_cm_t(CUnsignedInt.max)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing15Expectingmetres_t151000() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_m_t(15)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing25Expectingmetres_t251000() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_m_t(25)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing250Expectingmetres_t2501000() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_m_t(250)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing0Expectingmetres_t01000() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_m_t(0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing2500Expectingmetres_t25001000() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_m_t(2500)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing25000Expectingmetres_t250001000() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_m_t(25000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing250000Expectingmetres_t2500001000() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_m_t(250000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsing2500000Expectingmetres_t25000001000() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_m_t(2500000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsingCUnsignedInt_minExpectingmetres_tCUnsignedInt_min1000() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_m_t(CUnsignedInt.min)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_tUsingCUnsignedInt_maxExpectingmetres_tCUnsignedInt_max1000() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_m_t(CUnsignedInt.max)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing15Expectingcentimetres_u1510() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_cm_u(15)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing25Expectingcentimetres_u2510() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_cm_u(25)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing250Expectingcentimetres_u25010() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_cm_u(250)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing0Expectingcentimetres_u010() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_cm_u(0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing2500Expectingcentimetres_u250010() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_cm_u(2500)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing25000Expectingcentimetres_u2500010() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_cm_u(25000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing250000Expectingcentimetres_u25000010() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_cm_u(250000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsing2500000Expectingcentimetres_u250000010() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_cm_u(2500000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsingCUnsignedInt_minExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_cm_u(CUnsignedInt.min)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_uUsingCUnsignedInt_maxExpectingcentimetres_uCUnsignedInt_max10() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_cm_u(CUnsignedInt.max)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing15Expectingmetres_u151000() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_m_u(15)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing25Expectingmetres_u251000() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_m_u(25)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing250Expectingmetres_u2501000() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_m_u(250)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing0Expectingmetres_u01000() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_m_u(0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing2500Expectingmetres_u25001000() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_m_u(2500)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing25000Expectingmetres_u250001000() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_m_u(25000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing250000Expectingmetres_u2500001000() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_m_u(250000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsing2500000Expectingmetres_u25000001000() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_m_u(2500000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsingCUnsignedInt_minExpectingmetres_uCUnsignedInt_min() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_m_u(CUnsignedInt.min)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_uUsingCUnsignedInt_maxExpectingmetres_uCUnsignedInt_max1000() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_m_u(CUnsignedInt.max)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_fUsing0Expecting0_0() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_mm_f(0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_fUsingmillimetres_uCUnsignedInt_minExpectingmillimetres_fCUnsignedInt_min() {
        let unit = Millimetres_u(millimetres_u(CUnsignedInt.min))
        let expected = mm_u_to_mm_f(millimetres_u(CUnsignedInt.min))
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_fUsingmillimetres_uCUnsignedInt_maxExpectingmillimetres_fCUnsignedInt_max() {
        let unit = Millimetres_u(millimetres_u(CUnsignedInt.max))
        let expected = mm_u_to_mm_f(millimetres_u(CUnsignedInt.max))
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_fUsing5Expecting5_0() {
        let unit = Millimetres_u(5)
        let expected = mm_u_to_mm_f(5)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing15Expectingcentimetres_f15_010_0() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_cm_f(15)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing25Expectingcentimetres_f25_010_0() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_cm_f(25)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing250Expectingcentimetres_f250_010_0() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_cm_f(250)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing0Expectingcentimetres_f0_010_0() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_cm_f(0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing2500Expectingcentimetres_f2500_010_0() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_cm_f(2500)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing25000Expectingcentimetres_f25000_010_0() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_cm_f(25000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing250000Expectingcentimetres_f250000_010_0() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_cm_f(250000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsing2500000Expectingcentimetres_f2500000_010_0() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_cm_f(2500000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsingCUnsignedInt_minExpectingcentimetres_fCUnsignedInt_min10_0() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_cm_f(CUnsignedInt.min)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_fUsingCUnsignedInt_maxExpectingcentimetres_fCUnsignedInt_max10_0() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_cm_f(CUnsignedInt.max)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing15Expectingmetres_f15_01000_0() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_m_f(15)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing25Expectingmetres_f25_01000_0() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_m_f(25)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing250Expectingmetres_f250_01000_0() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_m_f(250)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing0Expectingmetres_f0_01000_0() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_m_f(0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing2500Expectingmetres_f2500_01000_0() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_m_f(2500)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing25000Expectingmetres_f25000_01000_0() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_m_f(25000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing250000Expectingmetres_f250000_01000_0() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_m_f(250000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsing2500000Expectingmetres_f2500000_01000_0() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_m_f(2500000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsingCUnsignedInt_minExpectingmetres_fCUnsignedInt_min1000_0() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_m_f(CUnsignedInt.min)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_fUsingCUnsignedInt_maxExpectingmetres_fCUnsignedInt_max1000_0() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_m_f(CUnsignedInt.max)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_dUsing0Expecting0_0() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_mm_d(0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_dUsingmillimetres_uCUnsignedInt_minExpectingmillimetres_dCUnsignedInt_min() {
        let unit = Millimetres_u(millimetres_u(CUnsignedInt.min))
        let expected = mm_u_to_mm_d(millimetres_u(CUnsignedInt.min))
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_dUsingmillimetres_uCUnsignedInt_maxExpectingmillimetres_dCUnsignedInt_max() {
        let unit = Millimetres_u(millimetres_u(CUnsignedInt.max))
        let expected = mm_u_to_mm_d(millimetres_u(CUnsignedInt.max))
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTomillimetres_dUsing5Expecting5_0() {
        let unit = Millimetres_u(5)
        let expected = mm_u_to_mm_d(5)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing15Expectingcentimetres_d15_010_0() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_cm_d(15)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing25Expectingcentimetres_d25_010_0() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_cm_d(25)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing250Expectingcentimetres_d250_010_0() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_cm_d(250)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing0Expectingcentimetres_d0_010_0() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_cm_d(0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing2500Expectingcentimetres_d2500_010_0() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_cm_d(2500)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing25000Expectingcentimetres_d25000_010_0() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_cm_d(25000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing250000Expectingcentimetres_d250000_010_0() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_cm_d(250000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsing2500000Expectingcentimetres_d2500000_010_0() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_cm_d(2500000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsingCUnsignedInt_minExpectingcentimetres_dCUnsignedInt_min10_0() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_cm_d(CUnsignedInt.min)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTocentimetres_dUsingCUnsignedInt_maxExpectingcentimetres_dCUnsignedInt_max10_0() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_cm_d(CUnsignedInt.max)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing15Expectingmetres_d15_01000_0() {
        let unit = Millimetres_u(15)
        let expected = mm_u_to_m_d(15)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing25Expectingmetres_d25_01000_0() {
        let unit = Millimetres_u(25)
        let expected = mm_u_to_m_d(25)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing250Expectingmetres_d250_01000_0() {
        let unit = Millimetres_u(250)
        let expected = mm_u_to_m_d(250)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing0Expectingmetres_d0_01000_0() {
        let unit = Millimetres_u(0)
        let expected = mm_u_to_m_d(0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing2500Expectingmetres_d2500_01000_0() {
        let unit = Millimetres_u(2500)
        let expected = mm_u_to_m_d(2500)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing25000Expectingmetres_d25000_01000_0() {
        let unit = Millimetres_u(25000)
        let expected = mm_u_to_m_d(25000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing250000Expectingmetres_d250000_01000_0() {
        let unit = Millimetres_u(250000)
        let expected = mm_u_to_m_d(250000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsing2500000Expectingmetres_d2500000_01000_0() {
        let unit = Millimetres_u(2500000)
        let expected = mm_u_to_m_d(2500000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsingCUnsignedInt_minExpectingmetres_dCUnsignedInt_min1000_0() {
        let unit = Millimetres_u(CUnsignedInt.min)
        let expected = mm_u_to_m_d(CUnsignedInt.min)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTometres_dUsingCUnsignedInt_maxExpectingmetres_dCUnsignedInt_max1000_0() {
        let unit = Millimetres_u(CUnsignedInt.max)
        let expected = mm_u_to_m_d(CUnsignedInt.max)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_uTointUsing0Expecting0() {
        let expected = mm_u_to_i(0)
        let result = CInt(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTointUsing5Expecting5() {
        let expected = mm_u_to_i(5)
        let result = CInt(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTointUsingmillimetres_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = mm_u_to_i(millimetres_u(CUnsignedInt.min))
        let result = CInt(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTointUsingmillimetres_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = mm_u_to_i(millimetres_u(CUnsignedInt.max))
        let result = CInt(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_uUsing0Expecting0() {
        let expected = i_to_mm_u(0)
        let result = Millimetres_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_uUsing5Expecting5() {
        let expected = i_to_mm_u(5)
        let result = Millimetres_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_uUsingCIntCInt_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = i_to_mm_u(CInt(CInt.min))
        let result = Millimetres_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_uUsingCIntCInt_maxExpectingmillimetres_uCInt_max() {
        let expected = i_to_mm_u(CInt(CInt.max))
        let result = Millimetres_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint8_tUsing0Expecting0() {
        let expected = mm_u_to_i8(0)
        let result = Int8(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint8_tUsing5Expecting5() {
        let expected = mm_u_to_i8(5)
        let result = Int8(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint8_tUsingmillimetres_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = mm_u_to_i8(millimetres_u(CUnsignedInt.min))
        let result = Int8(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint8_tUsingmillimetres_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = mm_u_to_i8(millimetres_u(CUnsignedInt.max))
        let result = Int8(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_uUsing0Expecting0() {
        let expected = i8_to_mm_u(0)
        let result = Millimetres_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_uUsing5Expecting5() {
        let expected = i8_to_mm_u(5)
        let result = Millimetres_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_uUsingInt8Int8_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = i8_to_mm_u(Int8(Int8.min))
        let result = Millimetres_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_uUsingInt8Int8_maxExpectingmillimetres_uInt8_max() {
        let expected = i8_to_mm_u(Int8(Int8.max))
        let result = Millimetres_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint16_tUsing0Expecting0() {
        let expected = mm_u_to_i16(0)
        let result = Int16(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint16_tUsing5Expecting5() {
        let expected = mm_u_to_i16(5)
        let result = Int16(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint16_tUsingmillimetres_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = mm_u_to_i16(millimetres_u(CUnsignedInt.min))
        let result = Int16(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint16_tUsingmillimetres_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = mm_u_to_i16(millimetres_u(CUnsignedInt.max))
        let result = Int16(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_uUsing0Expecting0() {
        let expected = i16_to_mm_u(0)
        let result = Millimetres_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_uUsing5Expecting5() {
        let expected = i16_to_mm_u(5)
        let result = Millimetres_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_uUsingInt16Int16_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = i16_to_mm_u(Int16(Int16.min))
        let result = Millimetres_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_uUsingInt16Int16_maxExpectingmillimetres_uInt16_max() {
        let expected = i16_to_mm_u(Int16(Int16.max))
        let result = Millimetres_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint32_tUsing0Expecting0() {
        let expected = mm_u_to_i32(0)
        let result = Int32(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint32_tUsing5Expecting5() {
        let expected = mm_u_to_i32(5)
        let result = Int32(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint32_tUsingmillimetres_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = mm_u_to_i32(millimetres_u(CUnsignedInt.min))
        let result = Int32(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint32_tUsingmillimetres_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = mm_u_to_i32(millimetres_u(CUnsignedInt.max))
        let result = Int32(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_uUsing0Expecting0() {
        let expected = i32_to_mm_u(0)
        let result = Millimetres_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_uUsing5Expecting5() {
        let expected = i32_to_mm_u(5)
        let result = Millimetres_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_uUsingInt32Int32_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = i32_to_mm_u(Int32(Int32.min))
        let result = Millimetres_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_uUsingInt32Int32_maxExpectingmillimetres_uInt32_max() {
        let expected = i32_to_mm_u(Int32(Int32.max))
        let result = Millimetres_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint64_tUsing0Expecting0() {
        let expected = mm_u_to_i64(0)
        let result = Int64(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint64_tUsing5Expecting5() {
        let expected = mm_u_to_i64(5)
        let result = Int64(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint64_tUsingmillimetres_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = mm_u_to_i64(millimetres_u(CUnsignedInt.min))
        let result = Int64(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uToint64_tUsingmillimetres_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = mm_u_to_i64(millimetres_u(CUnsignedInt.max))
        let result = Int64(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_uUsing0Expecting0() {
        let expected = i64_to_mm_u(0)
        let result = Millimetres_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_uUsing5Expecting5() {
        let expected = i64_to_mm_u(5)
        let result = Millimetres_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_uUsingInt64Int64_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = i64_to_mm_u(Int64(Int64.min))
        let result = Millimetres_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_uUsingInt64Int64_maxExpectingmillimetres_uCUnsignedInt_max() {
        let expected = i64_to_mm_u(Int64(Int64.max))
        let result = Millimetres_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTounsignedintUsing0Expecting0() {
        let expected = mm_u_to_u(0)
        let result = CUnsignedInt(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTounsignedintUsing5Expecting5() {
        let expected = mm_u_to_u(5)
        let result = CUnsignedInt(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTounsignedintUsingmillimetres_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mm_u_to_u(millimetres_u(CUnsignedInt.min))
        let result = CUnsignedInt(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTounsignedintUsingmillimetres_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = mm_u_to_u(millimetres_u(CUnsignedInt.max))
        let result = CUnsignedInt(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_uUsing0Expecting0() {
        let expected = u_to_mm_u(0)
        let result = Millimetres_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_uUsing5Expecting5() {
        let expected = u_to_mm_u(5)
        let result = Millimetres_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint8_tUsing0Expecting0() {
        let expected = mm_u_to_u8(0)
        let result = UInt8(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint8_tUsing5Expecting5() {
        let expected = mm_u_to_u8(5)
        let result = UInt8(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint8_tUsingmillimetres_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = mm_u_to_u8(millimetres_u(CUnsignedInt.min))
        let result = UInt8(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint8_tUsingmillimetres_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = mm_u_to_u8(millimetres_u(CUnsignedInt.max))
        let result = UInt8(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_uUsing0Expecting0() {
        let expected = u8_to_mm_u(0)
        let result = Millimetres_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_uUsing5Expecting5() {
        let expected = u8_to_mm_u(5)
        let result = Millimetres_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_uUsingUInt8UInt8_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = u8_to_mm_u(UInt8(UInt8.min))
        let result = Millimetres_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_uUsingUInt8UInt8_maxExpectingmillimetres_uUInt8_max() {
        let expected = u8_to_mm_u(UInt8(UInt8.max))
        let result = Millimetres_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint16_tUsing0Expecting0() {
        let expected = mm_u_to_u16(0)
        let result = UInt16(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint16_tUsing5Expecting5() {
        let expected = mm_u_to_u16(5)
        let result = UInt16(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint16_tUsingmillimetres_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = mm_u_to_u16(millimetres_u(CUnsignedInt.min))
        let result = UInt16(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint16_tUsingmillimetres_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = mm_u_to_u16(millimetres_u(CUnsignedInt.max))
        let result = UInt16(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_uUsing0Expecting0() {
        let expected = u16_to_mm_u(0)
        let result = Millimetres_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_uUsing5Expecting5() {
        let expected = u16_to_mm_u(5)
        let result = Millimetres_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_uUsingUInt16UInt16_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = u16_to_mm_u(UInt16(UInt16.min))
        let result = Millimetres_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_uUsingUInt16UInt16_maxExpectingmillimetres_uUInt16_max() {
        let expected = u16_to_mm_u(UInt16(UInt16.max))
        let result = Millimetres_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint32_tUsing0Expecting0() {
        let expected = mm_u_to_u32(0)
        let result = UInt32(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint32_tUsing5Expecting5() {
        let expected = mm_u_to_u32(5)
        let result = UInt32(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint32_tUsingmillimetres_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = mm_u_to_u32(millimetres_u(CUnsignedInt.min))
        let result = UInt32(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint32_tUsingmillimetres_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = mm_u_to_u32(millimetres_u(CUnsignedInt.max))
        let result = UInt32(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_uUsing0Expecting0() {
        let expected = u32_to_mm_u(0)
        let result = Millimetres_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_uUsing5Expecting5() {
        let expected = u32_to_mm_u(5)
        let result = Millimetres_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_uUsingUInt32UInt32_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = u32_to_mm_u(UInt32(UInt32.min))
        let result = Millimetres_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_uUsingUInt32UInt32_maxExpectingmillimetres_uCUnsignedInt_max() {
        let expected = u32_to_mm_u(UInt32(UInt32.max))
        let result = Millimetres_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint64_tUsing0Expecting0() {
        let expected = mm_u_to_u64(0)
        let result = UInt64(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint64_tUsing5Expecting5() {
        let expected = mm_u_to_u64(5)
        let result = UInt64(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint64_tUsingmillimetres_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = mm_u_to_u64(millimetres_u(CUnsignedInt.min))
        let result = UInt64(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTouint64_tUsingmillimetres_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = mm_u_to_u64(millimetres_u(CUnsignedInt.max))
        let result = UInt64(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_uUsing0Expecting0() {
        let expected = u64_to_mm_u(0)
        let result = Millimetres_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_uUsing5Expecting5() {
        let expected = u64_to_mm_u(5)
        let result = Millimetres_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_uUsingUInt64UInt64_minExpectingmillimetres_uCUnsignedInt_min() {
        let expected = u64_to_mm_u(UInt64(UInt64.min))
        let result = Millimetres_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_uUsingUInt64UInt64_maxExpectingmillimetres_uCUnsignedInt_max() {
        let expected = u64_to_mm_u(UInt64(UInt64.max))
        let result = Millimetres_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTofloatUsing0Expecting0_0() {
        let expected = mm_u_to_f(0)
        let result = Float(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTofloatUsing5Expecting5_0() {
        let expected = mm_u_to_f(5)
        let result = Float(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTofloatUsingmillimetres_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = mm_u_to_f(millimetres_u(CUnsignedInt.min))
        let result = Float(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTofloatUsingmillimetres_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = mm_u_to_f(millimetres_u(CUnsignedInt.max))
        let result = Float(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_uUsing0_0Expecting0() {
        let expected = f_to_mm_u(0.0)
        let result = Millimetres_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_uUsing5_0Expecting5() {
        let expected = f_to_mm_u(5.0)
        let result = Millimetres_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let expected = f_to_mm_u(Float(-Float.greatestFiniteMagnitude))
        let result = Millimetres_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_uUsingFloatFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let expected = f_to_mm_u(Float(Float.greatestFiniteMagnitude))
        let result = Millimetres_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTodoubleUsing0Expecting0_0() {
        let expected = mm_u_to_d(0)
        let result = Double(Millimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTodoubleUsing5Expecting5_0() {
        let expected = mm_u_to_d(5)
        let result = Double(Millimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTodoubleUsingmillimetres_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = mm_u_to_d(millimetres_u(CUnsignedInt.min))
        let result = Double(Millimetres_u(millimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_uTodoubleUsingmillimetres_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = mm_u_to_d(millimetres_u(CUnsignedInt.max))
        let result = Double(Millimetres_u(millimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_uUsing0_0Expecting0() {
        let expected = d_to_mm_u(0.0)
        let result = Millimetres_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_uUsing5_0Expecting5() {
        let expected = d_to_mm_u(5.0)
        let result = Millimetres_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let expected = d_to_mm_u(Double(-Double.greatestFiniteMagnitude))
        let result = Millimetres_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let expected = d_to_mm_u(Double(Double.greatestFiniteMagnitude))
        let result = Millimetres_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides millimetres_f unit tests.
final class Millimetres_fTests: XCTestCase {

    func testmillimetres_fTomillimetres_tUsing0_0Expecting0() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_mm_t(0.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let unit = Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude))
        let expected = mm_f_to_mm_t(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let unit = Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude))
        let expected = mm_f_to_mm_t(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_tUsing5_0Expecting5() {
        let unit = Millimetres_f(5.0)
        let expected = mm_f_to_mm_t(5.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing15_0Expectingcentimetres_t15_010_0_rounded() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_cm_t(15.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing25_0Expectingcentimetres_t25_010_0_rounded() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_cm_t(25.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing250_0Expectingcentimetres_t250_010_0_rounded() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_cm_t(250.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing0_0Expectingcentimetres_t0_010_0_rounded() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_cm_t(0.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing2500_0Expectingcentimetres_t2500_010_0_rounded() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_cm_t(2500.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing25000_0Expectingcentimetres_t25000_010_0_rounded() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_cm_t(25000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing250000_0Expectingcentimetres_t250000_010_0_rounded() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_cm_t(250000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsing2500000_0Expectingcentimetres_t2500000_010_0_rounded() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_cm_t(2500000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsingNeg323_0Expectingcentimetres_tNeg323_010_0_rounded() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_cm_t(-323.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsingNeg10_0Expectingcentimetres_tNeg10_010_0_rounded() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_cm_t(-10.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsingNeg1000_0Expectingcentimetres_tNeg1000_010_0_rounded() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_cm_t(-1000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsingNeg5_0Expectingcentimetres_tNeg5_010_0_rounded() {
        let unit = Millimetres_f(-5.0)
        let expected = mm_f_to_cm_t(-5.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_t(-Float.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_tUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_t(Float.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing15_0Expectingmetres_t15_01000_0_rounded() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_m_t(15.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing25_0Expectingmetres_t25_01000_0_rounded() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_m_t(25.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing250_0Expectingmetres_t250_01000_0_rounded() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_m_t(250.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing0_0Expectingmetres_t0_01000_0_rounded() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_m_t(0.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing2500_0Expectingmetres_t2500_01000_0_rounded() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_m_t(2500.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing25000_0Expectingmetres_t25000_01000_0_rounded() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_m_t(25000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing250000_0Expectingmetres_t250000_01000_0_rounded() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_m_t(250000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsing2500000_0Expectingmetres_t2500000_01000_0_rounded() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_m_t(2500000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsingNeg323_0Expectingmetres_tNeg323_01000_0_rounded() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_m_t(-323.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsingNeg10_0Expectingmetres_tNeg10_01000_0_rounded() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_m_t(-10.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsingNeg1000_0Expectingmetres_tNeg1000_01000_0_rounded() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_m_t(-1000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsingNeg5_0Expectingmetres_tNeg5_01000_0_rounded() {
        let unit = Millimetres_f(-5.0)
        let expected = mm_f_to_m_t(-5.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_t(-Float.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_tUsingFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_t(Float.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_uUsing0_0Expecting0() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_mm_u(0.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_uUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude))
        let expected = mm_f_to_mm_u(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_uUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude))
        let expected = mm_f_to_mm_u(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_uUsing5_0Expecting5() {
        let unit = Millimetres_f(5.0)
        let expected = mm_f_to_mm_u(5.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing15_0Expectingcentimetres_u15_010_0_rounded() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_cm_u(15.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing25_0Expectingcentimetres_u25_010_0_rounded() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_cm_u(25.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing250_0Expectingcentimetres_u250_010_0_rounded() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_cm_u(250.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing0_0Expectingcentimetres_u0_010_0_rounded() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_cm_u(0.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing2500_0Expectingcentimetres_u2500_010_0_rounded() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_cm_u(2500.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing25000_0Expectingcentimetres_u25000_010_0_rounded() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_cm_u(25000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing250000_0Expectingcentimetres_u250000_010_0_rounded() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_cm_u(250000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsing2500000_0Expectingcentimetres_u2500000_010_0_rounded() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_cm_u(2500000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsingNeg323_0Expecting0() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_cm_u(-323.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsingNeg10_0Expecting0() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_cm_u(-10.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsingNeg1000_0Expecting0() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_cm_u(-1000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsingNeg6_0Expecting0() {
        let unit = Millimetres_f(-6.0)
        let expected = mm_f_to_cm_u(-6.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_u(-Float.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_uUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_u(Float.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing15_0Expectingmetres_u15_01000_0_rounded() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_m_u(15.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing25_0Expectingmetres_u25_01000_0_rounded() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_m_u(25.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing250_0Expectingmetres_u250_01000_0_rounded() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_m_u(250.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing0_0Expectingmetres_u0_01000_0_rounded() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_m_u(0.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing2500_0Expectingmetres_u2500_01000_0_rounded() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_m_u(2500.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing25000_0Expectingmetres_u25000_01000_0_rounded() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_m_u(25000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing250000_0Expectingmetres_u250000_01000_0_rounded() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_m_u(250000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsing2500000_0Expectingmetres_u2500000_01000_0_rounded() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_m_u(2500000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsingNeg323_0Expecting0() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_m_u(-323.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsingNeg10_0Expecting0() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_m_u(-10.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsingNeg1000_0Expecting0() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_m_u(-1000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsingNeg6_0Expecting0() {
        let unit = Millimetres_f(-6.0)
        let expected = mm_f_to_m_u(-6.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_u(-Float.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_uUsingFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_u(Float.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing15_0Expectingcentimetres_f15_010_0() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_cm_f(15.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing25_0Expectingcentimetres_f25_010_0() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_cm_f(25.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing250_0Expectingcentimetres_f250_010_0() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_cm_f(250.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing0_0Expectingcentimetres_f0_010_0() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_cm_f(0.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing2500_0Expectingcentimetres_f2500_010_0() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_cm_f(2500.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing25000_0Expectingcentimetres_f25000_010_0() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_cm_f(25000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing250000_0Expectingcentimetres_f250000_010_0() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_cm_f(250000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsing2500000_0Expectingcentimetres_f2500000_010_0() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_cm_f(2500000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsingNeg323_0Expectingcentimetres_fNeg323_010_0() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_cm_f(-323.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsingNeg10_0Expectingcentimetres_fNeg10_010_0() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_cm_f(-10.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsingNeg1000_0Expectingcentimetres_fNeg1000_010_0() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_cm_f(-1000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsingNeg5_0Expectingcentimetres_fNeg5_010_0() {
        let unit = Millimetres_f(-5.0)
        let expected = mm_f_to_cm_f(-5.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_fNegFloat_greatestFiniteMagnitude10_0() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_f(-Float.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_fUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_fFloat_greatestFiniteMagnitude10_0() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_f(Float.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing15_0Expectingmetres_f15_01000_0() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_m_f(15.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing25_0Expectingmetres_f25_01000_0() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_m_f(25.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing250_0Expectingmetres_f250_01000_0() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_m_f(250.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing0_0Expectingmetres_f0_01000_0() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_m_f(0.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing2500_0Expectingmetres_f2500_01000_0() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_m_f(2500.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing25000_0Expectingmetres_f25000_01000_0() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_m_f(25000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing250000_0Expectingmetres_f250000_01000_0() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_m_f(250000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsing2500000_0Expectingmetres_f2500000_01000_0() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_m_f(2500000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsingNeg323_0Expectingmetres_fNeg323_01000_0() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_m_f(-323.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsingNeg10_0Expectingmetres_fNeg10_01000_0() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_m_f(-10.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsingNeg1000_0Expectingmetres_fNeg1000_01000_0() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_m_f(-1000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsingNeg5_0Expectingmetres_fNeg5_01000_0() {
        let unit = Millimetres_f(-5.0)
        let expected = mm_f_to_m_f(-5.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_fNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_f(-Float.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_fUsingFloat_greatestFiniteMagnitudeExpectingmetres_fFloat_greatestFiniteMagnitude1000_0() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_f(Float.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_dUsing0_0Expecting0_0() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_mm_d(0.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_dUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingmillimetres_dNegFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude))
        let expected = mm_f_to_mm_d(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_dUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingmillimetres_dFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude))
        let expected = mm_f_to_mm_d(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTomillimetres_dUsing5_0Expecting5_0() {
        let unit = Millimetres_f(5.0)
        let expected = mm_f_to_mm_d(5.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing15_0Expectingcentimetres_d15_010_0() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_cm_d(15.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing25_0Expectingcentimetres_d25_010_0() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_cm_d(25.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing250_0Expectingcentimetres_d250_010_0() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_cm_d(250.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing0_0Expectingcentimetres_d0_010_0() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_cm_d(0.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing2500_0Expectingcentimetres_d2500_010_0() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_cm_d(2500.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing25000_0Expectingcentimetres_d25000_010_0() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_cm_d(25000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing250000_0Expectingcentimetres_d250000_010_0() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_cm_d(250000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsing2500000_0Expectingcentimetres_d2500000_010_0() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_cm_d(2500000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsingNeg323_0Expectingcentimetres_dNeg323_010_0() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_cm_d(-323.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsingNeg10_0Expectingcentimetres_dNeg10_010_0() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_cm_d(-10.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsingNeg1000_0Expectingcentimetres_dNeg1000_010_0() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_cm_d(-1000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsingNeg5_0Expectingcentimetres_dNeg5_010_0() {
        let unit = Millimetres_f(-5.0)
        let expected = mm_f_to_cm_d(-5.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_dNegFloat_greatestFiniteMagnitude10_0() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_d(-Float.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTocentimetres_dUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_dFloat_greatestFiniteMagnitude10_0() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_cm_d(Float.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing15_0Expectingmetres_d15_01000_0() {
        let unit = Millimetres_f(15.0)
        let expected = mm_f_to_m_d(15.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing25_0Expectingmetres_d25_01000_0() {
        let unit = Millimetres_f(25.0)
        let expected = mm_f_to_m_d(25.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing250_0Expectingmetres_d250_01000_0() {
        let unit = Millimetres_f(250.0)
        let expected = mm_f_to_m_d(250.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing0_0Expectingmetres_d0_01000_0() {
        let unit = Millimetres_f(0.0)
        let expected = mm_f_to_m_d(0.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing2500_0Expectingmetres_d2500_01000_0() {
        let unit = Millimetres_f(2500.0)
        let expected = mm_f_to_m_d(2500.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing25000_0Expectingmetres_d25000_01000_0() {
        let unit = Millimetres_f(25000.0)
        let expected = mm_f_to_m_d(25000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing250000_0Expectingmetres_d250000_01000_0() {
        let unit = Millimetres_f(250000.0)
        let expected = mm_f_to_m_d(250000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsing2500000_0Expectingmetres_d2500000_01000_0() {
        let unit = Millimetres_f(2500000.0)
        let expected = mm_f_to_m_d(2500000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsingNeg323_0Expectingmetres_dNeg323_01000_0() {
        let unit = Millimetres_f(-323.0)
        let expected = mm_f_to_m_d(-323.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsingNeg10_0Expectingmetres_dNeg10_01000_0() {
        let unit = Millimetres_f(-10.0)
        let expected = mm_f_to_m_d(-10.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsingNeg1000_0Expectingmetres_dNeg1000_01000_0() {
        let unit = Millimetres_f(-1000.0)
        let expected = mm_f_to_m_d(-1000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsingNeg5_0Expectingmetres_dNeg5_01000_0() {
        let unit = Millimetres_f(-5.0)
        let expected = mm_f_to_m_d(-5.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Millimetres_f(-Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_d(-Float.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTometres_dUsingFloat_greatestFiniteMagnitudeExpectingmetres_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Millimetres_f(Float.greatestFiniteMagnitude)
        let expected = mm_f_to_m_d(Float.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_fTointUsing0_0Expecting0() {
        let expected = mm_f_to_i(0.0)
        let result = CInt(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTointUsing5_0Expecting5() {
        let expected = mm_f_to_i(5.0)
        let result = CInt(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTointUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = mm_f_to_i(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTointUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = mm_f_to_i(millimetres_f(Float.greatestFiniteMagnitude))
        let result = CInt(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_fUsing0Expecting0_0() {
        let expected = i_to_mm_f(0)
        let result = Millimetres_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_fUsing5Expecting5_0() {
        let expected = i_to_mm_f(5)
        let result = Millimetres_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_fUsingCIntCInt_minExpectingmillimetres_fCInt_min() {
        let expected = i_to_mm_f(CInt(CInt.min))
        let result = Millimetres_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_fUsingCIntCInt_maxExpectingmillimetres_fCInt_max() {
        let expected = i_to_mm_f(CInt(CInt.max))
        let result = Millimetres_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint8_tUsing0_0Expecting0() {
        let expected = mm_f_to_i8(0.0)
        let result = Int8(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint8_tUsing5_0Expecting5() {
        let expected = mm_f_to_i8(5.0)
        let result = Int8(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint8_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = mm_f_to_i8(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint8_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = mm_f_to_i8(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Int8(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_fUsing0Expecting0_0() {
        let expected = i8_to_mm_f(0)
        let result = Millimetres_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_fUsing5Expecting5_0() {
        let expected = i8_to_mm_f(5)
        let result = Millimetres_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_fUsingInt8Int8_minExpectingmillimetres_fInt8_min() {
        let expected = i8_to_mm_f(Int8(Int8.min))
        let result = Millimetres_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_fUsingInt8Int8_maxExpectingmillimetres_fInt8_max() {
        let expected = i8_to_mm_f(Int8(Int8.max))
        let result = Millimetres_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint16_tUsing0_0Expecting0() {
        let expected = mm_f_to_i16(0.0)
        let result = Int16(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint16_tUsing5_0Expecting5() {
        let expected = mm_f_to_i16(5.0)
        let result = Int16(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint16_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = mm_f_to_i16(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint16_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = mm_f_to_i16(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Int16(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_fUsing0Expecting0_0() {
        let expected = i16_to_mm_f(0)
        let result = Millimetres_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_fUsing5Expecting5_0() {
        let expected = i16_to_mm_f(5)
        let result = Millimetres_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_fUsingInt16Int16_minExpectingmillimetres_fInt16_min() {
        let expected = i16_to_mm_f(Int16(Int16.min))
        let result = Millimetres_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_fUsingInt16Int16_maxExpectingmillimetres_fInt16_max() {
        let expected = i16_to_mm_f(Int16(Int16.max))
        let result = Millimetres_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint32_tUsing0_0Expecting0() {
        let expected = mm_f_to_i32(0.0)
        let result = Int32(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint32_tUsing5_0Expecting5() {
        let expected = mm_f_to_i32(5.0)
        let result = Int32(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint32_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = mm_f_to_i32(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint32_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = mm_f_to_i32(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Int32(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_fUsing0Expecting0_0() {
        let expected = i32_to_mm_f(0)
        let result = Millimetres_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_fUsing5Expecting5_0() {
        let expected = i32_to_mm_f(5)
        let result = Millimetres_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_fUsingInt32Int32_minExpectingmillimetres_fInt32_min() {
        let expected = i32_to_mm_f(Int32(Int32.min))
        let result = Millimetres_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_fUsingInt32Int32_maxExpectingmillimetres_fInt32_max() {
        let expected = i32_to_mm_f(Int32(Int32.max))
        let result = Millimetres_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint64_tUsing0_0Expecting0() {
        let expected = mm_f_to_i64(0.0)
        let result = Int64(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint64_tUsing5_0Expecting5() {
        let expected = mm_f_to_i64(5.0)
        let result = Int64(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint64_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = mm_f_to_i64(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fToint64_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = mm_f_to_i64(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Int64(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_fUsing0Expecting0_0() {
        let expected = i64_to_mm_f(0)
        let result = Millimetres_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_fUsing5Expecting5_0() {
        let expected = i64_to_mm_f(5)
        let result = Millimetres_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_fUsingInt64Int64_minExpectingmillimetres_fInt64_min() {
        let expected = i64_to_mm_f(Int64(Int64.min))
        let result = Millimetres_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_fUsingInt64Int64_maxExpectingmillimetres_fInt64_max() {
        let expected = i64_to_mm_f(Int64(Int64.max))
        let result = Millimetres_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTounsignedintUsing0_0Expecting0() {
        let expected = mm_f_to_u(0.0)
        let result = CUnsignedInt(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTounsignedintUsing5_0Expecting5() {
        let expected = mm_f_to_u(5.0)
        let result = CUnsignedInt(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTounsignedintUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mm_f_to_u(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTounsignedintUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = mm_f_to_u(millimetres_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_fUsing0Expecting0_0() {
        let expected = u_to_mm_f(0)
        let result = Millimetres_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_fUsing5Expecting5_0() {
        let expected = u_to_mm_f(5)
        let result = Millimetres_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_fUsingCUnsignedIntCUnsignedInt_minExpectingmillimetres_fCUnsignedInt_min() {
        let expected = u_to_mm_f(CUnsignedInt(CUnsignedInt.min))
        let result = Millimetres_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_fUsingCUnsignedIntCUnsignedInt_maxExpectingmillimetres_fCUnsignedInt_max() {
        let expected = u_to_mm_f(CUnsignedInt(CUnsignedInt.max))
        let result = Millimetres_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint8_tUsing0_0Expecting0() {
        let expected = mm_f_to_u8(0.0)
        let result = UInt8(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint8_tUsing5_0Expecting5() {
        let expected = mm_f_to_u8(5.0)
        let result = UInt8(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint8_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = mm_f_to_u8(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint8_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = mm_f_to_u8(millimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_fUsing0Expecting0_0() {
        let expected = u8_to_mm_f(0)
        let result = Millimetres_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_fUsing5Expecting5_0() {
        let expected = u8_to_mm_f(5)
        let result = Millimetres_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_fUsingUInt8UInt8_minExpectingmillimetres_fUInt8_min() {
        let expected = u8_to_mm_f(UInt8(UInt8.min))
        let result = Millimetres_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_fUsingUInt8UInt8_maxExpectingmillimetres_fUInt8_max() {
        let expected = u8_to_mm_f(UInt8(UInt8.max))
        let result = Millimetres_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint16_tUsing0_0Expecting0() {
        let expected = mm_f_to_u16(0.0)
        let result = UInt16(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint16_tUsing5_0Expecting5() {
        let expected = mm_f_to_u16(5.0)
        let result = UInt16(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint16_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = mm_f_to_u16(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint16_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = mm_f_to_u16(millimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_fUsing0Expecting0_0() {
        let expected = u16_to_mm_f(0)
        let result = Millimetres_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_fUsing5Expecting5_0() {
        let expected = u16_to_mm_f(5)
        let result = Millimetres_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_fUsingUInt16UInt16_minExpectingmillimetres_fUInt16_min() {
        let expected = u16_to_mm_f(UInt16(UInt16.min))
        let result = Millimetres_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_fUsingUInt16UInt16_maxExpectingmillimetres_fUInt16_max() {
        let expected = u16_to_mm_f(UInt16(UInt16.max))
        let result = Millimetres_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint32_tUsing0_0Expecting0() {
        let expected = mm_f_to_u32(0.0)
        let result = UInt32(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint32_tUsing5_0Expecting5() {
        let expected = mm_f_to_u32(5.0)
        let result = UInt32(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint32_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = mm_f_to_u32(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint32_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = mm_f_to_u32(millimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_fUsing0Expecting0_0() {
        let expected = u32_to_mm_f(0)
        let result = Millimetres_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_fUsing5Expecting5_0() {
        let expected = u32_to_mm_f(5)
        let result = Millimetres_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_fUsingUInt32UInt32_minExpectingmillimetres_fUInt32_min() {
        let expected = u32_to_mm_f(UInt32(UInt32.min))
        let result = Millimetres_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_fUsingUInt32UInt32_maxExpectingmillimetres_fUInt32_max() {
        let expected = u32_to_mm_f(UInt32(UInt32.max))
        let result = Millimetres_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint64_tUsing0_0Expecting0() {
        let expected = mm_f_to_u64(0.0)
        let result = UInt64(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint64_tUsing5_0Expecting5() {
        let expected = mm_f_to_u64(5.0)
        let result = UInt64(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint64_tUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = mm_f_to_u64(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTouint64_tUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = mm_f_to_u64(millimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_fUsing0Expecting0_0() {
        let expected = u64_to_mm_f(0)
        let result = Millimetres_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_fUsing5Expecting5_0() {
        let expected = u64_to_mm_f(5)
        let result = Millimetres_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_fUsingUInt64UInt64_minExpectingmillimetres_fUInt64_min() {
        let expected = u64_to_mm_f(UInt64(UInt64.min))
        let result = Millimetres_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_fUsingUInt64UInt64_maxExpectingmillimetres_fUInt64_max() {
        let expected = u64_to_mm_f(UInt64(UInt64.max))
        let result = Millimetres_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTofloatUsing0_0Expecting0_0() {
        let expected = mm_f_to_f(0.0)
        let result = Float(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTofloatUsing5_0Expecting5_0() {
        let expected = mm_f_to_f(5.0)
        let result = Float(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTofloatUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = mm_f_to_f(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Float(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTofloatUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = mm_f_to_f(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Float(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_fUsing0_0Expecting0_0() {
        let expected = f_to_mm_f(0.0)
        let result = Millimetres_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_fUsing5_0Expecting5_0() {
        let expected = f_to_mm_f(5.0)
        let result = Millimetres_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTodoubleUsing0_0Expecting0_0() {
        let expected = mm_f_to_d(0.0)
        let result = Double(Millimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTodoubleUsing5_0Expecting5_0() {
        let expected = mm_f_to_d(5.0)
        let result = Double(Millimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTodoubleUsingmillimetres_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = mm_f_to_d(millimetres_f(-Float.greatestFiniteMagnitude))
        let result = Double(Millimetres_f(millimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_fTodoubleUsingmillimetres_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = mm_f_to_d(millimetres_f(Float.greatestFiniteMagnitude))
        let result = Double(Millimetres_f(millimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_fUsing0_0Expecting0_0() {
        let expected = d_to_mm_f(0.0)
        let result = Millimetres_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_fUsing5_0Expecting5_0() {
        let expected = d_to_mm_f(5.0)
        let result = Millimetres_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmillimetres_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_mm_f(Double(-Double.greatestFiniteMagnitude))
        let result = Millimetres_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingmillimetres_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_mm_f(Double(Double.greatestFiniteMagnitude))
        let result = Millimetres_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides millimetres_d unit tests.
final class Millimetres_dTests: XCTestCase {

    func testmillimetres_dTomillimetres_tUsing0_0Expecting0() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_mm_t(0.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let unit = Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude))
        let expected = mm_d_to_mm_t(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let unit = Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude))
        let expected = mm_d_to_mm_t(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_tUsing5_0Expecting5() {
        let unit = Millimetres_d(5.0)
        let expected = mm_d_to_mm_t(5.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing15_0Expectingcentimetres_t15_010_0_rounded() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_cm_t(15.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing25_0Expectingcentimetres_t25_010_0_rounded() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_cm_t(25.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing250_0Expectingcentimetres_t250_010_0_rounded() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_cm_t(250.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing0_0Expectingcentimetres_t0_010_0_rounded() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_cm_t(0.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing2500_0Expectingcentimetres_t2500_010_0_rounded() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_cm_t(2500.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing25000_0Expectingcentimetres_t25000_010_0_rounded() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_cm_t(25000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing250000_0Expectingcentimetres_t250000_010_0_rounded() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_cm_t(250000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsing2500000_0Expectingcentimetres_t2500000_010_0_rounded() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_cm_t(2500000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsingNeg323_0Expectingcentimetres_tNeg323_010_0_rounded() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_cm_t(-323.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsingNeg10_0Expectingcentimetres_tNeg10_010_0_rounded() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_cm_t(-10.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsingNeg1000_0Expectingcentimetres_tNeg1000_010_0_rounded() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_cm_t(-1000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsingNeg5_0Expectingcentimetres_tNeg5_010_0_rounded() {
        let unit = Millimetres_d(-5.0)
        let expected = mm_d_to_cm_t(-5.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_tUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_t(-Double.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTocentimetres_tUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_t(Double.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_tUsing15_0Expectingmetres_t15_01000_0_rounded() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_m_t(15.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsing25_0Expectingmetres_t25_01000_0_rounded() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_m_t(25.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsing250_0Expectingmetres_t250_01000_0_rounded() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_m_t(250.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsing0_0Expectingmetres_t0_01000_0_rounded() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_m_t(0.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsing2500_0Expectingmetres_t2500_01000_0_rounded() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_m_t(2500.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsing25000_0Expectingmetres_t25000_01000_0_rounded() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_m_t(25000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsing250000_0Expectingmetres_t250000_01000_0_rounded() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_m_t(250000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsing2500000_0Expectingmetres_t2500000_01000_0_rounded() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_m_t(2500000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsingNeg323_0Expectingmetres_tNeg323_01000_0_rounded() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_m_t(-323.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsingNeg10_0Expectingmetres_tNeg10_01000_0_rounded() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_m_t(-10.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsingNeg1000_0Expectingmetres_tNeg1000_01000_0_rounded() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_m_t(-1000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsingNeg5_0Expectingmetres_tNeg5_01000_0_rounded() {
        let unit = Millimetres_d(-5.0)
        let expected = mm_d_to_m_t(-5.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_tUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_t(-Double.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_tUsingDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_t(Double.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTomillimetres_uUsing0_0Expecting0() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_mm_u(0.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_uUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude))
        let expected = mm_d_to_mm_u(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_uUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude))
        let expected = mm_d_to_mm_u(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_uUsing5_0Expecting5() {
        let unit = Millimetres_d(5.0)
        let expected = mm_d_to_mm_u(5.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing15_0Expectingcentimetres_u15_010_0_rounded() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_cm_u(15.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing25_0Expectingcentimetres_u25_010_0_rounded() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_cm_u(25.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing250_0Expectingcentimetres_u250_010_0_rounded() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_cm_u(250.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing0_0Expectingcentimetres_u0_010_0_rounded() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_cm_u(0.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing2500_0Expectingcentimetres_u2500_010_0_rounded() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_cm_u(2500.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing25000_0Expectingcentimetres_u25000_010_0_rounded() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_cm_u(25000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing250000_0Expectingcentimetres_u250000_010_0_rounded() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_cm_u(250000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsing2500000_0Expectingcentimetres_u2500000_010_0_rounded() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_cm_u(2500000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsingNeg323_0Expecting0() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_cm_u(-323.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsingNeg10_0Expecting0() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_cm_u(-10.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsingNeg1000_0Expecting0() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_cm_u(-1000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsingNeg6_0Expecting0() {
        let unit = Millimetres_d(-6.0)
        let expected = mm_d_to_cm_u(-6.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_uUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_u(-Double.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTocentimetres_uUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_u(Double.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_uUsing15_0Expectingmetres_u15_01000_0_rounded() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_m_u(15.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsing25_0Expectingmetres_u25_01000_0_rounded() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_m_u(25.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsing250_0Expectingmetres_u250_01000_0_rounded() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_m_u(250.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsing0_0Expectingmetres_u0_01000_0_rounded() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_m_u(0.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsing2500_0Expectingmetres_u2500_01000_0_rounded() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_m_u(2500.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsing25000_0Expectingmetres_u25000_01000_0_rounded() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_m_u(25000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsing250000_0Expectingmetres_u250000_01000_0_rounded() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_m_u(250000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsing2500000_0Expectingmetres_u2500000_01000_0_rounded() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_m_u(2500000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsingNeg323_0Expecting0() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_m_u(-323.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsingNeg10_0Expecting0() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_m_u(-10.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsingNeg1000_0Expecting0() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_m_u(-1000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsingNeg6_0Expecting0() {
        let unit = Millimetres_d(-6.0)
        let expected = mm_d_to_m_u(-6.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_uUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_u(-Double.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_uUsingDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_u(Double.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTomillimetres_fUsing0_0Expecting0_0() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_mm_f(0.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_fUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingmillimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude))
        let expected = mm_d_to_mm_f(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_fUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingmillimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude))
        let expected = mm_d_to_mm_f(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTomillimetres_fUsing5_0Expecting5_0() {
        let unit = Millimetres_d(5.0)
        let expected = mm_d_to_mm_f(5.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing15_0Expectingcentimetres_f15_010_0() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_cm_f(15.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing25_0Expectingcentimetres_f25_010_0() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_cm_f(25.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing250_0Expectingcentimetres_f250_010_0() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_cm_f(250.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing0_0Expectingcentimetres_f0_010_0() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_cm_f(0.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing2500_0Expectingcentimetres_f2500_010_0() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_cm_f(2500.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing25000_0Expectingcentimetres_f25000_010_0() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_cm_f(25000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing250000_0Expectingcentimetres_f250000_010_0() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_cm_f(250000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsing2500000_0Expectingcentimetres_f2500000_010_0() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_cm_f(2500000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsingNeg323_0Expectingcentimetres_fNeg323_010_0() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_cm_f(-323.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsingNeg10_0Expectingcentimetres_fNeg10_010_0() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_cm_f(-10.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsingNeg1000_0Expectingcentimetres_fNeg1000_010_0() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_cm_f(-1000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsingNeg5_0Expectingcentimetres_fNeg5_010_0() {
        let unit = Millimetres_d(-5.0)
        let expected = mm_d_to_cm_f(-5.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_fUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_f(-Double.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTocentimetres_fUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_f(Double.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_fUsing15_0Expectingmetres_f15_01000_0() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_m_f(15.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsing25_0Expectingmetres_f25_01000_0() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_m_f(25.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsing250_0Expectingmetres_f250_01000_0() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_m_f(250.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsing0_0Expectingmetres_f0_01000_0() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_m_f(0.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsing2500_0Expectingmetres_f2500_01000_0() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_m_f(2500.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsing25000_0Expectingmetres_f25000_01000_0() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_m_f(25000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsing250000_0Expectingmetres_f250000_01000_0() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_m_f(250000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsing2500000_0Expectingmetres_f2500000_01000_0() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_m_f(2500000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsingNeg323_0Expectingmetres_fNeg323_01000_0() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_m_f(-323.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsingNeg10_0Expectingmetres_fNeg10_01000_0() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_m_f(-10.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsingNeg1000_0Expectingmetres_fNeg1000_01000_0() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_m_f(-1000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsingNeg5_0Expectingmetres_fNeg5_01000_0() {
        let unit = Millimetres_d(-5.0)
        let expected = mm_d_to_m_f(-5.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_fUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_f(-Double.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_fUsingDouble_greatestFiniteMagnitudeExpectingmetres_fFloat_greatestFiniteMagnitude() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_f(Double.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTocentimetres_dUsing15_0Expectingcentimetres_d15_010_0() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_cm_d(15.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsing25_0Expectingcentimetres_d25_010_0() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_cm_d(25.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsing250_0Expectingcentimetres_d250_010_0() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_cm_d(250.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsing0_0Expectingcentimetres_d0_010_0() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_cm_d(0.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsing2500_0Expectingcentimetres_d2500_010_0() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_cm_d(2500.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsing25000_0Expectingcentimetres_d25000_010_0() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_cm_d(25000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsing250000_0Expectingcentimetres_d250000_010_0() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_cm_d(250000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsing2500000_0Expectingcentimetres_d2500000_010_0() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_cm_d(2500000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsingNeg323_0Expectingcentimetres_dNeg323_010_0() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_cm_d(-323.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsingNeg10_0Expectingcentimetres_dNeg10_010_0() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_cm_d(-10.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsingNeg1000_0Expectingcentimetres_dNeg1000_010_0() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_cm_d(-1000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsingNeg5_0Expectingcentimetres_dNeg5_010_0() {
        let unit = Millimetres_d(-5.0)
        let expected = mm_d_to_cm_d(-5.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTocentimetres_dUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_dNegDouble_greatestFiniteMagnitude10_0() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_d(-Double.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTocentimetres_dUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_dDouble_greatestFiniteMagnitude10_0() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_cm_d(Double.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_dUsing15_0Expectingmetres_d15_01000_0() {
        let unit = Millimetres_d(15.0)
        let expected = mm_d_to_m_d(15.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsing25_0Expectingmetres_d25_01000_0() {
        let unit = Millimetres_d(25.0)
        let expected = mm_d_to_m_d(25.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsing250_0Expectingmetres_d250_01000_0() {
        let unit = Millimetres_d(250.0)
        let expected = mm_d_to_m_d(250.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsing0_0Expectingmetres_d0_01000_0() {
        let unit = Millimetres_d(0.0)
        let expected = mm_d_to_m_d(0.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsing2500_0Expectingmetres_d2500_01000_0() {
        let unit = Millimetres_d(2500.0)
        let expected = mm_d_to_m_d(2500.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsing25000_0Expectingmetres_d25000_01000_0() {
        let unit = Millimetres_d(25000.0)
        let expected = mm_d_to_m_d(25000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsing250000_0Expectingmetres_d250000_01000_0() {
        let unit = Millimetres_d(250000.0)
        let expected = mm_d_to_m_d(250000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsing2500000_0Expectingmetres_d2500000_01000_0() {
        let unit = Millimetres_d(2500000.0)
        let expected = mm_d_to_m_d(2500000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsingNeg323_0Expectingmetres_dNeg323_01000_0() {
        let unit = Millimetres_d(-323.0)
        let expected = mm_d_to_m_d(-323.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsingNeg10_0Expectingmetres_dNeg10_01000_0() {
        let unit = Millimetres_d(-10.0)
        let expected = mm_d_to_m_d(-10.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsingNeg1000_0Expectingmetres_dNeg1000_01000_0() {
        let unit = Millimetres_d(-1000.0)
        let expected = mm_d_to_m_d(-1000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsingNeg5_0Expectingmetres_dNeg5_01000_0() {
        let unit = Millimetres_d(-5.0)
        let expected = mm_d_to_m_d(-5.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmillimetres_dTometres_dUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_dNegDouble_greatestFiniteMagnitude1000_0() {
        let unit = Millimetres_d(-Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_d(-Double.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTometres_dUsingDouble_greatestFiniteMagnitudeExpectingmetres_dDouble_greatestFiniteMagnitude1000_0() {
        let unit = Millimetres_d(Double.greatestFiniteMagnitude)
        let expected = mm_d_to_m_d(Double.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTointUsing0_0Expecting0() {
        let expected = mm_d_to_i(0.0)
        let result = CInt(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTointUsing5_0Expecting5() {
        let expected = mm_d_to_i(5.0)
        let result = CInt(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTointUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = mm_d_to_i(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTointUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = mm_d_to_i(millimetres_d(Double.greatestFiniteMagnitude))
        let result = CInt(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_dUsing0Expecting0_0() {
        let expected = i_to_mm_d(0)
        let result = Millimetres_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_dUsing5Expecting5_0() {
        let expected = i_to_mm_d(5)
        let result = Millimetres_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_dUsingCIntCInt_minExpectingmillimetres_dCInt_min() {
        let expected = i_to_mm_d(CInt(CInt.min))
        let result = Millimetres_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomillimetres_dUsingCIntCInt_maxExpectingmillimetres_dCInt_max() {
        let expected = i_to_mm_d(CInt(CInt.max))
        let result = Millimetres_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint8_tUsing0_0Expecting0() {
        let expected = mm_d_to_i8(0.0)
        let result = Int8(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint8_tUsing5_0Expecting5() {
        let expected = mm_d_to_i8(5.0)
        let result = Int8(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint8_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = mm_d_to_i8(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint8_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = mm_d_to_i8(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Int8(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_dUsing0Expecting0_0() {
        let expected = i8_to_mm_d(0)
        let result = Millimetres_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_dUsing5Expecting5_0() {
        let expected = i8_to_mm_d(5)
        let result = Millimetres_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_dUsingInt8Int8_minExpectingmillimetres_dInt8_min() {
        let expected = i8_to_mm_d(Int8(Int8.min))
        let result = Millimetres_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomillimetres_dUsingInt8Int8_maxExpectingmillimetres_dInt8_max() {
        let expected = i8_to_mm_d(Int8(Int8.max))
        let result = Millimetres_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint16_tUsing0_0Expecting0() {
        let expected = mm_d_to_i16(0.0)
        let result = Int16(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint16_tUsing5_0Expecting5() {
        let expected = mm_d_to_i16(5.0)
        let result = Int16(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint16_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = mm_d_to_i16(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint16_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = mm_d_to_i16(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Int16(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_dUsing0Expecting0_0() {
        let expected = i16_to_mm_d(0)
        let result = Millimetres_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_dUsing5Expecting5_0() {
        let expected = i16_to_mm_d(5)
        let result = Millimetres_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_dUsingInt16Int16_minExpectingmillimetres_dInt16_min() {
        let expected = i16_to_mm_d(Int16(Int16.min))
        let result = Millimetres_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomillimetres_dUsingInt16Int16_maxExpectingmillimetres_dInt16_max() {
        let expected = i16_to_mm_d(Int16(Int16.max))
        let result = Millimetres_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint32_tUsing0_0Expecting0() {
        let expected = mm_d_to_i32(0.0)
        let result = Int32(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint32_tUsing5_0Expecting5() {
        let expected = mm_d_to_i32(5.0)
        let result = Int32(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint32_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = mm_d_to_i32(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint32_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = mm_d_to_i32(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Int32(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_dUsing0Expecting0_0() {
        let expected = i32_to_mm_d(0)
        let result = Millimetres_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_dUsing5Expecting5_0() {
        let expected = i32_to_mm_d(5)
        let result = Millimetres_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_dUsingInt32Int32_minExpectingmillimetres_dInt32_min() {
        let expected = i32_to_mm_d(Int32(Int32.min))
        let result = Millimetres_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomillimetres_dUsingInt32Int32_maxExpectingmillimetres_dInt32_max() {
        let expected = i32_to_mm_d(Int32(Int32.max))
        let result = Millimetres_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint64_tUsing0_0Expecting0() {
        let expected = mm_d_to_i64(0.0)
        let result = Int64(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint64_tUsing5_0Expecting5() {
        let expected = mm_d_to_i64(5.0)
        let result = Int64(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint64_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = mm_d_to_i64(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dToint64_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = mm_d_to_i64(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Int64(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_dUsing0Expecting0_0() {
        let expected = i64_to_mm_d(0)
        let result = Millimetres_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_dUsing5Expecting5_0() {
        let expected = i64_to_mm_d(5)
        let result = Millimetres_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_dUsingInt64Int64_minExpectingmillimetres_dInt64_min() {
        let expected = i64_to_mm_d(Int64(Int64.min))
        let result = Millimetres_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomillimetres_dUsingInt64Int64_maxExpectingmillimetres_dInt64_max() {
        let expected = i64_to_mm_d(Int64(Int64.max))
        let result = Millimetres_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTounsignedintUsing0_0Expecting0() {
        let expected = mm_d_to_u(0.0)
        let result = CUnsignedInt(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTounsignedintUsing5_0Expecting5() {
        let expected = mm_d_to_u(5.0)
        let result = CUnsignedInt(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTounsignedintUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = mm_d_to_u(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTounsignedintUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = mm_d_to_u(millimetres_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_dUsing0Expecting0_0() {
        let expected = u_to_mm_d(0)
        let result = Millimetres_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_dUsing5Expecting5_0() {
        let expected = u_to_mm_d(5)
        let result = Millimetres_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_dUsingCUnsignedIntCUnsignedInt_minExpectingmillimetres_dCUnsignedInt_min() {
        let expected = u_to_mm_d(CUnsignedInt(CUnsignedInt.min))
        let result = Millimetres_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomillimetres_dUsingCUnsignedIntCUnsignedInt_maxExpectingmillimetres_dCUnsignedInt_max() {
        let expected = u_to_mm_d(CUnsignedInt(CUnsignedInt.max))
        let result = Millimetres_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint8_tUsing0_0Expecting0() {
        let expected = mm_d_to_u8(0.0)
        let result = UInt8(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint8_tUsing5_0Expecting5() {
        let expected = mm_d_to_u8(5.0)
        let result = UInt8(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint8_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = mm_d_to_u8(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint8_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = mm_d_to_u8(millimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_dUsing0Expecting0_0() {
        let expected = u8_to_mm_d(0)
        let result = Millimetres_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_dUsing5Expecting5_0() {
        let expected = u8_to_mm_d(5)
        let result = Millimetres_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_dUsingUInt8UInt8_minExpectingmillimetres_dUInt8_min() {
        let expected = u8_to_mm_d(UInt8(UInt8.min))
        let result = Millimetres_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomillimetres_dUsingUInt8UInt8_maxExpectingmillimetres_dUInt8_max() {
        let expected = u8_to_mm_d(UInt8(UInt8.max))
        let result = Millimetres_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint16_tUsing0_0Expecting0() {
        let expected = mm_d_to_u16(0.0)
        let result = UInt16(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint16_tUsing5_0Expecting5() {
        let expected = mm_d_to_u16(5.0)
        let result = UInt16(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint16_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = mm_d_to_u16(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint16_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = mm_d_to_u16(millimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_dUsing0Expecting0_0() {
        let expected = u16_to_mm_d(0)
        let result = Millimetres_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_dUsing5Expecting5_0() {
        let expected = u16_to_mm_d(5)
        let result = Millimetres_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_dUsingUInt16UInt16_minExpectingmillimetres_dUInt16_min() {
        let expected = u16_to_mm_d(UInt16(UInt16.min))
        let result = Millimetres_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomillimetres_dUsingUInt16UInt16_maxExpectingmillimetres_dUInt16_max() {
        let expected = u16_to_mm_d(UInt16(UInt16.max))
        let result = Millimetres_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint32_tUsing0_0Expecting0() {
        let expected = mm_d_to_u32(0.0)
        let result = UInt32(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint32_tUsing5_0Expecting5() {
        let expected = mm_d_to_u32(5.0)
        let result = UInt32(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint32_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = mm_d_to_u32(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint32_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = mm_d_to_u32(millimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_dUsing0Expecting0_0() {
        let expected = u32_to_mm_d(0)
        let result = Millimetres_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_dUsing5Expecting5_0() {
        let expected = u32_to_mm_d(5)
        let result = Millimetres_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_dUsingUInt32UInt32_minExpectingmillimetres_dUInt32_min() {
        let expected = u32_to_mm_d(UInt32(UInt32.min))
        let result = Millimetres_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomillimetres_dUsingUInt32UInt32_maxExpectingmillimetres_dUInt32_max() {
        let expected = u32_to_mm_d(UInt32(UInt32.max))
        let result = Millimetres_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint64_tUsing0_0Expecting0() {
        let expected = mm_d_to_u64(0.0)
        let result = UInt64(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint64_tUsing5_0Expecting5() {
        let expected = mm_d_to_u64(5.0)
        let result = UInt64(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint64_tUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = mm_d_to_u64(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTouint64_tUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = mm_d_to_u64(millimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_dUsing0Expecting0_0() {
        let expected = u64_to_mm_d(0)
        let result = Millimetres_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_dUsing5Expecting5_0() {
        let expected = u64_to_mm_d(5)
        let result = Millimetres_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_dUsingUInt64UInt64_minExpectingmillimetres_dUInt64_min() {
        let expected = u64_to_mm_d(UInt64(UInt64.min))
        let result = Millimetres_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomillimetres_dUsingUInt64UInt64_maxExpectingmillimetres_dUInt64_max() {
        let expected = u64_to_mm_d(UInt64(UInt64.max))
        let result = Millimetres_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTofloatUsing0_0Expecting0_0() {
        let expected = mm_d_to_f(0.0)
        let result = Float(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTofloatUsing5_0Expecting5_0() {
        let expected = mm_d_to_f(5.0)
        let result = Float(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTofloatUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = mm_d_to_f(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Float(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTofloatUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = mm_d_to_f(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Float(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_dUsing0_0Expecting0_0() {
        let expected = f_to_mm_d(0.0)
        let result = Millimetres_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_dUsing5_0Expecting5_0() {
        let expected = f_to_mm_d(5.0)
        let result = Millimetres_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmillimetres_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_mm_d(Float(-Float.greatestFiniteMagnitude))
        let result = Millimetres_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomillimetres_dUsingFloatFloat_greatestFiniteMagnitudeExpectingmillimetres_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_mm_d(Float(Float.greatestFiniteMagnitude))
        let result = Millimetres_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTodoubleUsing0_0Expecting0_0() {
        let expected = mm_d_to_d(0.0)
        let result = Double(Millimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTodoubleUsing5_0Expecting5_0() {
        let expected = mm_d_to_d(5.0)
        let result = Double(Millimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTodoubleUsingmillimetres_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = mm_d_to_d(millimetres_d(-Double.greatestFiniteMagnitude))
        let result = Double(Millimetres_d(millimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmillimetres_dTodoubleUsingmillimetres_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = mm_d_to_d(millimetres_d(Double.greatestFiniteMagnitude))
        let result = Double(Millimetres_d(millimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_dUsing0_0Expecting0_0() {
        let expected = d_to_mm_d(0.0)
        let result = Millimetres_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomillimetres_dUsing5_0Expecting5_0() {
        let expected = d_to_mm_d(5.0)
        let result = Millimetres_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides centimetres_t unit tests.
final class Centimetres_tTests: XCTestCase {

    func testcentimetres_tTomillimetres_tUsing15Expectingmillimetres_t1510() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_mm_t(15)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsing25Expectingmillimetres_t2510() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_mm_t(25)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsing250Expectingmillimetres_t25010() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_mm_t(250)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsing0Expectingmillimetres_t010() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_mm_t(0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsing2500Expectingmillimetres_t250010() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_mm_t(2500)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsing25000Expectingmillimetres_t2500010() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_mm_t(25000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsing250000Expectingmillimetres_t25000010() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_mm_t(250000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsing2500000Expectingmillimetres_t250000010() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_mm_t(2500000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsingNeg323Expectingmillimetres_tNeg32310() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_mm_t(-323)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsingNeg10Expectingmillimetres_tNeg1010() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_mm_t(-10)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsingNeg1000Expectingmillimetres_tNeg100010() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_mm_t(-1000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsingNeg5Expectingmillimetres_tNeg510() {
        let unit = Centimetres_t(-5)
        let expected = cm_t_to_mm_t(-5)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsingCInt_minExpectingmillimetres_tCInt_min() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_mm_t(CInt.min)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_tUsingCInt_maxExpectingmillimetres_tCInt_max() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_mm_t(CInt.max)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing15Expectingmetres_t15100() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_m_t(15)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing25Expectingmetres_t25100() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_m_t(25)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing250Expectingmetres_t250100() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_m_t(250)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing0Expectingmetres_t0100() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_m_t(0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing2500Expectingmetres_t2500100() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_m_t(2500)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing25000Expectingmetres_t25000100() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_m_t(25000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing250000Expectingmetres_t250000100() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_m_t(250000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsing2500000Expectingmetres_t2500000100() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_m_t(2500000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsingNeg323Expectingmetres_tNeg323100() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_m_t(-323)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsingNeg10Expectingmetres_tNeg10100() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_m_t(-10)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsingNeg1000Expectingmetres_tNeg1000100() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_m_t(-1000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsingNeg5Expectingmetres_tNeg5100() {
        let unit = Centimetres_t(-5)
        let expected = cm_t_to_m_t(-5)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsingCInt_minExpectingmetres_tCInt_min100() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_m_t(CInt.min)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_tUsingCInt_maxExpectingmetres_tCInt_max100() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_m_t(CInt.max)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing15Expectingmillimetres_u1510() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_mm_u(15)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing25Expectingmillimetres_u2510() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_mm_u(25)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing250Expectingmillimetres_u25010() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_mm_u(250)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing0Expectingmillimetres_u010() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_mm_u(0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing2500Expectingmillimetres_u250010() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_mm_u(2500)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing25000Expectingmillimetres_u2500010() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_mm_u(25000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing250000Expectingmillimetres_u25000010() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_mm_u(250000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsing2500000Expectingmillimetres_u250000010() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_mm_u(2500000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsingNeg323Expecting0() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_mm_u(-323)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsingNeg10Expecting0() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_mm_u(-10)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsingNeg1000Expecting0() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_mm_u(-1000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsingNeg6Expecting0() {
        let unit = Centimetres_t(-6)
        let expected = cm_t_to_mm_u(-6)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsingCInt_minExpecting0() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_mm_u(CInt.min)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_uUsingCInt_maxExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_mm_u(CInt.max)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_uUsing0Expecting0() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_cm_u(0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_uUsingcentimetres_tCInt_minExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Centimetres_t(centimetres_t(CInt.min))
        let expected = cm_t_to_cm_u(centimetres_t(CInt.min))
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_uUsingcentimetres_tCInt_maxExpectingcentimetres_uCInt_max() {
        let unit = Centimetres_t(centimetres_t(CInt.max))
        let expected = cm_t_to_cm_u(centimetres_t(CInt.max))
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_uUsing5Expecting5() {
        let unit = Centimetres_t(5)
        let expected = cm_t_to_cm_u(5)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing15Expectingmetres_u15100() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_m_u(15)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing25Expectingmetres_u25100() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_m_u(25)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing250Expectingmetres_u250100() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_m_u(250)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing0Expectingmetres_u0100() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_m_u(0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing2500Expectingmetres_u2500100() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_m_u(2500)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing25000Expectingmetres_u25000100() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_m_u(25000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing250000Expectingmetres_u250000100() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_m_u(250000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsing2500000Expectingmetres_u2500000100() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_m_u(2500000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsingNeg323Expecting0() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_m_u(-323)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsingNeg10Expecting0() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_m_u(-10)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsingNeg1000Expecting0() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_m_u(-1000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsingNeg6Expecting0() {
        let unit = Centimetres_t(-6)
        let expected = cm_t_to_m_u(-6)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsingCInt_minExpecting0() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_m_u(CInt.min)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_uUsingCInt_maxExpectingmetres_uCInt_max100() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_m_u(CInt.max)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing15Expectingmillimetres_f15_010_0() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_mm_f(15)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing25Expectingmillimetres_f25_010_0() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_mm_f(25)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing250Expectingmillimetres_f250_010_0() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_mm_f(250)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing0Expectingmillimetres_f0_010_0() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_mm_f(0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing2500Expectingmillimetres_f2500_010_0() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_mm_f(2500)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing25000Expectingmillimetres_f25000_010_0() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_mm_f(25000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing250000Expectingmillimetres_f250000_010_0() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_mm_f(250000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsing2500000Expectingmillimetres_f2500000_010_0() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_mm_f(2500000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsingNeg323Expectingmillimetres_fNeg323_010_0() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_mm_f(-323)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsingNeg10Expectingmillimetres_fNeg10_010_0() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_mm_f(-10)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsingNeg1000Expectingmillimetres_fNeg1000_010_0() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_mm_f(-1000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsingNeg5Expectingmillimetres_fNeg5_010_0() {
        let unit = Centimetres_t(-5)
        let expected = cm_t_to_mm_f(-5)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsingCInt_minExpectingmillimetres_fCInt_min10_0() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_mm_f(CInt.min)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_fUsingCInt_maxExpectingmillimetres_fCInt_max10_0() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_mm_f(CInt.max)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_fUsing0Expecting0_0() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_cm_f(0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_fUsingcentimetres_tCInt_minExpectingcentimetres_fCInt_min() {
        let unit = Centimetres_t(centimetres_t(CInt.min))
        let expected = cm_t_to_cm_f(centimetres_t(CInt.min))
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_fUsingcentimetres_tCInt_maxExpectingcentimetres_fCInt_max() {
        let unit = Centimetres_t(centimetres_t(CInt.max))
        let expected = cm_t_to_cm_f(centimetres_t(CInt.max))
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_fUsing5Expecting5_0() {
        let unit = Centimetres_t(5)
        let expected = cm_t_to_cm_f(5)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing15Expectingmetres_f15_0100_0() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_m_f(15)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing25Expectingmetres_f25_0100_0() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_m_f(25)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing250Expectingmetres_f250_0100_0() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_m_f(250)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing0Expectingmetres_f0_0100_0() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_m_f(0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing2500Expectingmetres_f2500_0100_0() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_m_f(2500)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing25000Expectingmetres_f25000_0100_0() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_m_f(25000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing250000Expectingmetres_f250000_0100_0() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_m_f(250000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsing2500000Expectingmetres_f2500000_0100_0() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_m_f(2500000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsingNeg323Expectingmetres_fNeg323_0100_0() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_m_f(-323)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsingNeg10Expectingmetres_fNeg10_0100_0() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_m_f(-10)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsingNeg1000Expectingmetres_fNeg1000_0100_0() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_m_f(-1000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsingNeg5Expectingmetres_fNeg5_0100_0() {
        let unit = Centimetres_t(-5)
        let expected = cm_t_to_m_f(-5)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsingCInt_minExpectingmetres_fCInt_min100_0() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_m_f(CInt.min)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_fUsingCInt_maxExpectingmetres_fCInt_max100_0() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_m_f(CInt.max)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing15Expectingmillimetres_d15_010_0() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_mm_d(15)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing25Expectingmillimetres_d25_010_0() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_mm_d(25)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing250Expectingmillimetres_d250_010_0() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_mm_d(250)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing0Expectingmillimetres_d0_010_0() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_mm_d(0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing2500Expectingmillimetres_d2500_010_0() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_mm_d(2500)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing25000Expectingmillimetres_d25000_010_0() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_mm_d(25000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing250000Expectingmillimetres_d250000_010_0() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_mm_d(250000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsing2500000Expectingmillimetres_d2500000_010_0() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_mm_d(2500000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsingNeg323Expectingmillimetres_dNeg323_010_0() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_mm_d(-323)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsingNeg10Expectingmillimetres_dNeg10_010_0() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_mm_d(-10)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsingNeg1000Expectingmillimetres_dNeg1000_010_0() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_mm_d(-1000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsingNeg5Expectingmillimetres_dNeg5_010_0() {
        let unit = Centimetres_t(-5)
        let expected = cm_t_to_mm_d(-5)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsingCInt_minExpectingmillimetres_dCInt_min10_0() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_mm_d(CInt.min)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTomillimetres_dUsingCInt_maxExpectingmillimetres_dCInt_max10_0() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_mm_d(CInt.max)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_dUsing0Expecting0_0() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_cm_d(0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_dUsingcentimetres_tCInt_minExpectingcentimetres_dCInt_min() {
        let unit = Centimetres_t(centimetres_t(CInt.min))
        let expected = cm_t_to_cm_d(centimetres_t(CInt.min))
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_dUsingcentimetres_tCInt_maxExpectingcentimetres_dCInt_max() {
        let unit = Centimetres_t(centimetres_t(CInt.max))
        let expected = cm_t_to_cm_d(centimetres_t(CInt.max))
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTocentimetres_dUsing5Expecting5_0() {
        let unit = Centimetres_t(5)
        let expected = cm_t_to_cm_d(5)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing15Expectingmetres_d15_0100_0() {
        let unit = Centimetres_t(15)
        let expected = cm_t_to_m_d(15)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing25Expectingmetres_d25_0100_0() {
        let unit = Centimetres_t(25)
        let expected = cm_t_to_m_d(25)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing250Expectingmetres_d250_0100_0() {
        let unit = Centimetres_t(250)
        let expected = cm_t_to_m_d(250)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing0Expectingmetres_d0_0100_0() {
        let unit = Centimetres_t(0)
        let expected = cm_t_to_m_d(0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing2500Expectingmetres_d2500_0100_0() {
        let unit = Centimetres_t(2500)
        let expected = cm_t_to_m_d(2500)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing25000Expectingmetres_d25000_0100_0() {
        let unit = Centimetres_t(25000)
        let expected = cm_t_to_m_d(25000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing250000Expectingmetres_d250000_0100_0() {
        let unit = Centimetres_t(250000)
        let expected = cm_t_to_m_d(250000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsing2500000Expectingmetres_d2500000_0100_0() {
        let unit = Centimetres_t(2500000)
        let expected = cm_t_to_m_d(2500000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsingNeg323Expectingmetres_dNeg323_0100_0() {
        let unit = Centimetres_t(-323)
        let expected = cm_t_to_m_d(-323)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsingNeg10Expectingmetres_dNeg10_0100_0() {
        let unit = Centimetres_t(-10)
        let expected = cm_t_to_m_d(-10)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsingNeg1000Expectingmetres_dNeg1000_0100_0() {
        let unit = Centimetres_t(-1000)
        let expected = cm_t_to_m_d(-1000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsingNeg5Expectingmetres_dNeg5_0100_0() {
        let unit = Centimetres_t(-5)
        let expected = cm_t_to_m_d(-5)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsingCInt_minExpectingmetres_dCInt_min100_0() {
        let unit = Centimetres_t(CInt.min)
        let expected = cm_t_to_m_d(CInt.min)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTometres_dUsingCInt_maxExpectingmetres_dCInt_max100_0() {
        let unit = Centimetres_t(CInt.max)
        let expected = cm_t_to_m_d(CInt.max)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_tTointUsing0Expecting0() {
        let expected = cm_t_to_i(0)
        let result = CInt(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTointUsing5Expecting5() {
        let expected = cm_t_to_i(5)
        let result = CInt(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTointUsingcentimetres_tCInt_minExpectingCIntCInt_min() {
        let expected = cm_t_to_i(centimetres_t(CInt.min))
        let result = CInt(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTointUsingcentimetres_tCInt_maxExpectingCIntCInt_max() {
        let expected = cm_t_to_i(centimetres_t(CInt.max))
        let result = CInt(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_tUsing0Expecting0() {
        let expected = i_to_cm_t(0)
        let result = Centimetres_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_tUsing5Expecting5() {
        let expected = i_to_cm_t(5)
        let result = Centimetres_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint8_tUsing0Expecting0() {
        let expected = cm_t_to_i8(0)
        let result = Int8(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint8_tUsing5Expecting5() {
        let expected = cm_t_to_i8(5)
        let result = Int8(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint8_tUsingcentimetres_tCInt_minExpectingInt8Int8_min() {
        let expected = cm_t_to_i8(centimetres_t(CInt.min))
        let result = Int8(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint8_tUsingcentimetres_tCInt_maxExpectingInt8Int8_max() {
        let expected = cm_t_to_i8(centimetres_t(CInt.max))
        let result = Int8(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_tUsing0Expecting0() {
        let expected = i8_to_cm_t(0)
        let result = Centimetres_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_tUsing5Expecting5() {
        let expected = i8_to_cm_t(5)
        let result = Centimetres_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_tUsingInt8Int8_minExpectingcentimetres_tInt8_min() {
        let expected = i8_to_cm_t(Int8(Int8.min))
        let result = Centimetres_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_tUsingInt8Int8_maxExpectingcentimetres_tInt8_max() {
        let expected = i8_to_cm_t(Int8(Int8.max))
        let result = Centimetres_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint16_tUsing0Expecting0() {
        let expected = cm_t_to_i16(0)
        let result = Int16(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint16_tUsing5Expecting5() {
        let expected = cm_t_to_i16(5)
        let result = Int16(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint16_tUsingcentimetres_tCInt_minExpectingInt16Int16_min() {
        let expected = cm_t_to_i16(centimetres_t(CInt.min))
        let result = Int16(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint16_tUsingcentimetres_tCInt_maxExpectingInt16Int16_max() {
        let expected = cm_t_to_i16(centimetres_t(CInt.max))
        let result = Int16(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_tUsing0Expecting0() {
        let expected = i16_to_cm_t(0)
        let result = Centimetres_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_tUsing5Expecting5() {
        let expected = i16_to_cm_t(5)
        let result = Centimetres_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_tUsingInt16Int16_minExpectingcentimetres_tInt16_min() {
        let expected = i16_to_cm_t(Int16(Int16.min))
        let result = Centimetres_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_tUsingInt16Int16_maxExpectingcentimetres_tInt16_max() {
        let expected = i16_to_cm_t(Int16(Int16.max))
        let result = Centimetres_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint32_tUsing0Expecting0() {
        let expected = cm_t_to_i32(0)
        let result = Int32(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint32_tUsing5Expecting5() {
        let expected = cm_t_to_i32(5)
        let result = Int32(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint32_tUsingcentimetres_tCInt_minExpectingInt32CInt_min() {
        let expected = cm_t_to_i32(centimetres_t(CInt.min))
        let result = Int32(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint32_tUsingcentimetres_tCInt_maxExpectingInt32CInt_max() {
        let expected = cm_t_to_i32(centimetres_t(CInt.max))
        let result = Int32(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_tUsing0Expecting0() {
        let expected = i32_to_cm_t(0)
        let result = Centimetres_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_tUsing5Expecting5() {
        let expected = i32_to_cm_t(5)
        let result = Centimetres_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_tUsingInt32Int32_minExpectingcentimetres_tCInt_min() {
        let expected = i32_to_cm_t(Int32(Int32.min))
        let result = Centimetres_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_tUsingInt32Int32_maxExpectingcentimetres_tCInt_max() {
        let expected = i32_to_cm_t(Int32(Int32.max))
        let result = Centimetres_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint64_tUsing0Expecting0() {
        let expected = cm_t_to_i64(0)
        let result = Int64(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint64_tUsing5Expecting5() {
        let expected = cm_t_to_i64(5)
        let result = Int64(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint64_tUsingcentimetres_tCInt_minExpectingInt64CInt_min() {
        let expected = cm_t_to_i64(centimetres_t(CInt.min))
        let result = Int64(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tToint64_tUsingcentimetres_tCInt_maxExpectingInt64CInt_max() {
        let expected = cm_t_to_i64(centimetres_t(CInt.max))
        let result = Int64(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_tUsing0Expecting0() {
        let expected = i64_to_cm_t(0)
        let result = Centimetres_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_tUsing5Expecting5() {
        let expected = i64_to_cm_t(5)
        let result = Centimetres_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_tUsingInt64Int64_minExpectingcentimetres_tCInt_min() {
        let expected = i64_to_cm_t(Int64(Int64.min))
        let result = Centimetres_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_tUsingInt64Int64_maxExpectingcentimetres_tCInt_max() {
        let expected = i64_to_cm_t(Int64(Int64.max))
        let result = Centimetres_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTounsignedintUsing0Expecting0() {
        let expected = cm_t_to_u(0)
        let result = CUnsignedInt(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTounsignedintUsing5Expecting5() {
        let expected = cm_t_to_u(5)
        let result = CUnsignedInt(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTounsignedintUsingcentimetres_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = cm_t_to_u(centimetres_t(CInt.min))
        let result = CUnsignedInt(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTounsignedintUsingcentimetres_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = cm_t_to_u(centimetres_t(CInt.max))
        let result = CUnsignedInt(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_tUsing0Expecting0() {
        let expected = u_to_cm_t(0)
        let result = Centimetres_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_tUsing5Expecting5() {
        let expected = u_to_cm_t(5)
        let result = Centimetres_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_tUsingCUnsignedIntCUnsignedInt_minExpectingcentimetres_tCUnsignedInt_min() {
        let expected = u_to_cm_t(CUnsignedInt(CUnsignedInt.min))
        let result = Centimetres_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_tUsingCUnsignedIntCUnsignedInt_maxExpectingcentimetres_tCInt_max() {
        let expected = u_to_cm_t(CUnsignedInt(CUnsignedInt.max))
        let result = Centimetres_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint8_tUsing0Expecting0() {
        let expected = cm_t_to_u8(0)
        let result = UInt8(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint8_tUsing5Expecting5() {
        let expected = cm_t_to_u8(5)
        let result = UInt8(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint8_tUsingcentimetres_tCInt_minExpectingUInt8UInt8_min() {
        let expected = cm_t_to_u8(centimetres_t(CInt.min))
        let result = UInt8(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint8_tUsingcentimetres_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = cm_t_to_u8(centimetres_t(CInt.max))
        let result = UInt8(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_tUsing0Expecting0() {
        let expected = u8_to_cm_t(0)
        let result = Centimetres_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_tUsing5Expecting5() {
        let expected = u8_to_cm_t(5)
        let result = Centimetres_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_tUsingUInt8UInt8_minExpectingcentimetres_tUInt8_min() {
        let expected = u8_to_cm_t(UInt8(UInt8.min))
        let result = Centimetres_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_tUsingUInt8UInt8_maxExpectingcentimetres_tUInt8_max() {
        let expected = u8_to_cm_t(UInt8(UInt8.max))
        let result = Centimetres_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint16_tUsing0Expecting0() {
        let expected = cm_t_to_u16(0)
        let result = UInt16(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint16_tUsing5Expecting5() {
        let expected = cm_t_to_u16(5)
        let result = UInt16(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint16_tUsingcentimetres_tCInt_minExpectingUInt16UInt16_min() {
        let expected = cm_t_to_u16(centimetres_t(CInt.min))
        let result = UInt16(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint16_tUsingcentimetres_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = cm_t_to_u16(centimetres_t(CInt.max))
        let result = UInt16(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_tUsing0Expecting0() {
        let expected = u16_to_cm_t(0)
        let result = Centimetres_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_tUsing5Expecting5() {
        let expected = u16_to_cm_t(5)
        let result = Centimetres_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_tUsingUInt16UInt16_minExpectingcentimetres_tUInt16_min() {
        let expected = u16_to_cm_t(UInt16(UInt16.min))
        let result = Centimetres_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_tUsingUInt16UInt16_maxExpectingcentimetres_tUInt16_max() {
        let expected = u16_to_cm_t(UInt16(UInt16.max))
        let result = Centimetres_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint32_tUsing0Expecting0() {
        let expected = cm_t_to_u32(0)
        let result = UInt32(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint32_tUsing5Expecting5() {
        let expected = cm_t_to_u32(5)
        let result = UInt32(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint32_tUsingcentimetres_tCInt_minExpectingUInt32UInt32_min() {
        let expected = cm_t_to_u32(centimetres_t(CInt.min))
        let result = UInt32(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint32_tUsingcentimetres_tCInt_maxExpectingUInt32CInt_max() {
        let expected = cm_t_to_u32(centimetres_t(CInt.max))
        let result = UInt32(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_tUsing0Expecting0() {
        let expected = u32_to_cm_t(0)
        let result = Centimetres_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_tUsing5Expecting5() {
        let expected = u32_to_cm_t(5)
        let result = Centimetres_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_tUsingUInt32UInt32_minExpectingcentimetres_tUInt32_min() {
        let expected = u32_to_cm_t(UInt32(UInt32.min))
        let result = Centimetres_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_tUsingUInt32UInt32_maxExpectingcentimetres_tCInt_max() {
        let expected = u32_to_cm_t(UInt32(UInt32.max))
        let result = Centimetres_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint64_tUsing0Expecting0() {
        let expected = cm_t_to_u64(0)
        let result = UInt64(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint64_tUsing5Expecting5() {
        let expected = cm_t_to_u64(5)
        let result = UInt64(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint64_tUsingcentimetres_tCInt_minExpectingUInt64UInt64_min() {
        let expected = cm_t_to_u64(centimetres_t(CInt.min))
        let result = UInt64(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTouint64_tUsingcentimetres_tCInt_maxExpectingUInt64CInt_max() {
        let expected = cm_t_to_u64(centimetres_t(CInt.max))
        let result = UInt64(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_tUsing0Expecting0() {
        let expected = u64_to_cm_t(0)
        let result = Centimetres_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_tUsing5Expecting5() {
        let expected = u64_to_cm_t(5)
        let result = Centimetres_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_tUsingUInt64UInt64_minExpectingcentimetres_tUInt64_min() {
        let expected = u64_to_cm_t(UInt64(UInt64.min))
        let result = Centimetres_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_tUsingUInt64UInt64_maxExpectingcentimetres_tCInt_max() {
        let expected = u64_to_cm_t(UInt64(UInt64.max))
        let result = Centimetres_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTofloatUsing0Expecting0_0() {
        let expected = cm_t_to_f(0)
        let result = Float(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTofloatUsing5Expecting5_0() {
        let expected = cm_t_to_f(5)
        let result = Float(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTofloatUsingcentimetres_tCInt_minExpectingFloatCInt_min() {
        let expected = cm_t_to_f(centimetres_t(CInt.min))
        let result = Float(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTofloatUsingcentimetres_tCInt_maxExpectingFloatCInt_max() {
        let expected = cm_t_to_f(centimetres_t(CInt.max))
        let result = Float(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_tUsing0_0Expecting0() {
        let expected = f_to_cm_t(0.0)
        let result = Centimetres_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_tUsing5_0Expecting5() {
        let expected = f_to_cm_t(5.0)
        let result = Centimetres_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let expected = f_to_cm_t(Float(-Float.greatestFiniteMagnitude))
        let result = Centimetres_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_tUsingFloatFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let expected = f_to_cm_t(Float(Float.greatestFiniteMagnitude))
        let result = Centimetres_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTodoubleUsing0Expecting0_0() {
        let expected = cm_t_to_d(0)
        let result = Double(Centimetres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTodoubleUsing5Expecting5_0() {
        let expected = cm_t_to_d(5)
        let result = Double(Centimetres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTodoubleUsingcentimetres_tCInt_minExpectingDoubleCInt_min() {
        let expected = cm_t_to_d(centimetres_t(CInt.min))
        let result = Double(Centimetres_t(centimetres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_tTodoubleUsingcentimetres_tCInt_maxExpectingDoubleCInt_max() {
        let expected = cm_t_to_d(centimetres_t(CInt.max))
        let result = Double(Centimetres_t(centimetres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_tUsing0_0Expecting0() {
        let expected = d_to_cm_t(0.0)
        let result = Centimetres_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_tUsing5_0Expecting5() {
        let expected = d_to_cm_t(5.0)
        let result = Centimetres_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let expected = d_to_cm_t(Double(-Double.greatestFiniteMagnitude))
        let result = Centimetres_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let expected = d_to_cm_t(Double(Double.greatestFiniteMagnitude))
        let result = Centimetres_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides centimetres_u unit tests.
final class Centimetres_uTests: XCTestCase {

    func testcentimetres_uTomillimetres_tUsing15Expectingmillimetres_t1510() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_mm_t(15)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsing25Expectingmillimetres_t2510() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_mm_t(25)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsing250Expectingmillimetres_t25010() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_mm_t(250)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsing0Expectingmillimetres_t010() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_mm_t(0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsing2500Expectingmillimetres_t250010() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_mm_t(2500)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsing25000Expectingmillimetres_t2500010() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_mm_t(25000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsing250000Expectingmillimetres_t25000010() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_mm_t(250000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsing2500000Expectingmillimetres_t250000010() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_mm_t(2500000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsingCUnsignedInt_minExpectingmillimetres_tCUnsignedInt_min10() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_mm_t(CUnsignedInt.min)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_tUsingCUnsignedInt_maxExpectingmillimetres_tCInt_max() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_mm_t(CUnsignedInt.max)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_tUsing0Expecting0() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_cm_t(0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_tUsingcentimetres_uCUnsignedInt_minExpectingcentimetres_tCUnsignedInt_min() {
        let unit = Centimetres_u(centimetres_u(CUnsignedInt.min))
        let expected = cm_u_to_cm_t(centimetres_u(CUnsignedInt.min))
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_tUsingcentimetres_uCUnsignedInt_maxExpectingcentimetres_tCInt_max() {
        let unit = Centimetres_u(centimetres_u(CUnsignedInt.max))
        let expected = cm_u_to_cm_t(centimetres_u(CUnsignedInt.max))
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_tUsing5Expecting5() {
        let unit = Centimetres_u(5)
        let expected = cm_u_to_cm_t(5)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing15Expectingmetres_t15100() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_m_t(15)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing25Expectingmetres_t25100() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_m_t(25)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing250Expectingmetres_t250100() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_m_t(250)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing0Expectingmetres_t0100() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_m_t(0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing2500Expectingmetres_t2500100() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_m_t(2500)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing25000Expectingmetres_t25000100() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_m_t(25000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing250000Expectingmetres_t250000100() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_m_t(250000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsing2500000Expectingmetres_t2500000100() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_m_t(2500000)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsingCUnsignedInt_minExpectingmetres_tCUnsignedInt_min100() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_m_t(CUnsignedInt.min)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_tUsingCUnsignedInt_maxExpectingmetres_tCUnsignedInt_max100() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_m_t(CUnsignedInt.max)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing15Expectingmillimetres_u1510() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_mm_u(15)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing25Expectingmillimetres_u2510() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_mm_u(25)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing250Expectingmillimetres_u25010() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_mm_u(250)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing0Expectingmillimetres_u010() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_mm_u(0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing2500Expectingmillimetres_u250010() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_mm_u(2500)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing25000Expectingmillimetres_u2500010() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_mm_u(25000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing250000Expectingmillimetres_u25000010() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_mm_u(250000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsing2500000Expectingmillimetres_u250000010() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_mm_u(2500000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsingCUnsignedInt_minExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_mm_u(CUnsignedInt.min)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_uUsingCUnsignedInt_maxExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_mm_u(CUnsignedInt.max)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing15Expectingmetres_u15100() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_m_u(15)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing25Expectingmetres_u25100() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_m_u(25)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing250Expectingmetres_u250100() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_m_u(250)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing0Expectingmetres_u0100() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_m_u(0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing2500Expectingmetres_u2500100() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_m_u(2500)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing25000Expectingmetres_u25000100() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_m_u(25000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing250000Expectingmetres_u250000100() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_m_u(250000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsing2500000Expectingmetres_u2500000100() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_m_u(2500000)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsingCUnsignedInt_minExpectingmetres_uCUnsignedInt_min() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_m_u(CUnsignedInt.min)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_uUsingCUnsignedInt_maxExpectingmetres_uCUnsignedInt_max100() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_m_u(CUnsignedInt.max)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing15Expectingmillimetres_f15_010_0() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_mm_f(15)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing25Expectingmillimetres_f25_010_0() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_mm_f(25)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing250Expectingmillimetres_f250_010_0() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_mm_f(250)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing0Expectingmillimetres_f0_010_0() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_mm_f(0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing2500Expectingmillimetres_f2500_010_0() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_mm_f(2500)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing25000Expectingmillimetres_f25000_010_0() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_mm_f(25000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing250000Expectingmillimetres_f250000_010_0() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_mm_f(250000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsing2500000Expectingmillimetres_f2500000_010_0() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_mm_f(2500000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsingCUnsignedInt_minExpectingmillimetres_fCUnsignedInt_min10_0() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_mm_f(CUnsignedInt.min)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_fUsingCUnsignedInt_maxExpectingmillimetres_fCUnsignedInt_max10_0() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_mm_f(CUnsignedInt.max)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_fUsing0Expecting0_0() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_cm_f(0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_fUsingcentimetres_uCUnsignedInt_minExpectingcentimetres_fCUnsignedInt_min() {
        let unit = Centimetres_u(centimetres_u(CUnsignedInt.min))
        let expected = cm_u_to_cm_f(centimetres_u(CUnsignedInt.min))
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_fUsingcentimetres_uCUnsignedInt_maxExpectingcentimetres_fCUnsignedInt_max() {
        let unit = Centimetres_u(centimetres_u(CUnsignedInt.max))
        let expected = cm_u_to_cm_f(centimetres_u(CUnsignedInt.max))
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_fUsing5Expecting5_0() {
        let unit = Centimetres_u(5)
        let expected = cm_u_to_cm_f(5)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing15Expectingmetres_f15_0100_0() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_m_f(15)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing25Expectingmetres_f25_0100_0() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_m_f(25)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing250Expectingmetres_f250_0100_0() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_m_f(250)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing0Expectingmetres_f0_0100_0() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_m_f(0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing2500Expectingmetres_f2500_0100_0() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_m_f(2500)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing25000Expectingmetres_f25000_0100_0() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_m_f(25000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing250000Expectingmetres_f250000_0100_0() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_m_f(250000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsing2500000Expectingmetres_f2500000_0100_0() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_m_f(2500000)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsingCUnsignedInt_minExpectingmetres_fCUnsignedInt_min100_0() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_m_f(CUnsignedInt.min)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_fUsingCUnsignedInt_maxExpectingmetres_fCUnsignedInt_max100_0() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_m_f(CUnsignedInt.max)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing15Expectingmillimetres_d15_010_0() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_mm_d(15)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing25Expectingmillimetres_d25_010_0() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_mm_d(25)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing250Expectingmillimetres_d250_010_0() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_mm_d(250)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing0Expectingmillimetres_d0_010_0() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_mm_d(0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing2500Expectingmillimetres_d2500_010_0() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_mm_d(2500)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing25000Expectingmillimetres_d25000_010_0() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_mm_d(25000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing250000Expectingmillimetres_d250000_010_0() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_mm_d(250000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsing2500000Expectingmillimetres_d2500000_010_0() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_mm_d(2500000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsingCUnsignedInt_minExpectingmillimetres_dCUnsignedInt_min10_0() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_mm_d(CUnsignedInt.min)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTomillimetres_dUsingCUnsignedInt_maxExpectingmillimetres_dCUnsignedInt_max10_0() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_mm_d(CUnsignedInt.max)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_dUsing0Expecting0_0() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_cm_d(0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_dUsingcentimetres_uCUnsignedInt_minExpectingcentimetres_dCUnsignedInt_min() {
        let unit = Centimetres_u(centimetres_u(CUnsignedInt.min))
        let expected = cm_u_to_cm_d(centimetres_u(CUnsignedInt.min))
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_dUsingcentimetres_uCUnsignedInt_maxExpectingcentimetres_dCUnsignedInt_max() {
        let unit = Centimetres_u(centimetres_u(CUnsignedInt.max))
        let expected = cm_u_to_cm_d(centimetres_u(CUnsignedInt.max))
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTocentimetres_dUsing5Expecting5_0() {
        let unit = Centimetres_u(5)
        let expected = cm_u_to_cm_d(5)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing15Expectingmetres_d15_0100_0() {
        let unit = Centimetres_u(15)
        let expected = cm_u_to_m_d(15)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing25Expectingmetres_d25_0100_0() {
        let unit = Centimetres_u(25)
        let expected = cm_u_to_m_d(25)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing250Expectingmetres_d250_0100_0() {
        let unit = Centimetres_u(250)
        let expected = cm_u_to_m_d(250)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing0Expectingmetres_d0_0100_0() {
        let unit = Centimetres_u(0)
        let expected = cm_u_to_m_d(0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing2500Expectingmetres_d2500_0100_0() {
        let unit = Centimetres_u(2500)
        let expected = cm_u_to_m_d(2500)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing25000Expectingmetres_d25000_0100_0() {
        let unit = Centimetres_u(25000)
        let expected = cm_u_to_m_d(25000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing250000Expectingmetres_d250000_0100_0() {
        let unit = Centimetres_u(250000)
        let expected = cm_u_to_m_d(250000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsing2500000Expectingmetres_d2500000_0100_0() {
        let unit = Centimetres_u(2500000)
        let expected = cm_u_to_m_d(2500000)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsingCUnsignedInt_minExpectingmetres_dCUnsignedInt_min100_0() {
        let unit = Centimetres_u(CUnsignedInt.min)
        let expected = cm_u_to_m_d(CUnsignedInt.min)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTometres_dUsingCUnsignedInt_maxExpectingmetres_dCUnsignedInt_max100_0() {
        let unit = Centimetres_u(CUnsignedInt.max)
        let expected = cm_u_to_m_d(CUnsignedInt.max)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_uTointUsing0Expecting0() {
        let expected = cm_u_to_i(0)
        let result = CInt(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTointUsing5Expecting5() {
        let expected = cm_u_to_i(5)
        let result = CInt(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTointUsingcentimetres_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = cm_u_to_i(centimetres_u(CUnsignedInt.min))
        let result = CInt(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTointUsingcentimetres_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = cm_u_to_i(centimetres_u(CUnsignedInt.max))
        let result = CInt(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_uUsing0Expecting0() {
        let expected = i_to_cm_u(0)
        let result = Centimetres_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_uUsing5Expecting5() {
        let expected = i_to_cm_u(5)
        let result = Centimetres_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_uUsingCIntCInt_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = i_to_cm_u(CInt(CInt.min))
        let result = Centimetres_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_uUsingCIntCInt_maxExpectingcentimetres_uCInt_max() {
        let expected = i_to_cm_u(CInt(CInt.max))
        let result = Centimetres_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint8_tUsing0Expecting0() {
        let expected = cm_u_to_i8(0)
        let result = Int8(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint8_tUsing5Expecting5() {
        let expected = cm_u_to_i8(5)
        let result = Int8(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint8_tUsingcentimetres_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = cm_u_to_i8(centimetres_u(CUnsignedInt.min))
        let result = Int8(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint8_tUsingcentimetres_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = cm_u_to_i8(centimetres_u(CUnsignedInt.max))
        let result = Int8(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_uUsing0Expecting0() {
        let expected = i8_to_cm_u(0)
        let result = Centimetres_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_uUsing5Expecting5() {
        let expected = i8_to_cm_u(5)
        let result = Centimetres_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_uUsingInt8Int8_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = i8_to_cm_u(Int8(Int8.min))
        let result = Centimetres_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_uUsingInt8Int8_maxExpectingcentimetres_uInt8_max() {
        let expected = i8_to_cm_u(Int8(Int8.max))
        let result = Centimetres_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint16_tUsing0Expecting0() {
        let expected = cm_u_to_i16(0)
        let result = Int16(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint16_tUsing5Expecting5() {
        let expected = cm_u_to_i16(5)
        let result = Int16(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint16_tUsingcentimetres_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = cm_u_to_i16(centimetres_u(CUnsignedInt.min))
        let result = Int16(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint16_tUsingcentimetres_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = cm_u_to_i16(centimetres_u(CUnsignedInt.max))
        let result = Int16(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_uUsing0Expecting0() {
        let expected = i16_to_cm_u(0)
        let result = Centimetres_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_uUsing5Expecting5() {
        let expected = i16_to_cm_u(5)
        let result = Centimetres_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_uUsingInt16Int16_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = i16_to_cm_u(Int16(Int16.min))
        let result = Centimetres_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_uUsingInt16Int16_maxExpectingcentimetres_uInt16_max() {
        let expected = i16_to_cm_u(Int16(Int16.max))
        let result = Centimetres_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint32_tUsing0Expecting0() {
        let expected = cm_u_to_i32(0)
        let result = Int32(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint32_tUsing5Expecting5() {
        let expected = cm_u_to_i32(5)
        let result = Int32(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint32_tUsingcentimetres_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = cm_u_to_i32(centimetres_u(CUnsignedInt.min))
        let result = Int32(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint32_tUsingcentimetres_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = cm_u_to_i32(centimetres_u(CUnsignedInt.max))
        let result = Int32(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_uUsing0Expecting0() {
        let expected = i32_to_cm_u(0)
        let result = Centimetres_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_uUsing5Expecting5() {
        let expected = i32_to_cm_u(5)
        let result = Centimetres_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_uUsingInt32Int32_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = i32_to_cm_u(Int32(Int32.min))
        let result = Centimetres_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_uUsingInt32Int32_maxExpectingcentimetres_uInt32_max() {
        let expected = i32_to_cm_u(Int32(Int32.max))
        let result = Centimetres_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint64_tUsing0Expecting0() {
        let expected = cm_u_to_i64(0)
        let result = Int64(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint64_tUsing5Expecting5() {
        let expected = cm_u_to_i64(5)
        let result = Int64(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint64_tUsingcentimetres_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = cm_u_to_i64(centimetres_u(CUnsignedInt.min))
        let result = Int64(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uToint64_tUsingcentimetres_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = cm_u_to_i64(centimetres_u(CUnsignedInt.max))
        let result = Int64(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_uUsing0Expecting0() {
        let expected = i64_to_cm_u(0)
        let result = Centimetres_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_uUsing5Expecting5() {
        let expected = i64_to_cm_u(5)
        let result = Centimetres_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_uUsingInt64Int64_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = i64_to_cm_u(Int64(Int64.min))
        let result = Centimetres_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_uUsingInt64Int64_maxExpectingcentimetres_uCUnsignedInt_max() {
        let expected = i64_to_cm_u(Int64(Int64.max))
        let result = Centimetres_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTounsignedintUsing0Expecting0() {
        let expected = cm_u_to_u(0)
        let result = CUnsignedInt(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTounsignedintUsing5Expecting5() {
        let expected = cm_u_to_u(5)
        let result = CUnsignedInt(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTounsignedintUsingcentimetres_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = cm_u_to_u(centimetres_u(CUnsignedInt.min))
        let result = CUnsignedInt(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTounsignedintUsingcentimetres_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = cm_u_to_u(centimetres_u(CUnsignedInt.max))
        let result = CUnsignedInt(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_uUsing0Expecting0() {
        let expected = u_to_cm_u(0)
        let result = Centimetres_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_uUsing5Expecting5() {
        let expected = u_to_cm_u(5)
        let result = Centimetres_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint8_tUsing0Expecting0() {
        let expected = cm_u_to_u8(0)
        let result = UInt8(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint8_tUsing5Expecting5() {
        let expected = cm_u_to_u8(5)
        let result = UInt8(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint8_tUsingcentimetres_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = cm_u_to_u8(centimetres_u(CUnsignedInt.min))
        let result = UInt8(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint8_tUsingcentimetres_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = cm_u_to_u8(centimetres_u(CUnsignedInt.max))
        let result = UInt8(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_uUsing0Expecting0() {
        let expected = u8_to_cm_u(0)
        let result = Centimetres_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_uUsing5Expecting5() {
        let expected = u8_to_cm_u(5)
        let result = Centimetres_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_uUsingUInt8UInt8_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = u8_to_cm_u(UInt8(UInt8.min))
        let result = Centimetres_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_uUsingUInt8UInt8_maxExpectingcentimetres_uUInt8_max() {
        let expected = u8_to_cm_u(UInt8(UInt8.max))
        let result = Centimetres_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint16_tUsing0Expecting0() {
        let expected = cm_u_to_u16(0)
        let result = UInt16(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint16_tUsing5Expecting5() {
        let expected = cm_u_to_u16(5)
        let result = UInt16(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint16_tUsingcentimetres_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = cm_u_to_u16(centimetres_u(CUnsignedInt.min))
        let result = UInt16(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint16_tUsingcentimetres_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = cm_u_to_u16(centimetres_u(CUnsignedInt.max))
        let result = UInt16(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_uUsing0Expecting0() {
        let expected = u16_to_cm_u(0)
        let result = Centimetres_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_uUsing5Expecting5() {
        let expected = u16_to_cm_u(5)
        let result = Centimetres_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_uUsingUInt16UInt16_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = u16_to_cm_u(UInt16(UInt16.min))
        let result = Centimetres_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_uUsingUInt16UInt16_maxExpectingcentimetres_uUInt16_max() {
        let expected = u16_to_cm_u(UInt16(UInt16.max))
        let result = Centimetres_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint32_tUsing0Expecting0() {
        let expected = cm_u_to_u32(0)
        let result = UInt32(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint32_tUsing5Expecting5() {
        let expected = cm_u_to_u32(5)
        let result = UInt32(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint32_tUsingcentimetres_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = cm_u_to_u32(centimetres_u(CUnsignedInt.min))
        let result = UInt32(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint32_tUsingcentimetres_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = cm_u_to_u32(centimetres_u(CUnsignedInt.max))
        let result = UInt32(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_uUsing0Expecting0() {
        let expected = u32_to_cm_u(0)
        let result = Centimetres_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_uUsing5Expecting5() {
        let expected = u32_to_cm_u(5)
        let result = Centimetres_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_uUsingUInt32UInt32_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = u32_to_cm_u(UInt32(UInt32.min))
        let result = Centimetres_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_uUsingUInt32UInt32_maxExpectingcentimetres_uCUnsignedInt_max() {
        let expected = u32_to_cm_u(UInt32(UInt32.max))
        let result = Centimetres_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint64_tUsing0Expecting0() {
        let expected = cm_u_to_u64(0)
        let result = UInt64(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint64_tUsing5Expecting5() {
        let expected = cm_u_to_u64(5)
        let result = UInt64(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint64_tUsingcentimetres_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = cm_u_to_u64(centimetres_u(CUnsignedInt.min))
        let result = UInt64(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTouint64_tUsingcentimetres_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = cm_u_to_u64(centimetres_u(CUnsignedInt.max))
        let result = UInt64(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_uUsing0Expecting0() {
        let expected = u64_to_cm_u(0)
        let result = Centimetres_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_uUsing5Expecting5() {
        let expected = u64_to_cm_u(5)
        let result = Centimetres_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_uUsingUInt64UInt64_minExpectingcentimetres_uCUnsignedInt_min() {
        let expected = u64_to_cm_u(UInt64(UInt64.min))
        let result = Centimetres_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_uUsingUInt64UInt64_maxExpectingcentimetres_uCUnsignedInt_max() {
        let expected = u64_to_cm_u(UInt64(UInt64.max))
        let result = Centimetres_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTofloatUsing0Expecting0_0() {
        let expected = cm_u_to_f(0)
        let result = Float(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTofloatUsing5Expecting5_0() {
        let expected = cm_u_to_f(5)
        let result = Float(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTofloatUsingcentimetres_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = cm_u_to_f(centimetres_u(CUnsignedInt.min))
        let result = Float(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTofloatUsingcentimetres_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = cm_u_to_f(centimetres_u(CUnsignedInt.max))
        let result = Float(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_uUsing0_0Expecting0() {
        let expected = f_to_cm_u(0.0)
        let result = Centimetres_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_uUsing5_0Expecting5() {
        let expected = f_to_cm_u(5.0)
        let result = Centimetres_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let expected = f_to_cm_u(Float(-Float.greatestFiniteMagnitude))
        let result = Centimetres_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_uUsingFloatFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let expected = f_to_cm_u(Float(Float.greatestFiniteMagnitude))
        let result = Centimetres_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTodoubleUsing0Expecting0_0() {
        let expected = cm_u_to_d(0)
        let result = Double(Centimetres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTodoubleUsing5Expecting5_0() {
        let expected = cm_u_to_d(5)
        let result = Double(Centimetres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTodoubleUsingcentimetres_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = cm_u_to_d(centimetres_u(CUnsignedInt.min))
        let result = Double(Centimetres_u(centimetres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_uTodoubleUsingcentimetres_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = cm_u_to_d(centimetres_u(CUnsignedInt.max))
        let result = Double(Centimetres_u(centimetres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_uUsing0_0Expecting0() {
        let expected = d_to_cm_u(0.0)
        let result = Centimetres_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_uUsing5_0Expecting5() {
        let expected = d_to_cm_u(5.0)
        let result = Centimetres_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let expected = d_to_cm_u(Double(-Double.greatestFiniteMagnitude))
        let result = Centimetres_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let expected = d_to_cm_u(Double(Double.greatestFiniteMagnitude))
        let result = Centimetres_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides centimetres_f unit tests.
final class Centimetres_fTests: XCTestCase {

    func testcentimetres_fTomillimetres_tUsing15_0Expectingmillimetres_t15_010_0_rounded() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_mm_t(15.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsing25_0Expectingmillimetres_t25_010_0_rounded() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_mm_t(25.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsing250_0Expectingmillimetres_t250_010_0_rounded() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_mm_t(250.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsing0_0Expectingmillimetres_t0_010_0_rounded() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_mm_t(0.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsing2500_0Expectingmillimetres_t2500_010_0_rounded() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_mm_t(2500.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsing25000_0Expectingmillimetres_t25000_010_0_rounded() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_mm_t(25000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsing250000_0Expectingmillimetres_t250000_010_0_rounded() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_mm_t(250000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsing2500000_0Expectingmillimetres_t2500000_010_0_rounded() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_mm_t(2500000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsingNeg323_0Expectingmillimetres_tNeg323_010_0_rounded() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_mm_t(-323.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsingNeg10_0Expectingmillimetres_tNeg10_010_0_rounded() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_mm_t(-10.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsingNeg1000_0Expectingmillimetres_tNeg1000_010_0_rounded() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_mm_t(-1000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsingNeg5_0Expectingmillimetres_tNeg5_010_0_rounded() {
        let unit = Centimetres_f(-5.0)
        let expected = cm_f_to_mm_t(-5.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_t(-Float.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_tUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_t(Float.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_tUsing0_0Expecting0() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_cm_t(0.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let unit = Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude))
        let expected = cm_f_to_cm_t(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let unit = Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude))
        let expected = cm_f_to_cm_t(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_tUsing5_0Expecting5() {
        let unit = Centimetres_f(5.0)
        let expected = cm_f_to_cm_t(5.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing15_0Expectingmetres_t15_0100_0_rounded() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_m_t(15.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing25_0Expectingmetres_t25_0100_0_rounded() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_m_t(25.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing250_0Expectingmetres_t250_0100_0_rounded() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_m_t(250.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing0_0Expectingmetres_t0_0100_0_rounded() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_m_t(0.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing2500_0Expectingmetres_t2500_0100_0_rounded() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_m_t(2500.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing25000_0Expectingmetres_t25000_0100_0_rounded() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_m_t(25000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing250000_0Expectingmetres_t250000_0100_0_rounded() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_m_t(250000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsing2500000_0Expectingmetres_t2500000_0100_0_rounded() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_m_t(2500000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsingNeg323_0Expectingmetres_tNeg323_0100_0_rounded() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_m_t(-323.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsingNeg10_0Expectingmetres_tNeg10_0100_0_rounded() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_m_t(-10.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsingNeg1000_0Expectingmetres_tNeg1000_0100_0_rounded() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_m_t(-1000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsingNeg5_0Expectingmetres_tNeg5_0100_0_rounded() {
        let unit = Centimetres_f(-5.0)
        let expected = cm_f_to_m_t(-5.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_t(-Float.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_tUsingFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_t(Float.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing15_0Expectingmillimetres_u15_010_0_rounded() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_mm_u(15.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing25_0Expectingmillimetres_u25_010_0_rounded() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_mm_u(25.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing250_0Expectingmillimetres_u250_010_0_rounded() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_mm_u(250.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing0_0Expectingmillimetres_u0_010_0_rounded() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_mm_u(0.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing2500_0Expectingmillimetres_u2500_010_0_rounded() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_mm_u(2500.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing25000_0Expectingmillimetres_u25000_010_0_rounded() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_mm_u(25000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing250000_0Expectingmillimetres_u250000_010_0_rounded() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_mm_u(250000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsing2500000_0Expectingmillimetres_u2500000_010_0_rounded() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_mm_u(2500000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsingNeg323_0Expecting0() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_mm_u(-323.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsingNeg10_0Expecting0() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_mm_u(-10.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsingNeg1000_0Expecting0() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_mm_u(-1000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsingNeg6_0Expecting0() {
        let unit = Centimetres_f(-6.0)
        let expected = cm_f_to_mm_u(-6.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_u(-Float.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_uUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_u(Float.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_uUsing0_0Expecting0() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_cm_u(0.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_uUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude))
        let expected = cm_f_to_cm_u(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_uUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude))
        let expected = cm_f_to_cm_u(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_uUsing5_0Expecting5() {
        let unit = Centimetres_f(5.0)
        let expected = cm_f_to_cm_u(5.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing15_0Expectingmetres_u15_0100_0_rounded() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_m_u(15.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing25_0Expectingmetres_u25_0100_0_rounded() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_m_u(25.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing250_0Expectingmetres_u250_0100_0_rounded() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_m_u(250.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing0_0Expectingmetres_u0_0100_0_rounded() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_m_u(0.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing2500_0Expectingmetres_u2500_0100_0_rounded() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_m_u(2500.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing25000_0Expectingmetres_u25000_0100_0_rounded() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_m_u(25000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing250000_0Expectingmetres_u250000_0100_0_rounded() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_m_u(250000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsing2500000_0Expectingmetres_u2500000_0100_0_rounded() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_m_u(2500000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsingNeg323_0Expecting0() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_m_u(-323.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsingNeg10_0Expecting0() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_m_u(-10.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsingNeg1000_0Expecting0() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_m_u(-1000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsingNeg6_0Expecting0() {
        let unit = Centimetres_f(-6.0)
        let expected = cm_f_to_m_u(-6.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_u(-Float.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_uUsingFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_u(Float.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing15_0Expectingmillimetres_f15_010_0() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_mm_f(15.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing25_0Expectingmillimetres_f25_010_0() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_mm_f(25.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing250_0Expectingmillimetres_f250_010_0() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_mm_f(250.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing0_0Expectingmillimetres_f0_010_0() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_mm_f(0.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing2500_0Expectingmillimetres_f2500_010_0() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_mm_f(2500.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing25000_0Expectingmillimetres_f25000_010_0() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_mm_f(25000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing250000_0Expectingmillimetres_f250000_010_0() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_mm_f(250000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsing2500000_0Expectingmillimetres_f2500000_010_0() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_mm_f(2500000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsingNeg323_0Expectingmillimetres_fNeg323_010_0() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_mm_f(-323.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsingNeg10_0Expectingmillimetres_fNeg10_010_0() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_mm_f(-10.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsingNeg1000_0Expectingmillimetres_fNeg1000_010_0() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_mm_f(-1000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsingNeg5_0Expectingmillimetres_fNeg5_010_0() {
        let unit = Centimetres_f(-5.0)
        let expected = cm_f_to_mm_f(-5.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_f(-Float.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_fUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_f(Float.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing15_0Expectingmetres_f15_0100_0() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_m_f(15.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing25_0Expectingmetres_f25_0100_0() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_m_f(25.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing250_0Expectingmetres_f250_0100_0() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_m_f(250.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing0_0Expectingmetres_f0_0100_0() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_m_f(0.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing2500_0Expectingmetres_f2500_0100_0() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_m_f(2500.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing25000_0Expectingmetres_f25000_0100_0() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_m_f(25000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing250000_0Expectingmetres_f250000_0100_0() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_m_f(250000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsing2500000_0Expectingmetres_f2500000_0100_0() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_m_f(2500000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsingNeg323_0Expectingmetres_fNeg323_0100_0() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_m_f(-323.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsingNeg10_0Expectingmetres_fNeg10_0100_0() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_m_f(-10.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsingNeg1000_0Expectingmetres_fNeg1000_0100_0() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_m_f(-1000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsingNeg5_0Expectingmetres_fNeg5_0100_0() {
        let unit = Centimetres_f(-5.0)
        let expected = cm_f_to_m_f(-5.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_fNegFloat_greatestFiniteMagnitude100_0() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_f(-Float.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_fUsingFloat_greatestFiniteMagnitudeExpectingmetres_fFloat_greatestFiniteMagnitude100_0() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_f(Float.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing15_0Expectingmillimetres_d15_010_0() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_mm_d(15.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing25_0Expectingmillimetres_d25_010_0() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_mm_d(25.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing250_0Expectingmillimetres_d250_010_0() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_mm_d(250.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing0_0Expectingmillimetres_d0_010_0() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_mm_d(0.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing2500_0Expectingmillimetres_d2500_010_0() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_mm_d(2500.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing25000_0Expectingmillimetres_d25000_010_0() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_mm_d(25000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing250000_0Expectingmillimetres_d250000_010_0() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_mm_d(250000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsing2500000_0Expectingmillimetres_d2500000_010_0() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_mm_d(2500000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsingNeg323_0Expectingmillimetres_dNeg323_010_0() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_mm_d(-323.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsingNeg10_0Expectingmillimetres_dNeg10_010_0() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_mm_d(-10.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsingNeg1000_0Expectingmillimetres_dNeg1000_010_0() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_mm_d(-1000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsingNeg5_0Expectingmillimetres_dNeg5_010_0() {
        let unit = Centimetres_f(-5.0)
        let expected = cm_f_to_mm_d(-5.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_dNegFloat_greatestFiniteMagnitude10_0() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_d(-Float.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTomillimetres_dUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_dFloat_greatestFiniteMagnitude10_0() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_mm_d(Float.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_dUsing0_0Expecting0_0() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_cm_d(0.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_dUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingcentimetres_dNegFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude))
        let expected = cm_f_to_cm_d(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_dUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingcentimetres_dFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude))
        let expected = cm_f_to_cm_d(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTocentimetres_dUsing5_0Expecting5_0() {
        let unit = Centimetres_f(5.0)
        let expected = cm_f_to_cm_d(5.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing15_0Expectingmetres_d15_0100_0() {
        let unit = Centimetres_f(15.0)
        let expected = cm_f_to_m_d(15.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing25_0Expectingmetres_d25_0100_0() {
        let unit = Centimetres_f(25.0)
        let expected = cm_f_to_m_d(25.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing250_0Expectingmetres_d250_0100_0() {
        let unit = Centimetres_f(250.0)
        let expected = cm_f_to_m_d(250.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing0_0Expectingmetres_d0_0100_0() {
        let unit = Centimetres_f(0.0)
        let expected = cm_f_to_m_d(0.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing2500_0Expectingmetres_d2500_0100_0() {
        let unit = Centimetres_f(2500.0)
        let expected = cm_f_to_m_d(2500.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing25000_0Expectingmetres_d25000_0100_0() {
        let unit = Centimetres_f(25000.0)
        let expected = cm_f_to_m_d(25000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing250000_0Expectingmetres_d250000_0100_0() {
        let unit = Centimetres_f(250000.0)
        let expected = cm_f_to_m_d(250000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsing2500000_0Expectingmetres_d2500000_0100_0() {
        let unit = Centimetres_f(2500000.0)
        let expected = cm_f_to_m_d(2500000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsingNeg323_0Expectingmetres_dNeg323_0100_0() {
        let unit = Centimetres_f(-323.0)
        let expected = cm_f_to_m_d(-323.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsingNeg10_0Expectingmetres_dNeg10_0100_0() {
        let unit = Centimetres_f(-10.0)
        let expected = cm_f_to_m_d(-10.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsingNeg1000_0Expectingmetres_dNeg1000_0100_0() {
        let unit = Centimetres_f(-1000.0)
        let expected = cm_f_to_m_d(-1000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsingNeg5_0Expectingmetres_dNeg5_0100_0() {
        let unit = Centimetres_f(-5.0)
        let expected = cm_f_to_m_d(-5.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsingNegFloat_greatestFiniteMagnitudeExpectingmetres_dNegFloat_greatestFiniteMagnitude100_0() {
        let unit = Centimetres_f(-Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_d(-Float.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTometres_dUsingFloat_greatestFiniteMagnitudeExpectingmetres_dFloat_greatestFiniteMagnitude100_0() {
        let unit = Centimetres_f(Float.greatestFiniteMagnitude)
        let expected = cm_f_to_m_d(Float.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_fTointUsing0_0Expecting0() {
        let expected = cm_f_to_i(0.0)
        let result = CInt(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTointUsing5_0Expecting5() {
        let expected = cm_f_to_i(5.0)
        let result = CInt(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTointUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = cm_f_to_i(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTointUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = cm_f_to_i(centimetres_f(Float.greatestFiniteMagnitude))
        let result = CInt(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_fUsing0Expecting0_0() {
        let expected = i_to_cm_f(0)
        let result = Centimetres_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_fUsing5Expecting5_0() {
        let expected = i_to_cm_f(5)
        let result = Centimetres_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_fUsingCIntCInt_minExpectingcentimetres_fCInt_min() {
        let expected = i_to_cm_f(CInt(CInt.min))
        let result = Centimetres_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_fUsingCIntCInt_maxExpectingcentimetres_fCInt_max() {
        let expected = i_to_cm_f(CInt(CInt.max))
        let result = Centimetres_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint8_tUsing0_0Expecting0() {
        let expected = cm_f_to_i8(0.0)
        let result = Int8(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint8_tUsing5_0Expecting5() {
        let expected = cm_f_to_i8(5.0)
        let result = Int8(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint8_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = cm_f_to_i8(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint8_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = cm_f_to_i8(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Int8(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_fUsing0Expecting0_0() {
        let expected = i8_to_cm_f(0)
        let result = Centimetres_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_fUsing5Expecting5_0() {
        let expected = i8_to_cm_f(5)
        let result = Centimetres_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_fUsingInt8Int8_minExpectingcentimetres_fInt8_min() {
        let expected = i8_to_cm_f(Int8(Int8.min))
        let result = Centimetres_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_fUsingInt8Int8_maxExpectingcentimetres_fInt8_max() {
        let expected = i8_to_cm_f(Int8(Int8.max))
        let result = Centimetres_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint16_tUsing0_0Expecting0() {
        let expected = cm_f_to_i16(0.0)
        let result = Int16(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint16_tUsing5_0Expecting5() {
        let expected = cm_f_to_i16(5.0)
        let result = Int16(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint16_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = cm_f_to_i16(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint16_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = cm_f_to_i16(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Int16(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_fUsing0Expecting0_0() {
        let expected = i16_to_cm_f(0)
        let result = Centimetres_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_fUsing5Expecting5_0() {
        let expected = i16_to_cm_f(5)
        let result = Centimetres_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_fUsingInt16Int16_minExpectingcentimetres_fInt16_min() {
        let expected = i16_to_cm_f(Int16(Int16.min))
        let result = Centimetres_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_fUsingInt16Int16_maxExpectingcentimetres_fInt16_max() {
        let expected = i16_to_cm_f(Int16(Int16.max))
        let result = Centimetres_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint32_tUsing0_0Expecting0() {
        let expected = cm_f_to_i32(0.0)
        let result = Int32(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint32_tUsing5_0Expecting5() {
        let expected = cm_f_to_i32(5.0)
        let result = Int32(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint32_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = cm_f_to_i32(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint32_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = cm_f_to_i32(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Int32(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_fUsing0Expecting0_0() {
        let expected = i32_to_cm_f(0)
        let result = Centimetres_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_fUsing5Expecting5_0() {
        let expected = i32_to_cm_f(5)
        let result = Centimetres_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_fUsingInt32Int32_minExpectingcentimetres_fInt32_min() {
        let expected = i32_to_cm_f(Int32(Int32.min))
        let result = Centimetres_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_fUsingInt32Int32_maxExpectingcentimetres_fInt32_max() {
        let expected = i32_to_cm_f(Int32(Int32.max))
        let result = Centimetres_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint64_tUsing0_0Expecting0() {
        let expected = cm_f_to_i64(0.0)
        let result = Int64(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint64_tUsing5_0Expecting5() {
        let expected = cm_f_to_i64(5.0)
        let result = Int64(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint64_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = cm_f_to_i64(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fToint64_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = cm_f_to_i64(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Int64(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_fUsing0Expecting0_0() {
        let expected = i64_to_cm_f(0)
        let result = Centimetres_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_fUsing5Expecting5_0() {
        let expected = i64_to_cm_f(5)
        let result = Centimetres_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_fUsingInt64Int64_minExpectingcentimetres_fInt64_min() {
        let expected = i64_to_cm_f(Int64(Int64.min))
        let result = Centimetres_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_fUsingInt64Int64_maxExpectingcentimetres_fInt64_max() {
        let expected = i64_to_cm_f(Int64(Int64.max))
        let result = Centimetres_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTounsignedintUsing0_0Expecting0() {
        let expected = cm_f_to_u(0.0)
        let result = CUnsignedInt(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTounsignedintUsing5_0Expecting5() {
        let expected = cm_f_to_u(5.0)
        let result = CUnsignedInt(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTounsignedintUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = cm_f_to_u(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTounsignedintUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = cm_f_to_u(centimetres_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_fUsing0Expecting0_0() {
        let expected = u_to_cm_f(0)
        let result = Centimetres_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_fUsing5Expecting5_0() {
        let expected = u_to_cm_f(5)
        let result = Centimetres_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_fUsingCUnsignedIntCUnsignedInt_minExpectingcentimetres_fCUnsignedInt_min() {
        let expected = u_to_cm_f(CUnsignedInt(CUnsignedInt.min))
        let result = Centimetres_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_fUsingCUnsignedIntCUnsignedInt_maxExpectingcentimetres_fCUnsignedInt_max() {
        let expected = u_to_cm_f(CUnsignedInt(CUnsignedInt.max))
        let result = Centimetres_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint8_tUsing0_0Expecting0() {
        let expected = cm_f_to_u8(0.0)
        let result = UInt8(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint8_tUsing5_0Expecting5() {
        let expected = cm_f_to_u8(5.0)
        let result = UInt8(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint8_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = cm_f_to_u8(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint8_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = cm_f_to_u8(centimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_fUsing0Expecting0_0() {
        let expected = u8_to_cm_f(0)
        let result = Centimetres_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_fUsing5Expecting5_0() {
        let expected = u8_to_cm_f(5)
        let result = Centimetres_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_fUsingUInt8UInt8_minExpectingcentimetres_fUInt8_min() {
        let expected = u8_to_cm_f(UInt8(UInt8.min))
        let result = Centimetres_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_fUsingUInt8UInt8_maxExpectingcentimetres_fUInt8_max() {
        let expected = u8_to_cm_f(UInt8(UInt8.max))
        let result = Centimetres_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint16_tUsing0_0Expecting0() {
        let expected = cm_f_to_u16(0.0)
        let result = UInt16(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint16_tUsing5_0Expecting5() {
        let expected = cm_f_to_u16(5.0)
        let result = UInt16(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint16_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = cm_f_to_u16(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint16_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = cm_f_to_u16(centimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_fUsing0Expecting0_0() {
        let expected = u16_to_cm_f(0)
        let result = Centimetres_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_fUsing5Expecting5_0() {
        let expected = u16_to_cm_f(5)
        let result = Centimetres_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_fUsingUInt16UInt16_minExpectingcentimetres_fUInt16_min() {
        let expected = u16_to_cm_f(UInt16(UInt16.min))
        let result = Centimetres_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_fUsingUInt16UInt16_maxExpectingcentimetres_fUInt16_max() {
        let expected = u16_to_cm_f(UInt16(UInt16.max))
        let result = Centimetres_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint32_tUsing0_0Expecting0() {
        let expected = cm_f_to_u32(0.0)
        let result = UInt32(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint32_tUsing5_0Expecting5() {
        let expected = cm_f_to_u32(5.0)
        let result = UInt32(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint32_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = cm_f_to_u32(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint32_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = cm_f_to_u32(centimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_fUsing0Expecting0_0() {
        let expected = u32_to_cm_f(0)
        let result = Centimetres_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_fUsing5Expecting5_0() {
        let expected = u32_to_cm_f(5)
        let result = Centimetres_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_fUsingUInt32UInt32_minExpectingcentimetres_fUInt32_min() {
        let expected = u32_to_cm_f(UInt32(UInt32.min))
        let result = Centimetres_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_fUsingUInt32UInt32_maxExpectingcentimetres_fUInt32_max() {
        let expected = u32_to_cm_f(UInt32(UInt32.max))
        let result = Centimetres_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint64_tUsing0_0Expecting0() {
        let expected = cm_f_to_u64(0.0)
        let result = UInt64(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint64_tUsing5_0Expecting5() {
        let expected = cm_f_to_u64(5.0)
        let result = UInt64(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint64_tUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = cm_f_to_u64(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTouint64_tUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = cm_f_to_u64(centimetres_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_fUsing0Expecting0_0() {
        let expected = u64_to_cm_f(0)
        let result = Centimetres_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_fUsing5Expecting5_0() {
        let expected = u64_to_cm_f(5)
        let result = Centimetres_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_fUsingUInt64UInt64_minExpectingcentimetres_fUInt64_min() {
        let expected = u64_to_cm_f(UInt64(UInt64.min))
        let result = Centimetres_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_fUsingUInt64UInt64_maxExpectingcentimetres_fUInt64_max() {
        let expected = u64_to_cm_f(UInt64(UInt64.max))
        let result = Centimetres_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTofloatUsing0_0Expecting0_0() {
        let expected = cm_f_to_f(0.0)
        let result = Float(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTofloatUsing5_0Expecting5_0() {
        let expected = cm_f_to_f(5.0)
        let result = Float(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTofloatUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = cm_f_to_f(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Float(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTofloatUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = cm_f_to_f(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Float(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_fUsing0_0Expecting0_0() {
        let expected = f_to_cm_f(0.0)
        let result = Centimetres_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_fUsing5_0Expecting5_0() {
        let expected = f_to_cm_f(5.0)
        let result = Centimetres_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTodoubleUsing0_0Expecting0_0() {
        let expected = cm_f_to_d(0.0)
        let result = Double(Centimetres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTodoubleUsing5_0Expecting5_0() {
        let expected = cm_f_to_d(5.0)
        let result = Double(Centimetres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTodoubleUsingcentimetres_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = cm_f_to_d(centimetres_f(-Float.greatestFiniteMagnitude))
        let result = Double(Centimetres_f(centimetres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_fTodoubleUsingcentimetres_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = cm_f_to_d(centimetres_f(Float.greatestFiniteMagnitude))
        let result = Double(Centimetres_f(centimetres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_fUsing0_0Expecting0_0() {
        let expected = d_to_cm_f(0.0)
        let result = Centimetres_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_fUsing5_0Expecting5_0() {
        let expected = d_to_cm_f(5.0)
        let result = Centimetres_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingcentimetres_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_cm_f(Double(-Double.greatestFiniteMagnitude))
        let result = Centimetres_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingcentimetres_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_cm_f(Double(Double.greatestFiniteMagnitude))
        let result = Centimetres_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides centimetres_d unit tests.
final class Centimetres_dTests: XCTestCase {

    func testcentimetres_dTomillimetres_tUsing15_0Expectingmillimetres_t15_010_0_rounded() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_mm_t(15.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsing25_0Expectingmillimetres_t25_010_0_rounded() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_mm_t(25.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsing250_0Expectingmillimetres_t250_010_0_rounded() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_mm_t(250.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsing0_0Expectingmillimetres_t0_010_0_rounded() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_mm_t(0.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsing2500_0Expectingmillimetres_t2500_010_0_rounded() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_mm_t(2500.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsing25000_0Expectingmillimetres_t25000_010_0_rounded() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_mm_t(25000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsing250000_0Expectingmillimetres_t250000_010_0_rounded() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_mm_t(250000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsing2500000_0Expectingmillimetres_t2500000_010_0_rounded() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_mm_t(2500000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsingNeg323_0Expectingmillimetres_tNeg323_010_0_rounded() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_mm_t(-323.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsingNeg10_0Expectingmillimetres_tNeg10_010_0_rounded() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_mm_t(-10.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsingNeg1000_0Expectingmillimetres_tNeg1000_010_0_rounded() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_mm_t(-1000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsingNeg5_0Expectingmillimetres_tNeg5_010_0_rounded() {
        let unit = Centimetres_d(-5.0)
        let expected = cm_d_to_mm_t(-5.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_tUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_t(-Double.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTomillimetres_tUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_t(Double.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTocentimetres_tUsing0_0Expecting0() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_cm_t(0.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let unit = Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude))
        let expected = cm_d_to_cm_t(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let unit = Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude))
        let expected = cm_d_to_cm_t(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_tUsing5_0Expecting5() {
        let unit = Centimetres_d(5.0)
        let expected = cm_d_to_cm_t(5.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing15_0Expectingmetres_t15_0100_0_rounded() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_m_t(15.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing25_0Expectingmetres_t25_0100_0_rounded() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_m_t(25.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing250_0Expectingmetres_t250_0100_0_rounded() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_m_t(250.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing0_0Expectingmetres_t0_0100_0_rounded() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_m_t(0.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing2500_0Expectingmetres_t2500_0100_0_rounded() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_m_t(2500.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing25000_0Expectingmetres_t25000_0100_0_rounded() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_m_t(25000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing250000_0Expectingmetres_t250000_0100_0_rounded() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_m_t(250000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsing2500000_0Expectingmetres_t2500000_0100_0_rounded() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_m_t(2500000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsingNeg323_0Expectingmetres_tNeg323_0100_0_rounded() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_m_t(-323.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsingNeg10_0Expectingmetres_tNeg10_0100_0_rounded() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_m_t(-10.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsingNeg1000_0Expectingmetres_tNeg1000_0100_0_rounded() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_m_t(-1000.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsingNeg5_0Expectingmetres_tNeg5_0100_0_rounded() {
        let unit = Centimetres_d(-5.0)
        let expected = cm_d_to_m_t(-5.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_tUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_t(-Double.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTometres_tUsingDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_t(Double.greatestFiniteMagnitude)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTomillimetres_uUsing15_0Expectingmillimetres_u15_010_0_rounded() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_mm_u(15.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsing25_0Expectingmillimetres_u25_010_0_rounded() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_mm_u(25.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsing250_0Expectingmillimetres_u250_010_0_rounded() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_mm_u(250.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsing0_0Expectingmillimetres_u0_010_0_rounded() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_mm_u(0.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsing2500_0Expectingmillimetres_u2500_010_0_rounded() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_mm_u(2500.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsing25000_0Expectingmillimetres_u25000_010_0_rounded() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_mm_u(25000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsing250000_0Expectingmillimetres_u250000_010_0_rounded() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_mm_u(250000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsing2500000_0Expectingmillimetres_u2500000_010_0_rounded() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_mm_u(2500000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsingNeg323_0Expecting0() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_mm_u(-323.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsingNeg10_0Expecting0() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_mm_u(-10.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsingNeg1000_0Expecting0() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_mm_u(-1000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsingNeg6_0Expecting0() {
        let unit = Centimetres_d(-6.0)
        let expected = cm_d_to_mm_u(-6.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_uUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_u(-Double.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTomillimetres_uUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_u(Double.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTocentimetres_uUsing0_0Expecting0() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_cm_u(0.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_uUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude))
        let expected = cm_d_to_cm_u(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_uUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude))
        let expected = cm_d_to_cm_u(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_uUsing5_0Expecting5() {
        let unit = Centimetres_d(5.0)
        let expected = cm_d_to_cm_u(5.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing15_0Expectingmetres_u15_0100_0_rounded() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_m_u(15.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing25_0Expectingmetres_u25_0100_0_rounded() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_m_u(25.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing250_0Expectingmetres_u250_0100_0_rounded() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_m_u(250.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing0_0Expectingmetres_u0_0100_0_rounded() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_m_u(0.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing2500_0Expectingmetres_u2500_0100_0_rounded() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_m_u(2500.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing25000_0Expectingmetres_u25000_0100_0_rounded() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_m_u(25000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing250000_0Expectingmetres_u250000_0100_0_rounded() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_m_u(250000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsing2500000_0Expectingmetres_u2500000_0100_0_rounded() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_m_u(2500000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsingNeg323_0Expecting0() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_m_u(-323.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsingNeg10_0Expecting0() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_m_u(-10.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsingNeg1000_0Expecting0() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_m_u(-1000.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsingNeg6_0Expecting0() {
        let unit = Centimetres_d(-6.0)
        let expected = cm_d_to_m_u(-6.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_uUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_u(-Double.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTometres_uUsingDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_u(Double.greatestFiniteMagnitude)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTomillimetres_fUsing15_0Expectingmillimetres_f15_010_0() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_mm_f(15.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsing25_0Expectingmillimetres_f25_010_0() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_mm_f(25.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsing250_0Expectingmillimetres_f250_010_0() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_mm_f(250.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsing0_0Expectingmillimetres_f0_010_0() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_mm_f(0.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsing2500_0Expectingmillimetres_f2500_010_0() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_mm_f(2500.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsing25000_0Expectingmillimetres_f25000_010_0() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_mm_f(25000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsing250000_0Expectingmillimetres_f250000_010_0() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_mm_f(250000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsing2500000_0Expectingmillimetres_f2500000_010_0() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_mm_f(2500000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsingNeg323_0Expectingmillimetres_fNeg323_010_0() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_mm_f(-323.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsingNeg10_0Expectingmillimetres_fNeg10_010_0() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_mm_f(-10.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsingNeg1000_0Expectingmillimetres_fNeg1000_010_0() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_mm_f(-1000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsingNeg5_0Expectingmillimetres_fNeg5_010_0() {
        let unit = Centimetres_d(-5.0)
        let expected = cm_d_to_mm_f(-5.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_fUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_f(-Double.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTomillimetres_fUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_f(Double.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTocentimetres_fUsing0_0Expecting0_0() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_cm_f(0.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_fUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingcentimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude))
        let expected = cm_d_to_cm_f(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_fUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingcentimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude))
        let expected = cm_d_to_cm_f(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTocentimetres_fUsing5_0Expecting5_0() {
        let unit = Centimetres_d(5.0)
        let expected = cm_d_to_cm_f(5.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing15_0Expectingmetres_f15_0100_0() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_m_f(15.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing25_0Expectingmetres_f25_0100_0() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_m_f(25.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing250_0Expectingmetres_f250_0100_0() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_m_f(250.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing0_0Expectingmetres_f0_0100_0() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_m_f(0.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing2500_0Expectingmetres_f2500_0100_0() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_m_f(2500.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing25000_0Expectingmetres_f25000_0100_0() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_m_f(25000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing250000_0Expectingmetres_f250000_0100_0() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_m_f(250000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsing2500000_0Expectingmetres_f2500000_0100_0() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_m_f(2500000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsingNeg323_0Expectingmetres_fNeg323_0100_0() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_m_f(-323.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsingNeg10_0Expectingmetres_fNeg10_0100_0() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_m_f(-10.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsingNeg1000_0Expectingmetres_fNeg1000_0100_0() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_m_f(-1000.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsingNeg5_0Expectingmetres_fNeg5_0100_0() {
        let unit = Centimetres_d(-5.0)
        let expected = cm_d_to_m_f(-5.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_fUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_f(-Double.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTometres_fUsingDouble_greatestFiniteMagnitudeExpectingmetres_fFloat_greatestFiniteMagnitude() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_f(Double.greatestFiniteMagnitude)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTomillimetres_dUsing15_0Expectingmillimetres_d15_010_0() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_mm_d(15.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsing25_0Expectingmillimetres_d25_010_0() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_mm_d(25.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsing250_0Expectingmillimetres_d250_010_0() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_mm_d(250.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsing0_0Expectingmillimetres_d0_010_0() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_mm_d(0.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsing2500_0Expectingmillimetres_d2500_010_0() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_mm_d(2500.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsing25000_0Expectingmillimetres_d25000_010_0() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_mm_d(25000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsing250000_0Expectingmillimetres_d250000_010_0() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_mm_d(250000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsing2500000_0Expectingmillimetres_d2500000_010_0() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_mm_d(2500000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsingNeg323_0Expectingmillimetres_dNeg323_010_0() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_mm_d(-323.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsingNeg10_0Expectingmillimetres_dNeg10_010_0() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_mm_d(-10.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsingNeg1000_0Expectingmillimetres_dNeg1000_010_0() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_mm_d(-1000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsingNeg5_0Expectingmillimetres_dNeg5_010_0() {
        let unit = Centimetres_d(-5.0)
        let expected = cm_d_to_mm_d(-5.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTomillimetres_dUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_dNegDouble_greatestFiniteMagnitude() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_d(-Double.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTomillimetres_dUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_dDouble_greatestFiniteMagnitude() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_mm_d(Double.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTometres_dUsing15_0Expectingmetres_d15_0100_0() {
        let unit = Centimetres_d(15.0)
        let expected = cm_d_to_m_d(15.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsing25_0Expectingmetres_d25_0100_0() {
        let unit = Centimetres_d(25.0)
        let expected = cm_d_to_m_d(25.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsing250_0Expectingmetres_d250_0100_0() {
        let unit = Centimetres_d(250.0)
        let expected = cm_d_to_m_d(250.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsing0_0Expectingmetres_d0_0100_0() {
        let unit = Centimetres_d(0.0)
        let expected = cm_d_to_m_d(0.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsing2500_0Expectingmetres_d2500_0100_0() {
        let unit = Centimetres_d(2500.0)
        let expected = cm_d_to_m_d(2500.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsing25000_0Expectingmetres_d25000_0100_0() {
        let unit = Centimetres_d(25000.0)
        let expected = cm_d_to_m_d(25000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsing250000_0Expectingmetres_d250000_0100_0() {
        let unit = Centimetres_d(250000.0)
        let expected = cm_d_to_m_d(250000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsing2500000_0Expectingmetres_d2500000_0100_0() {
        let unit = Centimetres_d(2500000.0)
        let expected = cm_d_to_m_d(2500000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsingNeg323_0Expectingmetres_dNeg323_0100_0() {
        let unit = Centimetres_d(-323.0)
        let expected = cm_d_to_m_d(-323.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsingNeg10_0Expectingmetres_dNeg10_0100_0() {
        let unit = Centimetres_d(-10.0)
        let expected = cm_d_to_m_d(-10.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsingNeg1000_0Expectingmetres_dNeg1000_0100_0() {
        let unit = Centimetres_d(-1000.0)
        let expected = cm_d_to_m_d(-1000.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsingNeg5_0Expectingmetres_dNeg5_0100_0() {
        let unit = Centimetres_d(-5.0)
        let expected = cm_d_to_m_d(-5.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testcentimetres_dTometres_dUsingNegDouble_greatestFiniteMagnitudeExpectingmetres_dNegDouble_greatestFiniteMagnitude100_0() {
        let unit = Centimetres_d(-Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_d(-Double.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTometres_dUsingDouble_greatestFiniteMagnitudeExpectingmetres_dDouble_greatestFiniteMagnitude100_0() {
        let unit = Centimetres_d(Double.greatestFiniteMagnitude)
        let expected = cm_d_to_m_d(Double.greatestFiniteMagnitude)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTointUsing0_0Expecting0() {
        let expected = cm_d_to_i(0.0)
        let result = CInt(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTointUsing5_0Expecting5() {
        let expected = cm_d_to_i(5.0)
        let result = CInt(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTointUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = cm_d_to_i(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTointUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = cm_d_to_i(centimetres_d(Double.greatestFiniteMagnitude))
        let result = CInt(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_dUsing0Expecting0_0() {
        let expected = i_to_cm_d(0)
        let result = Centimetres_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_dUsing5Expecting5_0() {
        let expected = i_to_cm_d(5)
        let result = Centimetres_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_dUsingCIntCInt_minExpectingcentimetres_dCInt_min() {
        let expected = i_to_cm_d(CInt(CInt.min))
        let result = Centimetres_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTocentimetres_dUsingCIntCInt_maxExpectingcentimetres_dCInt_max() {
        let expected = i_to_cm_d(CInt(CInt.max))
        let result = Centimetres_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint8_tUsing0_0Expecting0() {
        let expected = cm_d_to_i8(0.0)
        let result = Int8(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint8_tUsing5_0Expecting5() {
        let expected = cm_d_to_i8(5.0)
        let result = Int8(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint8_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = cm_d_to_i8(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint8_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = cm_d_to_i8(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Int8(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_dUsing0Expecting0_0() {
        let expected = i8_to_cm_d(0)
        let result = Centimetres_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_dUsing5Expecting5_0() {
        let expected = i8_to_cm_d(5)
        let result = Centimetres_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_dUsingInt8Int8_minExpectingcentimetres_dInt8_min() {
        let expected = i8_to_cm_d(Int8(Int8.min))
        let result = Centimetres_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTocentimetres_dUsingInt8Int8_maxExpectingcentimetres_dInt8_max() {
        let expected = i8_to_cm_d(Int8(Int8.max))
        let result = Centimetres_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint16_tUsing0_0Expecting0() {
        let expected = cm_d_to_i16(0.0)
        let result = Int16(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint16_tUsing5_0Expecting5() {
        let expected = cm_d_to_i16(5.0)
        let result = Int16(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint16_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = cm_d_to_i16(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint16_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = cm_d_to_i16(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Int16(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_dUsing0Expecting0_0() {
        let expected = i16_to_cm_d(0)
        let result = Centimetres_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_dUsing5Expecting5_0() {
        let expected = i16_to_cm_d(5)
        let result = Centimetres_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_dUsingInt16Int16_minExpectingcentimetres_dInt16_min() {
        let expected = i16_to_cm_d(Int16(Int16.min))
        let result = Centimetres_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTocentimetres_dUsingInt16Int16_maxExpectingcentimetres_dInt16_max() {
        let expected = i16_to_cm_d(Int16(Int16.max))
        let result = Centimetres_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint32_tUsing0_0Expecting0() {
        let expected = cm_d_to_i32(0.0)
        let result = Int32(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint32_tUsing5_0Expecting5() {
        let expected = cm_d_to_i32(5.0)
        let result = Int32(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint32_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = cm_d_to_i32(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint32_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = cm_d_to_i32(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Int32(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_dUsing0Expecting0_0() {
        let expected = i32_to_cm_d(0)
        let result = Centimetres_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_dUsing5Expecting5_0() {
        let expected = i32_to_cm_d(5)
        let result = Centimetres_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_dUsingInt32Int32_minExpectingcentimetres_dInt32_min() {
        let expected = i32_to_cm_d(Int32(Int32.min))
        let result = Centimetres_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTocentimetres_dUsingInt32Int32_maxExpectingcentimetres_dInt32_max() {
        let expected = i32_to_cm_d(Int32(Int32.max))
        let result = Centimetres_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint64_tUsing0_0Expecting0() {
        let expected = cm_d_to_i64(0.0)
        let result = Int64(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint64_tUsing5_0Expecting5() {
        let expected = cm_d_to_i64(5.0)
        let result = Int64(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint64_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = cm_d_to_i64(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dToint64_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = cm_d_to_i64(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Int64(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_dUsing0Expecting0_0() {
        let expected = i64_to_cm_d(0)
        let result = Centimetres_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_dUsing5Expecting5_0() {
        let expected = i64_to_cm_d(5)
        let result = Centimetres_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_dUsingInt64Int64_minExpectingcentimetres_dInt64_min() {
        let expected = i64_to_cm_d(Int64(Int64.min))
        let result = Centimetres_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTocentimetres_dUsingInt64Int64_maxExpectingcentimetres_dInt64_max() {
        let expected = i64_to_cm_d(Int64(Int64.max))
        let result = Centimetres_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTounsignedintUsing0_0Expecting0() {
        let expected = cm_d_to_u(0.0)
        let result = CUnsignedInt(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTounsignedintUsing5_0Expecting5() {
        let expected = cm_d_to_u(5.0)
        let result = CUnsignedInt(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTounsignedintUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = cm_d_to_u(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTounsignedintUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = cm_d_to_u(centimetres_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_dUsing0Expecting0_0() {
        let expected = u_to_cm_d(0)
        let result = Centimetres_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_dUsing5Expecting5_0() {
        let expected = u_to_cm_d(5)
        let result = Centimetres_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_dUsingCUnsignedIntCUnsignedInt_minExpectingcentimetres_dCUnsignedInt_min() {
        let expected = u_to_cm_d(CUnsignedInt(CUnsignedInt.min))
        let result = Centimetres_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTocentimetres_dUsingCUnsignedIntCUnsignedInt_maxExpectingcentimetres_dCUnsignedInt_max() {
        let expected = u_to_cm_d(CUnsignedInt(CUnsignedInt.max))
        let result = Centimetres_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint8_tUsing0_0Expecting0() {
        let expected = cm_d_to_u8(0.0)
        let result = UInt8(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint8_tUsing5_0Expecting5() {
        let expected = cm_d_to_u8(5.0)
        let result = UInt8(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint8_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = cm_d_to_u8(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint8_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = cm_d_to_u8(centimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_dUsing0Expecting0_0() {
        let expected = u8_to_cm_d(0)
        let result = Centimetres_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_dUsing5Expecting5_0() {
        let expected = u8_to_cm_d(5)
        let result = Centimetres_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_dUsingUInt8UInt8_minExpectingcentimetres_dUInt8_min() {
        let expected = u8_to_cm_d(UInt8(UInt8.min))
        let result = Centimetres_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTocentimetres_dUsingUInt8UInt8_maxExpectingcentimetres_dUInt8_max() {
        let expected = u8_to_cm_d(UInt8(UInt8.max))
        let result = Centimetres_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint16_tUsing0_0Expecting0() {
        let expected = cm_d_to_u16(0.0)
        let result = UInt16(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint16_tUsing5_0Expecting5() {
        let expected = cm_d_to_u16(5.0)
        let result = UInt16(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint16_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = cm_d_to_u16(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint16_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = cm_d_to_u16(centimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_dUsing0Expecting0_0() {
        let expected = u16_to_cm_d(0)
        let result = Centimetres_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_dUsing5Expecting5_0() {
        let expected = u16_to_cm_d(5)
        let result = Centimetres_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_dUsingUInt16UInt16_minExpectingcentimetres_dUInt16_min() {
        let expected = u16_to_cm_d(UInt16(UInt16.min))
        let result = Centimetres_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTocentimetres_dUsingUInt16UInt16_maxExpectingcentimetres_dUInt16_max() {
        let expected = u16_to_cm_d(UInt16(UInt16.max))
        let result = Centimetres_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint32_tUsing0_0Expecting0() {
        let expected = cm_d_to_u32(0.0)
        let result = UInt32(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint32_tUsing5_0Expecting5() {
        let expected = cm_d_to_u32(5.0)
        let result = UInt32(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint32_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = cm_d_to_u32(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint32_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = cm_d_to_u32(centimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_dUsing0Expecting0_0() {
        let expected = u32_to_cm_d(0)
        let result = Centimetres_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_dUsing5Expecting5_0() {
        let expected = u32_to_cm_d(5)
        let result = Centimetres_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_dUsingUInt32UInt32_minExpectingcentimetres_dUInt32_min() {
        let expected = u32_to_cm_d(UInt32(UInt32.min))
        let result = Centimetres_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTocentimetres_dUsingUInt32UInt32_maxExpectingcentimetres_dUInt32_max() {
        let expected = u32_to_cm_d(UInt32(UInt32.max))
        let result = Centimetres_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint64_tUsing0_0Expecting0() {
        let expected = cm_d_to_u64(0.0)
        let result = UInt64(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint64_tUsing5_0Expecting5() {
        let expected = cm_d_to_u64(5.0)
        let result = UInt64(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint64_tUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = cm_d_to_u64(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTouint64_tUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = cm_d_to_u64(centimetres_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_dUsing0Expecting0_0() {
        let expected = u64_to_cm_d(0)
        let result = Centimetres_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_dUsing5Expecting5_0() {
        let expected = u64_to_cm_d(5)
        let result = Centimetres_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_dUsingUInt64UInt64_minExpectingcentimetres_dUInt64_min() {
        let expected = u64_to_cm_d(UInt64(UInt64.min))
        let result = Centimetres_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTocentimetres_dUsingUInt64UInt64_maxExpectingcentimetres_dUInt64_max() {
        let expected = u64_to_cm_d(UInt64(UInt64.max))
        let result = Centimetres_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTofloatUsing0_0Expecting0_0() {
        let expected = cm_d_to_f(0.0)
        let result = Float(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTofloatUsing5_0Expecting5_0() {
        let expected = cm_d_to_f(5.0)
        let result = Float(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTofloatUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = cm_d_to_f(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Float(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTofloatUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = cm_d_to_f(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Float(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_dUsing0_0Expecting0_0() {
        let expected = f_to_cm_d(0.0)
        let result = Centimetres_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_dUsing5_0Expecting5_0() {
        let expected = f_to_cm_d(5.0)
        let result = Centimetres_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingcentimetres_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_cm_d(Float(-Float.greatestFiniteMagnitude))
        let result = Centimetres_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTocentimetres_dUsingFloatFloat_greatestFiniteMagnitudeExpectingcentimetres_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_cm_d(Float(Float.greatestFiniteMagnitude))
        let result = Centimetres_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTodoubleUsing0_0Expecting0_0() {
        let expected = cm_d_to_d(0.0)
        let result = Double(Centimetres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTodoubleUsing5_0Expecting5_0() {
        let expected = cm_d_to_d(5.0)
        let result = Double(Centimetres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTodoubleUsingcentimetres_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = cm_d_to_d(centimetres_d(-Double.greatestFiniteMagnitude))
        let result = Double(Centimetres_d(centimetres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testcentimetres_dTodoubleUsingcentimetres_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = cm_d_to_d(centimetres_d(Double.greatestFiniteMagnitude))
        let result = Double(Centimetres_d(centimetres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_dUsing0_0Expecting0_0() {
        let expected = d_to_cm_d(0.0)
        let result = Centimetres_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTocentimetres_dUsing5_0Expecting5_0() {
        let expected = d_to_cm_d(5.0)
        let result = Centimetres_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides metres_t unit tests.
final class Metres_tTests: XCTestCase {

    func testmetres_tTomillimetres_tUsing15Expectingmillimetres_t151000() {
        let unit = Metres_t(15)
        let expected = m_t_to_mm_t(15)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsing25Expectingmillimetres_t251000() {
        let unit = Metres_t(25)
        let expected = m_t_to_mm_t(25)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsing250Expectingmillimetres_t2501000() {
        let unit = Metres_t(250)
        let expected = m_t_to_mm_t(250)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsing0Expectingmillimetres_t01000() {
        let unit = Metres_t(0)
        let expected = m_t_to_mm_t(0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsing2500Expectingmillimetres_t25001000() {
        let unit = Metres_t(2500)
        let expected = m_t_to_mm_t(2500)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsing25000Expectingmillimetres_t250001000() {
        let unit = Metres_t(25000)
        let expected = m_t_to_mm_t(25000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsing250000Expectingmillimetres_t2500001000() {
        let unit = Metres_t(250000)
        let expected = m_t_to_mm_t(250000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsing2500000Expectingmillimetres_tCInt_max() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_mm_t(2500000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsingNeg323Expectingmillimetres_tNeg3231000() {
        let unit = Metres_t(-323)
        let expected = m_t_to_mm_t(-323)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsingNeg10Expectingmillimetres_tNeg101000() {
        let unit = Metres_t(-10)
        let expected = m_t_to_mm_t(-10)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsingNeg1000Expectingmillimetres_tNeg10001000() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_mm_t(-1000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsingNeg5Expectingmillimetres_tNeg51000() {
        let unit = Metres_t(-5)
        let expected = m_t_to_mm_t(-5)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsingCInt_minExpectingmillimetres_tCInt_min() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_mm_t(CInt.min)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_tUsingCInt_maxExpectingmillimetres_tCInt_max() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_mm_t(CInt.max)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing15Expectingcentimetres_t15100() {
        let unit = Metres_t(15)
        let expected = m_t_to_cm_t(15)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing25Expectingcentimetres_t25100() {
        let unit = Metres_t(25)
        let expected = m_t_to_cm_t(25)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing250Expectingcentimetres_t250100() {
        let unit = Metres_t(250)
        let expected = m_t_to_cm_t(250)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing0Expectingcentimetres_t0100() {
        let unit = Metres_t(0)
        let expected = m_t_to_cm_t(0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing2500Expectingcentimetres_t2500100() {
        let unit = Metres_t(2500)
        let expected = m_t_to_cm_t(2500)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing25000Expectingcentimetres_t25000100() {
        let unit = Metres_t(25000)
        let expected = m_t_to_cm_t(25000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing250000Expectingcentimetres_t250000100() {
        let unit = Metres_t(250000)
        let expected = m_t_to_cm_t(250000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsing2500000Expectingcentimetres_t2500000100() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_cm_t(2500000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsingNeg323Expectingcentimetres_tNeg323100() {
        let unit = Metres_t(-323)
        let expected = m_t_to_cm_t(-323)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsingNeg10Expectingcentimetres_tNeg10100() {
        let unit = Metres_t(-10)
        let expected = m_t_to_cm_t(-10)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsingNeg1000Expectingcentimetres_tNeg1000100() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_cm_t(-1000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsingNeg5Expectingcentimetres_tNeg5100() {
        let unit = Metres_t(-5)
        let expected = m_t_to_cm_t(-5)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsingCInt_minExpectingcentimetres_tCInt_min() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_cm_t(CInt.min)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_tUsingCInt_maxExpectingcentimetres_tCInt_max() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_cm_t(CInt.max)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing15Expectingmillimetres_u151000() {
        let unit = Metres_t(15)
        let expected = m_t_to_mm_u(15)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing25Expectingmillimetres_u251000() {
        let unit = Metres_t(25)
        let expected = m_t_to_mm_u(25)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing250Expectingmillimetres_u2501000() {
        let unit = Metres_t(250)
        let expected = m_t_to_mm_u(250)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing0Expectingmillimetres_u01000() {
        let unit = Metres_t(0)
        let expected = m_t_to_mm_u(0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing2500Expectingmillimetres_u25001000() {
        let unit = Metres_t(2500)
        let expected = m_t_to_mm_u(2500)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing25000Expectingmillimetres_u250001000() {
        let unit = Metres_t(25000)
        let expected = m_t_to_mm_u(25000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing250000Expectingmillimetres_u2500001000() {
        let unit = Metres_t(250000)
        let expected = m_t_to_mm_u(250000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsing2500000Expectingmillimetres_u25000001000() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_mm_u(2500000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsingNeg323Expecting0() {
        let unit = Metres_t(-323)
        let expected = m_t_to_mm_u(-323)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsingNeg10Expecting0() {
        let unit = Metres_t(-10)
        let expected = m_t_to_mm_u(-10)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsingNeg1000Expecting0() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_mm_u(-1000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsingNeg6Expecting0() {
        let unit = Metres_t(-6)
        let expected = m_t_to_mm_u(-6)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsingCInt_minExpecting0() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_mm_u(CInt.min)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_uUsingCInt_maxExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_mm_u(CInt.max)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing15Expectingcentimetres_u15100() {
        let unit = Metres_t(15)
        let expected = m_t_to_cm_u(15)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing25Expectingcentimetres_u25100() {
        let unit = Metres_t(25)
        let expected = m_t_to_cm_u(25)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing250Expectingcentimetres_u250100() {
        let unit = Metres_t(250)
        let expected = m_t_to_cm_u(250)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing0Expectingcentimetres_u0100() {
        let unit = Metres_t(0)
        let expected = m_t_to_cm_u(0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing2500Expectingcentimetres_u2500100() {
        let unit = Metres_t(2500)
        let expected = m_t_to_cm_u(2500)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing25000Expectingcentimetres_u25000100() {
        let unit = Metres_t(25000)
        let expected = m_t_to_cm_u(25000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing250000Expectingcentimetres_u250000100() {
        let unit = Metres_t(250000)
        let expected = m_t_to_cm_u(250000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsing2500000Expectingcentimetres_u2500000100() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_cm_u(2500000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsingNeg323Expecting0() {
        let unit = Metres_t(-323)
        let expected = m_t_to_cm_u(-323)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsingNeg10Expecting0() {
        let unit = Metres_t(-10)
        let expected = m_t_to_cm_u(-10)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsingNeg1000Expecting0() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_cm_u(-1000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsingNeg6Expecting0() {
        let unit = Metres_t(-6)
        let expected = m_t_to_cm_u(-6)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsingCInt_minExpecting0() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_cm_u(CInt.min)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_uUsingCInt_maxExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_cm_u(CInt.max)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_uUsing0Expecting0() {
        let unit = Metres_t(0)
        let expected = m_t_to_m_u(0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_uUsingmetres_tCInt_minExpectingmetres_uCUnsignedInt_min() {
        let unit = Metres_t(metres_t(CInt.min))
        let expected = m_t_to_m_u(metres_t(CInt.min))
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_uUsingmetres_tCInt_maxExpectingmetres_uCInt_max() {
        let unit = Metres_t(metres_t(CInt.max))
        let expected = m_t_to_m_u(metres_t(CInt.max))
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_uUsing5Expecting5() {
        let unit = Metres_t(5)
        let expected = m_t_to_m_u(5)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing15Expectingmillimetres_f15_01000_0() {
        let unit = Metres_t(15)
        let expected = m_t_to_mm_f(15)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing25Expectingmillimetres_f25_01000_0() {
        let unit = Metres_t(25)
        let expected = m_t_to_mm_f(25)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing250Expectingmillimetres_f250_01000_0() {
        let unit = Metres_t(250)
        let expected = m_t_to_mm_f(250)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing0Expectingmillimetres_f0_01000_0() {
        let unit = Metres_t(0)
        let expected = m_t_to_mm_f(0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing2500Expectingmillimetres_f2500_01000_0() {
        let unit = Metres_t(2500)
        let expected = m_t_to_mm_f(2500)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing25000Expectingmillimetres_f25000_01000_0() {
        let unit = Metres_t(25000)
        let expected = m_t_to_mm_f(25000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing250000Expectingmillimetres_f250000_01000_0() {
        let unit = Metres_t(250000)
        let expected = m_t_to_mm_f(250000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsing2500000Expectingmillimetres_f2500000_01000_0() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_mm_f(2500000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsingNeg323Expectingmillimetres_fNeg323_01000_0() {
        let unit = Metres_t(-323)
        let expected = m_t_to_mm_f(-323)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsingNeg10Expectingmillimetres_fNeg10_01000_0() {
        let unit = Metres_t(-10)
        let expected = m_t_to_mm_f(-10)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsingNeg1000Expectingmillimetres_fNeg1000_01000_0() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_mm_f(-1000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsingNeg5Expectingmillimetres_fNeg5_01000_0() {
        let unit = Metres_t(-5)
        let expected = m_t_to_mm_f(-5)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsingCInt_minExpectingmillimetres_fCInt_min1000_0() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_mm_f(CInt.min)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_fUsingCInt_maxExpectingmillimetres_fCInt_max1000_0() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_mm_f(CInt.max)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing15Expectingcentimetres_f15_0100_0() {
        let unit = Metres_t(15)
        let expected = m_t_to_cm_f(15)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing25Expectingcentimetres_f25_0100_0() {
        let unit = Metres_t(25)
        let expected = m_t_to_cm_f(25)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing250Expectingcentimetres_f250_0100_0() {
        let unit = Metres_t(250)
        let expected = m_t_to_cm_f(250)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing0Expectingcentimetres_f0_0100_0() {
        let unit = Metres_t(0)
        let expected = m_t_to_cm_f(0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing2500Expectingcentimetres_f2500_0100_0() {
        let unit = Metres_t(2500)
        let expected = m_t_to_cm_f(2500)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing25000Expectingcentimetres_f25000_0100_0() {
        let unit = Metres_t(25000)
        let expected = m_t_to_cm_f(25000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing250000Expectingcentimetres_f250000_0100_0() {
        let unit = Metres_t(250000)
        let expected = m_t_to_cm_f(250000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsing2500000Expectingcentimetres_f2500000_0100_0() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_cm_f(2500000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsingNeg323Expectingcentimetres_fNeg323_0100_0() {
        let unit = Metres_t(-323)
        let expected = m_t_to_cm_f(-323)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsingNeg10Expectingcentimetres_fNeg10_0100_0() {
        let unit = Metres_t(-10)
        let expected = m_t_to_cm_f(-10)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsingNeg1000Expectingcentimetres_fNeg1000_0100_0() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_cm_f(-1000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsingNeg5Expectingcentimetres_fNeg5_0100_0() {
        let unit = Metres_t(-5)
        let expected = m_t_to_cm_f(-5)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsingCInt_minExpectingcentimetres_fCInt_min100_0() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_cm_f(CInt.min)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_fUsingCInt_maxExpectingcentimetres_fCInt_max100_0() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_cm_f(CInt.max)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_fUsing0Expecting0_0() {
        let unit = Metres_t(0)
        let expected = m_t_to_m_f(0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_fUsingmetres_tCInt_minExpectingmetres_fCInt_min() {
        let unit = Metres_t(metres_t(CInt.min))
        let expected = m_t_to_m_f(metres_t(CInt.min))
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_fUsingmetres_tCInt_maxExpectingmetres_fCInt_max() {
        let unit = Metres_t(metres_t(CInt.max))
        let expected = m_t_to_m_f(metres_t(CInt.max))
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_fUsing5Expecting5_0() {
        let unit = Metres_t(5)
        let expected = m_t_to_m_f(5)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing15Expectingmillimetres_d15_01000_0() {
        let unit = Metres_t(15)
        let expected = m_t_to_mm_d(15)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing25Expectingmillimetres_d25_01000_0() {
        let unit = Metres_t(25)
        let expected = m_t_to_mm_d(25)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing250Expectingmillimetres_d250_01000_0() {
        let unit = Metres_t(250)
        let expected = m_t_to_mm_d(250)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing0Expectingmillimetres_d0_01000_0() {
        let unit = Metres_t(0)
        let expected = m_t_to_mm_d(0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing2500Expectingmillimetres_d2500_01000_0() {
        let unit = Metres_t(2500)
        let expected = m_t_to_mm_d(2500)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing25000Expectingmillimetres_d25000_01000_0() {
        let unit = Metres_t(25000)
        let expected = m_t_to_mm_d(25000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing250000Expectingmillimetres_d250000_01000_0() {
        let unit = Metres_t(250000)
        let expected = m_t_to_mm_d(250000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsing2500000Expectingmillimetres_d2500000_01000_0() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_mm_d(2500000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsingNeg323Expectingmillimetres_dNeg323_01000_0() {
        let unit = Metres_t(-323)
        let expected = m_t_to_mm_d(-323)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsingNeg10Expectingmillimetres_dNeg10_01000_0() {
        let unit = Metres_t(-10)
        let expected = m_t_to_mm_d(-10)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsingNeg1000Expectingmillimetres_dNeg1000_01000_0() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_mm_d(-1000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsingNeg5Expectingmillimetres_dNeg5_01000_0() {
        let unit = Metres_t(-5)
        let expected = m_t_to_mm_d(-5)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsingCInt_minExpectingmillimetres_dCInt_min1000_0() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_mm_d(CInt.min)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTomillimetres_dUsingCInt_maxExpectingmillimetres_dCInt_max1000_0() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_mm_d(CInt.max)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing15Expectingcentimetres_d15_0100_0() {
        let unit = Metres_t(15)
        let expected = m_t_to_cm_d(15)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing25Expectingcentimetres_d25_0100_0() {
        let unit = Metres_t(25)
        let expected = m_t_to_cm_d(25)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing250Expectingcentimetres_d250_0100_0() {
        let unit = Metres_t(250)
        let expected = m_t_to_cm_d(250)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing0Expectingcentimetres_d0_0100_0() {
        let unit = Metres_t(0)
        let expected = m_t_to_cm_d(0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing2500Expectingcentimetres_d2500_0100_0() {
        let unit = Metres_t(2500)
        let expected = m_t_to_cm_d(2500)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing25000Expectingcentimetres_d25000_0100_0() {
        let unit = Metres_t(25000)
        let expected = m_t_to_cm_d(25000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing250000Expectingcentimetres_d250000_0100_0() {
        let unit = Metres_t(250000)
        let expected = m_t_to_cm_d(250000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsing2500000Expectingcentimetres_d2500000_0100_0() {
        let unit = Metres_t(2500000)
        let expected = m_t_to_cm_d(2500000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsingNeg323Expectingcentimetres_dNeg323_0100_0() {
        let unit = Metres_t(-323)
        let expected = m_t_to_cm_d(-323)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsingNeg10Expectingcentimetres_dNeg10_0100_0() {
        let unit = Metres_t(-10)
        let expected = m_t_to_cm_d(-10)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsingNeg1000Expectingcentimetres_dNeg1000_0100_0() {
        let unit = Metres_t(-1000)
        let expected = m_t_to_cm_d(-1000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsingNeg5Expectingcentimetres_dNeg5_0100_0() {
        let unit = Metres_t(-5)
        let expected = m_t_to_cm_d(-5)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsingCInt_minExpectingcentimetres_dCInt_min100_0() {
        let unit = Metres_t(CInt.min)
        let expected = m_t_to_cm_d(CInt.min)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTocentimetres_dUsingCInt_maxExpectingcentimetres_dCInt_max100_0() {
        let unit = Metres_t(CInt.max)
        let expected = m_t_to_cm_d(CInt.max)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_dUsing0Expecting0_0() {
        let unit = Metres_t(0)
        let expected = m_t_to_m_d(0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_dUsingmetres_tCInt_minExpectingmetres_dCInt_min() {
        let unit = Metres_t(metres_t(CInt.min))
        let expected = m_t_to_m_d(metres_t(CInt.min))
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_dUsingmetres_tCInt_maxExpectingmetres_dCInt_max() {
        let unit = Metres_t(metres_t(CInt.max))
        let expected = m_t_to_m_d(metres_t(CInt.max))
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTometres_dUsing5Expecting5_0() {
        let unit = Metres_t(5)
        let expected = m_t_to_m_d(5)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_tTointUsing0Expecting0() {
        let expected = m_t_to_i(0)
        let result = CInt(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTointUsing5Expecting5() {
        let expected = m_t_to_i(5)
        let result = CInt(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTointUsingmetres_tCInt_minExpectingCIntCInt_min() {
        let expected = m_t_to_i(metres_t(CInt.min))
        let result = CInt(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTointUsingmetres_tCInt_maxExpectingCIntCInt_max() {
        let expected = m_t_to_i(metres_t(CInt.max))
        let result = CInt(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTometres_tUsing0Expecting0() {
        let expected = i_to_m_t(0)
        let result = Metres_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_tUsing5Expecting5() {
        let expected = i_to_m_t(5)
        let result = Metres_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint8_tUsing0Expecting0() {
        let expected = m_t_to_i8(0)
        let result = Int8(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint8_tUsing5Expecting5() {
        let expected = m_t_to_i8(5)
        let result = Int8(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint8_tUsingmetres_tCInt_minExpectingInt8Int8_min() {
        let expected = m_t_to_i8(metres_t(CInt.min))
        let result = Int8(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint8_tUsingmetres_tCInt_maxExpectingInt8Int8_max() {
        let expected = m_t_to_i8(metres_t(CInt.max))
        let result = Int8(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_tUsing0Expecting0() {
        let expected = i8_to_m_t(0)
        let result = Metres_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_tUsing5Expecting5() {
        let expected = i8_to_m_t(5)
        let result = Metres_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_tUsingInt8Int8_minExpectingmetres_tInt8_min() {
        let expected = i8_to_m_t(Int8(Int8.min))
        let result = Metres_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_tUsingInt8Int8_maxExpectingmetres_tInt8_max() {
        let expected = i8_to_m_t(Int8(Int8.max))
        let result = Metres_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint16_tUsing0Expecting0() {
        let expected = m_t_to_i16(0)
        let result = Int16(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint16_tUsing5Expecting5() {
        let expected = m_t_to_i16(5)
        let result = Int16(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint16_tUsingmetres_tCInt_minExpectingInt16Int16_min() {
        let expected = m_t_to_i16(metres_t(CInt.min))
        let result = Int16(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint16_tUsingmetres_tCInt_maxExpectingInt16Int16_max() {
        let expected = m_t_to_i16(metres_t(CInt.max))
        let result = Int16(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_tUsing0Expecting0() {
        let expected = i16_to_m_t(0)
        let result = Metres_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_tUsing5Expecting5() {
        let expected = i16_to_m_t(5)
        let result = Metres_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_tUsingInt16Int16_minExpectingmetres_tInt16_min() {
        let expected = i16_to_m_t(Int16(Int16.min))
        let result = Metres_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_tUsingInt16Int16_maxExpectingmetres_tInt16_max() {
        let expected = i16_to_m_t(Int16(Int16.max))
        let result = Metres_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint32_tUsing0Expecting0() {
        let expected = m_t_to_i32(0)
        let result = Int32(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint32_tUsing5Expecting5() {
        let expected = m_t_to_i32(5)
        let result = Int32(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint32_tUsingmetres_tCInt_minExpectingInt32CInt_min() {
        let expected = m_t_to_i32(metres_t(CInt.min))
        let result = Int32(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint32_tUsingmetres_tCInt_maxExpectingInt32CInt_max() {
        let expected = m_t_to_i32(metres_t(CInt.max))
        let result = Int32(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_tUsing0Expecting0() {
        let expected = i32_to_m_t(0)
        let result = Metres_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_tUsing5Expecting5() {
        let expected = i32_to_m_t(5)
        let result = Metres_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_tUsingInt32Int32_minExpectingmetres_tCInt_min() {
        let expected = i32_to_m_t(Int32(Int32.min))
        let result = Metres_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_tUsingInt32Int32_maxExpectingmetres_tCInt_max() {
        let expected = i32_to_m_t(Int32(Int32.max))
        let result = Metres_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint64_tUsing0Expecting0() {
        let expected = m_t_to_i64(0)
        let result = Int64(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint64_tUsing5Expecting5() {
        let expected = m_t_to_i64(5)
        let result = Int64(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint64_tUsingmetres_tCInt_minExpectingInt64CInt_min() {
        let expected = m_t_to_i64(metres_t(CInt.min))
        let result = Int64(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tToint64_tUsingmetres_tCInt_maxExpectingInt64CInt_max() {
        let expected = m_t_to_i64(metres_t(CInt.max))
        let result = Int64(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_tUsing0Expecting0() {
        let expected = i64_to_m_t(0)
        let result = Metres_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_tUsing5Expecting5() {
        let expected = i64_to_m_t(5)
        let result = Metres_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_tUsingInt64Int64_minExpectingmetres_tCInt_min() {
        let expected = i64_to_m_t(Int64(Int64.min))
        let result = Metres_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_tUsingInt64Int64_maxExpectingmetres_tCInt_max() {
        let expected = i64_to_m_t(Int64(Int64.max))
        let result = Metres_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTounsignedintUsing0Expecting0() {
        let expected = m_t_to_u(0)
        let result = CUnsignedInt(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTounsignedintUsing5Expecting5() {
        let expected = m_t_to_u(5)
        let result = CUnsignedInt(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTounsignedintUsingmetres_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = m_t_to_u(metres_t(CInt.min))
        let result = CUnsignedInt(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTounsignedintUsingmetres_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = m_t_to_u(metres_t(CInt.max))
        let result = CUnsignedInt(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_tUsing0Expecting0() {
        let expected = u_to_m_t(0)
        let result = Metres_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_tUsing5Expecting5() {
        let expected = u_to_m_t(5)
        let result = Metres_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_tUsingCUnsignedIntCUnsignedInt_minExpectingmetres_tCUnsignedInt_min() {
        let expected = u_to_m_t(CUnsignedInt(CUnsignedInt.min))
        let result = Metres_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_tUsingCUnsignedIntCUnsignedInt_maxExpectingmetres_tCInt_max() {
        let expected = u_to_m_t(CUnsignedInt(CUnsignedInt.max))
        let result = Metres_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint8_tUsing0Expecting0() {
        let expected = m_t_to_u8(0)
        let result = UInt8(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint8_tUsing5Expecting5() {
        let expected = m_t_to_u8(5)
        let result = UInt8(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint8_tUsingmetres_tCInt_minExpectingUInt8UInt8_min() {
        let expected = m_t_to_u8(metres_t(CInt.min))
        let result = UInt8(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint8_tUsingmetres_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = m_t_to_u8(metres_t(CInt.max))
        let result = UInt8(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_tUsing0Expecting0() {
        let expected = u8_to_m_t(0)
        let result = Metres_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_tUsing5Expecting5() {
        let expected = u8_to_m_t(5)
        let result = Metres_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_tUsingUInt8UInt8_minExpectingmetres_tUInt8_min() {
        let expected = u8_to_m_t(UInt8(UInt8.min))
        let result = Metres_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_tUsingUInt8UInt8_maxExpectingmetres_tUInt8_max() {
        let expected = u8_to_m_t(UInt8(UInt8.max))
        let result = Metres_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint16_tUsing0Expecting0() {
        let expected = m_t_to_u16(0)
        let result = UInt16(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint16_tUsing5Expecting5() {
        let expected = m_t_to_u16(5)
        let result = UInt16(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint16_tUsingmetres_tCInt_minExpectingUInt16UInt16_min() {
        let expected = m_t_to_u16(metres_t(CInt.min))
        let result = UInt16(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint16_tUsingmetres_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = m_t_to_u16(metres_t(CInt.max))
        let result = UInt16(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_tUsing0Expecting0() {
        let expected = u16_to_m_t(0)
        let result = Metres_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_tUsing5Expecting5() {
        let expected = u16_to_m_t(5)
        let result = Metres_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_tUsingUInt16UInt16_minExpectingmetres_tUInt16_min() {
        let expected = u16_to_m_t(UInt16(UInt16.min))
        let result = Metres_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_tUsingUInt16UInt16_maxExpectingmetres_tUInt16_max() {
        let expected = u16_to_m_t(UInt16(UInt16.max))
        let result = Metres_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint32_tUsing0Expecting0() {
        let expected = m_t_to_u32(0)
        let result = UInt32(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint32_tUsing5Expecting5() {
        let expected = m_t_to_u32(5)
        let result = UInt32(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint32_tUsingmetres_tCInt_minExpectingUInt32UInt32_min() {
        let expected = m_t_to_u32(metres_t(CInt.min))
        let result = UInt32(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint32_tUsingmetres_tCInt_maxExpectingUInt32CInt_max() {
        let expected = m_t_to_u32(metres_t(CInt.max))
        let result = UInt32(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_tUsing0Expecting0() {
        let expected = u32_to_m_t(0)
        let result = Metres_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_tUsing5Expecting5() {
        let expected = u32_to_m_t(5)
        let result = Metres_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_tUsingUInt32UInt32_minExpectingmetres_tUInt32_min() {
        let expected = u32_to_m_t(UInt32(UInt32.min))
        let result = Metres_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_tUsingUInt32UInt32_maxExpectingmetres_tCInt_max() {
        let expected = u32_to_m_t(UInt32(UInt32.max))
        let result = Metres_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint64_tUsing0Expecting0() {
        let expected = m_t_to_u64(0)
        let result = UInt64(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint64_tUsing5Expecting5() {
        let expected = m_t_to_u64(5)
        let result = UInt64(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint64_tUsingmetres_tCInt_minExpectingUInt64UInt64_min() {
        let expected = m_t_to_u64(metres_t(CInt.min))
        let result = UInt64(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTouint64_tUsingmetres_tCInt_maxExpectingUInt64CInt_max() {
        let expected = m_t_to_u64(metres_t(CInt.max))
        let result = UInt64(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_tUsing0Expecting0() {
        let expected = u64_to_m_t(0)
        let result = Metres_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_tUsing5Expecting5() {
        let expected = u64_to_m_t(5)
        let result = Metres_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_tUsingUInt64UInt64_minExpectingmetres_tUInt64_min() {
        let expected = u64_to_m_t(UInt64(UInt64.min))
        let result = Metres_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_tUsingUInt64UInt64_maxExpectingmetres_tCInt_max() {
        let expected = u64_to_m_t(UInt64(UInt64.max))
        let result = Metres_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTofloatUsing0Expecting0_0() {
        let expected = m_t_to_f(0)
        let result = Float(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTofloatUsing5Expecting5_0() {
        let expected = m_t_to_f(5)
        let result = Float(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTofloatUsingmetres_tCInt_minExpectingFloatCInt_min() {
        let expected = m_t_to_f(metres_t(CInt.min))
        let result = Float(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTofloatUsingmetres_tCInt_maxExpectingFloatCInt_max() {
        let expected = m_t_to_f(metres_t(CInt.max))
        let result = Float(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_tUsing0_0Expecting0() {
        let expected = f_to_m_t(0.0)
        let result = Metres_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_tUsing5_0Expecting5() {
        let expected = f_to_m_t(5.0)
        let result = Metres_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let expected = f_to_m_t(Float(-Float.greatestFiniteMagnitude))
        let result = Metres_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_tUsingFloatFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let expected = f_to_m_t(Float(Float.greatestFiniteMagnitude))
        let result = Metres_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTodoubleUsing0Expecting0_0() {
        let expected = m_t_to_d(0)
        let result = Double(Metres_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTodoubleUsing5Expecting5_0() {
        let expected = m_t_to_d(5)
        let result = Double(Metres_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTodoubleUsingmetres_tCInt_minExpectingDoubleCInt_min() {
        let expected = m_t_to_d(metres_t(CInt.min))
        let result = Double(Metres_t(metres_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_tTodoubleUsingmetres_tCInt_maxExpectingDoubleCInt_max() {
        let expected = m_t_to_d(metres_t(CInt.max))
        let result = Double(Metres_t(metres_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_tUsing0_0Expecting0() {
        let expected = d_to_m_t(0.0)
        let result = Metres_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_tUsing5_0Expecting5() {
        let expected = d_to_m_t(5.0)
        let result = Metres_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let expected = d_to_m_t(Double(-Double.greatestFiniteMagnitude))
        let result = Metres_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let expected = d_to_m_t(Double(Double.greatestFiniteMagnitude))
        let result = Metres_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides metres_u unit tests.
final class Metres_uTests: XCTestCase {

    func testmetres_uTomillimetres_tUsing15Expectingmillimetres_t151000() {
        let unit = Metres_u(15)
        let expected = m_u_to_mm_t(15)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsing25Expectingmillimetres_t251000() {
        let unit = Metres_u(25)
        let expected = m_u_to_mm_t(25)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsing250Expectingmillimetres_t2501000() {
        let unit = Metres_u(250)
        let expected = m_u_to_mm_t(250)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsing0Expectingmillimetres_t01000() {
        let unit = Metres_u(0)
        let expected = m_u_to_mm_t(0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsing2500Expectingmillimetres_t25001000() {
        let unit = Metres_u(2500)
        let expected = m_u_to_mm_t(2500)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsing25000Expectingmillimetres_t250001000() {
        let unit = Metres_u(25000)
        let expected = m_u_to_mm_t(25000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsing250000Expectingmillimetres_t2500001000() {
        let unit = Metres_u(250000)
        let expected = m_u_to_mm_t(250000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsing2500000Expectingmillimetres_tCInt_max() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_mm_t(2500000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsingCUnsignedInt_minExpectingmillimetres_tCUnsignedInt_min1000() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_mm_t(CUnsignedInt.min)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_tUsingCUnsignedInt_maxExpectingmillimetres_tCInt_max() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_mm_t(CUnsignedInt.max)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing15Expectingcentimetres_t15100() {
        let unit = Metres_u(15)
        let expected = m_u_to_cm_t(15)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing25Expectingcentimetres_t25100() {
        let unit = Metres_u(25)
        let expected = m_u_to_cm_t(25)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing250Expectingcentimetres_t250100() {
        let unit = Metres_u(250)
        let expected = m_u_to_cm_t(250)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing0Expectingcentimetres_t0100() {
        let unit = Metres_u(0)
        let expected = m_u_to_cm_t(0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing2500Expectingcentimetres_t2500100() {
        let unit = Metres_u(2500)
        let expected = m_u_to_cm_t(2500)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing25000Expectingcentimetres_t25000100() {
        let unit = Metres_u(25000)
        let expected = m_u_to_cm_t(25000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing250000Expectingcentimetres_t250000100() {
        let unit = Metres_u(250000)
        let expected = m_u_to_cm_t(250000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsing2500000Expectingcentimetres_t2500000100() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_cm_t(2500000)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsingCUnsignedInt_minExpectingcentimetres_tCUnsignedInt_min100() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_cm_t(CUnsignedInt.min)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_tUsingCUnsignedInt_maxExpectingcentimetres_tCInt_max() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_cm_t(CUnsignedInt.max)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_tUsing0Expecting0() {
        let unit = Metres_u(0)
        let expected = m_u_to_m_t(0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_tUsingmetres_uCUnsignedInt_minExpectingmetres_tCUnsignedInt_min() {
        let unit = Metres_u(metres_u(CUnsignedInt.min))
        let expected = m_u_to_m_t(metres_u(CUnsignedInt.min))
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_tUsingmetres_uCUnsignedInt_maxExpectingmetres_tCInt_max() {
        let unit = Metres_u(metres_u(CUnsignedInt.max))
        let expected = m_u_to_m_t(metres_u(CUnsignedInt.max))
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_tUsing5Expecting5() {
        let unit = Metres_u(5)
        let expected = m_u_to_m_t(5)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing15Expectingmillimetres_u151000() {
        let unit = Metres_u(15)
        let expected = m_u_to_mm_u(15)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing25Expectingmillimetres_u251000() {
        let unit = Metres_u(25)
        let expected = m_u_to_mm_u(25)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing250Expectingmillimetres_u2501000() {
        let unit = Metres_u(250)
        let expected = m_u_to_mm_u(250)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing0Expectingmillimetres_u01000() {
        let unit = Metres_u(0)
        let expected = m_u_to_mm_u(0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing2500Expectingmillimetres_u25001000() {
        let unit = Metres_u(2500)
        let expected = m_u_to_mm_u(2500)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing25000Expectingmillimetres_u250001000() {
        let unit = Metres_u(25000)
        let expected = m_u_to_mm_u(25000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing250000Expectingmillimetres_u2500001000() {
        let unit = Metres_u(250000)
        let expected = m_u_to_mm_u(250000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsing2500000Expectingmillimetres_u25000001000() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_mm_u(2500000)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsingCUnsignedInt_minExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_mm_u(CUnsignedInt.min)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_uUsingCUnsignedInt_maxExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_mm_u(CUnsignedInt.max)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing15Expectingcentimetres_u15100() {
        let unit = Metres_u(15)
        let expected = m_u_to_cm_u(15)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing25Expectingcentimetres_u25100() {
        let unit = Metres_u(25)
        let expected = m_u_to_cm_u(25)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing250Expectingcentimetres_u250100() {
        let unit = Metres_u(250)
        let expected = m_u_to_cm_u(250)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing0Expectingcentimetres_u0100() {
        let unit = Metres_u(0)
        let expected = m_u_to_cm_u(0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing2500Expectingcentimetres_u2500100() {
        let unit = Metres_u(2500)
        let expected = m_u_to_cm_u(2500)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing25000Expectingcentimetres_u25000100() {
        let unit = Metres_u(25000)
        let expected = m_u_to_cm_u(25000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing250000Expectingcentimetres_u250000100() {
        let unit = Metres_u(250000)
        let expected = m_u_to_cm_u(250000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsing2500000Expectingcentimetres_u2500000100() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_cm_u(2500000)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsingCUnsignedInt_minExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_cm_u(CUnsignedInt.min)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_uUsingCUnsignedInt_maxExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_cm_u(CUnsignedInt.max)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing15Expectingmillimetres_f15_01000_0() {
        let unit = Metres_u(15)
        let expected = m_u_to_mm_f(15)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing25Expectingmillimetres_f25_01000_0() {
        let unit = Metres_u(25)
        let expected = m_u_to_mm_f(25)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing250Expectingmillimetres_f250_01000_0() {
        let unit = Metres_u(250)
        let expected = m_u_to_mm_f(250)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing0Expectingmillimetres_f0_01000_0() {
        let unit = Metres_u(0)
        let expected = m_u_to_mm_f(0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing2500Expectingmillimetres_f2500_01000_0() {
        let unit = Metres_u(2500)
        let expected = m_u_to_mm_f(2500)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing25000Expectingmillimetres_f25000_01000_0() {
        let unit = Metres_u(25000)
        let expected = m_u_to_mm_f(25000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing250000Expectingmillimetres_f250000_01000_0() {
        let unit = Metres_u(250000)
        let expected = m_u_to_mm_f(250000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsing2500000Expectingmillimetres_f2500000_01000_0() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_mm_f(2500000)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsingCUnsignedInt_minExpectingmillimetres_fCUnsignedInt_min1000_0() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_mm_f(CUnsignedInt.min)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_fUsingCUnsignedInt_maxExpectingmillimetres_fCUnsignedInt_max1000_0() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_mm_f(CUnsignedInt.max)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing15Expectingcentimetres_f15_0100_0() {
        let unit = Metres_u(15)
        let expected = m_u_to_cm_f(15)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing25Expectingcentimetres_f25_0100_0() {
        let unit = Metres_u(25)
        let expected = m_u_to_cm_f(25)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing250Expectingcentimetres_f250_0100_0() {
        let unit = Metres_u(250)
        let expected = m_u_to_cm_f(250)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing0Expectingcentimetres_f0_0100_0() {
        let unit = Metres_u(0)
        let expected = m_u_to_cm_f(0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing2500Expectingcentimetres_f2500_0100_0() {
        let unit = Metres_u(2500)
        let expected = m_u_to_cm_f(2500)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing25000Expectingcentimetres_f25000_0100_0() {
        let unit = Metres_u(25000)
        let expected = m_u_to_cm_f(25000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing250000Expectingcentimetres_f250000_0100_0() {
        let unit = Metres_u(250000)
        let expected = m_u_to_cm_f(250000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsing2500000Expectingcentimetres_f2500000_0100_0() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_cm_f(2500000)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsingCUnsignedInt_minExpectingcentimetres_fCUnsignedInt_min100_0() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_cm_f(CUnsignedInt.min)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_fUsingCUnsignedInt_maxExpectingcentimetres_fCUnsignedInt_max100_0() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_cm_f(CUnsignedInt.max)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_fUsing0Expecting0_0() {
        let unit = Metres_u(0)
        let expected = m_u_to_m_f(0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_fUsingmetres_uCUnsignedInt_minExpectingmetres_fCUnsignedInt_min() {
        let unit = Metres_u(metres_u(CUnsignedInt.min))
        let expected = m_u_to_m_f(metres_u(CUnsignedInt.min))
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_fUsingmetres_uCUnsignedInt_maxExpectingmetres_fCUnsignedInt_max() {
        let unit = Metres_u(metres_u(CUnsignedInt.max))
        let expected = m_u_to_m_f(metres_u(CUnsignedInt.max))
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_fUsing5Expecting5_0() {
        let unit = Metres_u(5)
        let expected = m_u_to_m_f(5)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing15Expectingmillimetres_d15_01000_0() {
        let unit = Metres_u(15)
        let expected = m_u_to_mm_d(15)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing25Expectingmillimetres_d25_01000_0() {
        let unit = Metres_u(25)
        let expected = m_u_to_mm_d(25)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing250Expectingmillimetres_d250_01000_0() {
        let unit = Metres_u(250)
        let expected = m_u_to_mm_d(250)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing0Expectingmillimetres_d0_01000_0() {
        let unit = Metres_u(0)
        let expected = m_u_to_mm_d(0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing2500Expectingmillimetres_d2500_01000_0() {
        let unit = Metres_u(2500)
        let expected = m_u_to_mm_d(2500)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing25000Expectingmillimetres_d25000_01000_0() {
        let unit = Metres_u(25000)
        let expected = m_u_to_mm_d(25000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing250000Expectingmillimetres_d250000_01000_0() {
        let unit = Metres_u(250000)
        let expected = m_u_to_mm_d(250000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsing2500000Expectingmillimetres_d2500000_01000_0() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_mm_d(2500000)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsingCUnsignedInt_minExpectingmillimetres_dCUnsignedInt_min1000_0() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_mm_d(CUnsignedInt.min)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTomillimetres_dUsingCUnsignedInt_maxExpectingmillimetres_dCUnsignedInt_max1000_0() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_mm_d(CUnsignedInt.max)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing15Expectingcentimetres_d15_0100_0() {
        let unit = Metres_u(15)
        let expected = m_u_to_cm_d(15)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing25Expectingcentimetres_d25_0100_0() {
        let unit = Metres_u(25)
        let expected = m_u_to_cm_d(25)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing250Expectingcentimetres_d250_0100_0() {
        let unit = Metres_u(250)
        let expected = m_u_to_cm_d(250)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing0Expectingcentimetres_d0_0100_0() {
        let unit = Metres_u(0)
        let expected = m_u_to_cm_d(0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing2500Expectingcentimetres_d2500_0100_0() {
        let unit = Metres_u(2500)
        let expected = m_u_to_cm_d(2500)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing25000Expectingcentimetres_d25000_0100_0() {
        let unit = Metres_u(25000)
        let expected = m_u_to_cm_d(25000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing250000Expectingcentimetres_d250000_0100_0() {
        let unit = Metres_u(250000)
        let expected = m_u_to_cm_d(250000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsing2500000Expectingcentimetres_d2500000_0100_0() {
        let unit = Metres_u(2500000)
        let expected = m_u_to_cm_d(2500000)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsingCUnsignedInt_minExpectingcentimetres_dCUnsignedInt_min100_0() {
        let unit = Metres_u(CUnsignedInt.min)
        let expected = m_u_to_cm_d(CUnsignedInt.min)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTocentimetres_dUsingCUnsignedInt_maxExpectingcentimetres_dCUnsignedInt_max100_0() {
        let unit = Metres_u(CUnsignedInt.max)
        let expected = m_u_to_cm_d(CUnsignedInt.max)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_dUsing0Expecting0_0() {
        let unit = Metres_u(0)
        let expected = m_u_to_m_d(0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_dUsingmetres_uCUnsignedInt_minExpectingmetres_dCUnsignedInt_min() {
        let unit = Metres_u(metres_u(CUnsignedInt.min))
        let expected = m_u_to_m_d(metres_u(CUnsignedInt.min))
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_dUsingmetres_uCUnsignedInt_maxExpectingmetres_dCUnsignedInt_max() {
        let unit = Metres_u(metres_u(CUnsignedInt.max))
        let expected = m_u_to_m_d(metres_u(CUnsignedInt.max))
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTometres_dUsing5Expecting5_0() {
        let unit = Metres_u(5)
        let expected = m_u_to_m_d(5)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_uTointUsing0Expecting0() {
        let expected = m_u_to_i(0)
        let result = CInt(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTointUsing5Expecting5() {
        let expected = m_u_to_i(5)
        let result = CInt(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTointUsingmetres_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = m_u_to_i(metres_u(CUnsignedInt.min))
        let result = CInt(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTointUsingmetres_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = m_u_to_i(metres_u(CUnsignedInt.max))
        let result = CInt(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTometres_uUsing0Expecting0() {
        let expected = i_to_m_u(0)
        let result = Metres_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_uUsing5Expecting5() {
        let expected = i_to_m_u(5)
        let result = Metres_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_uUsingCIntCInt_minExpectingmetres_uCUnsignedInt_min() {
        let expected = i_to_m_u(CInt(CInt.min))
        let result = Metres_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_uUsingCIntCInt_maxExpectingmetres_uCInt_max() {
        let expected = i_to_m_u(CInt(CInt.max))
        let result = Metres_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint8_tUsing0Expecting0() {
        let expected = m_u_to_i8(0)
        let result = Int8(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint8_tUsing5Expecting5() {
        let expected = m_u_to_i8(5)
        let result = Int8(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint8_tUsingmetres_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = m_u_to_i8(metres_u(CUnsignedInt.min))
        let result = Int8(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint8_tUsingmetres_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = m_u_to_i8(metres_u(CUnsignedInt.max))
        let result = Int8(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_uUsing0Expecting0() {
        let expected = i8_to_m_u(0)
        let result = Metres_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_uUsing5Expecting5() {
        let expected = i8_to_m_u(5)
        let result = Metres_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_uUsingInt8Int8_minExpectingmetres_uCUnsignedInt_min() {
        let expected = i8_to_m_u(Int8(Int8.min))
        let result = Metres_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_uUsingInt8Int8_maxExpectingmetres_uInt8_max() {
        let expected = i8_to_m_u(Int8(Int8.max))
        let result = Metres_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint16_tUsing0Expecting0() {
        let expected = m_u_to_i16(0)
        let result = Int16(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint16_tUsing5Expecting5() {
        let expected = m_u_to_i16(5)
        let result = Int16(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint16_tUsingmetres_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = m_u_to_i16(metres_u(CUnsignedInt.min))
        let result = Int16(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint16_tUsingmetres_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = m_u_to_i16(metres_u(CUnsignedInt.max))
        let result = Int16(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_uUsing0Expecting0() {
        let expected = i16_to_m_u(0)
        let result = Metres_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_uUsing5Expecting5() {
        let expected = i16_to_m_u(5)
        let result = Metres_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_uUsingInt16Int16_minExpectingmetres_uCUnsignedInt_min() {
        let expected = i16_to_m_u(Int16(Int16.min))
        let result = Metres_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_uUsingInt16Int16_maxExpectingmetres_uInt16_max() {
        let expected = i16_to_m_u(Int16(Int16.max))
        let result = Metres_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint32_tUsing0Expecting0() {
        let expected = m_u_to_i32(0)
        let result = Int32(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint32_tUsing5Expecting5() {
        let expected = m_u_to_i32(5)
        let result = Int32(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint32_tUsingmetres_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = m_u_to_i32(metres_u(CUnsignedInt.min))
        let result = Int32(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint32_tUsingmetres_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = m_u_to_i32(metres_u(CUnsignedInt.max))
        let result = Int32(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_uUsing0Expecting0() {
        let expected = i32_to_m_u(0)
        let result = Metres_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_uUsing5Expecting5() {
        let expected = i32_to_m_u(5)
        let result = Metres_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_uUsingInt32Int32_minExpectingmetres_uCUnsignedInt_min() {
        let expected = i32_to_m_u(Int32(Int32.min))
        let result = Metres_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_uUsingInt32Int32_maxExpectingmetres_uInt32_max() {
        let expected = i32_to_m_u(Int32(Int32.max))
        let result = Metres_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint64_tUsing0Expecting0() {
        let expected = m_u_to_i64(0)
        let result = Int64(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint64_tUsing5Expecting5() {
        let expected = m_u_to_i64(5)
        let result = Int64(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint64_tUsingmetres_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = m_u_to_i64(metres_u(CUnsignedInt.min))
        let result = Int64(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uToint64_tUsingmetres_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = m_u_to_i64(metres_u(CUnsignedInt.max))
        let result = Int64(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_uUsing0Expecting0() {
        let expected = i64_to_m_u(0)
        let result = Metres_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_uUsing5Expecting5() {
        let expected = i64_to_m_u(5)
        let result = Metres_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_uUsingInt64Int64_minExpectingmetres_uCUnsignedInt_min() {
        let expected = i64_to_m_u(Int64(Int64.min))
        let result = Metres_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_uUsingInt64Int64_maxExpectingmetres_uCUnsignedInt_max() {
        let expected = i64_to_m_u(Int64(Int64.max))
        let result = Metres_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTounsignedintUsing0Expecting0() {
        let expected = m_u_to_u(0)
        let result = CUnsignedInt(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTounsignedintUsing5Expecting5() {
        let expected = m_u_to_u(5)
        let result = CUnsignedInt(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTounsignedintUsingmetres_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = m_u_to_u(metres_u(CUnsignedInt.min))
        let result = CUnsignedInt(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTounsignedintUsingmetres_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = m_u_to_u(metres_u(CUnsignedInt.max))
        let result = CUnsignedInt(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_uUsing0Expecting0() {
        let expected = u_to_m_u(0)
        let result = Metres_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_uUsing5Expecting5() {
        let expected = u_to_m_u(5)
        let result = Metres_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint8_tUsing0Expecting0() {
        let expected = m_u_to_u8(0)
        let result = UInt8(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint8_tUsing5Expecting5() {
        let expected = m_u_to_u8(5)
        let result = UInt8(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint8_tUsingmetres_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = m_u_to_u8(metres_u(CUnsignedInt.min))
        let result = UInt8(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint8_tUsingmetres_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = m_u_to_u8(metres_u(CUnsignedInt.max))
        let result = UInt8(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_uUsing0Expecting0() {
        let expected = u8_to_m_u(0)
        let result = Metres_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_uUsing5Expecting5() {
        let expected = u8_to_m_u(5)
        let result = Metres_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_uUsingUInt8UInt8_minExpectingmetres_uCUnsignedInt_min() {
        let expected = u8_to_m_u(UInt8(UInt8.min))
        let result = Metres_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_uUsingUInt8UInt8_maxExpectingmetres_uUInt8_max() {
        let expected = u8_to_m_u(UInt8(UInt8.max))
        let result = Metres_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint16_tUsing0Expecting0() {
        let expected = m_u_to_u16(0)
        let result = UInt16(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint16_tUsing5Expecting5() {
        let expected = m_u_to_u16(5)
        let result = UInt16(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint16_tUsingmetres_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = m_u_to_u16(metres_u(CUnsignedInt.min))
        let result = UInt16(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint16_tUsingmetres_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = m_u_to_u16(metres_u(CUnsignedInt.max))
        let result = UInt16(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_uUsing0Expecting0() {
        let expected = u16_to_m_u(0)
        let result = Metres_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_uUsing5Expecting5() {
        let expected = u16_to_m_u(5)
        let result = Metres_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_uUsingUInt16UInt16_minExpectingmetres_uCUnsignedInt_min() {
        let expected = u16_to_m_u(UInt16(UInt16.min))
        let result = Metres_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_uUsingUInt16UInt16_maxExpectingmetres_uUInt16_max() {
        let expected = u16_to_m_u(UInt16(UInt16.max))
        let result = Metres_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint32_tUsing0Expecting0() {
        let expected = m_u_to_u32(0)
        let result = UInt32(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint32_tUsing5Expecting5() {
        let expected = m_u_to_u32(5)
        let result = UInt32(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint32_tUsingmetres_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = m_u_to_u32(metres_u(CUnsignedInt.min))
        let result = UInt32(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint32_tUsingmetres_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = m_u_to_u32(metres_u(CUnsignedInt.max))
        let result = UInt32(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_uUsing0Expecting0() {
        let expected = u32_to_m_u(0)
        let result = Metres_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_uUsing5Expecting5() {
        let expected = u32_to_m_u(5)
        let result = Metres_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_uUsingUInt32UInt32_minExpectingmetres_uCUnsignedInt_min() {
        let expected = u32_to_m_u(UInt32(UInt32.min))
        let result = Metres_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_uUsingUInt32UInt32_maxExpectingmetres_uCUnsignedInt_max() {
        let expected = u32_to_m_u(UInt32(UInt32.max))
        let result = Metres_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint64_tUsing0Expecting0() {
        let expected = m_u_to_u64(0)
        let result = UInt64(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint64_tUsing5Expecting5() {
        let expected = m_u_to_u64(5)
        let result = UInt64(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint64_tUsingmetres_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = m_u_to_u64(metres_u(CUnsignedInt.min))
        let result = UInt64(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTouint64_tUsingmetres_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = m_u_to_u64(metres_u(CUnsignedInt.max))
        let result = UInt64(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_uUsing0Expecting0() {
        let expected = u64_to_m_u(0)
        let result = Metres_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_uUsing5Expecting5() {
        let expected = u64_to_m_u(5)
        let result = Metres_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_uUsingUInt64UInt64_minExpectingmetres_uCUnsignedInt_min() {
        let expected = u64_to_m_u(UInt64(UInt64.min))
        let result = Metres_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_uUsingUInt64UInt64_maxExpectingmetres_uCUnsignedInt_max() {
        let expected = u64_to_m_u(UInt64(UInt64.max))
        let result = Metres_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTofloatUsing0Expecting0_0() {
        let expected = m_u_to_f(0)
        let result = Float(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTofloatUsing5Expecting5_0() {
        let expected = m_u_to_f(5)
        let result = Float(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTofloatUsingmetres_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = m_u_to_f(metres_u(CUnsignedInt.min))
        let result = Float(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTofloatUsingmetres_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = m_u_to_f(metres_u(CUnsignedInt.max))
        let result = Float(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_uUsing0_0Expecting0() {
        let expected = f_to_m_u(0.0)
        let result = Metres_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_uUsing5_0Expecting5() {
        let expected = f_to_m_u(5.0)
        let result = Metres_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let expected = f_to_m_u(Float(-Float.greatestFiniteMagnitude))
        let result = Metres_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_uUsingFloatFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let expected = f_to_m_u(Float(Float.greatestFiniteMagnitude))
        let result = Metres_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTodoubleUsing0Expecting0_0() {
        let expected = m_u_to_d(0)
        let result = Double(Metres_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTodoubleUsing5Expecting5_0() {
        let expected = m_u_to_d(5)
        let result = Double(Metres_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTodoubleUsingmetres_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = m_u_to_d(metres_u(CUnsignedInt.min))
        let result = Double(Metres_u(metres_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_uTodoubleUsingmetres_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = m_u_to_d(metres_u(CUnsignedInt.max))
        let result = Double(Metres_u(metres_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_uUsing0_0Expecting0() {
        let expected = d_to_m_u(0.0)
        let result = Metres_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_uUsing5_0Expecting5() {
        let expected = d_to_m_u(5.0)
        let result = Metres_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let expected = d_to_m_u(Double(-Double.greatestFiniteMagnitude))
        let result = Metres_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let expected = d_to_m_u(Double(Double.greatestFiniteMagnitude))
        let result = Metres_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides metres_f unit tests.
final class Metres_fTests: XCTestCase {

    func testmetres_fTomillimetres_tUsing15_0Expectingmillimetres_t15_01000_0_rounded() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_mm_t(15.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsing25_0Expectingmillimetres_t25_01000_0_rounded() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_mm_t(25.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsing250_0Expectingmillimetres_t250_01000_0_rounded() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_mm_t(250.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsing0_0Expectingmillimetres_t0_01000_0_rounded() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_mm_t(0.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsing2500_0Expectingmillimetres_t2500_01000_0_rounded() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_mm_t(2500.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsing25000_0Expectingmillimetres_t25000_01000_0_rounded() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_mm_t(25000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsing250000_0Expectingmillimetres_t250000_01000_0_rounded() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_mm_t(250000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsing2500000Expectingmillimetres_tCInt_max() {
        let unit = Metres_f(2500000)
        let expected = m_f_to_mm_t(2500000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsingNeg323_0Expectingmillimetres_tNeg323_01000_0_rounded() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_mm_t(-323.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsingNeg10_0Expectingmillimetres_tNeg10_01000_0_rounded() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_mm_t(-10.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsingNeg1000_0Expectingmillimetres_tNeg1000_01000_0_rounded() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_mm_t(-1000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsingNeg5_0Expectingmillimetres_tNeg5_01000_0_rounded() {
        let unit = Metres_f(-5.0)
        let expected = m_f_to_mm_t(-5.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_t(-Float.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_tUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_t(Float.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing15_0Expectingcentimetres_t15_0100_0_rounded() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_cm_t(15.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing25_0Expectingcentimetres_t25_0100_0_rounded() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_cm_t(25.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing250_0Expectingcentimetres_t250_0100_0_rounded() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_cm_t(250.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing0_0Expectingcentimetres_t0_0100_0_rounded() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_cm_t(0.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing2500_0Expectingcentimetres_t2500_0100_0_rounded() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_cm_t(2500.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing25000_0Expectingcentimetres_t25000_0100_0_rounded() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_cm_t(25000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing250000_0Expectingcentimetres_t250000_0100_0_rounded() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_cm_t(250000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsing2500000_0Expectingcentimetres_t2500000_0100_0_rounded() {
        let unit = Metres_f(2500000.0)
        let expected = m_f_to_cm_t(2500000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsingNeg323_0Expectingcentimetres_tNeg323_0100_0_rounded() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_cm_t(-323.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsingNeg10_0Expectingcentimetres_tNeg10_0100_0_rounded() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_cm_t(-10.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsingNeg1000_0Expectingcentimetres_tNeg1000_0100_0_rounded() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_cm_t(-1000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsingNeg5_0Expectingcentimetres_tNeg5_0100_0_rounded() {
        let unit = Metres_f(-5.0)
        let expected = m_f_to_cm_t(-5.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_t(-Float.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_tUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_t(Float.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_tUsing0_0Expecting0() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_m_t(0.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let unit = Metres_f(metres_f(-Float.greatestFiniteMagnitude))
        let expected = m_f_to_m_t(metres_f(-Float.greatestFiniteMagnitude))
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let unit = Metres_f(metres_f(Float.greatestFiniteMagnitude))
        let expected = m_f_to_m_t(metres_f(Float.greatestFiniteMagnitude))
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_tUsing5_0Expecting5() {
        let unit = Metres_f(5.0)
        let expected = m_f_to_m_t(5.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing15_0Expectingmillimetres_u15_01000_0_rounded() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_mm_u(15.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing25_0Expectingmillimetres_u25_01000_0_rounded() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_mm_u(25.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing250_0Expectingmillimetres_u250_01000_0_rounded() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_mm_u(250.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing0_0Expectingmillimetres_u0_01000_0_rounded() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_mm_u(0.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing2500_0Expectingmillimetres_u2500_01000_0_rounded() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_mm_u(2500.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing25000_0Expectingmillimetres_u25000_01000_0_rounded() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_mm_u(25000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing250000_0Expectingmillimetres_u250000_01000_0_rounded() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_mm_u(250000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsing2500000_0Expectingmillimetres_u2500000_01000_0_rounded() {
        let unit = Metres_f(2500000.0)
        let expected = m_f_to_mm_u(2500000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsingNeg323_0Expecting0() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_mm_u(-323.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsingNeg10_0Expecting0() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_mm_u(-10.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsingNeg1000_0Expecting0() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_mm_u(-1000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsingNeg6_0Expecting0() {
        let unit = Metres_f(-6.0)
        let expected = m_f_to_mm_u(-6.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_u(-Float.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_uUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_u(Float.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing15_0Expectingcentimetres_u15_0100_0_rounded() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_cm_u(15.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing25_0Expectingcentimetres_u25_0100_0_rounded() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_cm_u(25.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing250_0Expectingcentimetres_u250_0100_0_rounded() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_cm_u(250.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing0_0Expectingcentimetres_u0_0100_0_rounded() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_cm_u(0.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing2500_0Expectingcentimetres_u2500_0100_0_rounded() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_cm_u(2500.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing25000_0Expectingcentimetres_u25000_0100_0_rounded() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_cm_u(25000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing250000_0Expectingcentimetres_u250000_0100_0_rounded() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_cm_u(250000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsing2500000_0Expectingcentimetres_u2500000_0100_0_rounded() {
        let unit = Metres_f(2500000.0)
        let expected = m_f_to_cm_u(2500000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsingNeg323_0Expecting0() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_cm_u(-323.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsingNeg10_0Expecting0() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_cm_u(-10.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsingNeg1000_0Expecting0() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_cm_u(-1000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsingNeg6_0Expecting0() {
        let unit = Metres_f(-6.0)
        let expected = m_f_to_cm_u(-6.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_u(-Float.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_uUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_u(Float.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_uUsing0_0Expecting0() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_m_u(0.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_uUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let unit = Metres_f(metres_f(-Float.greatestFiniteMagnitude))
        let expected = m_f_to_m_u(metres_f(-Float.greatestFiniteMagnitude))
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_uUsingmetres_fFloat_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let unit = Metres_f(metres_f(Float.greatestFiniteMagnitude))
        let expected = m_f_to_m_u(metres_f(Float.greatestFiniteMagnitude))
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_uUsing5_0Expecting5() {
        let unit = Metres_f(5.0)
        let expected = m_f_to_m_u(5.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing15_0Expectingmillimetres_f15_01000_0() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_mm_f(15.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing25_0Expectingmillimetres_f25_01000_0() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_mm_f(25.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing250_0Expectingmillimetres_f250_01000_0() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_mm_f(250.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing0_0Expectingmillimetres_f0_01000_0() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_mm_f(0.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing2500_0Expectingmillimetres_f2500_01000_0() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_mm_f(2500.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing25000_0Expectingmillimetres_f25000_01000_0() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_mm_f(25000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing250000_0Expectingmillimetres_f250000_01000_0() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_mm_f(250000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsing2500000_0Expectingmillimetres_f2500000_01000_0() {
        let unit = Metres_f(2500000.0)
        let expected = m_f_to_mm_f(2500000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsingNeg323_0Expectingmillimetres_fNeg323_01000_0() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_mm_f(-323.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsingNeg10_0Expectingmillimetres_fNeg10_01000_0() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_mm_f(-10.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsingNeg1000_0Expectingmillimetres_fNeg1000_01000_0() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_mm_f(-1000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsingNeg5_0Expectingmillimetres_fNeg5_01000_0() {
        let unit = Metres_f(-5.0)
        let expected = m_f_to_mm_f(-5.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_f(-Float.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_fUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_f(Float.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing15_0Expectingcentimetres_f15_0100_0() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_cm_f(15.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing25_0Expectingcentimetres_f25_0100_0() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_cm_f(25.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing250_0Expectingcentimetres_f250_0100_0() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_cm_f(250.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing0_0Expectingcentimetres_f0_0100_0() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_cm_f(0.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing2500_0Expectingcentimetres_f2500_0100_0() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_cm_f(2500.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing25000_0Expectingcentimetres_f25000_0100_0() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_cm_f(25000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing250000_0Expectingcentimetres_f250000_0100_0() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_cm_f(250000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsing2500000_0Expectingcentimetres_f2500000_0100_0() {
        let unit = Metres_f(2500000.0)
        let expected = m_f_to_cm_f(2500000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsingNeg323_0Expectingcentimetres_fNeg323_0100_0() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_cm_f(-323.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsingNeg10_0Expectingcentimetres_fNeg10_0100_0() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_cm_f(-10.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsingNeg1000_0Expectingcentimetres_fNeg1000_0100_0() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_cm_f(-1000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsingNeg5_0Expectingcentimetres_fNeg5_0100_0() {
        let unit = Metres_f(-5.0)
        let expected = m_f_to_cm_f(-5.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_f(-Float.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_fUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_f(Float.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing15_0Expectingmillimetres_d15_01000_0() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_mm_d(15.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing25_0Expectingmillimetres_d25_01000_0() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_mm_d(25.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing250_0Expectingmillimetres_d250_01000_0() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_mm_d(250.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing0_0Expectingmillimetres_d0_01000_0() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_mm_d(0.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing2500_0Expectingmillimetres_d2500_01000_0() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_mm_d(2500.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing25000_0Expectingmillimetres_d25000_01000_0() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_mm_d(25000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing250000_0Expectingmillimetres_d250000_01000_0() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_mm_d(250000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsing2500000_0Expectingmillimetres_d2500000_01000_0() {
        let unit = Metres_f(2500000.0)
        let expected = m_f_to_mm_d(2500000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsingNeg323_0Expectingmillimetres_dNeg323_01000_0() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_mm_d(-323.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsingNeg10_0Expectingmillimetres_dNeg10_01000_0() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_mm_d(-10.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsingNeg1000_0Expectingmillimetres_dNeg1000_01000_0() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_mm_d(-1000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsingNeg5_0Expectingmillimetres_dNeg5_01000_0() {
        let unit = Metres_f(-5.0)
        let expected = m_f_to_mm_d(-5.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsingNegFloat_greatestFiniteMagnitudeExpectingmillimetres_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_d(-Float.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTomillimetres_dUsingFloat_greatestFiniteMagnitudeExpectingmillimetres_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_mm_d(Float.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing15_0Expectingcentimetres_d15_0100_0() {
        let unit = Metres_f(15.0)
        let expected = m_f_to_cm_d(15.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing25_0Expectingcentimetres_d25_0100_0() {
        let unit = Metres_f(25.0)
        let expected = m_f_to_cm_d(25.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing250_0Expectingcentimetres_d250_0100_0() {
        let unit = Metres_f(250.0)
        let expected = m_f_to_cm_d(250.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing0_0Expectingcentimetres_d0_0100_0() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_cm_d(0.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing2500_0Expectingcentimetres_d2500_0100_0() {
        let unit = Metres_f(2500.0)
        let expected = m_f_to_cm_d(2500.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing25000_0Expectingcentimetres_d25000_0100_0() {
        let unit = Metres_f(25000.0)
        let expected = m_f_to_cm_d(25000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing250000_0Expectingcentimetres_d250000_0100_0() {
        let unit = Metres_f(250000.0)
        let expected = m_f_to_cm_d(250000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsing2500000_0Expectingcentimetres_d2500000_0100_0() {
        let unit = Metres_f(2500000.0)
        let expected = m_f_to_cm_d(2500000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsingNeg323_0Expectingcentimetres_dNeg323_0100_0() {
        let unit = Metres_f(-323.0)
        let expected = m_f_to_cm_d(-323.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsingNeg10_0Expectingcentimetres_dNeg10_0100_0() {
        let unit = Metres_f(-10.0)
        let expected = m_f_to_cm_d(-10.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsingNeg1000_0Expectingcentimetres_dNeg1000_0100_0() {
        let unit = Metres_f(-1000.0)
        let expected = m_f_to_cm_d(-1000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsingNeg5_0Expectingcentimetres_dNeg5_0100_0() {
        let unit = Metres_f(-5.0)
        let expected = m_f_to_cm_d(-5.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsingNegFloat_greatestFiniteMagnitudeExpectingcentimetres_dNegFloat_greatestFiniteMagnitude100_0() {
        let unit = Metres_f(-Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_d(-Float.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTocentimetres_dUsingFloat_greatestFiniteMagnitudeExpectingcentimetres_dFloat_greatestFiniteMagnitude100_0() {
        let unit = Metres_f(Float.greatestFiniteMagnitude)
        let expected = m_f_to_cm_d(Float.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_dUsing0_0Expecting0_0() {
        let unit = Metres_f(0.0)
        let expected = m_f_to_m_d(0.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_dUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingmetres_dNegFloat_greatestFiniteMagnitude() {
        let unit = Metres_f(metres_f(-Float.greatestFiniteMagnitude))
        let expected = m_f_to_m_d(metres_f(-Float.greatestFiniteMagnitude))
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_dUsingmetres_fFloat_greatestFiniteMagnitudeExpectingmetres_dFloat_greatestFiniteMagnitude() {
        let unit = Metres_f(metres_f(Float.greatestFiniteMagnitude))
        let expected = m_f_to_m_d(metres_f(Float.greatestFiniteMagnitude))
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTometres_dUsing5_0Expecting5_0() {
        let unit = Metres_f(5.0)
        let expected = m_f_to_m_d(5.0)
        let result = Metres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_d = 1.0
        let categoryResult = Distance(unit).metres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_fTointUsing0_0Expecting0() {
        let expected = m_f_to_i(0.0)
        let result = CInt(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTointUsing5_0Expecting5() {
        let expected = m_f_to_i(5.0)
        let result = CInt(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTointUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = m_f_to_i(metres_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTointUsingmetres_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = m_f_to_i(metres_f(Float.greatestFiniteMagnitude))
        let result = CInt(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTometres_fUsing0Expecting0_0() {
        let expected = i_to_m_f(0)
        let result = Metres_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_fUsing5Expecting5_0() {
        let expected = i_to_m_f(5)
        let result = Metres_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_fUsingCIntCInt_minExpectingmetres_fCInt_min() {
        let expected = i_to_m_f(CInt(CInt.min))
        let result = Metres_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_fUsingCIntCInt_maxExpectingmetres_fCInt_max() {
        let expected = i_to_m_f(CInt(CInt.max))
        let result = Metres_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint8_tUsing0_0Expecting0() {
        let expected = m_f_to_i8(0.0)
        let result = Int8(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint8_tUsing5_0Expecting5() {
        let expected = m_f_to_i8(5.0)
        let result = Int8(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint8_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = m_f_to_i8(metres_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint8_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = m_f_to_i8(metres_f(Float.greatestFiniteMagnitude))
        let result = Int8(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_fUsing0Expecting0_0() {
        let expected = i8_to_m_f(0)
        let result = Metres_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_fUsing5Expecting5_0() {
        let expected = i8_to_m_f(5)
        let result = Metres_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_fUsingInt8Int8_minExpectingmetres_fInt8_min() {
        let expected = i8_to_m_f(Int8(Int8.min))
        let result = Metres_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_fUsingInt8Int8_maxExpectingmetres_fInt8_max() {
        let expected = i8_to_m_f(Int8(Int8.max))
        let result = Metres_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint16_tUsing0_0Expecting0() {
        let expected = m_f_to_i16(0.0)
        let result = Int16(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint16_tUsing5_0Expecting5() {
        let expected = m_f_to_i16(5.0)
        let result = Int16(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint16_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = m_f_to_i16(metres_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint16_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = m_f_to_i16(metres_f(Float.greatestFiniteMagnitude))
        let result = Int16(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_fUsing0Expecting0_0() {
        let expected = i16_to_m_f(0)
        let result = Metres_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_fUsing5Expecting5_0() {
        let expected = i16_to_m_f(5)
        let result = Metres_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_fUsingInt16Int16_minExpectingmetres_fInt16_min() {
        let expected = i16_to_m_f(Int16(Int16.min))
        let result = Metres_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_fUsingInt16Int16_maxExpectingmetres_fInt16_max() {
        let expected = i16_to_m_f(Int16(Int16.max))
        let result = Metres_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint32_tUsing0_0Expecting0() {
        let expected = m_f_to_i32(0.0)
        let result = Int32(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint32_tUsing5_0Expecting5() {
        let expected = m_f_to_i32(5.0)
        let result = Int32(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint32_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = m_f_to_i32(metres_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint32_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = m_f_to_i32(metres_f(Float.greatestFiniteMagnitude))
        let result = Int32(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_fUsing0Expecting0_0() {
        let expected = i32_to_m_f(0)
        let result = Metres_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_fUsing5Expecting5_0() {
        let expected = i32_to_m_f(5)
        let result = Metres_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_fUsingInt32Int32_minExpectingmetres_fInt32_min() {
        let expected = i32_to_m_f(Int32(Int32.min))
        let result = Metres_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_fUsingInt32Int32_maxExpectingmetres_fInt32_max() {
        let expected = i32_to_m_f(Int32(Int32.max))
        let result = Metres_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint64_tUsing0_0Expecting0() {
        let expected = m_f_to_i64(0.0)
        let result = Int64(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint64_tUsing5_0Expecting5() {
        let expected = m_f_to_i64(5.0)
        let result = Int64(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint64_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = m_f_to_i64(metres_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fToint64_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = m_f_to_i64(metres_f(Float.greatestFiniteMagnitude))
        let result = Int64(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_fUsing0Expecting0_0() {
        let expected = i64_to_m_f(0)
        let result = Metres_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_fUsing5Expecting5_0() {
        let expected = i64_to_m_f(5)
        let result = Metres_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_fUsingInt64Int64_minExpectingmetres_fInt64_min() {
        let expected = i64_to_m_f(Int64(Int64.min))
        let result = Metres_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_fUsingInt64Int64_maxExpectingmetres_fInt64_max() {
        let expected = i64_to_m_f(Int64(Int64.max))
        let result = Metres_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTounsignedintUsing0_0Expecting0() {
        let expected = m_f_to_u(0.0)
        let result = CUnsignedInt(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTounsignedintUsing5_0Expecting5() {
        let expected = m_f_to_u(5.0)
        let result = CUnsignedInt(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTounsignedintUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = m_f_to_u(metres_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTounsignedintUsingmetres_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = m_f_to_u(metres_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_fUsing0Expecting0_0() {
        let expected = u_to_m_f(0)
        let result = Metres_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_fUsing5Expecting5_0() {
        let expected = u_to_m_f(5)
        let result = Metres_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_fUsingCUnsignedIntCUnsignedInt_minExpectingmetres_fCUnsignedInt_min() {
        let expected = u_to_m_f(CUnsignedInt(CUnsignedInt.min))
        let result = Metres_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_fUsingCUnsignedIntCUnsignedInt_maxExpectingmetres_fCUnsignedInt_max() {
        let expected = u_to_m_f(CUnsignedInt(CUnsignedInt.max))
        let result = Metres_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint8_tUsing0_0Expecting0() {
        let expected = m_f_to_u8(0.0)
        let result = UInt8(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint8_tUsing5_0Expecting5() {
        let expected = m_f_to_u8(5.0)
        let result = UInt8(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint8_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = m_f_to_u8(metres_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint8_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = m_f_to_u8(metres_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_fUsing0Expecting0_0() {
        let expected = u8_to_m_f(0)
        let result = Metres_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_fUsing5Expecting5_0() {
        let expected = u8_to_m_f(5)
        let result = Metres_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_fUsingUInt8UInt8_minExpectingmetres_fUInt8_min() {
        let expected = u8_to_m_f(UInt8(UInt8.min))
        let result = Metres_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_fUsingUInt8UInt8_maxExpectingmetres_fUInt8_max() {
        let expected = u8_to_m_f(UInt8(UInt8.max))
        let result = Metres_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint16_tUsing0_0Expecting0() {
        let expected = m_f_to_u16(0.0)
        let result = UInt16(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint16_tUsing5_0Expecting5() {
        let expected = m_f_to_u16(5.0)
        let result = UInt16(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint16_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = m_f_to_u16(metres_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint16_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = m_f_to_u16(metres_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_fUsing0Expecting0_0() {
        let expected = u16_to_m_f(0)
        let result = Metres_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_fUsing5Expecting5_0() {
        let expected = u16_to_m_f(5)
        let result = Metres_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_fUsingUInt16UInt16_minExpectingmetres_fUInt16_min() {
        let expected = u16_to_m_f(UInt16(UInt16.min))
        let result = Metres_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_fUsingUInt16UInt16_maxExpectingmetres_fUInt16_max() {
        let expected = u16_to_m_f(UInt16(UInt16.max))
        let result = Metres_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint32_tUsing0_0Expecting0() {
        let expected = m_f_to_u32(0.0)
        let result = UInt32(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint32_tUsing5_0Expecting5() {
        let expected = m_f_to_u32(5.0)
        let result = UInt32(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint32_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = m_f_to_u32(metres_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint32_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = m_f_to_u32(metres_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_fUsing0Expecting0_0() {
        let expected = u32_to_m_f(0)
        let result = Metres_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_fUsing5Expecting5_0() {
        let expected = u32_to_m_f(5)
        let result = Metres_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_fUsingUInt32UInt32_minExpectingmetres_fUInt32_min() {
        let expected = u32_to_m_f(UInt32(UInt32.min))
        let result = Metres_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_fUsingUInt32UInt32_maxExpectingmetres_fUInt32_max() {
        let expected = u32_to_m_f(UInt32(UInt32.max))
        let result = Metres_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint64_tUsing0_0Expecting0() {
        let expected = m_f_to_u64(0.0)
        let result = UInt64(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint64_tUsing5_0Expecting5() {
        let expected = m_f_to_u64(5.0)
        let result = UInt64(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint64_tUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = m_f_to_u64(metres_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTouint64_tUsingmetres_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = m_f_to_u64(metres_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_fUsing0Expecting0_0() {
        let expected = u64_to_m_f(0)
        let result = Metres_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_fUsing5Expecting5_0() {
        let expected = u64_to_m_f(5)
        let result = Metres_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_fUsingUInt64UInt64_minExpectingmetres_fUInt64_min() {
        let expected = u64_to_m_f(UInt64(UInt64.min))
        let result = Metres_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_fUsingUInt64UInt64_maxExpectingmetres_fUInt64_max() {
        let expected = u64_to_m_f(UInt64(UInt64.max))
        let result = Metres_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTofloatUsing0_0Expecting0_0() {
        let expected = m_f_to_f(0.0)
        let result = Float(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTofloatUsing5_0Expecting5_0() {
        let expected = m_f_to_f(5.0)
        let result = Float(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTofloatUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = m_f_to_f(metres_f(-Float.greatestFiniteMagnitude))
        let result = Float(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTofloatUsingmetres_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = m_f_to_f(metres_f(Float.greatestFiniteMagnitude))
        let result = Float(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_fUsing0_0Expecting0_0() {
        let expected = f_to_m_f(0.0)
        let result = Metres_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_fUsing5_0Expecting5_0() {
        let expected = f_to_m_f(5.0)
        let result = Metres_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTodoubleUsing0_0Expecting0_0() {
        let expected = m_f_to_d(0.0)
        let result = Double(Metres_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTodoubleUsing5_0Expecting5_0() {
        let expected = m_f_to_d(5.0)
        let result = Double(Metres_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTodoubleUsingmetres_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = m_f_to_d(metres_f(-Float.greatestFiniteMagnitude))
        let result = Double(Metres_f(metres_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_fTodoubleUsingmetres_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = m_f_to_d(metres_f(Float.greatestFiniteMagnitude))
        let result = Double(Metres_f(metres_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_fUsing0_0Expecting0_0() {
        let expected = d_to_m_f(0.0)
        let result = Metres_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_fUsing5_0Expecting5_0() {
        let expected = d_to_m_f(5.0)
        let result = Metres_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmetres_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_m_f(Double(-Double.greatestFiniteMagnitude))
        let result = Metres_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingmetres_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_m_f(Double(Double.greatestFiniteMagnitude))
        let result = Metres_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides metres_d unit tests.
final class Metres_dTests: XCTestCase {

    func testmetres_dTomillimetres_tUsing15_0Expectingmillimetres_t15_01000_0_rounded() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_mm_t(15.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsing25_0Expectingmillimetres_t25_01000_0_rounded() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_mm_t(25.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsing250_0Expectingmillimetres_t250_01000_0_rounded() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_mm_t(250.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsing0_0Expectingmillimetres_t0_01000_0_rounded() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_mm_t(0.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsing2500_0Expectingmillimetres_t2500_01000_0_rounded() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_mm_t(2500.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsing25000_0Expectingmillimetres_t25000_01000_0_rounded() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_mm_t(25000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsing250000_0Expectingmillimetres_t250000_01000_0_rounded() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_mm_t(250000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsing2500000Expectingmillimetres_tCInt_max() {
        let unit = Metres_d(2500000)
        let expected = m_d_to_mm_t(2500000)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsingNeg323_0Expectingmillimetres_tNeg323_01000_0_rounded() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_mm_t(-323.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsingNeg10_0Expectingmillimetres_tNeg10_01000_0_rounded() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_mm_t(-10.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsingNeg1000_0Expectingmillimetres_tNeg1000_01000_0_rounded() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_mm_t(-1000.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsingNeg5_0Expectingmillimetres_tNeg5_01000_0_rounded() {
        let unit = Metres_d(-5.0)
        let expected = m_d_to_mm_t(-5.0)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_t = 1
        let categoryResult = Distance(unit).millimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_tUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_min() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_t(-Double.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTomillimetres_tUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_tCInt_max() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_t(Double.greatestFiniteMagnitude)
        let result = Millimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_tUsing15_0Expectingcentimetres_t15_0100_0_rounded() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_cm_t(15.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsing25_0Expectingcentimetres_t25_0100_0_rounded() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_cm_t(25.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsing250_0Expectingcentimetres_t250_0100_0_rounded() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_cm_t(250.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsing0_0Expectingcentimetres_t0_0100_0_rounded() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_cm_t(0.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsing2500_0Expectingcentimetres_t2500_0100_0_rounded() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_cm_t(2500.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsing25000_0Expectingcentimetres_t25000_0100_0_rounded() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_cm_t(25000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsing250000_0Expectingcentimetres_t250000_0100_0_rounded() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_cm_t(250000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsing2500000_0Expectingcentimetres_t2500000_0100_0_rounded() {
        let unit = Metres_d(2500000.0)
        let expected = m_d_to_cm_t(2500000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsingNeg323_0Expectingcentimetres_tNeg323_0100_0_rounded() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_cm_t(-323.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsingNeg10_0Expectingcentimetres_tNeg10_0100_0_rounded() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_cm_t(-10.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsingNeg1000_0Expectingcentimetres_tNeg1000_0100_0_rounded() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_cm_t(-1000.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsingNeg5_0Expectingcentimetres_tNeg5_0100_0_rounded() {
        let unit = Metres_d(-5.0)
        let expected = m_d_to_cm_t(-5.0)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_t = 1
        let categoryResult = Distance(unit).centimetres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_tUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_min() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_t(-Double.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_tUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_tCInt_max() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_t(Double.greatestFiniteMagnitude)
        let result = Centimetres_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTometres_tUsing0_0Expecting0() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_m_t(0.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_min() {
        let unit = Metres_d(metres_d(-Double.greatestFiniteMagnitude))
        let expected = m_d_to_m_t(metres_d(-Double.greatestFiniteMagnitude))
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingmetres_tCInt_max() {
        let unit = Metres_d(metres_d(Double.greatestFiniteMagnitude))
        let expected = m_d_to_m_t(metres_d(Double.greatestFiniteMagnitude))
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_tUsing5_0Expecting5() {
        let unit = Metres_d(5.0)
        let expected = m_d_to_m_t(5.0)
        let result = Metres_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_t = 1
        let categoryResult = Distance(unit).metres_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing15_0Expectingmillimetres_u15_01000_0_rounded() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_mm_u(15.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing25_0Expectingmillimetres_u25_01000_0_rounded() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_mm_u(25.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing250_0Expectingmillimetres_u250_01000_0_rounded() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_mm_u(250.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing0_0Expectingmillimetres_u0_01000_0_rounded() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_mm_u(0.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing2500_0Expectingmillimetres_u2500_01000_0_rounded() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_mm_u(2500.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing25000_0Expectingmillimetres_u25000_01000_0_rounded() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_mm_u(25000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing250000_0Expectingmillimetres_u250000_01000_0_rounded() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_mm_u(250000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsing2500000_0Expectingmillimetres_u2500000_01000_0_rounded() {
        let unit = Metres_d(2500000.0)
        let expected = m_d_to_mm_u(2500000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsingNeg323_0Expecting0() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_mm_u(-323.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsingNeg10_0Expecting0() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_mm_u(-10.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsingNeg1000_0Expecting0() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_mm_u(-1000.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsingNeg6_0Expecting0() {
        let unit = Metres_d(-6.0)
        let expected = m_d_to_mm_u(-6.0)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_u = 1
        let categoryResult = Distance(unit).millimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_uUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_min() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_u(-Double.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTomillimetres_uUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_uCUnsignedInt_max() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_u(Double.greatestFiniteMagnitude)
        let result = Millimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_uUsing15_0Expectingcentimetres_u15_0100_0_rounded() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_cm_u(15.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsing25_0Expectingcentimetres_u25_0100_0_rounded() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_cm_u(25.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsing250_0Expectingcentimetres_u250_0100_0_rounded() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_cm_u(250.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsing0_0Expectingcentimetres_u0_0100_0_rounded() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_cm_u(0.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsing2500_0Expectingcentimetres_u2500_0100_0_rounded() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_cm_u(2500.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsing25000_0Expectingcentimetres_u25000_0100_0_rounded() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_cm_u(25000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsing250000_0Expectingcentimetres_u250000_0100_0_rounded() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_cm_u(250000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsing2500000_0Expectingcentimetres_u2500000_0100_0_rounded() {
        let unit = Metres_d(2500000.0)
        let expected = m_d_to_cm_u(2500000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsingNeg323_0Expecting0() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_cm_u(-323.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsingNeg10_0Expecting0() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_cm_u(-10.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsingNeg1000_0Expecting0() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_cm_u(-1000.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsingNeg6_0Expecting0() {
        let unit = Metres_d(-6.0)
        let expected = m_d_to_cm_u(-6.0)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_u = 1
        let categoryResult = Distance(unit).centimetres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_uUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_min() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_u(-Double.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_uUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_uCUnsignedInt_max() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_u(Double.greatestFiniteMagnitude)
        let result = Centimetres_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTometres_uUsing0_0Expecting0() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_m_u(0.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_uUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_min() {
        let unit = Metres_d(metres_d(-Double.greatestFiniteMagnitude))
        let expected = m_d_to_m_u(metres_d(-Double.greatestFiniteMagnitude))
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_uUsingmetres_dDouble_greatestFiniteMagnitudeExpectingmetres_uCUnsignedInt_max() {
        let unit = Metres_d(metres_d(Double.greatestFiniteMagnitude))
        let expected = m_d_to_m_u(metres_d(Double.greatestFiniteMagnitude))
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_uUsing5_0Expecting5() {
        let unit = Metres_d(5.0)
        let expected = m_d_to_m_u(5.0)
        let result = Metres_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_u = 1
        let categoryResult = Distance(unit).metres_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing15_0Expectingmillimetres_f15_01000_0() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_mm_f(15.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing25_0Expectingmillimetres_f25_01000_0() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_mm_f(25.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing250_0Expectingmillimetres_f250_01000_0() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_mm_f(250.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing0_0Expectingmillimetres_f0_01000_0() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_mm_f(0.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing2500_0Expectingmillimetres_f2500_01000_0() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_mm_f(2500.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing25000_0Expectingmillimetres_f25000_01000_0() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_mm_f(25000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing250000_0Expectingmillimetres_f250000_01000_0() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_mm_f(250000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsing2500000_0Expectingmillimetres_f2500000_01000_0() {
        let unit = Metres_d(2500000.0)
        let expected = m_d_to_mm_f(2500000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsingNeg323_0Expectingmillimetres_fNeg323_01000_0() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_mm_f(-323.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsingNeg10_0Expectingmillimetres_fNeg10_01000_0() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_mm_f(-10.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsingNeg1000_0Expectingmillimetres_fNeg1000_01000_0() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_mm_f(-1000.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsingNeg5_0Expectingmillimetres_fNeg5_01000_0() {
        let unit = Metres_d(-5.0)
        let expected = m_d_to_mm_f(-5.0)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_f = 1.0
        let categoryResult = Distance(unit).millimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_fUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_f(-Double.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTomillimetres_fUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_f(Double.greatestFiniteMagnitude)
        let result = Millimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_fUsing15_0Expectingcentimetres_f15_0100_0() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_cm_f(15.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsing25_0Expectingcentimetres_f25_0100_0() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_cm_f(25.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsing250_0Expectingcentimetres_f250_0100_0() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_cm_f(250.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsing0_0Expectingcentimetres_f0_0100_0() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_cm_f(0.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsing2500_0Expectingcentimetres_f2500_0100_0() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_cm_f(2500.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsing25000_0Expectingcentimetres_f25000_0100_0() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_cm_f(25000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsing250000_0Expectingcentimetres_f250000_0100_0() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_cm_f(250000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsing2500000_0Expectingcentimetres_f2500000_0100_0() {
        let unit = Metres_d(2500000.0)
        let expected = m_d_to_cm_f(2500000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsingNeg323_0Expectingcentimetres_fNeg323_0100_0() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_cm_f(-323.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsingNeg10_0Expectingcentimetres_fNeg10_0100_0() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_cm_f(-10.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsingNeg1000_0Expectingcentimetres_fNeg1000_0100_0() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_cm_f(-1000.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsingNeg5_0Expectingcentimetres_fNeg5_0100_0() {
        let unit = Metres_d(-5.0)
        let expected = m_d_to_cm_f(-5.0)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_f = 1.0
        let categoryResult = Distance(unit).centimetres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_fUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_f(-Double.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_fUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_fFloat_greatestFiniteMagnitude() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_f(Double.greatestFiniteMagnitude)
        let result = Centimetres_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTometres_fUsing0_0Expecting0_0() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_m_f(0.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_fUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingmetres_fNegFloat_greatestFiniteMagnitude() {
        let unit = Metres_d(metres_d(-Double.greatestFiniteMagnitude))
        let expected = m_d_to_m_f(metres_d(-Double.greatestFiniteMagnitude))
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_fUsingmetres_dDouble_greatestFiniteMagnitudeExpectingmetres_fFloat_greatestFiniteMagnitude() {
        let unit = Metres_d(metres_d(Double.greatestFiniteMagnitude))
        let expected = m_d_to_m_f(metres_d(Double.greatestFiniteMagnitude))
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTometres_fUsing5_0Expecting5_0() {
        let unit = Metres_d(5.0)
        let expected = m_d_to_m_f(5.0)
        let result = Metres_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: metres_f = 1.0
        let categoryResult = Distance(unit).metres_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing15_0Expectingmillimetres_d15_01000_0() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_mm_d(15.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing25_0Expectingmillimetres_d25_01000_0() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_mm_d(25.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing250_0Expectingmillimetres_d250_01000_0() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_mm_d(250.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing0_0Expectingmillimetres_d0_01000_0() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_mm_d(0.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing2500_0Expectingmillimetres_d2500_01000_0() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_mm_d(2500.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing25000_0Expectingmillimetres_d25000_01000_0() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_mm_d(25000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing250000_0Expectingmillimetres_d250000_01000_0() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_mm_d(250000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsing2500000_0Expectingmillimetres_d2500000_01000_0() {
        let unit = Metres_d(2500000.0)
        let expected = m_d_to_mm_d(2500000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsingNeg323_0Expectingmillimetres_dNeg323_01000_0() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_mm_d(-323.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsingNeg10_0Expectingmillimetres_dNeg10_01000_0() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_mm_d(-10.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsingNeg1000_0Expectingmillimetres_dNeg1000_01000_0() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_mm_d(-1000.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsingNeg5_0Expectingmillimetres_dNeg5_01000_0() {
        let unit = Metres_d(-5.0)
        let expected = m_d_to_mm_d(-5.0)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: millimetres_d = 1.0
        let categoryResult = Distance(unit).millimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTomillimetres_dUsingNegDouble_greatestFiniteMagnitudeExpectingmillimetres_dNegDouble_greatestFiniteMagnitude() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_d(-Double.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTomillimetres_dUsingDouble_greatestFiniteMagnitudeExpectingmillimetres_dDouble_greatestFiniteMagnitude() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_mm_d(Double.greatestFiniteMagnitude)
        let result = Millimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_dUsing15_0Expectingcentimetres_d15_0100_0() {
        let unit = Metres_d(15.0)
        let expected = m_d_to_cm_d(15.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsing25_0Expectingcentimetres_d25_0100_0() {
        let unit = Metres_d(25.0)
        let expected = m_d_to_cm_d(25.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsing250_0Expectingcentimetres_d250_0100_0() {
        let unit = Metres_d(250.0)
        let expected = m_d_to_cm_d(250.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsing0_0Expectingcentimetres_d0_0100_0() {
        let unit = Metres_d(0.0)
        let expected = m_d_to_cm_d(0.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsing2500_0Expectingcentimetres_d2500_0100_0() {
        let unit = Metres_d(2500.0)
        let expected = m_d_to_cm_d(2500.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsing25000_0Expectingcentimetres_d25000_0100_0() {
        let unit = Metres_d(25000.0)
        let expected = m_d_to_cm_d(25000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsing250000_0Expectingcentimetres_d250000_0100_0() {
        let unit = Metres_d(250000.0)
        let expected = m_d_to_cm_d(250000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsing2500000_0Expectingcentimetres_d2500000_0100_0() {
        let unit = Metres_d(2500000.0)
        let expected = m_d_to_cm_d(2500000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsingNeg323_0Expectingcentimetres_dNeg323_0100_0() {
        let unit = Metres_d(-323.0)
        let expected = m_d_to_cm_d(-323.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsingNeg10_0Expectingcentimetres_dNeg10_0100_0() {
        let unit = Metres_d(-10.0)
        let expected = m_d_to_cm_d(-10.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsingNeg1000_0Expectingcentimetres_dNeg1000_0100_0() {
        let unit = Metres_d(-1000.0)
        let expected = m_d_to_cm_d(-1000.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsingNeg5_0Expectingcentimetres_dNeg5_0100_0() {
        let unit = Metres_d(-5.0)
        let expected = m_d_to_cm_d(-5.0)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: centimetres_d = 1.0
        let categoryResult = Distance(unit).centimetres_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmetres_dTocentimetres_dUsingNegDouble_greatestFiniteMagnitudeExpectingcentimetres_dNegDouble_greatestFiniteMagnitude() {
        let unit = Metres_d(-Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_d(-Double.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTocentimetres_dUsingDouble_greatestFiniteMagnitudeExpectingcentimetres_dDouble_greatestFiniteMagnitude() {
        let unit = Metres_d(Double.greatestFiniteMagnitude)
        let expected = m_d_to_cm_d(Double.greatestFiniteMagnitude)
        let result = Centimetres_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTointUsing0_0Expecting0() {
        let expected = m_d_to_i(0.0)
        let result = CInt(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTointUsing5_0Expecting5() {
        let expected = m_d_to_i(5.0)
        let result = CInt(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTointUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = m_d_to_i(metres_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTointUsingmetres_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = m_d_to_i(metres_d(Double.greatestFiniteMagnitude))
        let result = CInt(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTometres_dUsing0Expecting0_0() {
        let expected = i_to_m_d(0)
        let result = Metres_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_dUsing5Expecting5_0() {
        let expected = i_to_m_d(5)
        let result = Metres_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_dUsingCIntCInt_minExpectingmetres_dCInt_min() {
        let expected = i_to_m_d(CInt(CInt.min))
        let result = Metres_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTometres_dUsingCIntCInt_maxExpectingmetres_dCInt_max() {
        let expected = i_to_m_d(CInt(CInt.max))
        let result = Metres_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint8_tUsing0_0Expecting0() {
        let expected = m_d_to_i8(0.0)
        let result = Int8(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint8_tUsing5_0Expecting5() {
        let expected = m_d_to_i8(5.0)
        let result = Int8(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint8_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = m_d_to_i8(metres_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint8_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = m_d_to_i8(metres_d(Double.greatestFiniteMagnitude))
        let result = Int8(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_dUsing0Expecting0_0() {
        let expected = i8_to_m_d(0)
        let result = Metres_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_dUsing5Expecting5_0() {
        let expected = i8_to_m_d(5)
        let result = Metres_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_dUsingInt8Int8_minExpectingmetres_dInt8_min() {
        let expected = i8_to_m_d(Int8(Int8.min))
        let result = Metres_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTometres_dUsingInt8Int8_maxExpectingmetres_dInt8_max() {
        let expected = i8_to_m_d(Int8(Int8.max))
        let result = Metres_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint16_tUsing0_0Expecting0() {
        let expected = m_d_to_i16(0.0)
        let result = Int16(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint16_tUsing5_0Expecting5() {
        let expected = m_d_to_i16(5.0)
        let result = Int16(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint16_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = m_d_to_i16(metres_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint16_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = m_d_to_i16(metres_d(Double.greatestFiniteMagnitude))
        let result = Int16(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_dUsing0Expecting0_0() {
        let expected = i16_to_m_d(0)
        let result = Metres_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_dUsing5Expecting5_0() {
        let expected = i16_to_m_d(5)
        let result = Metres_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_dUsingInt16Int16_minExpectingmetres_dInt16_min() {
        let expected = i16_to_m_d(Int16(Int16.min))
        let result = Metres_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTometres_dUsingInt16Int16_maxExpectingmetres_dInt16_max() {
        let expected = i16_to_m_d(Int16(Int16.max))
        let result = Metres_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint32_tUsing0_0Expecting0() {
        let expected = m_d_to_i32(0.0)
        let result = Int32(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint32_tUsing5_0Expecting5() {
        let expected = m_d_to_i32(5.0)
        let result = Int32(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint32_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = m_d_to_i32(metres_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint32_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = m_d_to_i32(metres_d(Double.greatestFiniteMagnitude))
        let result = Int32(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_dUsing0Expecting0_0() {
        let expected = i32_to_m_d(0)
        let result = Metres_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_dUsing5Expecting5_0() {
        let expected = i32_to_m_d(5)
        let result = Metres_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_dUsingInt32Int32_minExpectingmetres_dInt32_min() {
        let expected = i32_to_m_d(Int32(Int32.min))
        let result = Metres_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTometres_dUsingInt32Int32_maxExpectingmetres_dInt32_max() {
        let expected = i32_to_m_d(Int32(Int32.max))
        let result = Metres_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint64_tUsing0_0Expecting0() {
        let expected = m_d_to_i64(0.0)
        let result = Int64(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint64_tUsing5_0Expecting5() {
        let expected = m_d_to_i64(5.0)
        let result = Int64(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint64_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = m_d_to_i64(metres_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dToint64_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = m_d_to_i64(metres_d(Double.greatestFiniteMagnitude))
        let result = Int64(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_dUsing0Expecting0_0() {
        let expected = i64_to_m_d(0)
        let result = Metres_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_dUsing5Expecting5_0() {
        let expected = i64_to_m_d(5)
        let result = Metres_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_dUsingInt64Int64_minExpectingmetres_dInt64_min() {
        let expected = i64_to_m_d(Int64(Int64.min))
        let result = Metres_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTometres_dUsingInt64Int64_maxExpectingmetres_dInt64_max() {
        let expected = i64_to_m_d(Int64(Int64.max))
        let result = Metres_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTounsignedintUsing0_0Expecting0() {
        let expected = m_d_to_u(0.0)
        let result = CUnsignedInt(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTounsignedintUsing5_0Expecting5() {
        let expected = m_d_to_u(5.0)
        let result = CUnsignedInt(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTounsignedintUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = m_d_to_u(metres_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTounsignedintUsingmetres_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = m_d_to_u(metres_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_dUsing0Expecting0_0() {
        let expected = u_to_m_d(0)
        let result = Metres_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_dUsing5Expecting5_0() {
        let expected = u_to_m_d(5)
        let result = Metres_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_dUsingCUnsignedIntCUnsignedInt_minExpectingmetres_dCUnsignedInt_min() {
        let expected = u_to_m_d(CUnsignedInt(CUnsignedInt.min))
        let result = Metres_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTometres_dUsingCUnsignedIntCUnsignedInt_maxExpectingmetres_dCUnsignedInt_max() {
        let expected = u_to_m_d(CUnsignedInt(CUnsignedInt.max))
        let result = Metres_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint8_tUsing0_0Expecting0() {
        let expected = m_d_to_u8(0.0)
        let result = UInt8(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint8_tUsing5_0Expecting5() {
        let expected = m_d_to_u8(5.0)
        let result = UInt8(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint8_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = m_d_to_u8(metres_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint8_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = m_d_to_u8(metres_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_dUsing0Expecting0_0() {
        let expected = u8_to_m_d(0)
        let result = Metres_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_dUsing5Expecting5_0() {
        let expected = u8_to_m_d(5)
        let result = Metres_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_dUsingUInt8UInt8_minExpectingmetres_dUInt8_min() {
        let expected = u8_to_m_d(UInt8(UInt8.min))
        let result = Metres_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTometres_dUsingUInt8UInt8_maxExpectingmetres_dUInt8_max() {
        let expected = u8_to_m_d(UInt8(UInt8.max))
        let result = Metres_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint16_tUsing0_0Expecting0() {
        let expected = m_d_to_u16(0.0)
        let result = UInt16(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint16_tUsing5_0Expecting5() {
        let expected = m_d_to_u16(5.0)
        let result = UInt16(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint16_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = m_d_to_u16(metres_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint16_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = m_d_to_u16(metres_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_dUsing0Expecting0_0() {
        let expected = u16_to_m_d(0)
        let result = Metres_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_dUsing5Expecting5_0() {
        let expected = u16_to_m_d(5)
        let result = Metres_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_dUsingUInt16UInt16_minExpectingmetres_dUInt16_min() {
        let expected = u16_to_m_d(UInt16(UInt16.min))
        let result = Metres_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTometres_dUsingUInt16UInt16_maxExpectingmetres_dUInt16_max() {
        let expected = u16_to_m_d(UInt16(UInt16.max))
        let result = Metres_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint32_tUsing0_0Expecting0() {
        let expected = m_d_to_u32(0.0)
        let result = UInt32(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint32_tUsing5_0Expecting5() {
        let expected = m_d_to_u32(5.0)
        let result = UInt32(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint32_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = m_d_to_u32(metres_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint32_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = m_d_to_u32(metres_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_dUsing0Expecting0_0() {
        let expected = u32_to_m_d(0)
        let result = Metres_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_dUsing5Expecting5_0() {
        let expected = u32_to_m_d(5)
        let result = Metres_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_dUsingUInt32UInt32_minExpectingmetres_dUInt32_min() {
        let expected = u32_to_m_d(UInt32(UInt32.min))
        let result = Metres_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTometres_dUsingUInt32UInt32_maxExpectingmetres_dUInt32_max() {
        let expected = u32_to_m_d(UInt32(UInt32.max))
        let result = Metres_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint64_tUsing0_0Expecting0() {
        let expected = m_d_to_u64(0.0)
        let result = UInt64(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint64_tUsing5_0Expecting5() {
        let expected = m_d_to_u64(5.0)
        let result = UInt64(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint64_tUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = m_d_to_u64(metres_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTouint64_tUsingmetres_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = m_d_to_u64(metres_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_dUsing0Expecting0_0() {
        let expected = u64_to_m_d(0)
        let result = Metres_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_dUsing5Expecting5_0() {
        let expected = u64_to_m_d(5)
        let result = Metres_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_dUsingUInt64UInt64_minExpectingmetres_dUInt64_min() {
        let expected = u64_to_m_d(UInt64(UInt64.min))
        let result = Metres_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTometres_dUsingUInt64UInt64_maxExpectingmetres_dUInt64_max() {
        let expected = u64_to_m_d(UInt64(UInt64.max))
        let result = Metres_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTofloatUsing0_0Expecting0_0() {
        let expected = m_d_to_f(0.0)
        let result = Float(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTofloatUsing5_0Expecting5_0() {
        let expected = m_d_to_f(5.0)
        let result = Float(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTofloatUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = m_d_to_f(metres_d(-Double.greatestFiniteMagnitude))
        let result = Float(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTofloatUsingmetres_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = m_d_to_f(metres_d(Double.greatestFiniteMagnitude))
        let result = Float(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_dUsing0_0Expecting0_0() {
        let expected = f_to_m_d(0.0)
        let result = Metres_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_dUsing5_0Expecting5_0() {
        let expected = f_to_m_d(5.0)
        let result = Metres_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmetres_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_m_d(Float(-Float.greatestFiniteMagnitude))
        let result = Metres_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTometres_dUsingFloatFloat_greatestFiniteMagnitudeExpectingmetres_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_m_d(Float(Float.greatestFiniteMagnitude))
        let result = Metres_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTodoubleUsing0_0Expecting0_0() {
        let expected = m_d_to_d(0.0)
        let result = Double(Metres_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTodoubleUsing5_0Expecting5_0() {
        let expected = m_d_to_d(5.0)
        let result = Double(Metres_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTodoubleUsingmetres_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = m_d_to_d(metres_d(-Double.greatestFiniteMagnitude))
        let result = Double(Metres_d(metres_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmetres_dTodoubleUsingmetres_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = m_d_to_d(metres_d(Double.greatestFiniteMagnitude))
        let result = Double(Metres_d(metres_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_dUsing0_0Expecting0_0() {
        let expected = d_to_m_d(0.0)
        let result = Metres_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTometres_dUsing5_0Expecting5_0() {
        let expected = d_to_m_d(5.0)
        let result = Metres_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}
