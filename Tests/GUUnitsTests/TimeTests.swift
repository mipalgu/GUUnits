/*
* TimeTests.swift
* GUUnitsTests
*
* Created by Callum McColl on 05/06/2019.
* Copyright Â© 2019 Callum McColl. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above
*    copyright notice, this list of conditions and the following
*    disclaimer in the documentation and/or other materials
*    provided with the distribution.
*
* 3. All advertising materials mentioning features or use of this
*    software must display the following acknowledgement:
*
*        This product includes software developed by Callum McColl.
*
* 4. Neither the name of the author nor the names of contributors
*    may be used to endorse or promote products derived from this
*    software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* -----------------------------------------------------------------------
* This program is free software; you can redistribute it and/or
* modify it under the above terms or under the terms of the GNU
* General Public License as published by the Free Software Foundation;
* either version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see http://www.gnu.org/licenses/
* or write to the Free Software Foundation, Inc., 51 Franklin Street,
* Fifth Floor, Boston, MA  02110-1301, USA.
*
*/

import CGUUnits
@testable import GUUnits
import XCTest

final class MicrosecondsTypeTests: XCTestCase {

    func testMicroseconds_tEquality() {
        XCTAssertEqual(Microseconds_t(5), Microseconds_t(5))
    }

    func testMicroseconds_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microseconds_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microseconds_t.self, from: try encoder.encode(original))
        )
    }

    func testMicroseconds_tSelfInit() {
        let expected = Microseconds_t(15)
        XCTAssertEqual(expected, Microseconds_t(expected))
    }

    func testMicroseconds_tSelfExactlyInit() {
        let expected = Microseconds_t(15)
        XCTAssertEqual(expected, Microseconds_t(exactly: expected))
    }

    func testMicroseconds_tComparable() {
        let lhs = Microseconds_t(1)
        let rhs = Microseconds_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroseconds_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Microseconds_t(5).magnitude, expected)
    }

    func testMicroseconds_tTruncatingInit() {
        let expected = Microseconds_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Microseconds_t(truncatingIfNeeded: expected), expected)
    }

    func testMicroseconds_tClampingInit() {
        let expected = Microseconds_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Microseconds_t(clamping: expected), expected)
    }

    func testMicroseconds_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Microseconds_t(5).bitWidth, expected)
    }

    func testMicroseconds_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Microseconds_t(5).leadingZeroBitCount, expected)
    }

    func testMicroseconds_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Microseconds_t(5).nonzeroBitCount, expected)
    }

    func testMicroseconds_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Microseconds_t(expected), Microseconds_t(integerLiteral: CInt.max))
    }

    func testMicroseconds_tTruncatingBits() {
        let expected = Microseconds_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Microseconds_t(_truncatingBits: UInt.max))
    }

    func testMicroseconds_tAddition() {
        let expected = Microseconds_t(CInt(5) + CInt(3))
        XCTAssertEqual(Microseconds_t(5) + Microseconds_t(3), expected)
    }

    func testMicroseconds_tSubtraction() {
        let expected = Microseconds_t(CInt(5) - CInt(3))
        XCTAssertEqual(Microseconds_t(5) - Microseconds_t(3), expected)
    }

    func testMicroseconds_tMultiplication() {
        let expected = Microseconds_t(CInt(5) * CInt(3))
        XCTAssertEqual(Microseconds_t(5) * Microseconds_t(3), expected)
    }

    func testMicroseconds_tDivision() {
        let expected = Microseconds_t(CInt(6) / CInt(3))
        XCTAssertEqual(Microseconds_t(6) / Microseconds_t(3), expected)
    }

    func testMicroseconds_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Microseconds_t(rawOriginal)
        let result = original.addingReportingOverflow(Microseconds_t(1))
        XCTAssertEqual(result.0, Microseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroseconds_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Microseconds_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Microseconds_t(2))
        XCTAssertEqual(result.0, Microseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroseconds_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Microseconds_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Microseconds_t(1))
        XCTAssertEqual(result.0, Microseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroseconds_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Microseconds_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Microseconds_t(CInt.max))
        XCTAssertEqual(result.0, Microseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroseconds_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Microseconds_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Microseconds_t(CInt.max))
        XCTAssertEqual(result.0, Microseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroseconds_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Microseconds_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMicroseconds_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Microseconds_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Microseconds_t(original))
    }

    func testMicroseconds_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Microseconds_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Microseconds_t(original))
    }

    func testMicroseconds_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Microseconds_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Microseconds_t(original))
    }

    func testMicroseconds_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Microseconds_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Microseconds_t(original))
    }

    func testMicroseconds_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Microseconds_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Microseconds_t(original))
    }

    func testMicroseconds_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Microseconds_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Microseconds_t(original))
    }

    func testMicroseconds_tMod() {
        let original = CInt(4)
        let expected = Microseconds_t(original % 2)
        XCTAssertEqual(Microseconds_t(original) % 2, expected)
    }

    func testMicroseconds_uEquality() {
        XCTAssertEqual(Microseconds_u(5), Microseconds_u(5))
    }

    func testMicroseconds_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microseconds_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microseconds_u.self, from: try encoder.encode(original))
        )
    }

    func testMicroseconds_uSelfInit() {
        let expected = Microseconds_u(15)
        XCTAssertEqual(expected, Microseconds_u(expected))
    }

    func testMicroseconds_uSelfExactlyInit() {
        let expected = Microseconds_u(15)
        XCTAssertEqual(expected, Microseconds_u(exactly: expected))
    }

    func testMicroseconds_uComparable() {
        let lhs = Microseconds_u(1)
        let rhs = Microseconds_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroseconds_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Microseconds_u(5).magnitude, expected)
    }

    func testMicroseconds_uTruncatingInit() {
        let expected = Microseconds_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Microseconds_u(truncatingIfNeeded: expected), expected)
    }

    func testMicroseconds_uClampingInit() {
        let expected = Microseconds_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Microseconds_u(clamping: expected), expected)
    }

    func testMicroseconds_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Microseconds_u(5).bitWidth, expected)
    }

    func testMicroseconds_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Microseconds_u(5).leadingZeroBitCount, expected)
    }

    func testMicroseconds_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Microseconds_u(5).nonzeroBitCount, expected)
    }

    func testMicroseconds_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Microseconds_u(expected), Microseconds_u(integerLiteral: CUnsignedInt.max))
    }

    func testMicroseconds_uTruncatingBits() {
        let expected = Microseconds_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Microseconds_u(_truncatingBits: UInt.max))
    }

    func testMicroseconds_uAddition() {
        let expected = Microseconds_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Microseconds_u(5) + Microseconds_u(3), expected)
    }

    func testMicroseconds_uSubtraction() {
        let expected = Microseconds_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Microseconds_u(5) - Microseconds_u(3), expected)
    }

    func testMicroseconds_uMultiplication() {
        let expected = Microseconds_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Microseconds_u(5) * Microseconds_u(3), expected)
    }

    func testMicroseconds_uDivision() {
        let expected = Microseconds_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Microseconds_u(6) / Microseconds_u(3), expected)
    }

    func testMicroseconds_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Microseconds_u(rawOriginal)
        let result = original.addingReportingOverflow(Microseconds_u(1))
        XCTAssertEqual(result.0, Microseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroseconds_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Microseconds_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Microseconds_u(2))
        XCTAssertEqual(result.0, Microseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroseconds_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Microseconds_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Microseconds_u(1))
        XCTAssertEqual(result.0, Microseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMicroseconds_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Microseconds_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Microseconds_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Microseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroseconds_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Microseconds_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Microseconds_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Microseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMicroseconds_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Microseconds_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMicroseconds_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Microseconds_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Microseconds_u(original))
    }

    func testMicroseconds_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Microseconds_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Microseconds_u(original))
    }

    func testMicroseconds_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Microseconds_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Microseconds_u(original))
    }

    func testMicroseconds_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Microseconds_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Microseconds_u(original))
    }

    func testMicroseconds_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Microseconds_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Microseconds_u(original))
    }

    func testMicroseconds_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Microseconds_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Microseconds_u(original))
    }

    func testMicroseconds_uMod() {
        let original = CUnsignedInt(4)
        let expected = Microseconds_u(original % 2)
        XCTAssertEqual(Microseconds_u(original) % 2, expected)
    }

    func testMicroseconds_fEquality() {
        XCTAssertEqual(Microseconds_f(5), Microseconds_f(5))
    }

    func testMicroseconds_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microseconds_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microseconds_f.self, from: try encoder.encode(original))
        )
    }

    func testMicroseconds_fSelfInit() {
        let expected = Microseconds_f(15)
        XCTAssertEqual(expected, Microseconds_f(expected))
    }

    func testMicroseconds_fSelfExactlyInit() {
        let expected = Microseconds_f(15)
        XCTAssertEqual(expected, Microseconds_f(exactly: expected))
    }

    func testMicroseconds_fComparable() {
        let lhs = Microseconds_f(1)
        let rhs = Microseconds_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroseconds_fRadix() {
        XCTAssertEqual(Microseconds_f.radix, Float.radix)
    }

    func testMicroseconds_fExponentBitCount() {
        XCTAssertEqual(Microseconds_f.exponentBitCount, Float.exponentBitCount)
    }

    func testMicroseconds_fSignificandBitCount() {
        XCTAssertEqual(Microseconds_f.significandBitCount, Float.significandBitCount)
    }

    func testMicroseconds_fMagnitude() {
        let expected = Microseconds_f(Float(5).magnitude)
        XCTAssertEqual(Microseconds_f(5).magnitude, expected)
    }

    func testMicroseconds_fExactlyInit() {
        let expected = Microseconds_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Microseconds_f(exactly: Int(5)), expected)
    }

    func testMicroseconds_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Microseconds_f(param).isTotallyOrdered(belowOrEqualTo: Microseconds_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMicroseconds_fBinade() {
        let raw = Float(5)
        let expected = Microseconds_f(raw.binade)
        XCTAssertEqual(Microseconds_f(raw).binade, expected)
    }

    func testMicroseconds_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Microseconds_f(raw).significandWidth, raw.significandWidth)
    }

    func testMicroseconds_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Microseconds_f(raw).debugDescription, raw.debugDescription)
    }

    func testMicroseconds_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Microseconds_f("5.0"), Microseconds_f(raw))
    }

    func testMicroseconds_fStaticVars() {
        XCTAssertEqual(Microseconds_f.nan.isNaN, Microseconds_f(Float.nan).isNaN)
        XCTAssertEqual(
            Microseconds_f.signalingNaN.isSignalingNaN,
            Microseconds_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Microseconds_f.infinity, Microseconds_f(Float.infinity))
        XCTAssertEqual(Microseconds_f.greatestFiniteMagnitude, Microseconds_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Microseconds_f.pi, Microseconds_f(Float.pi))
        XCTAssertEqual(Microseconds_f.leastNormalMagnitude, Microseconds_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Microseconds_f.leastNonzeroMagnitude, Microseconds_f(Float.leastNonzeroMagnitude))
    }

    func testMicroseconds_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Microseconds_f(raw).ulp, Microseconds_f(raw.ulp))
    }

    func testMicroseconds_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Microseconds_f(raw).sign, raw.sign)
    }

    func testMicroseconds_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Microseconds_f(raw).significand, Microseconds_f(raw.significand))
    }

    func testMicroseconds_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Microseconds_f(raw).nextUp, Microseconds_f(raw.nextUp))
    }

    func testMicroseconds_fVars() {
        XCTAssertEqual(Microseconds_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Microseconds_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Microseconds_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Microseconds_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Microseconds_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Microseconds_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Microseconds_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Microseconds_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Microseconds_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Microseconds_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Microseconds_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Microseconds_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Microseconds_f(5).description, Float(5).description)
        XCTAssertEqual(Microseconds_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Microseconds_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Microseconds_f(5).exponent, Float(5).exponent)
    }

    func testMicroseconds_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Microseconds_f(Float(4))
        result.formRemainder(dividingBy: Microseconds_f(denominator))
        XCTAssertEqual(result, Microseconds_f(original))
    }

    func testMicroseconds_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Microseconds_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Microseconds_f(denominator))
        XCTAssertEqual(result, Microseconds_f(original))
    }

    func testMicroseconds_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Microseconds_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Microseconds_f(original))
    }

    func testMicroseconds_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Microseconds_f(Float(4))
        result.addProduct(Microseconds_f(lhs), Microseconds_f(rhs))
        XCTAssertEqual(result, Microseconds_f(original))
    }

    func testMicroseconds_fIsEqual() {
        let this = Microseconds_f(5)
        let other = Microseconds_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMicroseconds_fIsLess() {
        let this = Microseconds_f(5)
        let other = Microseconds_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMicroseconds_fIsLessThanOrEqual() {
        let this = Microseconds_f(5)
        let other = Microseconds_f(6)
        let other2 = Microseconds_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMicroseconds_fOperations() {
        let lhs = Microseconds_f(6)
        let rhs = Microseconds_f(3)
        XCTAssertEqual(lhs + rhs, Microseconds_f(9))
        XCTAssertEqual(lhs - rhs, Microseconds_f(3))
        XCTAssertEqual(lhs * rhs, Microseconds_f(18))
        XCTAssertEqual(lhs / rhs, Microseconds_f(2))
    }

    func testMicroseconds_fTimesEqual() {
        var this = Microseconds_f(3)
        this *= Microseconds_f(4)
        XCTAssertEqual(this, Microseconds_f(12))
    }

    func testMicroseconds_fDivideEqual() {
        var this = Microseconds_f(6)
        this /= Microseconds_f(3)
        XCTAssertEqual(this, Microseconds_f(2))
    }

    func testMicroseconds_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Microseconds_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Microseconds_f(expected))
    }

    func testMicroseconds_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Microseconds_f(original).distance(to: Microseconds_f(other)), expected)
    }

    func testMicroseconds_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Microseconds_f(original).advanced(by: 3), Microseconds_f(expected))
    }

    func testMicroseconds_dEquality() {
        XCTAssertEqual(Microseconds_d(5), Microseconds_d(5))
    }

    func testMicroseconds_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Microseconds_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Microseconds_d.self, from: try encoder.encode(original))
        )
    }

    func testMicroseconds_dSelfInit() {
        let expected = Microseconds_d(15)
        XCTAssertEqual(expected, Microseconds_d(expected))
    }

    func testMicroseconds_dSelfExactlyInit() {
        let expected = Microseconds_d(15)
        XCTAssertEqual(expected, Microseconds_d(exactly: expected))
    }

    func testMicroseconds_dComparable() {
        let lhs = Microseconds_d(1)
        let rhs = Microseconds_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMicroseconds_dRadix() {
        XCTAssertEqual(Microseconds_d.radix, Double.radix)
    }

    func testMicroseconds_dExponentBitCount() {
        XCTAssertEqual(Microseconds_d.exponentBitCount, Double.exponentBitCount)
    }

    func testMicroseconds_dSignificandBitCount() {
        XCTAssertEqual(Microseconds_d.significandBitCount, Double.significandBitCount)
    }

    func testMicroseconds_dMagnitude() {
        let expected = Microseconds_d(Double(5).magnitude)
        XCTAssertEqual(Microseconds_d(5).magnitude, expected)
    }

    func testMicroseconds_dExactlyInit() {
        let expected = Microseconds_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Microseconds_d(exactly: Int(5)), expected)
    }

    func testMicroseconds_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Microseconds_d(param).isTotallyOrdered(belowOrEqualTo: Microseconds_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMicroseconds_dBinade() {
        let raw = Double(5)
        let expected = Microseconds_d(raw.binade)
        XCTAssertEqual(Microseconds_d(raw).binade, expected)
    }

    func testMicroseconds_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Microseconds_d(raw).significandWidth, raw.significandWidth)
    }

    func testMicroseconds_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Microseconds_d(raw).debugDescription, raw.debugDescription)
    }

    func testMicroseconds_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Microseconds_d("5.0"), Microseconds_d(raw))
    }

    func testMicroseconds_dStaticVars() {
        XCTAssertEqual(Microseconds_d.nan.isNaN, Microseconds_d(Double.nan).isNaN)
        XCTAssertEqual(
            Microseconds_d.signalingNaN.isSignalingNaN,
            Microseconds_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Microseconds_d.infinity, Microseconds_d(Double.infinity))
        XCTAssertEqual(Microseconds_d.greatestFiniteMagnitude, Microseconds_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Microseconds_d.pi, Microseconds_d(Double.pi))
        XCTAssertEqual(Microseconds_d.leastNormalMagnitude, Microseconds_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Microseconds_d.leastNonzeroMagnitude, Microseconds_d(Double.leastNonzeroMagnitude))
    }

    func testMicroseconds_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Microseconds_d(raw).ulp, Microseconds_d(raw.ulp))
    }

    func testMicroseconds_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Microseconds_d(raw).sign, raw.sign)
    }

    func testMicroseconds_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Microseconds_d(raw).significand, Microseconds_d(raw.significand))
    }

    func testMicroseconds_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Microseconds_d(raw).nextUp, Microseconds_d(raw.nextUp))
    }

    func testMicroseconds_dVars() {
        XCTAssertEqual(Microseconds_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Microseconds_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Microseconds_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Microseconds_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Microseconds_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Microseconds_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Microseconds_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Microseconds_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Microseconds_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Microseconds_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Microseconds_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Microseconds_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Microseconds_d(5).description, Double(5).description)
        XCTAssertEqual(Microseconds_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Microseconds_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Microseconds_d(5).exponent, Double(5).exponent)
    }

    func testMicroseconds_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Microseconds_d(Double(4))
        result.formRemainder(dividingBy: Microseconds_d(denominator))
        XCTAssertEqual(result, Microseconds_d(original))
    }

    func testMicroseconds_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Microseconds_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Microseconds_d(denominator))
        XCTAssertEqual(result, Microseconds_d(original))
    }

    func testMicroseconds_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Microseconds_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Microseconds_d(original))
    }

    func testMicroseconds_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Microseconds_d(Double(4))
        result.addProduct(Microseconds_d(lhs), Microseconds_d(rhs))
        XCTAssertEqual(result, Microseconds_d(original))
    }

    func testMicroseconds_dIsEqual() {
        let this = Microseconds_d(5)
        let other = Microseconds_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMicroseconds_dIsLess() {
        let this = Microseconds_d(5)
        let other = Microseconds_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMicroseconds_dIsLessThanOrEqual() {
        let this = Microseconds_d(5)
        let other = Microseconds_d(6)
        let other2 = Microseconds_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMicroseconds_dOperations() {
        let lhs = Microseconds_d(6)
        let rhs = Microseconds_d(3)
        XCTAssertEqual(lhs + rhs, Microseconds_d(9))
        XCTAssertEqual(lhs - rhs, Microseconds_d(3))
        XCTAssertEqual(lhs * rhs, Microseconds_d(18))
        XCTAssertEqual(lhs / rhs, Microseconds_d(2))
    }

    func testMicroseconds_dTimesEqual() {
        var this = Microseconds_d(3)
        this *= Microseconds_d(4)
        XCTAssertEqual(this, Microseconds_d(12))
    }

    func testMicroseconds_dDivideEqual() {
        var this = Microseconds_d(6)
        this /= Microseconds_d(3)
        XCTAssertEqual(this, Microseconds_d(2))
    }

    func testMicroseconds_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Microseconds_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Microseconds_d(expected))
    }

    func testMicroseconds_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Microseconds_d(original).distance(to: Microseconds_d(other)), expected)
    }

    func testMicroseconds_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Microseconds_d(original).advanced(by: 3), Microseconds_d(expected))
    }

}

final class MillisecondsTypeTests: XCTestCase {

    func testMilliseconds_tEquality() {
        XCTAssertEqual(Milliseconds_t(5), Milliseconds_t(5))
    }

    func testMilliseconds_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliseconds_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliseconds_t.self, from: try encoder.encode(original))
        )
    }

    func testMilliseconds_tSelfInit() {
        let expected = Milliseconds_t(15)
        XCTAssertEqual(expected, Milliseconds_t(expected))
    }

    func testMilliseconds_tSelfExactlyInit() {
        let expected = Milliseconds_t(15)
        XCTAssertEqual(expected, Milliseconds_t(exactly: expected))
    }

    func testMilliseconds_tComparable() {
        let lhs = Milliseconds_t(1)
        let rhs = Milliseconds_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliseconds_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Milliseconds_t(5).magnitude, expected)
    }

    func testMilliseconds_tTruncatingInit() {
        let expected = Milliseconds_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Milliseconds_t(truncatingIfNeeded: expected), expected)
    }

    func testMilliseconds_tClampingInit() {
        let expected = Milliseconds_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Milliseconds_t(clamping: expected), expected)
    }

    func testMilliseconds_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Milliseconds_t(5).bitWidth, expected)
    }

    func testMilliseconds_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Milliseconds_t(5).leadingZeroBitCount, expected)
    }

    func testMilliseconds_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Milliseconds_t(5).nonzeroBitCount, expected)
    }

    func testMilliseconds_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Milliseconds_t(expected), Milliseconds_t(integerLiteral: CInt.max))
    }

    func testMilliseconds_tTruncatingBits() {
        let expected = Milliseconds_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Milliseconds_t(_truncatingBits: UInt.max))
    }

    func testMilliseconds_tAddition() {
        let expected = Milliseconds_t(CInt(5) + CInt(3))
        XCTAssertEqual(Milliseconds_t(5) + Milliseconds_t(3), expected)
    }

    func testMilliseconds_tSubtraction() {
        let expected = Milliseconds_t(CInt(5) - CInt(3))
        XCTAssertEqual(Milliseconds_t(5) - Milliseconds_t(3), expected)
    }

    func testMilliseconds_tMultiplication() {
        let expected = Milliseconds_t(CInt(5) * CInt(3))
        XCTAssertEqual(Milliseconds_t(5) * Milliseconds_t(3), expected)
    }

    func testMilliseconds_tDivision() {
        let expected = Milliseconds_t(CInt(6) / CInt(3))
        XCTAssertEqual(Milliseconds_t(6) / Milliseconds_t(3), expected)
    }

    func testMilliseconds_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Milliseconds_t(rawOriginal)
        let result = original.addingReportingOverflow(Milliseconds_t(1))
        XCTAssertEqual(result.0, Milliseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliseconds_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Milliseconds_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Milliseconds_t(2))
        XCTAssertEqual(result.0, Milliseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliseconds_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Milliseconds_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Milliseconds_t(1))
        XCTAssertEqual(result.0, Milliseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliseconds_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Milliseconds_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Milliseconds_t(CInt.max))
        XCTAssertEqual(result.0, Milliseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliseconds_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Milliseconds_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Milliseconds_t(CInt.max))
        XCTAssertEqual(result.0, Milliseconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliseconds_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Milliseconds_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMilliseconds_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Milliseconds_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Milliseconds_t(original))
    }

    func testMilliseconds_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Milliseconds_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Milliseconds_t(original))
    }

    func testMilliseconds_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Milliseconds_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Milliseconds_t(original))
    }

    func testMilliseconds_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Milliseconds_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Milliseconds_t(original))
    }

    func testMilliseconds_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Milliseconds_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Milliseconds_t(original))
    }

    func testMilliseconds_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Milliseconds_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Milliseconds_t(original))
    }

    func testMilliseconds_tMod() {
        let original = CInt(4)
        let expected = Milliseconds_t(original % 2)
        XCTAssertEqual(Milliseconds_t(original) % 2, expected)
    }

    func testMilliseconds_uEquality() {
        XCTAssertEqual(Milliseconds_u(5), Milliseconds_u(5))
    }

    func testMilliseconds_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliseconds_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliseconds_u.self, from: try encoder.encode(original))
        )
    }

    func testMilliseconds_uSelfInit() {
        let expected = Milliseconds_u(15)
        XCTAssertEqual(expected, Milliseconds_u(expected))
    }

    func testMilliseconds_uSelfExactlyInit() {
        let expected = Milliseconds_u(15)
        XCTAssertEqual(expected, Milliseconds_u(exactly: expected))
    }

    func testMilliseconds_uComparable() {
        let lhs = Milliseconds_u(1)
        let rhs = Milliseconds_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliseconds_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Milliseconds_u(5).magnitude, expected)
    }

    func testMilliseconds_uTruncatingInit() {
        let expected = Milliseconds_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Milliseconds_u(truncatingIfNeeded: expected), expected)
    }

    func testMilliseconds_uClampingInit() {
        let expected = Milliseconds_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Milliseconds_u(clamping: expected), expected)
    }

    func testMilliseconds_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Milliseconds_u(5).bitWidth, expected)
    }

    func testMilliseconds_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Milliseconds_u(5).leadingZeroBitCount, expected)
    }

    func testMilliseconds_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Milliseconds_u(5).nonzeroBitCount, expected)
    }

    func testMilliseconds_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Milliseconds_u(expected), Milliseconds_u(integerLiteral: CUnsignedInt.max))
    }

    func testMilliseconds_uTruncatingBits() {
        let expected = Milliseconds_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Milliseconds_u(_truncatingBits: UInt.max))
    }

    func testMilliseconds_uAddition() {
        let expected = Milliseconds_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Milliseconds_u(5) + Milliseconds_u(3), expected)
    }

    func testMilliseconds_uSubtraction() {
        let expected = Milliseconds_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Milliseconds_u(5) - Milliseconds_u(3), expected)
    }

    func testMilliseconds_uMultiplication() {
        let expected = Milliseconds_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Milliseconds_u(5) * Milliseconds_u(3), expected)
    }

    func testMilliseconds_uDivision() {
        let expected = Milliseconds_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Milliseconds_u(6) / Milliseconds_u(3), expected)
    }

    func testMilliseconds_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Milliseconds_u(rawOriginal)
        let result = original.addingReportingOverflow(Milliseconds_u(1))
        XCTAssertEqual(result.0, Milliseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliseconds_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Milliseconds_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Milliseconds_u(2))
        XCTAssertEqual(result.0, Milliseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliseconds_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Milliseconds_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Milliseconds_u(1))
        XCTAssertEqual(result.0, Milliseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testMilliseconds_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Milliseconds_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Milliseconds_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Milliseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliseconds_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Milliseconds_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Milliseconds_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Milliseconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testMilliseconds_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Milliseconds_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testMilliseconds_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Milliseconds_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Milliseconds_u(original))
    }

    func testMilliseconds_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Milliseconds_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Milliseconds_u(original))
    }

    func testMilliseconds_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Milliseconds_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Milliseconds_u(original))
    }

    func testMilliseconds_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Milliseconds_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Milliseconds_u(original))
    }

    func testMilliseconds_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Milliseconds_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Milliseconds_u(original))
    }

    func testMilliseconds_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Milliseconds_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Milliseconds_u(original))
    }

    func testMilliseconds_uMod() {
        let original = CUnsignedInt(4)
        let expected = Milliseconds_u(original % 2)
        XCTAssertEqual(Milliseconds_u(original) % 2, expected)
    }

    func testMilliseconds_fEquality() {
        XCTAssertEqual(Milliseconds_f(5), Milliseconds_f(5))
    }

    func testMilliseconds_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliseconds_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliseconds_f.self, from: try encoder.encode(original))
        )
    }

    func testMilliseconds_fSelfInit() {
        let expected = Milliseconds_f(15)
        XCTAssertEqual(expected, Milliseconds_f(expected))
    }

    func testMilliseconds_fSelfExactlyInit() {
        let expected = Milliseconds_f(15)
        XCTAssertEqual(expected, Milliseconds_f(exactly: expected))
    }

    func testMilliseconds_fComparable() {
        let lhs = Milliseconds_f(1)
        let rhs = Milliseconds_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliseconds_fRadix() {
        XCTAssertEqual(Milliseconds_f.radix, Float.radix)
    }

    func testMilliseconds_fExponentBitCount() {
        XCTAssertEqual(Milliseconds_f.exponentBitCount, Float.exponentBitCount)
    }

    func testMilliseconds_fSignificandBitCount() {
        XCTAssertEqual(Milliseconds_f.significandBitCount, Float.significandBitCount)
    }

    func testMilliseconds_fMagnitude() {
        let expected = Milliseconds_f(Float(5).magnitude)
        XCTAssertEqual(Milliseconds_f(5).magnitude, expected)
    }

    func testMilliseconds_fExactlyInit() {
        let expected = Milliseconds_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Milliseconds_f(exactly: Int(5)), expected)
    }

    func testMilliseconds_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Milliseconds_f(param).isTotallyOrdered(belowOrEqualTo: Milliseconds_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMilliseconds_fBinade() {
        let raw = Float(5)
        let expected = Milliseconds_f(raw.binade)
        XCTAssertEqual(Milliseconds_f(raw).binade, expected)
    }

    func testMilliseconds_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Milliseconds_f(raw).significandWidth, raw.significandWidth)
    }

    func testMilliseconds_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Milliseconds_f(raw).debugDescription, raw.debugDescription)
    }

    func testMilliseconds_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Milliseconds_f("5.0"), Milliseconds_f(raw))
    }

    func testMilliseconds_fStaticVars() {
        XCTAssertEqual(Milliseconds_f.nan.isNaN, Milliseconds_f(Float.nan).isNaN)
        XCTAssertEqual(
            Milliseconds_f.signalingNaN.isSignalingNaN,
            Milliseconds_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Milliseconds_f.infinity, Milliseconds_f(Float.infinity))
        XCTAssertEqual(Milliseconds_f.greatestFiniteMagnitude, Milliseconds_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Milliseconds_f.pi, Milliseconds_f(Float.pi))
        XCTAssertEqual(Milliseconds_f.leastNormalMagnitude, Milliseconds_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Milliseconds_f.leastNonzeroMagnitude, Milliseconds_f(Float.leastNonzeroMagnitude))
    }

    func testMilliseconds_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Milliseconds_f(raw).ulp, Milliseconds_f(raw.ulp))
    }

    func testMilliseconds_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Milliseconds_f(raw).sign, raw.sign)
    }

    func testMilliseconds_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Milliseconds_f(raw).significand, Milliseconds_f(raw.significand))
    }

    func testMilliseconds_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Milliseconds_f(raw).nextUp, Milliseconds_f(raw.nextUp))
    }

    func testMilliseconds_fVars() {
        XCTAssertEqual(Milliseconds_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Milliseconds_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Milliseconds_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Milliseconds_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Milliseconds_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Milliseconds_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Milliseconds_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Milliseconds_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Milliseconds_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Milliseconds_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Milliseconds_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Milliseconds_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Milliseconds_f(5).description, Float(5).description)
        XCTAssertEqual(Milliseconds_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Milliseconds_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Milliseconds_f(5).exponent, Float(5).exponent)
    }

    func testMilliseconds_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Milliseconds_f(Float(4))
        result.formRemainder(dividingBy: Milliseconds_f(denominator))
        XCTAssertEqual(result, Milliseconds_f(original))
    }

    func testMilliseconds_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Milliseconds_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Milliseconds_f(denominator))
        XCTAssertEqual(result, Milliseconds_f(original))
    }

    func testMilliseconds_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Milliseconds_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Milliseconds_f(original))
    }

    func testMilliseconds_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Milliseconds_f(Float(4))
        result.addProduct(Milliseconds_f(lhs), Milliseconds_f(rhs))
        XCTAssertEqual(result, Milliseconds_f(original))
    }

    func testMilliseconds_fIsEqual() {
        let this = Milliseconds_f(5)
        let other = Milliseconds_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMilliseconds_fIsLess() {
        let this = Milliseconds_f(5)
        let other = Milliseconds_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMilliseconds_fIsLessThanOrEqual() {
        let this = Milliseconds_f(5)
        let other = Milliseconds_f(6)
        let other2 = Milliseconds_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMilliseconds_fOperations() {
        let lhs = Milliseconds_f(6)
        let rhs = Milliseconds_f(3)
        XCTAssertEqual(lhs + rhs, Milliseconds_f(9))
        XCTAssertEqual(lhs - rhs, Milliseconds_f(3))
        XCTAssertEqual(lhs * rhs, Milliseconds_f(18))
        XCTAssertEqual(lhs / rhs, Milliseconds_f(2))
    }

    func testMilliseconds_fTimesEqual() {
        var this = Milliseconds_f(3)
        this *= Milliseconds_f(4)
        XCTAssertEqual(this, Milliseconds_f(12))
    }

    func testMilliseconds_fDivideEqual() {
        var this = Milliseconds_f(6)
        this /= Milliseconds_f(3)
        XCTAssertEqual(this, Milliseconds_f(2))
    }

    func testMilliseconds_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Milliseconds_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Milliseconds_f(expected))
    }

    func testMilliseconds_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Milliseconds_f(original).distance(to: Milliseconds_f(other)), expected)
    }

    func testMilliseconds_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Milliseconds_f(original).advanced(by: 3), Milliseconds_f(expected))
    }

    func testMilliseconds_dEquality() {
        XCTAssertEqual(Milliseconds_d(5), Milliseconds_d(5))
    }

    func testMilliseconds_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Milliseconds_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Milliseconds_d.self, from: try encoder.encode(original))
        )
    }

    func testMilliseconds_dSelfInit() {
        let expected = Milliseconds_d(15)
        XCTAssertEqual(expected, Milliseconds_d(expected))
    }

    func testMilliseconds_dSelfExactlyInit() {
        let expected = Milliseconds_d(15)
        XCTAssertEqual(expected, Milliseconds_d(exactly: expected))
    }

    func testMilliseconds_dComparable() {
        let lhs = Milliseconds_d(1)
        let rhs = Milliseconds_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testMilliseconds_dRadix() {
        XCTAssertEqual(Milliseconds_d.radix, Double.radix)
    }

    func testMilliseconds_dExponentBitCount() {
        XCTAssertEqual(Milliseconds_d.exponentBitCount, Double.exponentBitCount)
    }

    func testMilliseconds_dSignificandBitCount() {
        XCTAssertEqual(Milliseconds_d.significandBitCount, Double.significandBitCount)
    }

    func testMilliseconds_dMagnitude() {
        let expected = Milliseconds_d(Double(5).magnitude)
        XCTAssertEqual(Milliseconds_d(5).magnitude, expected)
    }

    func testMilliseconds_dExactlyInit() {
        let expected = Milliseconds_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Milliseconds_d(exactly: Int(5)), expected)
    }

    func testMilliseconds_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Milliseconds_d(param).isTotallyOrdered(belowOrEqualTo: Milliseconds_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testMilliseconds_dBinade() {
        let raw = Double(5)
        let expected = Milliseconds_d(raw.binade)
        XCTAssertEqual(Milliseconds_d(raw).binade, expected)
    }

    func testMilliseconds_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Milliseconds_d(raw).significandWidth, raw.significandWidth)
    }

    func testMilliseconds_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Milliseconds_d(raw).debugDescription, raw.debugDescription)
    }

    func testMilliseconds_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Milliseconds_d("5.0"), Milliseconds_d(raw))
    }

    func testMilliseconds_dStaticVars() {
        XCTAssertEqual(Milliseconds_d.nan.isNaN, Milliseconds_d(Double.nan).isNaN)
        XCTAssertEqual(
            Milliseconds_d.signalingNaN.isSignalingNaN,
            Milliseconds_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Milliseconds_d.infinity, Milliseconds_d(Double.infinity))
        XCTAssertEqual(Milliseconds_d.greatestFiniteMagnitude, Milliseconds_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Milliseconds_d.pi, Milliseconds_d(Double.pi))
        XCTAssertEqual(Milliseconds_d.leastNormalMagnitude, Milliseconds_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Milliseconds_d.leastNonzeroMagnitude, Milliseconds_d(Double.leastNonzeroMagnitude))
    }

    func testMilliseconds_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Milliseconds_d(raw).ulp, Milliseconds_d(raw.ulp))
    }

    func testMilliseconds_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Milliseconds_d(raw).sign, raw.sign)
    }

    func testMilliseconds_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Milliseconds_d(raw).significand, Milliseconds_d(raw.significand))
    }

    func testMilliseconds_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Milliseconds_d(raw).nextUp, Milliseconds_d(raw.nextUp))
    }

    func testMilliseconds_dVars() {
        XCTAssertEqual(Milliseconds_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Milliseconds_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Milliseconds_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Milliseconds_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Milliseconds_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Milliseconds_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Milliseconds_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Milliseconds_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Milliseconds_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Milliseconds_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Milliseconds_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Milliseconds_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Milliseconds_d(5).description, Double(5).description)
        XCTAssertEqual(Milliseconds_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Milliseconds_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Milliseconds_d(5).exponent, Double(5).exponent)
    }

    func testMilliseconds_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Milliseconds_d(Double(4))
        result.formRemainder(dividingBy: Milliseconds_d(denominator))
        XCTAssertEqual(result, Milliseconds_d(original))
    }

    func testMilliseconds_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Milliseconds_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Milliseconds_d(denominator))
        XCTAssertEqual(result, Milliseconds_d(original))
    }

    func testMilliseconds_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Milliseconds_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Milliseconds_d(original))
    }

    func testMilliseconds_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Milliseconds_d(Double(4))
        result.addProduct(Milliseconds_d(lhs), Milliseconds_d(rhs))
        XCTAssertEqual(result, Milliseconds_d(original))
    }

    func testMilliseconds_dIsEqual() {
        let this = Milliseconds_d(5)
        let other = Milliseconds_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testMilliseconds_dIsLess() {
        let this = Milliseconds_d(5)
        let other = Milliseconds_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testMilliseconds_dIsLessThanOrEqual() {
        let this = Milliseconds_d(5)
        let other = Milliseconds_d(6)
        let other2 = Milliseconds_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testMilliseconds_dOperations() {
        let lhs = Milliseconds_d(6)
        let rhs = Milliseconds_d(3)
        XCTAssertEqual(lhs + rhs, Milliseconds_d(9))
        XCTAssertEqual(lhs - rhs, Milliseconds_d(3))
        XCTAssertEqual(lhs * rhs, Milliseconds_d(18))
        XCTAssertEqual(lhs / rhs, Milliseconds_d(2))
    }

    func testMilliseconds_dTimesEqual() {
        var this = Milliseconds_d(3)
        this *= Milliseconds_d(4)
        XCTAssertEqual(this, Milliseconds_d(12))
    }

    func testMilliseconds_dDivideEqual() {
        var this = Milliseconds_d(6)
        this /= Milliseconds_d(3)
        XCTAssertEqual(this, Milliseconds_d(2))
    }

    func testMilliseconds_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Milliseconds_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Milliseconds_d(expected))
    }

    func testMilliseconds_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Milliseconds_d(original).distance(to: Milliseconds_d(other)), expected)
    }

    func testMilliseconds_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Milliseconds_d(original).advanced(by: 3), Milliseconds_d(expected))
    }

}

final class SecondsTypeTests: XCTestCase {

    func testSeconds_tEquality() {
        XCTAssertEqual(Seconds_t(5), Seconds_t(5))
    }

    func testSeconds_tCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Seconds_t(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Seconds_t.self, from: try encoder.encode(original))
        )
    }

    func testSeconds_tSelfInit() {
        let expected = Seconds_t(15)
        XCTAssertEqual(expected, Seconds_t(expected))
    }

    func testSeconds_tSelfExactlyInit() {
        let expected = Seconds_t(15)
        XCTAssertEqual(expected, Seconds_t(exactly: expected))
    }

    func testSeconds_tComparable() {
        let lhs = Seconds_t(1)
        let rhs = Seconds_t(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testSeconds_tMagnitude() {
        let expected = CInt(5).magnitude
        XCTAssertEqual(Seconds_t(5).magnitude, expected)
    }

    func testSeconds_tTruncatingInit() {
        let expected = Seconds_t(CInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Seconds_t(truncatingIfNeeded: expected), expected)
    }

    func testSeconds_tClampingInit() {
        let expected = Seconds_t(CInt(clamping: UInt64.max))
        XCTAssertEqual(Seconds_t(clamping: expected), expected)
    }

    func testSeconds_tBitWidth() {
        let expected = CInt(5).bitWidth
        XCTAssertEqual(Seconds_t(5).bitWidth, expected)
    }

    func testSeconds_tLeadingZeroBitCount() {
        let expected = CInt(5).leadingZeroBitCount
        XCTAssertEqual(Seconds_t(5).leadingZeroBitCount, expected)
    }

    func testSeconds_tNonzeroBitCount() {
        let expected = CInt(5).nonzeroBitCount
        XCTAssertEqual(Seconds_t(5).nonzeroBitCount, expected)
    }

    func testSeconds_tIntegerLiteralInit() {
        let expected = CInt(integerLiteral: CInt.max)
        XCTAssertEqual(Seconds_t(expected), Seconds_t(integerLiteral: CInt.max))
    }

    func testSeconds_tTruncatingBits() {
        let expected = Seconds_t(CInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Seconds_t(_truncatingBits: UInt.max))
    }

    func testSeconds_tAddition() {
        let expected = Seconds_t(CInt(5) + CInt(3))
        XCTAssertEqual(Seconds_t(5) + Seconds_t(3), expected)
    }

    func testSeconds_tSubtraction() {
        let expected = Seconds_t(CInt(5) - CInt(3))
        XCTAssertEqual(Seconds_t(5) - Seconds_t(3), expected)
    }

    func testSeconds_tMultiplication() {
        let expected = Seconds_t(CInt(5) * CInt(3))
        XCTAssertEqual(Seconds_t(5) * Seconds_t(3), expected)
    }

    func testSeconds_tDivision() {
        let expected = Seconds_t(CInt(6) / CInt(3))
        XCTAssertEqual(Seconds_t(6) / Seconds_t(3), expected)
    }

    func testSeconds_tAddOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CInt(1))
        let original = Seconds_t(rawOriginal)
        let result = original.addingReportingOverflow(Seconds_t(1))
        XCTAssertEqual(result.0, Seconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testSeconds_tMultiplyOverflow() {
        let rawOriginal = CInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CInt(2))
        let original = Seconds_t(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Seconds_t(2))
        XCTAssertEqual(result.0, Seconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testSeconds_tSubtractOverflow() {
        let rawOriginal = CInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CInt(1))
        let original = Seconds_t(rawOriginal)
        let result = original.subtractingReportingOverflow(Seconds_t(1))
        XCTAssertEqual(result.0, Seconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testSeconds_tDivideOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CInt.max)
        let original = Seconds_t(rawOriginal)
        let result = original.dividedReportingOverflow(by: Seconds_t(CInt.max))
        XCTAssertEqual(result.0, Seconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testSeconds_tRemainderOverflow() {
        let rawOriginal = CInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CInt.max)
        let original = Seconds_t(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Seconds_t(CInt.max))
        XCTAssertEqual(result.0, Seconds_t(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testSeconds_tTrailingZeroBitCount() {
        let original = CInt(1)
        XCTAssertEqual(Seconds_t(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testSeconds_tTimesEquals() {
        var original = CInt(2)
        original *= 4
        var result = Seconds_t(CInt(2))
        result *= 4
        XCTAssertEqual(result, Seconds_t(original))
    }

    func testSeconds_tDivideEquals() {
        var original = CInt(4)
        original /= 2
        var result = Seconds_t(CInt(4))
        result /= 2
        XCTAssertEqual(result, Seconds_t(original))
    }

    func testSeconds_tModEquals() {
        var original = CInt(4)
        original %= 2
        var result = Seconds_t(CInt(4))
        result %= 2
        XCTAssertEqual(result, Seconds_t(original))
    }

    func testSeconds_tAndEquals() {
        var original = CInt(2)
        original &= 6
        var result = Seconds_t(CInt(2))
        result &= 6
        XCTAssertEqual(result, Seconds_t(original))
    }

    func testSeconds_tOrEquals() {
        var original = CInt(2)
        original |= 4
        var result = Seconds_t(CInt(2))
        result |= 4
        XCTAssertEqual(result, Seconds_t(original))
    }

    func testSeconds_tHatEquals() {
        var original = CInt(2)
        original ^= 4
        var result = Seconds_t(CInt(2))
        result ^= 4
        XCTAssertEqual(result, Seconds_t(original))
    }

    func testSeconds_tMod() {
        let original = CInt(4)
        let expected = Seconds_t(original % 2)
        XCTAssertEqual(Seconds_t(original) % 2, expected)
    }

    func testSeconds_uEquality() {
        XCTAssertEqual(Seconds_u(5), Seconds_u(5))
    }

    func testSeconds_uCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Seconds_u(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Seconds_u.self, from: try encoder.encode(original))
        )
    }

    func testSeconds_uSelfInit() {
        let expected = Seconds_u(15)
        XCTAssertEqual(expected, Seconds_u(expected))
    }

    func testSeconds_uSelfExactlyInit() {
        let expected = Seconds_u(15)
        XCTAssertEqual(expected, Seconds_u(exactly: expected))
    }

    func testSeconds_uComparable() {
        let lhs = Seconds_u(1)
        let rhs = Seconds_u(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testSeconds_uMagnitude() {
        let expected = CUnsignedInt(5).magnitude
        XCTAssertEqual(Seconds_u(5).magnitude, expected)
    }

    func testSeconds_uTruncatingInit() {
        let expected = Seconds_u(CUnsignedInt(truncatingIfNeeded: UInt64.max))
        XCTAssertEqual(Seconds_u(truncatingIfNeeded: expected), expected)
    }

    func testSeconds_uClampingInit() {
        let expected = Seconds_u(CUnsignedInt(clamping: UInt64.max))
        XCTAssertEqual(Seconds_u(clamping: expected), expected)
    }

    func testSeconds_uBitWidth() {
        let expected = CUnsignedInt(5).bitWidth
        XCTAssertEqual(Seconds_u(5).bitWidth, expected)
    }

    func testSeconds_uLeadingZeroBitCount() {
        let expected = CUnsignedInt(5).leadingZeroBitCount
        XCTAssertEqual(Seconds_u(5).leadingZeroBitCount, expected)
    }

    func testSeconds_uNonzeroBitCount() {
        let expected = CUnsignedInt(5).nonzeroBitCount
        XCTAssertEqual(Seconds_u(5).nonzeroBitCount, expected)
    }

    func testSeconds_uIntegerLiteralInit() {
        let expected = CUnsignedInt(integerLiteral: CUnsignedInt.max)
        XCTAssertEqual(Seconds_u(expected), Seconds_u(integerLiteral: CUnsignedInt.max))
    }

    func testSeconds_uTruncatingBits() {
        let expected = Seconds_u(CUnsignedInt(_truncatingBits: UInt.max))
        XCTAssertEqual(expected, Seconds_u(_truncatingBits: UInt.max))
    }

    func testSeconds_uAddition() {
        let expected = Seconds_u(CUnsignedInt(5) + CUnsignedInt(3))
        XCTAssertEqual(Seconds_u(5) + Seconds_u(3), expected)
    }

    func testSeconds_uSubtraction() {
        let expected = Seconds_u(CUnsignedInt(5) - CUnsignedInt(3))
        XCTAssertEqual(Seconds_u(5) - Seconds_u(3), expected)
    }

    func testSeconds_uMultiplication() {
        let expected = Seconds_u(CUnsignedInt(5) * CUnsignedInt(3))
        XCTAssertEqual(Seconds_u(5) * Seconds_u(3), expected)
    }

    func testSeconds_uDivision() {
        let expected = Seconds_u(CUnsignedInt(6) / CUnsignedInt(3))
        XCTAssertEqual(Seconds_u(6) / Seconds_u(3), expected)
    }

    func testSeconds_uAddOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.addingReportingOverflow(CUnsignedInt(1))
        let original = Seconds_u(rawOriginal)
        let result = original.addingReportingOverflow(Seconds_u(1))
        XCTAssertEqual(result.0, Seconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testSeconds_uMultiplyOverflow() {
        let rawOriginal = CUnsignedInt.max
        let rawResult = rawOriginal.multipliedReportingOverflow(by: CUnsignedInt(2))
        let original = Seconds_u(rawOriginal)
        let result = original.multipliedReportingOverflow(by: Seconds_u(2))
        XCTAssertEqual(result.0, Seconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testSeconds_uSubtractOverflow() {
        let rawOriginal = CUnsignedInt.min
        let rawResult = rawOriginal.subtractingReportingOverflow(CUnsignedInt(1))
        let original = Seconds_u(rawOriginal)
        let result = original.subtractingReportingOverflow(Seconds_u(1))
        XCTAssertEqual(result.0, Seconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
        XCTAssertTrue(result.1)
    }

    func testSeconds_uDivideOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.dividedReportingOverflow(by: CUnsignedInt.max)
        let original = Seconds_u(rawOriginal)
        let result = original.dividedReportingOverflow(by: Seconds_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Seconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testSeconds_uRemainderOverflow() {
        let rawOriginal = CUnsignedInt(1)
        let rawResult = rawOriginal.remainderReportingOverflow(dividingBy: CUnsignedInt.max)
        let original = Seconds_u(rawOriginal)
        let result = original.remainderReportingOverflow(dividingBy: Seconds_u(CUnsignedInt.max))
        XCTAssertEqual(result.0, Seconds_u(rawResult.0))
        XCTAssertEqual(result.1, rawResult.1)
    }

    func testSeconds_uTrailingZeroBitCount() {
        let original = CUnsignedInt(1)
        XCTAssertEqual(Seconds_u(original).trailingZeroBitCount, original.trailingZeroBitCount)
    }

    func testSeconds_uTimesEquals() {
        var original = CUnsignedInt(2)
        original *= 4
        var result = Seconds_u(CUnsignedInt(2))
        result *= 4
        XCTAssertEqual(result, Seconds_u(original))
    }

    func testSeconds_uDivideEquals() {
        var original = CUnsignedInt(4)
        original /= 2
        var result = Seconds_u(CUnsignedInt(4))
        result /= 2
        XCTAssertEqual(result, Seconds_u(original))
    }

    func testSeconds_uModEquals() {
        var original = CUnsignedInt(4)
        original %= 2
        var result = Seconds_u(CUnsignedInt(4))
        result %= 2
        XCTAssertEqual(result, Seconds_u(original))
    }

    func testSeconds_uAndEquals() {
        var original = CUnsignedInt(2)
        original &= 6
        var result = Seconds_u(CUnsignedInt(2))
        result &= 6
        XCTAssertEqual(result, Seconds_u(original))
    }

    func testSeconds_uOrEquals() {
        var original = CUnsignedInt(2)
        original |= 4
        var result = Seconds_u(CUnsignedInt(2))
        result |= 4
        XCTAssertEqual(result, Seconds_u(original))
    }

    func testSeconds_uHatEquals() {
        var original = CUnsignedInt(2)
        original ^= 4
        var result = Seconds_u(CUnsignedInt(2))
        result ^= 4
        XCTAssertEqual(result, Seconds_u(original))
    }

    func testSeconds_uMod() {
        let original = CUnsignedInt(4)
        let expected = Seconds_u(original % 2)
        XCTAssertEqual(Seconds_u(original) % 2, expected)
    }

    func testSeconds_fEquality() {
        XCTAssertEqual(Seconds_f(5), Seconds_f(5))
    }

    func testSeconds_fCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Seconds_f(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Seconds_f.self, from: try encoder.encode(original))
        )
    }

    func testSeconds_fSelfInit() {
        let expected = Seconds_f(15)
        XCTAssertEqual(expected, Seconds_f(expected))
    }

    func testSeconds_fSelfExactlyInit() {
        let expected = Seconds_f(15)
        XCTAssertEqual(expected, Seconds_f(exactly: expected))
    }

    func testSeconds_fComparable() {
        let lhs = Seconds_f(1)
        let rhs = Seconds_f(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testSeconds_fRadix() {
        XCTAssertEqual(Seconds_f.radix, Float.radix)
    }

    func testSeconds_fExponentBitCount() {
        XCTAssertEqual(Seconds_f.exponentBitCount, Float.exponentBitCount)
    }

    func testSeconds_fSignificandBitCount() {
        XCTAssertEqual(Seconds_f.significandBitCount, Float.significandBitCount)
    }

    func testSeconds_fMagnitude() {
        let expected = Seconds_f(Float(5).magnitude)
        XCTAssertEqual(Seconds_f(5).magnitude, expected)
    }

    func testSeconds_fExactlyInit() {
        let expected = Seconds_f(Float(exactly: Int(5)) ?? Float.infinity)
        XCTAssertEqual(Seconds_f(exactly: Int(5)), expected)
    }

    func testSeconds_fIsTotallyOrdered() {
        let param = Float(100)
        let other = Float(5)
        XCTAssertEqual(
            Seconds_f(param).isTotallyOrdered(belowOrEqualTo: Seconds_f(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testSeconds_fBinade() {
        let raw = Float(5)
        let expected = Seconds_f(raw.binade)
        XCTAssertEqual(Seconds_f(raw).binade, expected)
    }

    func testSeconds_fSignificandWidth() {
        let raw = Float(5)
        XCTAssertEqual(Seconds_f(raw).significandWidth, raw.significandWidth)
    }

    func testSeconds_fDebugDescription() {
        let raw = Float(5)
        XCTAssertEqual(Seconds_f(raw).debugDescription, raw.debugDescription)
    }

    func testSeconds_fDescriptionInit() {
        let raw = Float("5.0") ?? Float.nan
        XCTAssertEqual(Seconds_f("5.0"), Seconds_f(raw))
    }

    func testSeconds_fStaticVars() {
        XCTAssertEqual(Seconds_f.nan.isNaN, Seconds_f(Float.nan).isNaN)
        XCTAssertEqual(
            Seconds_f.signalingNaN.isSignalingNaN,
            Seconds_f(Float.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Seconds_f.infinity, Seconds_f(Float.infinity))
        XCTAssertEqual(Seconds_f.greatestFiniteMagnitude, Seconds_f(Float.greatestFiniteMagnitude))
        XCTAssertEqual(Seconds_f.pi, Seconds_f(Float.pi))
        XCTAssertEqual(Seconds_f.leastNormalMagnitude, Seconds_f(Float.leastNormalMagnitude))
        XCTAssertEqual(Seconds_f.leastNonzeroMagnitude, Seconds_f(Float.leastNonzeroMagnitude))
    }

    func testSeconds_fUlp() {
        let raw = Float(5)
        XCTAssertEqual(Seconds_f(raw).ulp, Seconds_f(raw.ulp))
    }

    func testSeconds_fSign() {
        let raw = Float(5)
        XCTAssertEqual(Seconds_f(raw).sign, raw.sign)
    }

    func testSeconds_fSignificand() {
        let raw = Float(5)
        XCTAssertEqual(Seconds_f(raw).significand, Seconds_f(raw.significand))
    }

    func testSeconds_fNextUp() {
        let raw = Float(5)
        XCTAssertEqual(Seconds_f(raw).nextUp, Seconds_f(raw.nextUp))
    }

    func testSeconds_fVars() {
        XCTAssertEqual(Seconds_f(5).isNormal, Float(5).isNormal)
        XCTAssertEqual(Seconds_f(5).isFinite, Float(5).isFinite)
        XCTAssertEqual(Seconds_f(5).isZero, Float(5).isZero)
        XCTAssertEqual(Seconds_f(0).isZero, Float(0).isZero)
        XCTAssertEqual(Seconds_f(5).isSubnormal, Float(5).isSubnormal)
        XCTAssertEqual(Seconds_f(5).isInfinite, Float(5).isInfinite)
        XCTAssertEqual(Seconds_f.infinity.isInfinite, Float.infinity.isInfinite)
        XCTAssertEqual(Seconds_f(5).isNaN, Float(5).isNaN)
        XCTAssertEqual(Seconds_f.nan.isNaN, Float.nan.isNaN)
        XCTAssertEqual(Seconds_f(5).isSignalingNaN, Float(5).isSignalingNaN)
        XCTAssertEqual(Seconds_f.nan.isSignalingNaN, Float.nan.isSignalingNaN)
        XCTAssertEqual(Seconds_f(5).isCanonical, Float(5).isCanonical)
        XCTAssertEqual(Seconds_f(5).description, Float(5).description)
        XCTAssertEqual(Seconds_f(5).exponentBitPattern, Float(5).exponentBitPattern)
        XCTAssertEqual(Seconds_f(5).significandBitPattern, Float(5).significandBitPattern)
        XCTAssertEqual(Seconds_f(5).exponent, Float(5).exponent)
    }

    func testSeconds_fFormRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formRemainder(dividingBy: denominator)
        var result = Seconds_f(Float(4))
        result.formRemainder(dividingBy: Seconds_f(denominator))
        XCTAssertEqual(result, Seconds_f(original))
    }

    func testSeconds_fFormTruncatingRemainder() {
        var original = Float(4)
        let denominator = Float(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Seconds_f(Float(4))
        result.formTruncatingRemainder(dividingBy: Seconds_f(denominator))
        XCTAssertEqual(result, Seconds_f(original))
    }

    func testSeconds_fFormSquareRoot() {
        var original = Float(4)
        original.formSquareRoot()
        var result = Seconds_f(Float(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Seconds_f(original))
    }

    func testSeconds_fAddProduct() {
        var original = Float(4)
        let lhs = Float(3)
        let rhs = Float(5)
        original.addProduct(lhs, rhs)
        var result = Seconds_f(Float(4))
        result.addProduct(Seconds_f(lhs), Seconds_f(rhs))
        XCTAssertEqual(result, Seconds_f(original))
    }

    func testSeconds_fIsEqual() {
        let this = Seconds_f(5)
        let other = Seconds_f(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testSeconds_fIsLess() {
        let this = Seconds_f(5)
        let other = Seconds_f(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testSeconds_fIsLessThanOrEqual() {
        let this = Seconds_f(5)
        let other = Seconds_f(6)
        let other2 = Seconds_f(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testSeconds_fOperations() {
        let lhs = Seconds_f(6)
        let rhs = Seconds_f(3)
        XCTAssertEqual(lhs + rhs, Seconds_f(9))
        XCTAssertEqual(lhs - rhs, Seconds_f(3))
        XCTAssertEqual(lhs * rhs, Seconds_f(18))
        XCTAssertEqual(lhs / rhs, Seconds_f(2))
    }

    func testSeconds_fTimesEqual() {
        var this = Seconds_f(3)
        this *= Seconds_f(4)
        XCTAssertEqual(this, Seconds_f(12))
    }

    func testSeconds_fDivideEqual() {
        var this = Seconds_f(6)
        this /= Seconds_f(3)
        XCTAssertEqual(this, Seconds_f(2))
    }

    func testSeconds_fRound() {
        var expected = Float(5.6)
        expected.round(.up)
        var result = Seconds_f(5.6)
        result.round(.up)
        XCTAssertEqual(result, Seconds_f(expected))
    }

    func testSeconds_fDistanceTo() {
        let original = Float(5.0)
        let other = Float(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Seconds_f(original).distance(to: Seconds_f(other)), expected)
    }

    func testSeconds_fAdvancedBy() {
        let original = Float(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Seconds_f(original).advanced(by: 3), Seconds_f(expected))
    }

    func testSeconds_dEquality() {
        XCTAssertEqual(Seconds_d(5), Seconds_d(5))
    }

    func testSeconds_dCoding() throws {
        let encoder = JSONEncoder()
        let decoder = JSONDecoder()
        let original = Seconds_d(10)
        XCTAssertEqual(
            original,
            try decoder.decode(Seconds_d.self, from: try encoder.encode(original))
        )
    }

    func testSeconds_dSelfInit() {
        let expected = Seconds_d(15)
        XCTAssertEqual(expected, Seconds_d(expected))
    }

    func testSeconds_dSelfExactlyInit() {
        let expected = Seconds_d(15)
        XCTAssertEqual(expected, Seconds_d(exactly: expected))
    }

    func testSeconds_dComparable() {
        let lhs = Seconds_d(1)
        let rhs = Seconds_d(100)
        XCTAssertLessThan(lhs, rhs)
    }

    func testSeconds_dRadix() {
        XCTAssertEqual(Seconds_d.radix, Double.radix)
    }

    func testSeconds_dExponentBitCount() {
        XCTAssertEqual(Seconds_d.exponentBitCount, Double.exponentBitCount)
    }

    func testSeconds_dSignificandBitCount() {
        XCTAssertEqual(Seconds_d.significandBitCount, Double.significandBitCount)
    }

    func testSeconds_dMagnitude() {
        let expected = Seconds_d(Double(5).magnitude)
        XCTAssertEqual(Seconds_d(5).magnitude, expected)
    }

    func testSeconds_dExactlyInit() {
        let expected = Seconds_d(Double(exactly: Int(5)) ?? Double.infinity)
        XCTAssertEqual(Seconds_d(exactly: Int(5)), expected)
    }

    func testSeconds_dIsTotallyOrdered() {
        let param = Double(100)
        let other = Double(5)
        XCTAssertEqual(
            Seconds_d(param).isTotallyOrdered(belowOrEqualTo: Seconds_d(other)),
            param.isTotallyOrdered(belowOrEqualTo: other)
        )
    }

    func testSeconds_dBinade() {
        let raw = Double(5)
        let expected = Seconds_d(raw.binade)
        XCTAssertEqual(Seconds_d(raw).binade, expected)
    }

    func testSeconds_dSignificandWidth() {
        let raw = Double(5)
        XCTAssertEqual(Seconds_d(raw).significandWidth, raw.significandWidth)
    }

    func testSeconds_dDebugDescription() {
        let raw = Double(5)
        XCTAssertEqual(Seconds_d(raw).debugDescription, raw.debugDescription)
    }

    func testSeconds_dDescriptionInit() {
        let raw = Double("5.0") ?? Double.nan
        XCTAssertEqual(Seconds_d("5.0"), Seconds_d(raw))
    }

    func testSeconds_dStaticVars() {
        XCTAssertEqual(Seconds_d.nan.isNaN, Seconds_d(Double.nan).isNaN)
        XCTAssertEqual(
            Seconds_d.signalingNaN.isSignalingNaN,
            Seconds_d(Double.signalingNaN).isSignalingNaN
        )
        XCTAssertEqual(Seconds_d.infinity, Seconds_d(Double.infinity))
        XCTAssertEqual(Seconds_d.greatestFiniteMagnitude, Seconds_d(Double.greatestFiniteMagnitude))
        XCTAssertEqual(Seconds_d.pi, Seconds_d(Double.pi))
        XCTAssertEqual(Seconds_d.leastNormalMagnitude, Seconds_d(Double.leastNormalMagnitude))
        XCTAssertEqual(Seconds_d.leastNonzeroMagnitude, Seconds_d(Double.leastNonzeroMagnitude))
    }

    func testSeconds_dUlp() {
        let raw = Double(5)
        XCTAssertEqual(Seconds_d(raw).ulp, Seconds_d(raw.ulp))
    }

    func testSeconds_dSign() {
        let raw = Double(5)
        XCTAssertEqual(Seconds_d(raw).sign, raw.sign)
    }

    func testSeconds_dSignificand() {
        let raw = Double(5)
        XCTAssertEqual(Seconds_d(raw).significand, Seconds_d(raw.significand))
    }

    func testSeconds_dNextUp() {
        let raw = Double(5)
        XCTAssertEqual(Seconds_d(raw).nextUp, Seconds_d(raw.nextUp))
    }

    func testSeconds_dVars() {
        XCTAssertEqual(Seconds_d(5).isNormal, Double(5).isNormal)
        XCTAssertEqual(Seconds_d(5).isFinite, Double(5).isFinite)
        XCTAssertEqual(Seconds_d(5).isZero, Double(5).isZero)
        XCTAssertEqual(Seconds_d(0).isZero, Double(0).isZero)
        XCTAssertEqual(Seconds_d(5).isSubnormal, Double(5).isSubnormal)
        XCTAssertEqual(Seconds_d(5).isInfinite, Double(5).isInfinite)
        XCTAssertEqual(Seconds_d.infinity.isInfinite, Double.infinity.isInfinite)
        XCTAssertEqual(Seconds_d(5).isNaN, Double(5).isNaN)
        XCTAssertEqual(Seconds_d.nan.isNaN, Double.nan.isNaN)
        XCTAssertEqual(Seconds_d(5).isSignalingNaN, Double(5).isSignalingNaN)
        XCTAssertEqual(Seconds_d.nan.isSignalingNaN, Double.nan.isSignalingNaN)
        XCTAssertEqual(Seconds_d(5).isCanonical, Double(5).isCanonical)
        XCTAssertEqual(Seconds_d(5).description, Double(5).description)
        XCTAssertEqual(Seconds_d(5).exponentBitPattern, Double(5).exponentBitPattern)
        XCTAssertEqual(Seconds_d(5).significandBitPattern, Double(5).significandBitPattern)
        XCTAssertEqual(Seconds_d(5).exponent, Double(5).exponent)
    }

    func testSeconds_dFormRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formRemainder(dividingBy: denominator)
        var result = Seconds_d(Double(4))
        result.formRemainder(dividingBy: Seconds_d(denominator))
        XCTAssertEqual(result, Seconds_d(original))
    }

    func testSeconds_dFormTruncatingRemainder() {
        var original = Double(4)
        let denominator = Double(3)
        original.formTruncatingRemainder(dividingBy: denominator)
        var result = Seconds_d(Double(4))
        result.formTruncatingRemainder(dividingBy: Seconds_d(denominator))
        XCTAssertEqual(result, Seconds_d(original))
    }

    func testSeconds_dFormSquareRoot() {
        var original = Double(4)
        original.formSquareRoot()
        var result = Seconds_d(Double(4))
        result.formSquareRoot()
        XCTAssertEqual(result, Seconds_d(original))
    }

    func testSeconds_dAddProduct() {
        var original = Double(4)
        let lhs = Double(3)
        let rhs = Double(5)
        original.addProduct(lhs, rhs)
        var result = Seconds_d(Double(4))
        result.addProduct(Seconds_d(lhs), Seconds_d(rhs))
        XCTAssertEqual(result, Seconds_d(original))
    }

    func testSeconds_dIsEqual() {
        let this = Seconds_d(5)
        let other = Seconds_d(6)
        XCTAssertTrue(this.isEqual(to: this))
        XCTAssertFalse(this.isEqual(to: other))
    }

    func testSeconds_dIsLess() {
        let this = Seconds_d(5)
        let other = Seconds_d(6)
        XCTAssertFalse(this.isLess(than: this))
        XCTAssertTrue(this.isLess(than: other))
    }

    func testSeconds_dIsLessThanOrEqual() {
        let this = Seconds_d(5)
        let other = Seconds_d(6)
        let other2 = Seconds_d(4)
        XCTAssertTrue(this.isLessThanOrEqualTo(this))
        XCTAssertTrue(this.isLessThanOrEqualTo(other))
        XCTAssertFalse(this.isLessThanOrEqualTo(other2))
    }

    func testSeconds_dOperations() {
        let lhs = Seconds_d(6)
        let rhs = Seconds_d(3)
        XCTAssertEqual(lhs + rhs, Seconds_d(9))
        XCTAssertEqual(lhs - rhs, Seconds_d(3))
        XCTAssertEqual(lhs * rhs, Seconds_d(18))
        XCTAssertEqual(lhs / rhs, Seconds_d(2))
    }

    func testSeconds_dTimesEqual() {
        var this = Seconds_d(3)
        this *= Seconds_d(4)
        XCTAssertEqual(this, Seconds_d(12))
    }

    func testSeconds_dDivideEqual() {
        var this = Seconds_d(6)
        this /= Seconds_d(3)
        XCTAssertEqual(this, Seconds_d(2))
    }

    func testSeconds_dRound() {
        var expected = Double(5.6)
        expected.round(.up)
        var result = Seconds_d(5.6)
        result.round(.up)
        XCTAssertEqual(result, Seconds_d(expected))
    }

    func testSeconds_dDistanceTo() {
        let original = Double(5.0)
        let other = Double(23)
        let expected = original.distance(to: other)
        XCTAssertEqual(Seconds_d(original).distance(to: Seconds_d(other)), expected)
    }

    func testSeconds_dAdvancedBy() {
        let original = Double(5)
        let expected = original.advanced(by: 3)
        XCTAssertEqual(Seconds_d(original).advanced(by: 3), Seconds_d(expected))
    }

}

final class MicrosecondsConversionTests: XCTestCase {

    func testMicroseconds_tToMicroseconds_uTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testMicroseconds_tToMicroseconds_fTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testMicroseconds_tToMicroseconds_dTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testMicroseconds_tToMilliseconds_tTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testMicroseconds_tToMilliseconds_uTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testMicroseconds_tToMilliseconds_fTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testMicroseconds_tToMilliseconds_dTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testMicroseconds_tToSeconds_tTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMicroseconds_tToSeconds_uTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMicroseconds_tToSeconds_fTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMicroseconds_tToSeconds_dTimeConversions() {
        let original = Microseconds_t(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMicroseconds_tConversions() {
        let ctype1 = microseconds_t(5)
        let swiftType1 = Microseconds_t(rawValue: ctype1)
        let ctype2 = us_t_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMicroseconds_tInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.microseconds_t(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMicroseconds_tInt8Inits() {
        let raw = Int8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_us_t(5)
        let expected2 = Int8(
            us_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(us_t_to_i8(ctype))
        )
    }

    func testMicroseconds_tInt8RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_i8(raw)
        let expected = Microseconds_t(Int8(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeInt8Init() {
        let raw = Microseconds_t(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tInt16Inits() {
        let raw = Int16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_us_t(5)
        let expected2 = Int16(
            us_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(us_t_to_i16(ctype))
        )
    }

    func testMicroseconds_tInt16RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_i16(raw)
        let expected = Microseconds_t(Int16(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeInt16Init() {
        let raw = Microseconds_t(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tInt32Inits() {
        let raw = Int32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_t(5)
        let expected2 = Int32(
            us_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(us_t_to_i32(ctype))
        )
    }

    func testMicroseconds_tInt32RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_i32(raw)
        let expected = Microseconds_t(Int32(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeInt32Init() {
        let raw = Microseconds_t(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tInt64Inits() {
        let raw = Int64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_t(5)
        let expected2 = Int64(
            us_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(us_t_to_i64(ctype))
        )
    }

    func testMicroseconds_tInt64RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_i64(raw)
        let expected = Microseconds_t(Int64(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeInt64Init() {
        let raw = Microseconds_t(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tIntInits() {
        let raw = Int(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_t(5)
        let expected2 = Int(
            us_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(us_t_to_i64(ctype))
        )
    }

    func testMicroseconds_tIntRawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_i64(raw)
        let expected = Microseconds_t(Int(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeIntInit() {
        let raw = Microseconds_t(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tCIntInits() {
        let raw = CInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_t(5)
        let expected2 = CInt(
            us_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(us_t_to_i32(ctype))
        )
    }

    func testMicroseconds_tCIntRawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_i32(raw)
        let expected = Microseconds_t(CInt(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeCIntInit() {
        let raw = Microseconds_t(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_us_t(5)
        let expected2 = UInt8(
            us_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(us_t_to_u8(ctype))
        )
    }

    func testMicroseconds_tUInt8RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_u8(raw)
        let expected = Microseconds_t(UInt8(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeUInt8Init() {
        let raw = Microseconds_t(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_us_t(5)
        let expected2 = UInt16(
            us_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(us_t_to_u16(ctype))
        )
    }

    func testMicroseconds_tUInt16RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_u16(raw)
        let expected = Microseconds_t(UInt16(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeUInt16Init() {
        let raw = Microseconds_t(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_t(5)
        let expected2 = UInt32(
            us_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(us_t_to_u32(ctype))
        )
    }

    func testMicroseconds_tUInt32RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_u32(raw)
        let expected = Microseconds_t(UInt32(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeUInt32Init() {
        let raw = Microseconds_t(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_t(5)
        let expected2 = UInt64(
            us_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(us_t_to_u64(ctype))
        )
    }

    func testMicroseconds_tUInt64RawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_u64(raw)
        let expected = Microseconds_t(UInt64(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeUInt64Init() {
        let raw = Microseconds_t(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tUIntInits() {
        let raw = UInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_t(5)
        let expected2 = UInt(
            us_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(us_t_to_u64(ctype))
        )
    }

    func testMicroseconds_tUIntRawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_u64(raw)
        let expected = Microseconds_t(UInt(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeUIntInit() {
        let raw = Microseconds_t(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_t(5)
        let expected2 = CUnsignedInt(
            us_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(us_t_to_u32(ctype))
        )
    }

    func testMicroseconds_tCUnsignedIntRawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_u32(raw)
        let expected = Microseconds_t(CUnsignedInt(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeCUnsignedIntInit() {
        let raw = Microseconds_t(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tFloatInits() {
        let raw = Float(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_us_t(5)
        let expected2 = Float(
            us_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(us_t_to_f(ctype))
        )
    }

    func testMicroseconds_tFloatRawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_f(raw)
        let expected = Microseconds_t(Float(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeFloatInit() {
        let raw = Microseconds_t(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_tDoubleInits() {
        let raw = Double(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_us_t(5)
        let expected2 = Double(
            us_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_us_t(5)
        let expected = Microseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(us_t_to_d(ctype))
        )
    }

    func testMicroseconds_tDoubleRawValueInit() {
        let raw = microseconds_t(5)
        let ctype = us_t_to_d(raw)
        let expected = Microseconds_t(Double(ctype))
        XCTAssertEqual(Microseconds_t(rawValue: raw), expected)
    }

    func testMicroseconds_tTimeDoubleInit() {
        let raw = Microseconds_t(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testMicroseconds_uToMicroseconds_tTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testMicroseconds_uToMicroseconds_fTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testMicroseconds_uToMicroseconds_dTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testMicroseconds_uToMilliseconds_tTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testMicroseconds_uToMilliseconds_uTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testMicroseconds_uToMilliseconds_fTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testMicroseconds_uToMilliseconds_dTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testMicroseconds_uToSeconds_tTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMicroseconds_uToSeconds_uTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMicroseconds_uToSeconds_fTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMicroseconds_uToSeconds_dTimeConversions() {
        let original = Microseconds_u(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMicroseconds_uConversions() {
        let ctype1 = microseconds_u(5)
        let swiftType1 = Microseconds_u(rawValue: ctype1)
        let ctype2 = us_u_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMicroseconds_uInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.microseconds_u(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMicroseconds_uInt8Inits() {
        let raw = Int8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_us_u(5)
        let expected2 = Int8(
            us_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(us_u_to_i8(ctype))
        )
    }

    func testMicroseconds_uInt8RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_i8(raw)
        let expected = Microseconds_u(Int8(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeInt8Init() {
        let raw = Microseconds_u(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uInt16Inits() {
        let raw = Int16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_us_u(5)
        let expected2 = Int16(
            us_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(us_u_to_i16(ctype))
        )
    }

    func testMicroseconds_uInt16RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_i16(raw)
        let expected = Microseconds_u(Int16(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeInt16Init() {
        let raw = Microseconds_u(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uInt32Inits() {
        let raw = Int32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_u(5)
        let expected2 = Int32(
            us_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(us_u_to_i32(ctype))
        )
    }

    func testMicroseconds_uInt32RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_i32(raw)
        let expected = Microseconds_u(Int32(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeInt32Init() {
        let raw = Microseconds_u(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uInt64Inits() {
        let raw = Int64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_u(5)
        let expected2 = Int64(
            us_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(us_u_to_i64(ctype))
        )
    }

    func testMicroseconds_uInt64RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_i64(raw)
        let expected = Microseconds_u(Int64(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeInt64Init() {
        let raw = Microseconds_u(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uIntInits() {
        let raw = Int(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_u(5)
        let expected2 = Int(
            us_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(us_u_to_i64(ctype))
        )
    }

    func testMicroseconds_uIntRawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_i64(raw)
        let expected = Microseconds_u(Int(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeIntInit() {
        let raw = Microseconds_u(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uCIntInits() {
        let raw = CInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_u(5)
        let expected2 = CInt(
            us_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(us_u_to_i32(ctype))
        )
    }

    func testMicroseconds_uCIntRawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_i32(raw)
        let expected = Microseconds_u(CInt(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeCIntInit() {
        let raw = Microseconds_u(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_us_u(5)
        let expected2 = UInt8(
            us_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(us_u_to_u8(ctype))
        )
    }

    func testMicroseconds_uUInt8RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_u8(raw)
        let expected = Microseconds_u(UInt8(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeUInt8Init() {
        let raw = Microseconds_u(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_us_u(5)
        let expected2 = UInt16(
            us_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(us_u_to_u16(ctype))
        )
    }

    func testMicroseconds_uUInt16RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_u16(raw)
        let expected = Microseconds_u(UInt16(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeUInt16Init() {
        let raw = Microseconds_u(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_u(5)
        let expected2 = UInt32(
            us_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(us_u_to_u32(ctype))
        )
    }

    func testMicroseconds_uUInt32RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_u32(raw)
        let expected = Microseconds_u(UInt32(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeUInt32Init() {
        let raw = Microseconds_u(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_u(5)
        let expected2 = UInt64(
            us_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(us_u_to_u64(ctype))
        )
    }

    func testMicroseconds_uUInt64RawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_u64(raw)
        let expected = Microseconds_u(UInt64(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeUInt64Init() {
        let raw = Microseconds_u(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uUIntInits() {
        let raw = UInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_u(5)
        let expected2 = UInt(
            us_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(us_u_to_u64(ctype))
        )
    }

    func testMicroseconds_uUIntRawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_u64(raw)
        let expected = Microseconds_u(UInt(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeUIntInit() {
        let raw = Microseconds_u(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_u(5)
        let expected2 = CUnsignedInt(
            us_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(us_u_to_u32(ctype))
        )
    }

    func testMicroseconds_uCUnsignedIntRawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_u32(raw)
        let expected = Microseconds_u(CUnsignedInt(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeCUnsignedIntInit() {
        let raw = Microseconds_u(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uFloatInits() {
        let raw = Float(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_us_u(5)
        let expected2 = Float(
            us_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(us_u_to_f(ctype))
        )
    }

    func testMicroseconds_uFloatRawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_f(raw)
        let expected = Microseconds_u(Float(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeFloatInit() {
        let raw = Microseconds_u(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_uDoubleInits() {
        let raw = Double(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_us_u(5)
        let expected2 = Double(
            us_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_us_u(5)
        let expected = Microseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(us_u_to_d(ctype))
        )
    }

    func testMicroseconds_uDoubleRawValueInit() {
        let raw = microseconds_u(5)
        let ctype = us_u_to_d(raw)
        let expected = Microseconds_u(Double(ctype))
        XCTAssertEqual(Microseconds_u(rawValue: raw), expected)
    }

    func testMicroseconds_uTimeDoubleInit() {
        let raw = Microseconds_u(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testMicroseconds_fToMicroseconds_tTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testMicroseconds_fToMicroseconds_uTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testMicroseconds_fToMicroseconds_dTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testMicroseconds_fToMilliseconds_tTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testMicroseconds_fToMilliseconds_uTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testMicroseconds_fToMilliseconds_fTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testMicroseconds_fToMilliseconds_dTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testMicroseconds_fToSeconds_tTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMicroseconds_fToSeconds_uTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMicroseconds_fToSeconds_fTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMicroseconds_fToSeconds_dTimeConversions() {
        let original = Microseconds_f(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMicroseconds_fConversions() {
        let ctype1 = microseconds_f(5)
        let swiftType1 = Microseconds_f(rawValue: ctype1)
        let ctype2 = us_f_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMicroseconds_fInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.microseconds_f(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMicroseconds_fInt8Inits() {
        let raw = Int8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_us_f(5)
        let expected2 = Int8(
            us_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(us_f_to_i8(ctype))
        )
    }

    func testMicroseconds_fInt8RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_i8(raw)
        let expected = Microseconds_f(Int8(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeInt8Init() {
        let raw = Microseconds_f(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fInt16Inits() {
        let raw = Int16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_us_f(5)
        let expected2 = Int16(
            us_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(us_f_to_i16(ctype))
        )
    }

    func testMicroseconds_fInt16RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_i16(raw)
        let expected = Microseconds_f(Int16(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeInt16Init() {
        let raw = Microseconds_f(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fInt32Inits() {
        let raw = Int32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_f(5)
        let expected2 = Int32(
            us_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(us_f_to_i32(ctype))
        )
    }

    func testMicroseconds_fInt32RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_i32(raw)
        let expected = Microseconds_f(Int32(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeInt32Init() {
        let raw = Microseconds_f(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fInt64Inits() {
        let raw = Int64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_f(5)
        let expected2 = Int64(
            us_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(us_f_to_i64(ctype))
        )
    }

    func testMicroseconds_fInt64RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_i64(raw)
        let expected = Microseconds_f(Int64(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeInt64Init() {
        let raw = Microseconds_f(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fIntInits() {
        let raw = Int(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_f(5)
        let expected2 = Int(
            us_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(us_f_to_i64(ctype))
        )
    }

    func testMicroseconds_fIntRawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_i64(raw)
        let expected = Microseconds_f(Int(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeIntInit() {
        let raw = Microseconds_f(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fCIntInits() {
        let raw = CInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_f(5)
        let expected2 = CInt(
            us_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(us_f_to_i32(ctype))
        )
    }

    func testMicroseconds_fCIntRawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_i32(raw)
        let expected = Microseconds_f(CInt(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeCIntInit() {
        let raw = Microseconds_f(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_us_f(5)
        let expected2 = UInt8(
            us_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(us_f_to_u8(ctype))
        )
    }

    func testMicroseconds_fUInt8RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_u8(raw)
        let expected = Microseconds_f(UInt8(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeUInt8Init() {
        let raw = Microseconds_f(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_us_f(5)
        let expected2 = UInt16(
            us_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(us_f_to_u16(ctype))
        )
    }

    func testMicroseconds_fUInt16RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_u16(raw)
        let expected = Microseconds_f(UInt16(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeUInt16Init() {
        let raw = Microseconds_f(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_f(5)
        let expected2 = UInt32(
            us_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(us_f_to_u32(ctype))
        )
    }

    func testMicroseconds_fUInt32RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_u32(raw)
        let expected = Microseconds_f(UInt32(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeUInt32Init() {
        let raw = Microseconds_f(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_f(5)
        let expected2 = UInt64(
            us_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(us_f_to_u64(ctype))
        )
    }

    func testMicroseconds_fUInt64RawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_u64(raw)
        let expected = Microseconds_f(UInt64(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeUInt64Init() {
        let raw = Microseconds_f(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fUIntInits() {
        let raw = UInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_f(5)
        let expected2 = UInt(
            us_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(us_f_to_u64(ctype))
        )
    }

    func testMicroseconds_fUIntRawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_u64(raw)
        let expected = Microseconds_f(UInt(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeUIntInit() {
        let raw = Microseconds_f(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_f(5)
        let expected2 = CUnsignedInt(
            us_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(us_f_to_u32(ctype))
        )
    }

    func testMicroseconds_fCUnsignedIntRawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_u32(raw)
        let expected = Microseconds_f(CUnsignedInt(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeCUnsignedIntInit() {
        let raw = Microseconds_f(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fFloatInits() {
        let raw = Float(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_us_f(5)
        let expected2 = Float(
            us_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(us_f_to_f(ctype))
        )
    }

    func testMicroseconds_fFloatRawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_f(raw)
        let expected = Microseconds_f(Float(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeFloatInit() {
        let raw = Microseconds_f(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_fDoubleInits() {
        let raw = Double(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_us_f(5)
        let expected2 = Double(
            us_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_us_f(5)
        let expected = Microseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(us_f_to_d(ctype))
        )
    }

    func testMicroseconds_fDoubleRawValueInit() {
        let raw = microseconds_f(5)
        let ctype = us_f_to_d(raw)
        let expected = Microseconds_f(Double(ctype))
        XCTAssertEqual(Microseconds_f(rawValue: raw), expected)
    }

    func testMicroseconds_fTimeDoubleInit() {
        let raw = Microseconds_f(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testMicroseconds_dToMicroseconds_tTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testMicroseconds_dToMicroseconds_uTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testMicroseconds_dToMicroseconds_fTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testMicroseconds_dToMilliseconds_tTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testMicroseconds_dToMilliseconds_uTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testMicroseconds_dToMilliseconds_fTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testMicroseconds_dToMilliseconds_dTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testMicroseconds_dToSeconds_tTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMicroseconds_dToSeconds_uTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMicroseconds_dToSeconds_fTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMicroseconds_dToSeconds_dTimeConversions() {
        let original = Microseconds_d(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMicroseconds_dConversions() {
        let ctype1 = microseconds_d(5)
        let swiftType1 = Microseconds_d(rawValue: ctype1)
        let ctype2 = us_d_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMicroseconds_dInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.microseconds_d(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMicroseconds_dInt8Inits() {
        let raw = Int8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_us_d(5)
        let expected2 = Int8(
            us_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(us_d_to_i8(ctype))
        )
    }

    func testMicroseconds_dInt8RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_i8(raw)
        let expected = Microseconds_d(Int8(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeInt8Init() {
        let raw = Microseconds_d(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dInt16Inits() {
        let raw = Int16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_us_d(5)
        let expected2 = Int16(
            us_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(us_d_to_i16(ctype))
        )
    }

    func testMicroseconds_dInt16RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_i16(raw)
        let expected = Microseconds_d(Int16(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeInt16Init() {
        let raw = Microseconds_d(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dInt32Inits() {
        let raw = Int32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_d(5)
        let expected2 = Int32(
            us_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(us_d_to_i32(ctype))
        )
    }

    func testMicroseconds_dInt32RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_i32(raw)
        let expected = Microseconds_d(Int32(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeInt32Init() {
        let raw = Microseconds_d(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dInt64Inits() {
        let raw = Int64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_d(5)
        let expected2 = Int64(
            us_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(us_d_to_i64(ctype))
        )
    }

    func testMicroseconds_dInt64RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_i64(raw)
        let expected = Microseconds_d(Int64(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeInt64Init() {
        let raw = Microseconds_d(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dIntInits() {
        let raw = Int(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_us_d(5)
        let expected2 = Int(
            us_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(us_d_to_i64(ctype))
        )
    }

    func testMicroseconds_dIntRawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_i64(raw)
        let expected = Microseconds_d(Int(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeIntInit() {
        let raw = Microseconds_d(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dCIntInits() {
        let raw = CInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_us_d(5)
        let expected2 = CInt(
            us_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(us_d_to_i32(ctype))
        )
    }

    func testMicroseconds_dCIntRawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_i32(raw)
        let expected = Microseconds_d(CInt(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeCIntInit() {
        let raw = Microseconds_d(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_us_d(5)
        let expected2 = UInt8(
            us_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(us_d_to_u8(ctype))
        )
    }

    func testMicroseconds_dUInt8RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_u8(raw)
        let expected = Microseconds_d(UInt8(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeUInt8Init() {
        let raw = Microseconds_d(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_us_d(5)
        let expected2 = UInt16(
            us_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(us_d_to_u16(ctype))
        )
    }

    func testMicroseconds_dUInt16RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_u16(raw)
        let expected = Microseconds_d(UInt16(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeUInt16Init() {
        let raw = Microseconds_d(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_d(5)
        let expected2 = UInt32(
            us_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(us_d_to_u32(ctype))
        )
    }

    func testMicroseconds_dUInt32RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_u32(raw)
        let expected = Microseconds_d(UInt32(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeUInt32Init() {
        let raw = Microseconds_d(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_d(5)
        let expected2 = UInt64(
            us_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(us_d_to_u64(ctype))
        )
    }

    func testMicroseconds_dUInt64RawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_u64(raw)
        let expected = Microseconds_d(UInt64(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeUInt64Init() {
        let raw = Microseconds_d(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dUIntInits() {
        let raw = UInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_us_d(5)
        let expected2 = UInt(
            us_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(us_d_to_u64(ctype))
        )
    }

    func testMicroseconds_dUIntRawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_u64(raw)
        let expected = Microseconds_d(UInt(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeUIntInit() {
        let raw = Microseconds_d(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_us_d(5)
        let expected2 = CUnsignedInt(
            us_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(us_d_to_u32(ctype))
        )
    }

    func testMicroseconds_dCUnsignedIntRawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_u32(raw)
        let expected = Microseconds_d(CUnsignedInt(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeCUnsignedIntInit() {
        let raw = Microseconds_d(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dFloatInits() {
        let raw = Float(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_us_d(5)
        let expected2 = Float(
            us_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(us_d_to_f(ctype))
        )
    }

    func testMicroseconds_dFloatRawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_f(raw)
        let expected = Microseconds_d(Float(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeFloatInit() {
        let raw = Microseconds_d(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMicroseconds_dDoubleInits() {
        let raw = Double(5)
        let expected = Time(microseconds: raw)
        let result = Time.microseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_us_d(5)
        let expected2 = Double(
            us_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMicroseconds_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_us_d(5)
        let expected = Microseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(us_d_to_d(ctype))
        )
    }

    func testMicroseconds_dDoubleRawValueInit() {
        let raw = microseconds_d(5)
        let ctype = us_d_to_d(raw)
        let expected = Microseconds_d(Double(ctype))
        XCTAssertEqual(Microseconds_d(rawValue: raw), expected)
    }

    func testMicroseconds_dTimeDoubleInit() {
        let raw = Microseconds_d(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .microseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class MillisecondsConversionTests: XCTestCase {

    func testMilliseconds_tToMicroseconds_tTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testMilliseconds_tToMicroseconds_uTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testMilliseconds_tToMicroseconds_fTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testMilliseconds_tToMicroseconds_dTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testMilliseconds_tToMilliseconds_uTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testMilliseconds_tToMilliseconds_fTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testMilliseconds_tToMilliseconds_dTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testMilliseconds_tToSeconds_tTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMilliseconds_tToSeconds_uTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMilliseconds_tToSeconds_fTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMilliseconds_tToSeconds_dTimeConversions() {
        let original = Milliseconds_t(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMilliseconds_tConversions() {
        let ctype1 = milliseconds_t(5)
        let swiftType1 = Milliseconds_t(rawValue: ctype1)
        let ctype2 = ms_t_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMilliseconds_tInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.milliseconds_t(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMilliseconds_tInt8Inits() {
        let raw = Int8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_ms_t(5)
        let expected2 = Int8(
            ms_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(ms_t_to_i8(ctype))
        )
    }

    func testMilliseconds_tInt8RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_i8(raw)
        let expected = Milliseconds_t(Int8(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeInt8Init() {
        let raw = Milliseconds_t(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tInt16Inits() {
        let raw = Int16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_ms_t(5)
        let expected2 = Int16(
            ms_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(ms_t_to_i16(ctype))
        )
    }

    func testMilliseconds_tInt16RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_i16(raw)
        let expected = Milliseconds_t(Int16(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeInt16Init() {
        let raw = Milliseconds_t(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tInt32Inits() {
        let raw = Int32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_t(5)
        let expected2 = Int32(
            ms_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(ms_t_to_i32(ctype))
        )
    }

    func testMilliseconds_tInt32RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_i32(raw)
        let expected = Milliseconds_t(Int32(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeInt32Init() {
        let raw = Milliseconds_t(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tInt64Inits() {
        let raw = Int64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_t(5)
        let expected2 = Int64(
            ms_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(ms_t_to_i64(ctype))
        )
    }

    func testMilliseconds_tInt64RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_i64(raw)
        let expected = Milliseconds_t(Int64(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeInt64Init() {
        let raw = Milliseconds_t(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tIntInits() {
        let raw = Int(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_t(5)
        let expected2 = Int(
            ms_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(ms_t_to_i64(ctype))
        )
    }

    func testMilliseconds_tIntRawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_i64(raw)
        let expected = Milliseconds_t(Int(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeIntInit() {
        let raw = Milliseconds_t(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tCIntInits() {
        let raw = CInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_t(5)
        let expected2 = CInt(
            ms_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(ms_t_to_i32(ctype))
        )
    }

    func testMilliseconds_tCIntRawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_i32(raw)
        let expected = Milliseconds_t(CInt(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeCIntInit() {
        let raw = Milliseconds_t(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_ms_t(5)
        let expected2 = UInt8(
            ms_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(ms_t_to_u8(ctype))
        )
    }

    func testMilliseconds_tUInt8RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_u8(raw)
        let expected = Milliseconds_t(UInt8(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeUInt8Init() {
        let raw = Milliseconds_t(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_ms_t(5)
        let expected2 = UInt16(
            ms_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(ms_t_to_u16(ctype))
        )
    }

    func testMilliseconds_tUInt16RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_u16(raw)
        let expected = Milliseconds_t(UInt16(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeUInt16Init() {
        let raw = Milliseconds_t(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_t(5)
        let expected2 = UInt32(
            ms_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(ms_t_to_u32(ctype))
        )
    }

    func testMilliseconds_tUInt32RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_u32(raw)
        let expected = Milliseconds_t(UInt32(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeUInt32Init() {
        let raw = Milliseconds_t(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_t(5)
        let expected2 = UInt64(
            ms_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(ms_t_to_u64(ctype))
        )
    }

    func testMilliseconds_tUInt64RawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_u64(raw)
        let expected = Milliseconds_t(UInt64(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeUInt64Init() {
        let raw = Milliseconds_t(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tUIntInits() {
        let raw = UInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_t(5)
        let expected2 = UInt(
            ms_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(ms_t_to_u64(ctype))
        )
    }

    func testMilliseconds_tUIntRawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_u64(raw)
        let expected = Milliseconds_t(UInt(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeUIntInit() {
        let raw = Milliseconds_t(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_t(5)
        let expected2 = CUnsignedInt(
            ms_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(ms_t_to_u32(ctype))
        )
    }

    func testMilliseconds_tCUnsignedIntRawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_u32(raw)
        let expected = Milliseconds_t(CUnsignedInt(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeCUnsignedIntInit() {
        let raw = Milliseconds_t(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tFloatInits() {
        let raw = Float(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_ms_t(5)
        let expected2 = Float(
            ms_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(ms_t_to_f(ctype))
        )
    }

    func testMilliseconds_tFloatRawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_f(raw)
        let expected = Milliseconds_t(Float(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeFloatInit() {
        let raw = Milliseconds_t(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_tDoubleInits() {
        let raw = Double(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_ms_t(5)
        let expected2 = Double(
            ms_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_ms_t(5)
        let expected = Milliseconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(ms_t_to_d(ctype))
        )
    }

    func testMilliseconds_tDoubleRawValueInit() {
        let raw = milliseconds_t(5)
        let ctype = ms_t_to_d(raw)
        let expected = Milliseconds_t(Double(ctype))
        XCTAssertEqual(Milliseconds_t(rawValue: raw), expected)
    }

    func testMilliseconds_tTimeDoubleInit() {
        let raw = Milliseconds_t(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testMilliseconds_uToMicroseconds_tTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testMilliseconds_uToMicroseconds_uTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testMilliseconds_uToMicroseconds_fTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testMilliseconds_uToMicroseconds_dTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testMilliseconds_uToMilliseconds_tTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testMilliseconds_uToMilliseconds_fTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testMilliseconds_uToMilliseconds_dTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testMilliseconds_uToSeconds_tTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMilliseconds_uToSeconds_uTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMilliseconds_uToSeconds_fTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMilliseconds_uToSeconds_dTimeConversions() {
        let original = Milliseconds_u(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMilliseconds_uConversions() {
        let ctype1 = milliseconds_u(5)
        let swiftType1 = Milliseconds_u(rawValue: ctype1)
        let ctype2 = ms_u_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMilliseconds_uInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.milliseconds_u(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMilliseconds_uInt8Inits() {
        let raw = Int8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_ms_u(5)
        let expected2 = Int8(
            ms_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(ms_u_to_i8(ctype))
        )
    }

    func testMilliseconds_uInt8RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_i8(raw)
        let expected = Milliseconds_u(Int8(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeInt8Init() {
        let raw = Milliseconds_u(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uInt16Inits() {
        let raw = Int16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_ms_u(5)
        let expected2 = Int16(
            ms_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(ms_u_to_i16(ctype))
        )
    }

    func testMilliseconds_uInt16RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_i16(raw)
        let expected = Milliseconds_u(Int16(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeInt16Init() {
        let raw = Milliseconds_u(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uInt32Inits() {
        let raw = Int32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_u(5)
        let expected2 = Int32(
            ms_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(ms_u_to_i32(ctype))
        )
    }

    func testMilliseconds_uInt32RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_i32(raw)
        let expected = Milliseconds_u(Int32(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeInt32Init() {
        let raw = Milliseconds_u(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uInt64Inits() {
        let raw = Int64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_u(5)
        let expected2 = Int64(
            ms_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(ms_u_to_i64(ctype))
        )
    }

    func testMilliseconds_uInt64RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_i64(raw)
        let expected = Milliseconds_u(Int64(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeInt64Init() {
        let raw = Milliseconds_u(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uIntInits() {
        let raw = Int(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_u(5)
        let expected2 = Int(
            ms_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(ms_u_to_i64(ctype))
        )
    }

    func testMilliseconds_uIntRawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_i64(raw)
        let expected = Milliseconds_u(Int(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeIntInit() {
        let raw = Milliseconds_u(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uCIntInits() {
        let raw = CInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_u(5)
        let expected2 = CInt(
            ms_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(ms_u_to_i32(ctype))
        )
    }

    func testMilliseconds_uCIntRawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_i32(raw)
        let expected = Milliseconds_u(CInt(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeCIntInit() {
        let raw = Milliseconds_u(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_ms_u(5)
        let expected2 = UInt8(
            ms_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(ms_u_to_u8(ctype))
        )
    }

    func testMilliseconds_uUInt8RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_u8(raw)
        let expected = Milliseconds_u(UInt8(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeUInt8Init() {
        let raw = Milliseconds_u(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_ms_u(5)
        let expected2 = UInt16(
            ms_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(ms_u_to_u16(ctype))
        )
    }

    func testMilliseconds_uUInt16RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_u16(raw)
        let expected = Milliseconds_u(UInt16(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeUInt16Init() {
        let raw = Milliseconds_u(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_u(5)
        let expected2 = UInt32(
            ms_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(ms_u_to_u32(ctype))
        )
    }

    func testMilliseconds_uUInt32RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_u32(raw)
        let expected = Milliseconds_u(UInt32(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeUInt32Init() {
        let raw = Milliseconds_u(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_u(5)
        let expected2 = UInt64(
            ms_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(ms_u_to_u64(ctype))
        )
    }

    func testMilliseconds_uUInt64RawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_u64(raw)
        let expected = Milliseconds_u(UInt64(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeUInt64Init() {
        let raw = Milliseconds_u(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uUIntInits() {
        let raw = UInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_u(5)
        let expected2 = UInt(
            ms_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(ms_u_to_u64(ctype))
        )
    }

    func testMilliseconds_uUIntRawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_u64(raw)
        let expected = Milliseconds_u(UInt(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeUIntInit() {
        let raw = Milliseconds_u(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_u(5)
        let expected2 = CUnsignedInt(
            ms_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(ms_u_to_u32(ctype))
        )
    }

    func testMilliseconds_uCUnsignedIntRawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_u32(raw)
        let expected = Milliseconds_u(CUnsignedInt(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeCUnsignedIntInit() {
        let raw = Milliseconds_u(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uFloatInits() {
        let raw = Float(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_ms_u(5)
        let expected2 = Float(
            ms_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(ms_u_to_f(ctype))
        )
    }

    func testMilliseconds_uFloatRawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_f(raw)
        let expected = Milliseconds_u(Float(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeFloatInit() {
        let raw = Milliseconds_u(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_uDoubleInits() {
        let raw = Double(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_ms_u(5)
        let expected2 = Double(
            ms_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_ms_u(5)
        let expected = Milliseconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(ms_u_to_d(ctype))
        )
    }

    func testMilliseconds_uDoubleRawValueInit() {
        let raw = milliseconds_u(5)
        let ctype = ms_u_to_d(raw)
        let expected = Milliseconds_u(Double(ctype))
        XCTAssertEqual(Milliseconds_u(rawValue: raw), expected)
    }

    func testMilliseconds_uTimeDoubleInit() {
        let raw = Milliseconds_u(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testMilliseconds_fToMicroseconds_tTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testMilliseconds_fToMicroseconds_uTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testMilliseconds_fToMicroseconds_fTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testMilliseconds_fToMicroseconds_dTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testMilliseconds_fToMilliseconds_tTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testMilliseconds_fToMilliseconds_uTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testMilliseconds_fToMilliseconds_dTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testMilliseconds_fToSeconds_tTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMilliseconds_fToSeconds_uTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMilliseconds_fToSeconds_fTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMilliseconds_fToSeconds_dTimeConversions() {
        let original = Milliseconds_f(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMilliseconds_fConversions() {
        let ctype1 = milliseconds_f(5)
        let swiftType1 = Milliseconds_f(rawValue: ctype1)
        let ctype2 = ms_f_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMilliseconds_fInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.milliseconds_f(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMilliseconds_fInt8Inits() {
        let raw = Int8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_ms_f(5)
        let expected2 = Int8(
            ms_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(ms_f_to_i8(ctype))
        )
    }

    func testMilliseconds_fInt8RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_i8(raw)
        let expected = Milliseconds_f(Int8(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeInt8Init() {
        let raw = Milliseconds_f(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fInt16Inits() {
        let raw = Int16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_ms_f(5)
        let expected2 = Int16(
            ms_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(ms_f_to_i16(ctype))
        )
    }

    func testMilliseconds_fInt16RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_i16(raw)
        let expected = Milliseconds_f(Int16(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeInt16Init() {
        let raw = Milliseconds_f(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fInt32Inits() {
        let raw = Int32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_f(5)
        let expected2 = Int32(
            ms_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(ms_f_to_i32(ctype))
        )
    }

    func testMilliseconds_fInt32RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_i32(raw)
        let expected = Milliseconds_f(Int32(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeInt32Init() {
        let raw = Milliseconds_f(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fInt64Inits() {
        let raw = Int64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_f(5)
        let expected2 = Int64(
            ms_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(ms_f_to_i64(ctype))
        )
    }

    func testMilliseconds_fInt64RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_i64(raw)
        let expected = Milliseconds_f(Int64(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeInt64Init() {
        let raw = Milliseconds_f(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fIntInits() {
        let raw = Int(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_f(5)
        let expected2 = Int(
            ms_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(ms_f_to_i64(ctype))
        )
    }

    func testMilliseconds_fIntRawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_i64(raw)
        let expected = Milliseconds_f(Int(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeIntInit() {
        let raw = Milliseconds_f(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fCIntInits() {
        let raw = CInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_f(5)
        let expected2 = CInt(
            ms_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(ms_f_to_i32(ctype))
        )
    }

    func testMilliseconds_fCIntRawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_i32(raw)
        let expected = Milliseconds_f(CInt(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeCIntInit() {
        let raw = Milliseconds_f(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_ms_f(5)
        let expected2 = UInt8(
            ms_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(ms_f_to_u8(ctype))
        )
    }

    func testMilliseconds_fUInt8RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_u8(raw)
        let expected = Milliseconds_f(UInt8(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeUInt8Init() {
        let raw = Milliseconds_f(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_ms_f(5)
        let expected2 = UInt16(
            ms_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(ms_f_to_u16(ctype))
        )
    }

    func testMilliseconds_fUInt16RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_u16(raw)
        let expected = Milliseconds_f(UInt16(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeUInt16Init() {
        let raw = Milliseconds_f(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_f(5)
        let expected2 = UInt32(
            ms_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(ms_f_to_u32(ctype))
        )
    }

    func testMilliseconds_fUInt32RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_u32(raw)
        let expected = Milliseconds_f(UInt32(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeUInt32Init() {
        let raw = Milliseconds_f(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_f(5)
        let expected2 = UInt64(
            ms_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(ms_f_to_u64(ctype))
        )
    }

    func testMilliseconds_fUInt64RawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_u64(raw)
        let expected = Milliseconds_f(UInt64(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeUInt64Init() {
        let raw = Milliseconds_f(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fUIntInits() {
        let raw = UInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_f(5)
        let expected2 = UInt(
            ms_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(ms_f_to_u64(ctype))
        )
    }

    func testMilliseconds_fUIntRawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_u64(raw)
        let expected = Milliseconds_f(UInt(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeUIntInit() {
        let raw = Milliseconds_f(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_f(5)
        let expected2 = CUnsignedInt(
            ms_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(ms_f_to_u32(ctype))
        )
    }

    func testMilliseconds_fCUnsignedIntRawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_u32(raw)
        let expected = Milliseconds_f(CUnsignedInt(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeCUnsignedIntInit() {
        let raw = Milliseconds_f(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fFloatInits() {
        let raw = Float(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_ms_f(5)
        let expected2 = Float(
            ms_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(ms_f_to_f(ctype))
        )
    }

    func testMilliseconds_fFloatRawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_f(raw)
        let expected = Milliseconds_f(Float(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeFloatInit() {
        let raw = Milliseconds_f(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_fDoubleInits() {
        let raw = Double(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_ms_f(5)
        let expected2 = Double(
            ms_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_ms_f(5)
        let expected = Milliseconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(ms_f_to_d(ctype))
        )
    }

    func testMilliseconds_fDoubleRawValueInit() {
        let raw = milliseconds_f(5)
        let ctype = ms_f_to_d(raw)
        let expected = Milliseconds_f(Double(ctype))
        XCTAssertEqual(Milliseconds_f(rawValue: raw), expected)
    }

    func testMilliseconds_fTimeDoubleInit() {
        let raw = Milliseconds_f(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testMilliseconds_dToMicroseconds_tTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testMilliseconds_dToMicroseconds_uTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testMilliseconds_dToMicroseconds_fTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testMilliseconds_dToMicroseconds_dTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testMilliseconds_dToMilliseconds_tTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testMilliseconds_dToMilliseconds_uTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testMilliseconds_dToMilliseconds_fTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testMilliseconds_dToSeconds_tTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testMilliseconds_dToSeconds_uTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testMilliseconds_dToSeconds_fTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testMilliseconds_dToSeconds_dTimeConversions() {
        let original = Milliseconds_d(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToMilliseconds_dConversions() {
        let ctype1 = milliseconds_d(5)
        let swiftType1 = Milliseconds_d(rawValue: ctype1)
        let ctype2 = ms_d_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testMilliseconds_dInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.milliseconds_d(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeMilliseconds_dInt8Inits() {
        let raw = Int8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_ms_d(5)
        let expected2 = Int8(
            ms_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(ms_d_to_i8(ctype))
        )
    }

    func testMilliseconds_dInt8RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_i8(raw)
        let expected = Milliseconds_d(Int8(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeInt8Init() {
        let raw = Milliseconds_d(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dInt16Inits() {
        let raw = Int16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_ms_d(5)
        let expected2 = Int16(
            ms_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(ms_d_to_i16(ctype))
        )
    }

    func testMilliseconds_dInt16RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_i16(raw)
        let expected = Milliseconds_d(Int16(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeInt16Init() {
        let raw = Milliseconds_d(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dInt32Inits() {
        let raw = Int32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_d(5)
        let expected2 = Int32(
            ms_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(ms_d_to_i32(ctype))
        )
    }

    func testMilliseconds_dInt32RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_i32(raw)
        let expected = Milliseconds_d(Int32(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeInt32Init() {
        let raw = Milliseconds_d(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dInt64Inits() {
        let raw = Int64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_d(5)
        let expected2 = Int64(
            ms_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(ms_d_to_i64(ctype))
        )
    }

    func testMilliseconds_dInt64RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_i64(raw)
        let expected = Milliseconds_d(Int64(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeInt64Init() {
        let raw = Milliseconds_d(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dIntInits() {
        let raw = Int(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_ms_d(5)
        let expected2 = Int(
            ms_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(ms_d_to_i64(ctype))
        )
    }

    func testMilliseconds_dIntRawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_i64(raw)
        let expected = Milliseconds_d(Int(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeIntInit() {
        let raw = Milliseconds_d(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dCIntInits() {
        let raw = CInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_ms_d(5)
        let expected2 = CInt(
            ms_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(ms_d_to_i32(ctype))
        )
    }

    func testMilliseconds_dCIntRawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_i32(raw)
        let expected = Milliseconds_d(CInt(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeCIntInit() {
        let raw = Milliseconds_d(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_ms_d(5)
        let expected2 = UInt8(
            ms_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(ms_d_to_u8(ctype))
        )
    }

    func testMilliseconds_dUInt8RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_u8(raw)
        let expected = Milliseconds_d(UInt8(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeUInt8Init() {
        let raw = Milliseconds_d(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_ms_d(5)
        let expected2 = UInt16(
            ms_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(ms_d_to_u16(ctype))
        )
    }

    func testMilliseconds_dUInt16RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_u16(raw)
        let expected = Milliseconds_d(UInt16(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeUInt16Init() {
        let raw = Milliseconds_d(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_d(5)
        let expected2 = UInt32(
            ms_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(ms_d_to_u32(ctype))
        )
    }

    func testMilliseconds_dUInt32RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_u32(raw)
        let expected = Milliseconds_d(UInt32(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeUInt32Init() {
        let raw = Milliseconds_d(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_d(5)
        let expected2 = UInt64(
            ms_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(ms_d_to_u64(ctype))
        )
    }

    func testMilliseconds_dUInt64RawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_u64(raw)
        let expected = Milliseconds_d(UInt64(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeUInt64Init() {
        let raw = Milliseconds_d(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dUIntInits() {
        let raw = UInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_ms_d(5)
        let expected2 = UInt(
            ms_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(ms_d_to_u64(ctype))
        )
    }

    func testMilliseconds_dUIntRawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_u64(raw)
        let expected = Milliseconds_d(UInt(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeUIntInit() {
        let raw = Milliseconds_d(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_ms_d(5)
        let expected2 = CUnsignedInt(
            ms_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(ms_d_to_u32(ctype))
        )
    }

    func testMilliseconds_dCUnsignedIntRawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_u32(raw)
        let expected = Milliseconds_d(CUnsignedInt(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeCUnsignedIntInit() {
        let raw = Milliseconds_d(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dFloatInits() {
        let raw = Float(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_ms_d(5)
        let expected2 = Float(
            ms_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(ms_d_to_f(ctype))
        )
    }

    func testMilliseconds_dFloatRawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_f(raw)
        let expected = Milliseconds_d(Float(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeFloatInit() {
        let raw = Milliseconds_d(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeMilliseconds_dDoubleInits() {
        let raw = Double(5)
        let expected = Time(milliseconds: raw)
        let result = Time.milliseconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_ms_d(5)
        let expected2 = Double(
            ms_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testMilliseconds_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_ms_d(5)
        let expected = Milliseconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(ms_d_to_d(ctype))
        )
    }

    func testMilliseconds_dDoubleRawValueInit() {
        let raw = milliseconds_d(5)
        let ctype = ms_d_to_d(raw)
        let expected = Milliseconds_d(Double(ctype))
        XCTAssertEqual(Milliseconds_d(rawValue: raw), expected)
    }

    func testMilliseconds_dTimeDoubleInit() {
        let raw = Milliseconds_d(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .milliseconds_d(raw))
        XCTAssertEqual(category, expected)
    }

}

final class SecondsConversionTests: XCTestCase {

    func testSeconds_tToMicroseconds_tTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testSeconds_tToMicroseconds_uTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testSeconds_tToMicroseconds_fTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testSeconds_tToMicroseconds_dTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testSeconds_tToMilliseconds_tTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testSeconds_tToMilliseconds_uTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testSeconds_tToMilliseconds_fTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testSeconds_tToMilliseconds_dTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testSeconds_tToSeconds_uTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testSeconds_tToSeconds_fTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testSeconds_tToSeconds_dTimeConversions() {
        let original = Seconds_t(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToSeconds_tConversions() {
        let ctype1 = seconds_t(5)
        let swiftType1 = Seconds_t(rawValue: ctype1)
        let ctype2 = s_t_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testSeconds_tInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.seconds_t(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeSeconds_tInt8Inits() {
        let raw = Int8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_s_t(5)
        let expected2 = Int8(
            s_t_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(s_t_to_i8(ctype))
        )
    }

    func testSeconds_tInt8RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_i8(raw)
        let expected = Seconds_t(Int8(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeInt8Init() {
        let raw = Seconds_t(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tInt16Inits() {
        let raw = Int16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_s_t(5)
        let expected2 = Int16(
            s_t_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(s_t_to_i16(ctype))
        )
    }

    func testSeconds_tInt16RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_i16(raw)
        let expected = Seconds_t(Int16(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeInt16Init() {
        let raw = Seconds_t(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tInt32Inits() {
        let raw = Int32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_t(5)
        let expected2 = Int32(
            s_t_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(s_t_to_i32(ctype))
        )
    }

    func testSeconds_tInt32RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_i32(raw)
        let expected = Seconds_t(Int32(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeInt32Init() {
        let raw = Seconds_t(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tInt64Inits() {
        let raw = Int64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_t(5)
        let expected2 = Int64(
            s_t_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(s_t_to_i64(ctype))
        )
    }

    func testSeconds_tInt64RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_i64(raw)
        let expected = Seconds_t(Int64(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeInt64Init() {
        let raw = Seconds_t(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tIntInits() {
        let raw = Int(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_t(5)
        let expected2 = Int(
            s_t_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tIntInits() {
        let raw = Int(5)
        let ctype = i64_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(s_t_to_i64(ctype))
        )
    }

    func testSeconds_tIntRawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_i64(raw)
        let expected = Seconds_t(Int(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeIntInit() {
        let raw = Seconds_t(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tCIntInits() {
        let raw = CInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_t(5)
        let expected2 = CInt(
            s_t_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(s_t_to_i32(ctype))
        )
    }

    func testSeconds_tCIntRawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_i32(raw)
        let expected = Seconds_t(CInt(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeCIntInit() {
        let raw = Seconds_t(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_s_t(5)
        let expected2 = UInt8(
            s_t_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(s_t_to_u8(ctype))
        )
    }

    func testSeconds_tUInt8RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_u8(raw)
        let expected = Seconds_t(UInt8(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeUInt8Init() {
        let raw = Seconds_t(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_s_t(5)
        let expected2 = UInt16(
            s_t_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(s_t_to_u16(ctype))
        )
    }

    func testSeconds_tUInt16RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_u16(raw)
        let expected = Seconds_t(UInt16(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeUInt16Init() {
        let raw = Seconds_t(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_t(5)
        let expected2 = UInt32(
            s_t_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(s_t_to_u32(ctype))
        )
    }

    func testSeconds_tUInt32RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_u32(raw)
        let expected = Seconds_t(UInt32(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeUInt32Init() {
        let raw = Seconds_t(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_t(5)
        let expected2 = UInt64(
            s_t_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(s_t_to_u64(ctype))
        )
    }

    func testSeconds_tUInt64RawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_u64(raw)
        let expected = Seconds_t(UInt64(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeUInt64Init() {
        let raw = Seconds_t(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tUIntInits() {
        let raw = UInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_t(5)
        let expected2 = UInt(
            s_t_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(s_t_to_u64(ctype))
        )
    }

    func testSeconds_tUIntRawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_u64(raw)
        let expected = Seconds_t(UInt(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeUIntInit() {
        let raw = Seconds_t(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_t(5)
        let expected2 = CUnsignedInt(
            s_t_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(s_t_to_u32(ctype))
        )
    }

    func testSeconds_tCUnsignedIntRawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_u32(raw)
        let expected = Seconds_t(CUnsignedInt(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeCUnsignedIntInit() {
        let raw = Seconds_t(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tFloatInits() {
        let raw = Float(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_s_t(5)
        let expected2 = Float(
            s_t_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tFloatInits() {
        let raw = Float(5)
        let ctype = f_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(s_t_to_f(ctype))
        )
    }

    func testSeconds_tFloatRawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_f(raw)
        let expected = Seconds_t(Float(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeFloatInit() {
        let raw = Seconds_t(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_tDoubleInits() {
        let raw = Double(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_s_t(5)
        let expected2 = Double(
            s_t_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_tDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_s_t(5)
        let expected = Seconds_t(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(s_t_to_d(ctype))
        )
    }

    func testSeconds_tDoubleRawValueInit() {
        let raw = seconds_t(5)
        let ctype = s_t_to_d(raw)
        let expected = Seconds_t(Double(ctype))
        XCTAssertEqual(Seconds_t(rawValue: raw), expected)
    }

    func testSeconds_tTimeDoubleInit() {
        let raw = Seconds_t(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_t(raw))
        XCTAssertEqual(category, expected)
    }

    func testSeconds_uToMicroseconds_tTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testSeconds_uToMicroseconds_uTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testSeconds_uToMicroseconds_fTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testSeconds_uToMicroseconds_dTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testSeconds_uToMilliseconds_tTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testSeconds_uToMilliseconds_uTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testSeconds_uToMilliseconds_fTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testSeconds_uToMilliseconds_dTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testSeconds_uToSeconds_tTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testSeconds_uToSeconds_fTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testSeconds_uToSeconds_dTimeConversions() {
        let original = Seconds_u(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToSeconds_uConversions() {
        let ctype1 = seconds_u(5)
        let swiftType1 = Seconds_u(rawValue: ctype1)
        let ctype2 = s_u_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testSeconds_uInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.seconds_u(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeSeconds_uInt8Inits() {
        let raw = Int8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_s_u(5)
        let expected2 = Int8(
            s_u_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(s_u_to_i8(ctype))
        )
    }

    func testSeconds_uInt8RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_i8(raw)
        let expected = Seconds_u(Int8(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeInt8Init() {
        let raw = Seconds_u(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uInt16Inits() {
        let raw = Int16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_s_u(5)
        let expected2 = Int16(
            s_u_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(s_u_to_i16(ctype))
        )
    }

    func testSeconds_uInt16RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_i16(raw)
        let expected = Seconds_u(Int16(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeInt16Init() {
        let raw = Seconds_u(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uInt32Inits() {
        let raw = Int32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_u(5)
        let expected2 = Int32(
            s_u_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(s_u_to_i32(ctype))
        )
    }

    func testSeconds_uInt32RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_i32(raw)
        let expected = Seconds_u(Int32(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeInt32Init() {
        let raw = Seconds_u(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uInt64Inits() {
        let raw = Int64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_u(5)
        let expected2 = Int64(
            s_u_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(s_u_to_i64(ctype))
        )
    }

    func testSeconds_uInt64RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_i64(raw)
        let expected = Seconds_u(Int64(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeInt64Init() {
        let raw = Seconds_u(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uIntInits() {
        let raw = Int(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_u(5)
        let expected2 = Int(
            s_u_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uIntInits() {
        let raw = Int(5)
        let ctype = i64_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(s_u_to_i64(ctype))
        )
    }

    func testSeconds_uIntRawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_i64(raw)
        let expected = Seconds_u(Int(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeIntInit() {
        let raw = Seconds_u(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uCIntInits() {
        let raw = CInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_u(5)
        let expected2 = CInt(
            s_u_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(s_u_to_i32(ctype))
        )
    }

    func testSeconds_uCIntRawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_i32(raw)
        let expected = Seconds_u(CInt(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeCIntInit() {
        let raw = Seconds_u(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_s_u(5)
        let expected2 = UInt8(
            s_u_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(s_u_to_u8(ctype))
        )
    }

    func testSeconds_uUInt8RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_u8(raw)
        let expected = Seconds_u(UInt8(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeUInt8Init() {
        let raw = Seconds_u(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_s_u(5)
        let expected2 = UInt16(
            s_u_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(s_u_to_u16(ctype))
        )
    }

    func testSeconds_uUInt16RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_u16(raw)
        let expected = Seconds_u(UInt16(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeUInt16Init() {
        let raw = Seconds_u(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_u(5)
        let expected2 = UInt32(
            s_u_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(s_u_to_u32(ctype))
        )
    }

    func testSeconds_uUInt32RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_u32(raw)
        let expected = Seconds_u(UInt32(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeUInt32Init() {
        let raw = Seconds_u(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_u(5)
        let expected2 = UInt64(
            s_u_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(s_u_to_u64(ctype))
        )
    }

    func testSeconds_uUInt64RawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_u64(raw)
        let expected = Seconds_u(UInt64(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeUInt64Init() {
        let raw = Seconds_u(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uUIntInits() {
        let raw = UInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_u(5)
        let expected2 = UInt(
            s_u_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(s_u_to_u64(ctype))
        )
    }

    func testSeconds_uUIntRawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_u64(raw)
        let expected = Seconds_u(UInt(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeUIntInit() {
        let raw = Seconds_u(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_u(5)
        let expected2 = CUnsignedInt(
            s_u_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(s_u_to_u32(ctype))
        )
    }

    func testSeconds_uCUnsignedIntRawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_u32(raw)
        let expected = Seconds_u(CUnsignedInt(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeCUnsignedIntInit() {
        let raw = Seconds_u(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uFloatInits() {
        let raw = Float(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_s_u(5)
        let expected2 = Float(
            s_u_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uFloatInits() {
        let raw = Float(5)
        let ctype = f_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(s_u_to_f(ctype))
        )
    }

    func testSeconds_uFloatRawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_f(raw)
        let expected = Seconds_u(Float(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeFloatInit() {
        let raw = Seconds_u(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_uDoubleInits() {
        let raw = Double(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_s_u(5)
        let expected2 = Double(
            s_u_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_uDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_s_u(5)
        let expected = Seconds_u(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(s_u_to_d(ctype))
        )
    }

    func testSeconds_uDoubleRawValueInit() {
        let raw = seconds_u(5)
        let ctype = s_u_to_d(raw)
        let expected = Seconds_u(Double(ctype))
        XCTAssertEqual(Seconds_u(rawValue: raw), expected)
    }

    func testSeconds_uTimeDoubleInit() {
        let raw = Seconds_u(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_u(raw))
        XCTAssertEqual(category, expected)
    }

    func testSeconds_fToMicroseconds_tTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testSeconds_fToMicroseconds_uTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testSeconds_fToMicroseconds_fTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testSeconds_fToMicroseconds_dTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testSeconds_fToMilliseconds_tTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testSeconds_fToMilliseconds_uTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testSeconds_fToMilliseconds_fTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testSeconds_fToMilliseconds_dTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testSeconds_fToSeconds_tTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testSeconds_fToSeconds_uTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testSeconds_fToSeconds_dTimeConversions() {
        let original = Seconds_f(5)
        let category = Time(original)
        let other = category.seconds_d
        XCTAssertEqual(other, Seconds_d(original))
    }

    func testSeconds_dToSeconds_fConversions() {
        let ctype1 = seconds_f(5)
        let swiftType1 = Seconds_f(rawValue: ctype1)
        let ctype2 = s_f_to_s_d(ctype1)
        let swiftType2 = Seconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_d(swiftType1))
    }

    func testSeconds_fInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.seconds_f(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeSeconds_fInt8Inits() {
        let raw = Int8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_s_f(5)
        let expected2 = Int8(
            s_f_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(s_f_to_i8(ctype))
        )
    }

    func testSeconds_fInt8RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_i8(raw)
        let expected = Seconds_f(Int8(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeInt8Init() {
        let raw = Seconds_f(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fInt16Inits() {
        let raw = Int16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_s_f(5)
        let expected2 = Int16(
            s_f_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(s_f_to_i16(ctype))
        )
    }

    func testSeconds_fInt16RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_i16(raw)
        let expected = Seconds_f(Int16(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeInt16Init() {
        let raw = Seconds_f(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fInt32Inits() {
        let raw = Int32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_f(5)
        let expected2 = Int32(
            s_f_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(s_f_to_i32(ctype))
        )
    }

    func testSeconds_fInt32RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_i32(raw)
        let expected = Seconds_f(Int32(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeInt32Init() {
        let raw = Seconds_f(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fInt64Inits() {
        let raw = Int64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_f(5)
        let expected2 = Int64(
            s_f_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(s_f_to_i64(ctype))
        )
    }

    func testSeconds_fInt64RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_i64(raw)
        let expected = Seconds_f(Int64(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeInt64Init() {
        let raw = Seconds_f(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fIntInits() {
        let raw = Int(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_f(5)
        let expected2 = Int(
            s_f_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fIntInits() {
        let raw = Int(5)
        let ctype = i64_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(s_f_to_i64(ctype))
        )
    }

    func testSeconds_fIntRawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_i64(raw)
        let expected = Seconds_f(Int(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeIntInit() {
        let raw = Seconds_f(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fCIntInits() {
        let raw = CInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_f(5)
        let expected2 = CInt(
            s_f_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(s_f_to_i32(ctype))
        )
    }

    func testSeconds_fCIntRawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_i32(raw)
        let expected = Seconds_f(CInt(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeCIntInit() {
        let raw = Seconds_f(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_s_f(5)
        let expected2 = UInt8(
            s_f_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(s_f_to_u8(ctype))
        )
    }

    func testSeconds_fUInt8RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_u8(raw)
        let expected = Seconds_f(UInt8(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeUInt8Init() {
        let raw = Seconds_f(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_s_f(5)
        let expected2 = UInt16(
            s_f_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(s_f_to_u16(ctype))
        )
    }

    func testSeconds_fUInt16RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_u16(raw)
        let expected = Seconds_f(UInt16(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeUInt16Init() {
        let raw = Seconds_f(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_f(5)
        let expected2 = UInt32(
            s_f_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(s_f_to_u32(ctype))
        )
    }

    func testSeconds_fUInt32RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_u32(raw)
        let expected = Seconds_f(UInt32(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeUInt32Init() {
        let raw = Seconds_f(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_f(5)
        let expected2 = UInt64(
            s_f_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(s_f_to_u64(ctype))
        )
    }

    func testSeconds_fUInt64RawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_u64(raw)
        let expected = Seconds_f(UInt64(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeUInt64Init() {
        let raw = Seconds_f(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fUIntInits() {
        let raw = UInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_f(5)
        let expected2 = UInt(
            s_f_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(s_f_to_u64(ctype))
        )
    }

    func testSeconds_fUIntRawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_u64(raw)
        let expected = Seconds_f(UInt(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeUIntInit() {
        let raw = Seconds_f(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_f(5)
        let expected2 = CUnsignedInt(
            s_f_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(s_f_to_u32(ctype))
        )
    }

    func testSeconds_fCUnsignedIntRawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_u32(raw)
        let expected = Seconds_f(CUnsignedInt(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeCUnsignedIntInit() {
        let raw = Seconds_f(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fFloatInits() {
        let raw = Float(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_s_f(5)
        let expected2 = Float(
            s_f_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fFloatInits() {
        let raw = Float(5)
        let ctype = f_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(s_f_to_f(ctype))
        )
    }

    func testSeconds_fFloatRawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_f(raw)
        let expected = Seconds_f(Float(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeFloatInit() {
        let raw = Seconds_f(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_fDoubleInits() {
        let raw = Double(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_s_f(5)
        let expected2 = Double(
            s_f_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_fDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_s_f(5)
        let expected = Seconds_f(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(s_f_to_d(ctype))
        )
    }

    func testSeconds_fDoubleRawValueInit() {
        let raw = seconds_f(5)
        let ctype = s_f_to_d(raw)
        let expected = Seconds_f(Double(ctype))
        XCTAssertEqual(Seconds_f(rawValue: raw), expected)
    }

    func testSeconds_fTimeDoubleInit() {
        let raw = Seconds_f(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_f(raw))
        XCTAssertEqual(category, expected)
    }

    func testSeconds_dToMicroseconds_tTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.microseconds_t
        XCTAssertEqual(other, Microseconds_t(original))
    }

    func testMicroseconds_tToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_us_t(ctype1)
        let swiftType2 = Microseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_t(swiftType1))
    }

    func testSeconds_dToMicroseconds_uTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.microseconds_u
        XCTAssertEqual(other, Microseconds_u(original))
    }

    func testMicroseconds_uToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_us_u(ctype1)
        let swiftType2 = Microseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_u(swiftType1))
    }

    func testSeconds_dToMicroseconds_fTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.microseconds_f
        XCTAssertEqual(other, Microseconds_f(original))
    }

    func testMicroseconds_fToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_us_f(ctype1)
        let swiftType2 = Microseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_f(swiftType1))
    }

    func testSeconds_dToMicroseconds_dTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.microseconds_d
        XCTAssertEqual(other, Microseconds_d(original))
    }

    func testMicroseconds_dToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_us_d(ctype1)
        let swiftType2 = Microseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Microseconds_d(swiftType1))
    }

    func testSeconds_dToMilliseconds_tTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_t
        XCTAssertEqual(other, Milliseconds_t(original))
    }

    func testMilliseconds_tToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_ms_t(ctype1)
        let swiftType2 = Milliseconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_t(swiftType1))
    }

    func testSeconds_dToMilliseconds_uTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_u
        XCTAssertEqual(other, Milliseconds_u(original))
    }

    func testMilliseconds_uToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_ms_u(ctype1)
        let swiftType2 = Milliseconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_u(swiftType1))
    }

    func testSeconds_dToMilliseconds_fTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_f
        XCTAssertEqual(other, Milliseconds_f(original))
    }

    func testMilliseconds_fToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_ms_f(ctype1)
        let swiftType2 = Milliseconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_f(swiftType1))
    }

    func testSeconds_dToMilliseconds_dTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.milliseconds_d
        XCTAssertEqual(other, Milliseconds_d(original))
    }

    func testMilliseconds_dToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_ms_d(ctype1)
        let swiftType2 = Milliseconds_d(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Milliseconds_d(swiftType1))
    }

    func testSeconds_dToSeconds_tTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.seconds_t
        XCTAssertEqual(other, Seconds_t(original))
    }

    func testSeconds_tToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_s_t(ctype1)
        let swiftType2 = Seconds_t(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_t(swiftType1))
    }

    func testSeconds_dToSeconds_uTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.seconds_u
        XCTAssertEqual(other, Seconds_u(original))
    }

    func testSeconds_uToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_s_u(ctype1)
        let swiftType2 = Seconds_u(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_u(swiftType1))
    }

    func testSeconds_dToSeconds_fTimeConversions() {
        let original = Seconds_d(5)
        let category = Time(original)
        let other = category.seconds_f
        XCTAssertEqual(other, Seconds_f(original))
    }

    func testSeconds_fToSeconds_dConversions() {
        let ctype1 = seconds_d(5)
        let swiftType1 = Seconds_d(rawValue: ctype1)
        let ctype2 = s_d_to_s_f(ctype1)
        let swiftType2 = Seconds_f(rawValue: ctype2)
        XCTAssertEqual(swiftType2, Seconds_f(swiftType1))
    }

    func testSeconds_dInitFromTypeEnum() {
        let underlyingType = Time.TimeTypes.seconds_d(5)
        let category = Time(rawValue: underlyingType)
        XCTAssertEqual(category.rawValue, underlyingType)
    }

    func testTimeSeconds_dInt8Inits() {
        let raw = Int8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i8_to_s_d(5)
        let expected2 = Int8(
            s_d_to_i8(ctype)
        )
        let result2 = Int8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dInt8Inits() {
        let raw = Int8(5)
        let ctype = i8_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int8(expected),
            Int8(s_d_to_i8(ctype))
        )
    }

    func testSeconds_dInt8RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_i8(raw)
        let expected = Seconds_d(Int8(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeInt8Init() {
        let raw = Seconds_d(Int8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dInt16Inits() {
        let raw = Int16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i16_to_s_d(5)
        let expected2 = Int16(
            s_d_to_i16(ctype)
        )
        let result2 = Int16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dInt16Inits() {
        let raw = Int16(5)
        let ctype = i16_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int16(expected),
            Int16(s_d_to_i16(ctype))
        )
    }

    func testSeconds_dInt16RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_i16(raw)
        let expected = Seconds_d(Int16(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeInt16Init() {
        let raw = Seconds_d(Int16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dInt32Inits() {
        let raw = Int32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_d(5)
        let expected2 = Int32(
            s_d_to_i32(ctype)
        )
        let result2 = Int32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dInt32Inits() {
        let raw = Int32(5)
        let ctype = i32_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int32(expected),
            Int32(s_d_to_i32(ctype))
        )
    }

    func testSeconds_dInt32RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_i32(raw)
        let expected = Seconds_d(Int32(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeInt32Init() {
        let raw = Seconds_d(Int32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dInt64Inits() {
        let raw = Int64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_d(5)
        let expected2 = Int64(
            s_d_to_i64(ctype)
        )
        let result2 = Int64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dInt64Inits() {
        let raw = Int64(5)
        let ctype = i64_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int64(expected),
            Int64(s_d_to_i64(ctype))
        )
    }

    func testSeconds_dInt64RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_i64(raw)
        let expected = Seconds_d(Int64(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeInt64Init() {
        let raw = Seconds_d(Int64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dIntInits() {
        let raw = Int(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i64_to_s_d(5)
        let expected2 = Int(
            s_d_to_i64(ctype)
        )
        let result2 = Int(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dIntInits() {
        let raw = Int(5)
        let ctype = i64_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Int(expected),
            Int(s_d_to_i64(ctype))
        )
    }

    func testSeconds_dIntRawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_i64(raw)
        let expected = Seconds_d(Int(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeIntInit() {
        let raw = Seconds_d(Int(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dCIntInits() {
        let raw = CInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = i32_to_s_d(5)
        let expected2 = CInt(
            s_d_to_i32(ctype)
        )
        let result2 = CInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dCIntInits() {
        let raw = CInt(5)
        let ctype = i32_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CInt(expected),
            CInt(s_d_to_i32(ctype))
        )
    }

    func testSeconds_dCIntRawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_i32(raw)
        let expected = Seconds_d(CInt(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeCIntInit() {
        let raw = Seconds_d(CInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dUInt8Inits() {
        let raw = UInt8(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u8_to_s_d(5)
        let expected2 = UInt8(
            s_d_to_u8(ctype)
        )
        let result2 = UInt8(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dUInt8Inits() {
        let raw = UInt8(5)
        let ctype = u8_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt8(expected),
            UInt8(s_d_to_u8(ctype))
        )
    }

    func testSeconds_dUInt8RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_u8(raw)
        let expected = Seconds_d(UInt8(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeUInt8Init() {
        let raw = Seconds_d(UInt8(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dUInt16Inits() {
        let raw = UInt16(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u16_to_s_d(5)
        let expected2 = UInt16(
            s_d_to_u16(ctype)
        )
        let result2 = UInt16(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dUInt16Inits() {
        let raw = UInt16(5)
        let ctype = u16_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt16(expected),
            UInt16(s_d_to_u16(ctype))
        )
    }

    func testSeconds_dUInt16RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_u16(raw)
        let expected = Seconds_d(UInt16(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeUInt16Init() {
        let raw = Seconds_d(UInt16(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dUInt32Inits() {
        let raw = UInt32(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_d(5)
        let expected2 = UInt32(
            s_d_to_u32(ctype)
        )
        let result2 = UInt32(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dUInt32Inits() {
        let raw = UInt32(5)
        let ctype = u32_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt32(expected),
            UInt32(s_d_to_u32(ctype))
        )
    }

    func testSeconds_dUInt32RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_u32(raw)
        let expected = Seconds_d(UInt32(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeUInt32Init() {
        let raw = Seconds_d(UInt32(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dUInt64Inits() {
        let raw = UInt64(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_d(5)
        let expected2 = UInt64(
            s_d_to_u64(ctype)
        )
        let result2 = UInt64(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dUInt64Inits() {
        let raw = UInt64(5)
        let ctype = u64_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt64(expected),
            UInt64(s_d_to_u64(ctype))
        )
    }

    func testSeconds_dUInt64RawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_u64(raw)
        let expected = Seconds_d(UInt64(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeUInt64Init() {
        let raw = Seconds_d(UInt64(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dUIntInits() {
        let raw = UInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u64_to_s_d(5)
        let expected2 = UInt(
            s_d_to_u64(ctype)
        )
        let result2 = UInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dUIntInits() {
        let raw = UInt(5)
        let ctype = u64_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            UInt(expected),
            UInt(s_d_to_u64(ctype))
        )
    }

    func testSeconds_dUIntRawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_u64(raw)
        let expected = Seconds_d(UInt(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeUIntInit() {
        let raw = Seconds_d(UInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = u32_to_s_d(5)
        let expected2 = CUnsignedInt(
            s_d_to_u32(ctype)
        )
        let result2 = CUnsignedInt(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dCUnsignedIntInits() {
        let raw = CUnsignedInt(5)
        let ctype = u32_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            CUnsignedInt(expected),
            CUnsignedInt(s_d_to_u32(ctype))
        )
    }

    func testSeconds_dCUnsignedIntRawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_u32(raw)
        let expected = Seconds_d(CUnsignedInt(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeCUnsignedIntInit() {
        let raw = Seconds_d(CUnsignedInt(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dFloatInits() {
        let raw = Float(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = f_to_s_d(5)
        let expected2 = Float(
            s_d_to_f(ctype)
        )
        let result2 = Float(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dFloatInits() {
        let raw = Float(5)
        let ctype = f_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Float(expected),
            Float(s_d_to_f(ctype))
        )
    }

    func testSeconds_dFloatRawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_f(raw)
        let expected = Seconds_d(Float(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeFloatInit() {
        let raw = Seconds_d(Float(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

    func testTimeSeconds_dDoubleInits() {
        let raw = Double(5)
        let expected = Time(seconds: raw)
        let result = Time.seconds(raw)
        XCTAssertEqual(expected, result)
        let ctype = d_to_s_d(5)
        let expected2 = Double(
            s_d_to_d(ctype)
        )
        let result2 = Double(expected)
        XCTAssertEqual(result2, expected2)
    }

    func testSeconds_dDoubleInits() {
        let raw = Double(5)
        let ctype = d_to_s_d(5)
        let expected = Seconds_d(raw)
        XCTAssertEqual(expected.rawValue, ctype)
        XCTAssertEqual(
            Double(expected),
            Double(s_d_to_d(ctype))
        )
    }

    func testSeconds_dDoubleRawValueInit() {
        let raw = seconds_d(5)
        let ctype = s_d_to_d(raw)
        let expected = Seconds_d(Double(ctype))
        XCTAssertEqual(Seconds_d(rawValue: raw), expected)
    }

    func testSeconds_dTimeDoubleInit() {
        let raw = Seconds_d(Double(5))
        let category = Time(raw)
        let expected = Time(rawValue: .seconds_d(raw))
        XCTAssertEqual(category, expected)
    }

}

/// Provides microseconds_t unit tests.
final class Microseconds_tTests: XCTestCase {

    func testmicroseconds_tTomilliseconds_tUsing15Expectingmilliseconds_t151000() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_ms_t(15)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsing25Expectingmilliseconds_t251000() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_ms_t(25)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsing250Expectingmilliseconds_t2501000() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_ms_t(250)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsing0Expectingmilliseconds_t01000() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_ms_t(0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsing2500Expectingmilliseconds_t25001000() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_ms_t(2500)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsing25000Expectingmilliseconds_t250001000() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_ms_t(25000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsing250000Expectingmilliseconds_t2500001000() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_ms_t(250000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsing2500000Expectingmilliseconds_t25000001000() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_ms_t(2500000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsingNeg323Expectingmilliseconds_tNeg3231000() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_ms_t(-323)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsingNeg10Expectingmilliseconds_tNeg101000() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_ms_t(-10)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsingNeg1000Expectingmilliseconds_tNeg10001000() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_ms_t(-1000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsingNeg5Expectingmilliseconds_tNeg51000() {
        let unit = Microseconds_t(-5)
        let expected = us_t_to_ms_t(-5)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsingCInt_minExpectingmilliseconds_tCInt_min1000() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_ms_t(CInt.min)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_tUsingCInt_maxExpectingmilliseconds_tCInt_max1000() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_ms_t(CInt.max)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing15Expectingseconds_t151000000() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_s_t(15)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing25Expectingseconds_t251000000() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_s_t(25)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing250Expectingseconds_t2501000000() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_s_t(250)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing0Expectingseconds_t01000000() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_s_t(0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing2500Expectingseconds_t25001000000() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_s_t(2500)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing25000Expectingseconds_t250001000000() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_s_t(25000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing250000Expectingseconds_t2500001000000() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_s_t(250000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsing2500000Expectingseconds_t25000001000000() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_s_t(2500000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsingNeg323Expectingseconds_tNeg3231000000() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_s_t(-323)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsingNeg10Expectingseconds_tNeg101000000() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_s_t(-10)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsingNeg1000Expectingseconds_tNeg10001000000() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_s_t(-1000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsingNeg5Expectingseconds_tNeg51000000() {
        let unit = Microseconds_t(-5)
        let expected = us_t_to_s_t(-5)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsingCInt_minExpectingseconds_tCInt_min1000000() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_s_t(CInt.min)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_tUsingCInt_maxExpectingseconds_tCInt_max1000000() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_s_t(CInt.max)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_uUsing0Expecting0() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_us_u(0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_uUsingmicroseconds_tCInt_minExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Microseconds_t(microseconds_t(CInt.min))
        let expected = us_t_to_us_u(microseconds_t(CInt.min))
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_uUsingmicroseconds_tCInt_maxExpectingmicroseconds_uCInt_max() {
        let unit = Microseconds_t(microseconds_t(CInt.max))
        let expected = us_t_to_us_u(microseconds_t(CInt.max))
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_uUsing5Expecting5() {
        let unit = Microseconds_t(5)
        let expected = us_t_to_us_u(5)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing15Expectingmilliseconds_u151000() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_ms_u(15)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing25Expectingmilliseconds_u251000() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_ms_u(25)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing250Expectingmilliseconds_u2501000() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_ms_u(250)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing0Expectingmilliseconds_u01000() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_ms_u(0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing2500Expectingmilliseconds_u25001000() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_ms_u(2500)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing25000Expectingmilliseconds_u250001000() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_ms_u(25000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing250000Expectingmilliseconds_u2500001000() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_ms_u(250000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsing2500000Expectingmilliseconds_u25000001000() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_ms_u(2500000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsingNeg323Expecting0() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_ms_u(-323)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsingNeg10Expecting0() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_ms_u(-10)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsingNeg1000Expecting0() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_ms_u(-1000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsingNeg6Expecting0() {
        let unit = Microseconds_t(-6)
        let expected = us_t_to_ms_u(-6)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsingCInt_minExpecting0() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_ms_u(CInt.min)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_uUsingCInt_maxExpectingmilliseconds_uCInt_max1000() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_ms_u(CInt.max)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing15Expectingseconds_u151000000() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_s_u(15)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing25Expectingseconds_u251000000() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_s_u(25)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing250Expectingseconds_u2501000000() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_s_u(250)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing0Expectingseconds_u01000000() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_s_u(0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing2500Expectingseconds_u25001000000() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_s_u(2500)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing25000Expectingseconds_u250001000000() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_s_u(25000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing250000Expectingseconds_u2500001000000() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_s_u(250000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsing2500000Expectingseconds_u25000001000000() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_s_u(2500000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsingNeg323Expecting0() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_s_u(-323)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsingNeg10Expecting0() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_s_u(-10)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsingNeg1000Expecting0() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_s_u(-1000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsingNeg6Expecting0() {
        let unit = Microseconds_t(-6)
        let expected = us_t_to_s_u(-6)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsingCInt_minExpecting0() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_s_u(CInt.min)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_uUsingCInt_maxExpectingseconds_uCInt_max1000000() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_s_u(CInt.max)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_fUsing0Expecting0_0() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_us_f(0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_fUsingmicroseconds_tCInt_minExpectingmicroseconds_fCInt_min() {
        let unit = Microseconds_t(microseconds_t(CInt.min))
        let expected = us_t_to_us_f(microseconds_t(CInt.min))
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_fUsingmicroseconds_tCInt_maxExpectingmicroseconds_fCInt_max() {
        let unit = Microseconds_t(microseconds_t(CInt.max))
        let expected = us_t_to_us_f(microseconds_t(CInt.max))
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_fUsing5Expecting5_0() {
        let unit = Microseconds_t(5)
        let expected = us_t_to_us_f(5)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing15Expectingmilliseconds_f15_01000_0() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_ms_f(15)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing25Expectingmilliseconds_f25_01000_0() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_ms_f(25)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing250Expectingmilliseconds_f250_01000_0() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_ms_f(250)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing0Expectingmilliseconds_f0_01000_0() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_ms_f(0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing2500Expectingmilliseconds_f2500_01000_0() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_ms_f(2500)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing25000Expectingmilliseconds_f25000_01000_0() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_ms_f(25000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing250000Expectingmilliseconds_f250000_01000_0() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_ms_f(250000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsing2500000Expectingmilliseconds_f2500000_01000_0() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_ms_f(2500000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsingNeg323Expectingmilliseconds_fNeg323_01000_0() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_ms_f(-323)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsingNeg10Expectingmilliseconds_fNeg10_01000_0() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_ms_f(-10)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsingNeg1000Expectingmilliseconds_fNeg1000_01000_0() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_ms_f(-1000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsingNeg5Expectingmilliseconds_fNeg5_01000_0() {
        let unit = Microseconds_t(-5)
        let expected = us_t_to_ms_f(-5)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsingCInt_minExpectingmilliseconds_fCInt_min1000_0() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_ms_f(CInt.min)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_fUsingCInt_maxExpectingmilliseconds_fCInt_max1000_0() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_ms_f(CInt.max)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing15Expectingseconds_f15_01000000_0() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_s_f(15)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing25Expectingseconds_f25_01000000_0() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_s_f(25)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing250Expectingseconds_f250_01000000_0() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_s_f(250)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing0Expectingseconds_f0_01000000_0() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_s_f(0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing2500Expectingseconds_f2500_01000000_0() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_s_f(2500)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing25000Expectingseconds_f25000_01000000_0() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_s_f(25000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing250000Expectingseconds_f250000_01000000_0() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_s_f(250000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsing2500000Expectingseconds_f2500000_01000000_0() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_s_f(2500000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsingNeg323Expectingseconds_fNeg323_01000000_0() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_s_f(-323)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsingNeg10Expectingseconds_fNeg10_01000000_0() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_s_f(-10)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsingNeg1000Expectingseconds_fNeg1000_01000000_0() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_s_f(-1000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsingNeg5Expectingseconds_fNeg5_01000000_0() {
        let unit = Microseconds_t(-5)
        let expected = us_t_to_s_f(-5)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsingCInt_minExpectingseconds_fCInt_min1000000_0() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_s_f(CInt.min)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_fUsingCInt_maxExpectingseconds_fCInt_max1000000_0() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_s_f(CInt.max)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_dUsing0Expecting0_0() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_us_d(0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_dUsingmicroseconds_tCInt_minExpectingmicroseconds_dCInt_min() {
        let unit = Microseconds_t(microseconds_t(CInt.min))
        let expected = us_t_to_us_d(microseconds_t(CInt.min))
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_dUsingmicroseconds_tCInt_maxExpectingmicroseconds_dCInt_max() {
        let unit = Microseconds_t(microseconds_t(CInt.max))
        let expected = us_t_to_us_d(microseconds_t(CInt.max))
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomicroseconds_dUsing5Expecting5_0() {
        let unit = Microseconds_t(5)
        let expected = us_t_to_us_d(5)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing15Expectingmilliseconds_d15_01000_0() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_ms_d(15)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing25Expectingmilliseconds_d25_01000_0() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_ms_d(25)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing250Expectingmilliseconds_d250_01000_0() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_ms_d(250)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing0Expectingmilliseconds_d0_01000_0() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_ms_d(0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing2500Expectingmilliseconds_d2500_01000_0() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_ms_d(2500)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing25000Expectingmilliseconds_d25000_01000_0() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_ms_d(25000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing250000Expectingmilliseconds_d250000_01000_0() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_ms_d(250000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsing2500000Expectingmilliseconds_d2500000_01000_0() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_ms_d(2500000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsingNeg323Expectingmilliseconds_dNeg323_01000_0() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_ms_d(-323)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsingNeg10Expectingmilliseconds_dNeg10_01000_0() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_ms_d(-10)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsingNeg1000Expectingmilliseconds_dNeg1000_01000_0() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_ms_d(-1000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsingNeg5Expectingmilliseconds_dNeg5_01000_0() {
        let unit = Microseconds_t(-5)
        let expected = us_t_to_ms_d(-5)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsingCInt_minExpectingmilliseconds_dCInt_min1000_0() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_ms_d(CInt.min)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTomilliseconds_dUsingCInt_maxExpectingmilliseconds_dCInt_max1000_0() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_ms_d(CInt.max)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing15Expectingseconds_d15_01000000_0() {
        let unit = Microseconds_t(15)
        let expected = us_t_to_s_d(15)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing25Expectingseconds_d25_01000000_0() {
        let unit = Microseconds_t(25)
        let expected = us_t_to_s_d(25)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing250Expectingseconds_d250_01000000_0() {
        let unit = Microseconds_t(250)
        let expected = us_t_to_s_d(250)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing0Expectingseconds_d0_01000000_0() {
        let unit = Microseconds_t(0)
        let expected = us_t_to_s_d(0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing2500Expectingseconds_d2500_01000000_0() {
        let unit = Microseconds_t(2500)
        let expected = us_t_to_s_d(2500)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing25000Expectingseconds_d25000_01000000_0() {
        let unit = Microseconds_t(25000)
        let expected = us_t_to_s_d(25000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing250000Expectingseconds_d250000_01000000_0() {
        let unit = Microseconds_t(250000)
        let expected = us_t_to_s_d(250000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsing2500000Expectingseconds_d2500000_01000000_0() {
        let unit = Microseconds_t(2500000)
        let expected = us_t_to_s_d(2500000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsingNeg323Expectingseconds_dNeg323_01000000_0() {
        let unit = Microseconds_t(-323)
        let expected = us_t_to_s_d(-323)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsingNeg10Expectingseconds_dNeg10_01000000_0() {
        let unit = Microseconds_t(-10)
        let expected = us_t_to_s_d(-10)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsingNeg1000Expectingseconds_dNeg1000_01000000_0() {
        let unit = Microseconds_t(-1000)
        let expected = us_t_to_s_d(-1000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsingNeg5Expectingseconds_dNeg5_01000000_0() {
        let unit = Microseconds_t(-5)
        let expected = us_t_to_s_d(-5)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsingCInt_minExpectingseconds_dCInt_min1000000_0() {
        let unit = Microseconds_t(CInt.min)
        let expected = us_t_to_s_d(CInt.min)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tToseconds_dUsingCInt_maxExpectingseconds_dCInt_max1000000_0() {
        let unit = Microseconds_t(CInt.max)
        let expected = us_t_to_s_d(CInt.max)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_tTointUsing0Expecting0() {
        let expected = us_t_to_i(0)
        let result = CInt(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTointUsing5Expecting5() {
        let expected = us_t_to_i(5)
        let result = CInt(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTointUsingmicroseconds_tCInt_minExpectingCIntCInt_min() {
        let expected = us_t_to_i(microseconds_t(CInt.min))
        let result = CInt(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTointUsingmicroseconds_tCInt_maxExpectingCIntCInt_max() {
        let expected = us_t_to_i(microseconds_t(CInt.max))
        let result = CInt(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_tUsing0Expecting0() {
        let expected = i_to_us_t(0)
        let result = Microseconds_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_tUsing5Expecting5() {
        let expected = i_to_us_t(5)
        let result = Microseconds_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint8_tUsing0Expecting0() {
        let expected = us_t_to_i8(0)
        let result = Int8(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint8_tUsing5Expecting5() {
        let expected = us_t_to_i8(5)
        let result = Int8(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint8_tUsingmicroseconds_tCInt_minExpectingInt8Int8_min() {
        let expected = us_t_to_i8(microseconds_t(CInt.min))
        let result = Int8(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint8_tUsingmicroseconds_tCInt_maxExpectingInt8Int8_max() {
        let expected = us_t_to_i8(microseconds_t(CInt.max))
        let result = Int8(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_tUsing0Expecting0() {
        let expected = i8_to_us_t(0)
        let result = Microseconds_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_tUsing5Expecting5() {
        let expected = i8_to_us_t(5)
        let result = Microseconds_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_tUsingInt8Int8_minExpectingmicroseconds_tInt8_min() {
        let expected = i8_to_us_t(Int8(Int8.min))
        let result = Microseconds_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_tUsingInt8Int8_maxExpectingmicroseconds_tInt8_max() {
        let expected = i8_to_us_t(Int8(Int8.max))
        let result = Microseconds_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint16_tUsing0Expecting0() {
        let expected = us_t_to_i16(0)
        let result = Int16(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint16_tUsing5Expecting5() {
        let expected = us_t_to_i16(5)
        let result = Int16(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint16_tUsingmicroseconds_tCInt_minExpectingInt16Int16_min() {
        let expected = us_t_to_i16(microseconds_t(CInt.min))
        let result = Int16(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint16_tUsingmicroseconds_tCInt_maxExpectingInt16Int16_max() {
        let expected = us_t_to_i16(microseconds_t(CInt.max))
        let result = Int16(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_tUsing0Expecting0() {
        let expected = i16_to_us_t(0)
        let result = Microseconds_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_tUsing5Expecting5() {
        let expected = i16_to_us_t(5)
        let result = Microseconds_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_tUsingInt16Int16_minExpectingmicroseconds_tInt16_min() {
        let expected = i16_to_us_t(Int16(Int16.min))
        let result = Microseconds_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_tUsingInt16Int16_maxExpectingmicroseconds_tInt16_max() {
        let expected = i16_to_us_t(Int16(Int16.max))
        let result = Microseconds_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint32_tUsing0Expecting0() {
        let expected = us_t_to_i32(0)
        let result = Int32(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint32_tUsing5Expecting5() {
        let expected = us_t_to_i32(5)
        let result = Int32(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint32_tUsingmicroseconds_tCInt_minExpectingInt32CInt_min() {
        let expected = us_t_to_i32(microseconds_t(CInt.min))
        let result = Int32(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint32_tUsingmicroseconds_tCInt_maxExpectingInt32CInt_max() {
        let expected = us_t_to_i32(microseconds_t(CInt.max))
        let result = Int32(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_tUsing0Expecting0() {
        let expected = i32_to_us_t(0)
        let result = Microseconds_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_tUsing5Expecting5() {
        let expected = i32_to_us_t(5)
        let result = Microseconds_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_tUsingInt32Int32_minExpectingmicroseconds_tCInt_min() {
        let expected = i32_to_us_t(Int32(Int32.min))
        let result = Microseconds_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_tUsingInt32Int32_maxExpectingmicroseconds_tCInt_max() {
        let expected = i32_to_us_t(Int32(Int32.max))
        let result = Microseconds_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint64_tUsing0Expecting0() {
        let expected = us_t_to_i64(0)
        let result = Int64(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint64_tUsing5Expecting5() {
        let expected = us_t_to_i64(5)
        let result = Int64(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint64_tUsingmicroseconds_tCInt_minExpectingInt64CInt_min() {
        let expected = us_t_to_i64(microseconds_t(CInt.min))
        let result = Int64(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tToint64_tUsingmicroseconds_tCInt_maxExpectingInt64CInt_max() {
        let expected = us_t_to_i64(microseconds_t(CInt.max))
        let result = Int64(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_tUsing0Expecting0() {
        let expected = i64_to_us_t(0)
        let result = Microseconds_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_tUsing5Expecting5() {
        let expected = i64_to_us_t(5)
        let result = Microseconds_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_tUsingInt64Int64_minExpectingmicroseconds_tCInt_min() {
        let expected = i64_to_us_t(Int64(Int64.min))
        let result = Microseconds_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_tUsingInt64Int64_maxExpectingmicroseconds_tCInt_max() {
        let expected = i64_to_us_t(Int64(Int64.max))
        let result = Microseconds_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTounsignedintUsing0Expecting0() {
        let expected = us_t_to_u(0)
        let result = CUnsignedInt(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTounsignedintUsing5Expecting5() {
        let expected = us_t_to_u(5)
        let result = CUnsignedInt(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTounsignedintUsingmicroseconds_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = us_t_to_u(microseconds_t(CInt.min))
        let result = CUnsignedInt(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTounsignedintUsingmicroseconds_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = us_t_to_u(microseconds_t(CInt.max))
        let result = CUnsignedInt(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_tUsing0Expecting0() {
        let expected = u_to_us_t(0)
        let result = Microseconds_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_tUsing5Expecting5() {
        let expected = u_to_us_t(5)
        let result = Microseconds_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_tUsingCUnsignedIntCUnsignedInt_minExpectingmicroseconds_tCUnsignedInt_min() {
        let expected = u_to_us_t(CUnsignedInt(CUnsignedInt.min))
        let result = Microseconds_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_tUsingCUnsignedIntCUnsignedInt_maxExpectingmicroseconds_tCInt_max() {
        let expected = u_to_us_t(CUnsignedInt(CUnsignedInt.max))
        let result = Microseconds_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint8_tUsing0Expecting0() {
        let expected = us_t_to_u8(0)
        let result = UInt8(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint8_tUsing5Expecting5() {
        let expected = us_t_to_u8(5)
        let result = UInt8(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint8_tUsingmicroseconds_tCInt_minExpectingUInt8UInt8_min() {
        let expected = us_t_to_u8(microseconds_t(CInt.min))
        let result = UInt8(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint8_tUsingmicroseconds_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = us_t_to_u8(microseconds_t(CInt.max))
        let result = UInt8(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_tUsing0Expecting0() {
        let expected = u8_to_us_t(0)
        let result = Microseconds_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_tUsing5Expecting5() {
        let expected = u8_to_us_t(5)
        let result = Microseconds_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_tUsingUInt8UInt8_minExpectingmicroseconds_tUInt8_min() {
        let expected = u8_to_us_t(UInt8(UInt8.min))
        let result = Microseconds_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_tUsingUInt8UInt8_maxExpectingmicroseconds_tUInt8_max() {
        let expected = u8_to_us_t(UInt8(UInt8.max))
        let result = Microseconds_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint16_tUsing0Expecting0() {
        let expected = us_t_to_u16(0)
        let result = UInt16(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint16_tUsing5Expecting5() {
        let expected = us_t_to_u16(5)
        let result = UInt16(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint16_tUsingmicroseconds_tCInt_minExpectingUInt16UInt16_min() {
        let expected = us_t_to_u16(microseconds_t(CInt.min))
        let result = UInt16(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint16_tUsingmicroseconds_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = us_t_to_u16(microseconds_t(CInt.max))
        let result = UInt16(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_tUsing0Expecting0() {
        let expected = u16_to_us_t(0)
        let result = Microseconds_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_tUsing5Expecting5() {
        let expected = u16_to_us_t(5)
        let result = Microseconds_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_tUsingUInt16UInt16_minExpectingmicroseconds_tUInt16_min() {
        let expected = u16_to_us_t(UInt16(UInt16.min))
        let result = Microseconds_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_tUsingUInt16UInt16_maxExpectingmicroseconds_tUInt16_max() {
        let expected = u16_to_us_t(UInt16(UInt16.max))
        let result = Microseconds_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint32_tUsing0Expecting0() {
        let expected = us_t_to_u32(0)
        let result = UInt32(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint32_tUsing5Expecting5() {
        let expected = us_t_to_u32(5)
        let result = UInt32(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint32_tUsingmicroseconds_tCInt_minExpectingUInt32UInt32_min() {
        let expected = us_t_to_u32(microseconds_t(CInt.min))
        let result = UInt32(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint32_tUsingmicroseconds_tCInt_maxExpectingUInt32CInt_max() {
        let expected = us_t_to_u32(microseconds_t(CInt.max))
        let result = UInt32(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_tUsing0Expecting0() {
        let expected = u32_to_us_t(0)
        let result = Microseconds_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_tUsing5Expecting5() {
        let expected = u32_to_us_t(5)
        let result = Microseconds_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_tUsingUInt32UInt32_minExpectingmicroseconds_tUInt32_min() {
        let expected = u32_to_us_t(UInt32(UInt32.min))
        let result = Microseconds_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_tUsingUInt32UInt32_maxExpectingmicroseconds_tCInt_max() {
        let expected = u32_to_us_t(UInt32(UInt32.max))
        let result = Microseconds_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint64_tUsing0Expecting0() {
        let expected = us_t_to_u64(0)
        let result = UInt64(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint64_tUsing5Expecting5() {
        let expected = us_t_to_u64(5)
        let result = UInt64(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint64_tUsingmicroseconds_tCInt_minExpectingUInt64UInt64_min() {
        let expected = us_t_to_u64(microseconds_t(CInt.min))
        let result = UInt64(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTouint64_tUsingmicroseconds_tCInt_maxExpectingUInt64CInt_max() {
        let expected = us_t_to_u64(microseconds_t(CInt.max))
        let result = UInt64(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_tUsing0Expecting0() {
        let expected = u64_to_us_t(0)
        let result = Microseconds_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_tUsing5Expecting5() {
        let expected = u64_to_us_t(5)
        let result = Microseconds_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_tUsingUInt64UInt64_minExpectingmicroseconds_tUInt64_min() {
        let expected = u64_to_us_t(UInt64(UInt64.min))
        let result = Microseconds_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_tUsingUInt64UInt64_maxExpectingmicroseconds_tCInt_max() {
        let expected = u64_to_us_t(UInt64(UInt64.max))
        let result = Microseconds_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTofloatUsing0Expecting0_0() {
        let expected = us_t_to_f(0)
        let result = Float(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTofloatUsing5Expecting5_0() {
        let expected = us_t_to_f(5)
        let result = Float(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTofloatUsingmicroseconds_tCInt_minExpectingFloatCInt_min() {
        let expected = us_t_to_f(microseconds_t(CInt.min))
        let result = Float(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTofloatUsingmicroseconds_tCInt_maxExpectingFloatCInt_max() {
        let expected = us_t_to_f(microseconds_t(CInt.max))
        let result = Float(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_tUsing0_0Expecting0() {
        let expected = f_to_us_t(0.0)
        let result = Microseconds_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_tUsing5_0Expecting5() {
        let expected = f_to_us_t(5.0)
        let result = Microseconds_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let expected = f_to_us_t(Float(-Float.greatestFiniteMagnitude))
        let result = Microseconds_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_tUsingFloatFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let expected = f_to_us_t(Float(Float.greatestFiniteMagnitude))
        let result = Microseconds_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTodoubleUsing0Expecting0_0() {
        let expected = us_t_to_d(0)
        let result = Double(Microseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTodoubleUsing5Expecting5_0() {
        let expected = us_t_to_d(5)
        let result = Double(Microseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTodoubleUsingmicroseconds_tCInt_minExpectingDoubleCInt_min() {
        let expected = us_t_to_d(microseconds_t(CInt.min))
        let result = Double(Microseconds_t(microseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_tTodoubleUsingmicroseconds_tCInt_maxExpectingDoubleCInt_max() {
        let expected = us_t_to_d(microseconds_t(CInt.max))
        let result = Double(Microseconds_t(microseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_tUsing0_0Expecting0() {
        let expected = d_to_us_t(0.0)
        let result = Microseconds_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_tUsing5_0Expecting5() {
        let expected = d_to_us_t(5.0)
        let result = Microseconds_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let expected = d_to_us_t(Double(-Double.greatestFiniteMagnitude))
        let result = Microseconds_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let expected = d_to_us_t(Double(Double.greatestFiniteMagnitude))
        let result = Microseconds_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides microseconds_u unit tests.
final class Microseconds_uTests: XCTestCase {

    func testmicroseconds_uTomicroseconds_tUsing0Expecting0() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_us_t(0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_tUsingmicroseconds_uCUnsignedInt_minExpectingmicroseconds_tCUnsignedInt_min() {
        let unit = Microseconds_u(microseconds_u(CUnsignedInt.min))
        let expected = us_u_to_us_t(microseconds_u(CUnsignedInt.min))
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_tUsingmicroseconds_uCUnsignedInt_maxExpectingmicroseconds_tCInt_max() {
        let unit = Microseconds_u(microseconds_u(CUnsignedInt.max))
        let expected = us_u_to_us_t(microseconds_u(CUnsignedInt.max))
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_tUsing5Expecting5() {
        let unit = Microseconds_u(5)
        let expected = us_u_to_us_t(5)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing15Expectingmilliseconds_t151000() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_ms_t(15)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing25Expectingmilliseconds_t251000() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_ms_t(25)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing250Expectingmilliseconds_t2501000() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_ms_t(250)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing0Expectingmilliseconds_t01000() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_ms_t(0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing2500Expectingmilliseconds_t25001000() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_ms_t(2500)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing25000Expectingmilliseconds_t250001000() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_ms_t(25000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing250000Expectingmilliseconds_t2500001000() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_ms_t(250000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsing2500000Expectingmilliseconds_t25000001000() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_ms_t(2500000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsingCUnsignedInt_minExpectingmilliseconds_tCUnsignedInt_min1000() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_ms_t(CUnsignedInt.min)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_tUsingCUnsignedInt_maxExpectingmilliseconds_tCUnsignedInt_max1000() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_ms_t(CUnsignedInt.max)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing15Expectingseconds_t151000000() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_s_t(15)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing25Expectingseconds_t251000000() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_s_t(25)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing250Expectingseconds_t2501000000() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_s_t(250)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing0Expectingseconds_t01000000() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_s_t(0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing2500Expectingseconds_t25001000000() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_s_t(2500)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing25000Expectingseconds_t250001000000() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_s_t(25000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing250000Expectingseconds_t2500001000000() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_s_t(250000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsing2500000Expectingseconds_t25000001000000() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_s_t(2500000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsingCUnsignedInt_minExpectingseconds_tCUnsignedInt_min1000000() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_s_t(CUnsignedInt.min)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_tUsingCUnsignedInt_maxExpectingseconds_tCUnsignedInt_max1000000() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_s_t(CUnsignedInt.max)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing15Expectingmilliseconds_u151000() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_ms_u(15)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing25Expectingmilliseconds_u251000() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_ms_u(25)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing250Expectingmilliseconds_u2501000() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_ms_u(250)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing0Expectingmilliseconds_u01000() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_ms_u(0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing2500Expectingmilliseconds_u25001000() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_ms_u(2500)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing25000Expectingmilliseconds_u250001000() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_ms_u(25000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing250000Expectingmilliseconds_u2500001000() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_ms_u(250000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsing2500000Expectingmilliseconds_u25000001000() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_ms_u(2500000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsingCUnsignedInt_minExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_ms_u(CUnsignedInt.min)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_uUsingCUnsignedInt_maxExpectingmilliseconds_uCUnsignedInt_max1000() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_ms_u(CUnsignedInt.max)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing15Expectingseconds_u151000000() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_s_u(15)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing25Expectingseconds_u251000000() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_s_u(25)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing250Expectingseconds_u2501000000() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_s_u(250)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing0Expectingseconds_u01000000() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_s_u(0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing2500Expectingseconds_u25001000000() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_s_u(2500)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing25000Expectingseconds_u250001000000() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_s_u(25000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing250000Expectingseconds_u2500001000000() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_s_u(250000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsing2500000Expectingseconds_u25000001000000() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_s_u(2500000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsingCUnsignedInt_minExpectingseconds_uCUnsignedInt_min() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_s_u(CUnsignedInt.min)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_uUsingCUnsignedInt_maxExpectingseconds_uCUnsignedInt_max1000000() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_s_u(CUnsignedInt.max)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_fUsing0Expecting0_0() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_us_f(0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_fUsingmicroseconds_uCUnsignedInt_minExpectingmicroseconds_fCUnsignedInt_min() {
        let unit = Microseconds_u(microseconds_u(CUnsignedInt.min))
        let expected = us_u_to_us_f(microseconds_u(CUnsignedInt.min))
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_fUsingmicroseconds_uCUnsignedInt_maxExpectingmicroseconds_fCUnsignedInt_max() {
        let unit = Microseconds_u(microseconds_u(CUnsignedInt.max))
        let expected = us_u_to_us_f(microseconds_u(CUnsignedInt.max))
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_fUsing5Expecting5_0() {
        let unit = Microseconds_u(5)
        let expected = us_u_to_us_f(5)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing15Expectingmilliseconds_f15_01000_0() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_ms_f(15)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing25Expectingmilliseconds_f25_01000_0() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_ms_f(25)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing250Expectingmilliseconds_f250_01000_0() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_ms_f(250)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing0Expectingmilliseconds_f0_01000_0() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_ms_f(0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing2500Expectingmilliseconds_f2500_01000_0() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_ms_f(2500)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing25000Expectingmilliseconds_f25000_01000_0() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_ms_f(25000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing250000Expectingmilliseconds_f250000_01000_0() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_ms_f(250000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsing2500000Expectingmilliseconds_f2500000_01000_0() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_ms_f(2500000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsingCUnsignedInt_minExpectingmilliseconds_fCUnsignedInt_min1000_0() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_ms_f(CUnsignedInt.min)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_fUsingCUnsignedInt_maxExpectingmilliseconds_fCUnsignedInt_max1000_0() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_ms_f(CUnsignedInt.max)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing15Expectingseconds_f15_01000000_0() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_s_f(15)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing25Expectingseconds_f25_01000000_0() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_s_f(25)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing250Expectingseconds_f250_01000000_0() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_s_f(250)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing0Expectingseconds_f0_01000000_0() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_s_f(0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing2500Expectingseconds_f2500_01000000_0() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_s_f(2500)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing25000Expectingseconds_f25000_01000000_0() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_s_f(25000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing250000Expectingseconds_f250000_01000000_0() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_s_f(250000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsing2500000Expectingseconds_f2500000_01000000_0() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_s_f(2500000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsingCUnsignedInt_minExpectingseconds_fCUnsignedInt_min1000000_0() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_s_f(CUnsignedInt.min)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_fUsingCUnsignedInt_maxExpectingseconds_fCUnsignedInt_max1000000_0() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_s_f(CUnsignedInt.max)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_dUsing0Expecting0_0() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_us_d(0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_dUsingmicroseconds_uCUnsignedInt_minExpectingmicroseconds_dCUnsignedInt_min() {
        let unit = Microseconds_u(microseconds_u(CUnsignedInt.min))
        let expected = us_u_to_us_d(microseconds_u(CUnsignedInt.min))
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_dUsingmicroseconds_uCUnsignedInt_maxExpectingmicroseconds_dCUnsignedInt_max() {
        let unit = Microseconds_u(microseconds_u(CUnsignedInt.max))
        let expected = us_u_to_us_d(microseconds_u(CUnsignedInt.max))
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomicroseconds_dUsing5Expecting5_0() {
        let unit = Microseconds_u(5)
        let expected = us_u_to_us_d(5)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing15Expectingmilliseconds_d15_01000_0() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_ms_d(15)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing25Expectingmilliseconds_d25_01000_0() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_ms_d(25)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing250Expectingmilliseconds_d250_01000_0() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_ms_d(250)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing0Expectingmilliseconds_d0_01000_0() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_ms_d(0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing2500Expectingmilliseconds_d2500_01000_0() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_ms_d(2500)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing25000Expectingmilliseconds_d25000_01000_0() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_ms_d(25000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing250000Expectingmilliseconds_d250000_01000_0() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_ms_d(250000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsing2500000Expectingmilliseconds_d2500000_01000_0() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_ms_d(2500000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsingCUnsignedInt_minExpectingmilliseconds_dCUnsignedInt_min1000_0() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_ms_d(CUnsignedInt.min)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTomilliseconds_dUsingCUnsignedInt_maxExpectingmilliseconds_dCUnsignedInt_max1000_0() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_ms_d(CUnsignedInt.max)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing15Expectingseconds_d15_01000000_0() {
        let unit = Microseconds_u(15)
        let expected = us_u_to_s_d(15)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing25Expectingseconds_d25_01000000_0() {
        let unit = Microseconds_u(25)
        let expected = us_u_to_s_d(25)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing250Expectingseconds_d250_01000000_0() {
        let unit = Microseconds_u(250)
        let expected = us_u_to_s_d(250)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing0Expectingseconds_d0_01000000_0() {
        let unit = Microseconds_u(0)
        let expected = us_u_to_s_d(0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing2500Expectingseconds_d2500_01000000_0() {
        let unit = Microseconds_u(2500)
        let expected = us_u_to_s_d(2500)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing25000Expectingseconds_d25000_01000000_0() {
        let unit = Microseconds_u(25000)
        let expected = us_u_to_s_d(25000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing250000Expectingseconds_d250000_01000000_0() {
        let unit = Microseconds_u(250000)
        let expected = us_u_to_s_d(250000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsing2500000Expectingseconds_d2500000_01000000_0() {
        let unit = Microseconds_u(2500000)
        let expected = us_u_to_s_d(2500000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsingCUnsignedInt_minExpectingseconds_dCUnsignedInt_min1000000_0() {
        let unit = Microseconds_u(CUnsignedInt.min)
        let expected = us_u_to_s_d(CUnsignedInt.min)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uToseconds_dUsingCUnsignedInt_maxExpectingseconds_dCUnsignedInt_max1000000_0() {
        let unit = Microseconds_u(CUnsignedInt.max)
        let expected = us_u_to_s_d(CUnsignedInt.max)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_uTointUsing0Expecting0() {
        let expected = us_u_to_i(0)
        let result = CInt(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTointUsing5Expecting5() {
        let expected = us_u_to_i(5)
        let result = CInt(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTointUsingmicroseconds_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = us_u_to_i(microseconds_u(CUnsignedInt.min))
        let result = CInt(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTointUsingmicroseconds_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = us_u_to_i(microseconds_u(CUnsignedInt.max))
        let result = CInt(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_uUsing0Expecting0() {
        let expected = i_to_us_u(0)
        let result = Microseconds_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_uUsing5Expecting5() {
        let expected = i_to_us_u(5)
        let result = Microseconds_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_uUsingCIntCInt_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = i_to_us_u(CInt(CInt.min))
        let result = Microseconds_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_uUsingCIntCInt_maxExpectingmicroseconds_uCInt_max() {
        let expected = i_to_us_u(CInt(CInt.max))
        let result = Microseconds_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint8_tUsing0Expecting0() {
        let expected = us_u_to_i8(0)
        let result = Int8(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint8_tUsing5Expecting5() {
        let expected = us_u_to_i8(5)
        let result = Int8(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint8_tUsingmicroseconds_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = us_u_to_i8(microseconds_u(CUnsignedInt.min))
        let result = Int8(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint8_tUsingmicroseconds_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = us_u_to_i8(microseconds_u(CUnsignedInt.max))
        let result = Int8(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_uUsing0Expecting0() {
        let expected = i8_to_us_u(0)
        let result = Microseconds_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_uUsing5Expecting5() {
        let expected = i8_to_us_u(5)
        let result = Microseconds_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_uUsingInt8Int8_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = i8_to_us_u(Int8(Int8.min))
        let result = Microseconds_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_uUsingInt8Int8_maxExpectingmicroseconds_uInt8_max() {
        let expected = i8_to_us_u(Int8(Int8.max))
        let result = Microseconds_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint16_tUsing0Expecting0() {
        let expected = us_u_to_i16(0)
        let result = Int16(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint16_tUsing5Expecting5() {
        let expected = us_u_to_i16(5)
        let result = Int16(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint16_tUsingmicroseconds_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = us_u_to_i16(microseconds_u(CUnsignedInt.min))
        let result = Int16(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint16_tUsingmicroseconds_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = us_u_to_i16(microseconds_u(CUnsignedInt.max))
        let result = Int16(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_uUsing0Expecting0() {
        let expected = i16_to_us_u(0)
        let result = Microseconds_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_uUsing5Expecting5() {
        let expected = i16_to_us_u(5)
        let result = Microseconds_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_uUsingInt16Int16_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = i16_to_us_u(Int16(Int16.min))
        let result = Microseconds_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_uUsingInt16Int16_maxExpectingmicroseconds_uInt16_max() {
        let expected = i16_to_us_u(Int16(Int16.max))
        let result = Microseconds_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint32_tUsing0Expecting0() {
        let expected = us_u_to_i32(0)
        let result = Int32(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint32_tUsing5Expecting5() {
        let expected = us_u_to_i32(5)
        let result = Int32(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint32_tUsingmicroseconds_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = us_u_to_i32(microseconds_u(CUnsignedInt.min))
        let result = Int32(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint32_tUsingmicroseconds_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = us_u_to_i32(microseconds_u(CUnsignedInt.max))
        let result = Int32(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_uUsing0Expecting0() {
        let expected = i32_to_us_u(0)
        let result = Microseconds_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_uUsing5Expecting5() {
        let expected = i32_to_us_u(5)
        let result = Microseconds_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_uUsingInt32Int32_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = i32_to_us_u(Int32(Int32.min))
        let result = Microseconds_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_uUsingInt32Int32_maxExpectingmicroseconds_uInt32_max() {
        let expected = i32_to_us_u(Int32(Int32.max))
        let result = Microseconds_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint64_tUsing0Expecting0() {
        let expected = us_u_to_i64(0)
        let result = Int64(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint64_tUsing5Expecting5() {
        let expected = us_u_to_i64(5)
        let result = Int64(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint64_tUsingmicroseconds_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = us_u_to_i64(microseconds_u(CUnsignedInt.min))
        let result = Int64(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uToint64_tUsingmicroseconds_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = us_u_to_i64(microseconds_u(CUnsignedInt.max))
        let result = Int64(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_uUsing0Expecting0() {
        let expected = i64_to_us_u(0)
        let result = Microseconds_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_uUsing5Expecting5() {
        let expected = i64_to_us_u(5)
        let result = Microseconds_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_uUsingInt64Int64_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = i64_to_us_u(Int64(Int64.min))
        let result = Microseconds_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_uUsingInt64Int64_maxExpectingmicroseconds_uCUnsignedInt_max() {
        let expected = i64_to_us_u(Int64(Int64.max))
        let result = Microseconds_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTounsignedintUsing0Expecting0() {
        let expected = us_u_to_u(0)
        let result = CUnsignedInt(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTounsignedintUsing5Expecting5() {
        let expected = us_u_to_u(5)
        let result = CUnsignedInt(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTounsignedintUsingmicroseconds_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = us_u_to_u(microseconds_u(CUnsignedInt.min))
        let result = CUnsignedInt(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTounsignedintUsingmicroseconds_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = us_u_to_u(microseconds_u(CUnsignedInt.max))
        let result = CUnsignedInt(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_uUsing0Expecting0() {
        let expected = u_to_us_u(0)
        let result = Microseconds_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_uUsing5Expecting5() {
        let expected = u_to_us_u(5)
        let result = Microseconds_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint8_tUsing0Expecting0() {
        let expected = us_u_to_u8(0)
        let result = UInt8(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint8_tUsing5Expecting5() {
        let expected = us_u_to_u8(5)
        let result = UInt8(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint8_tUsingmicroseconds_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = us_u_to_u8(microseconds_u(CUnsignedInt.min))
        let result = UInt8(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint8_tUsingmicroseconds_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = us_u_to_u8(microseconds_u(CUnsignedInt.max))
        let result = UInt8(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_uUsing0Expecting0() {
        let expected = u8_to_us_u(0)
        let result = Microseconds_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_uUsing5Expecting5() {
        let expected = u8_to_us_u(5)
        let result = Microseconds_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_uUsingUInt8UInt8_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = u8_to_us_u(UInt8(UInt8.min))
        let result = Microseconds_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_uUsingUInt8UInt8_maxExpectingmicroseconds_uUInt8_max() {
        let expected = u8_to_us_u(UInt8(UInt8.max))
        let result = Microseconds_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint16_tUsing0Expecting0() {
        let expected = us_u_to_u16(0)
        let result = UInt16(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint16_tUsing5Expecting5() {
        let expected = us_u_to_u16(5)
        let result = UInt16(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint16_tUsingmicroseconds_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = us_u_to_u16(microseconds_u(CUnsignedInt.min))
        let result = UInt16(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint16_tUsingmicroseconds_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = us_u_to_u16(microseconds_u(CUnsignedInt.max))
        let result = UInt16(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_uUsing0Expecting0() {
        let expected = u16_to_us_u(0)
        let result = Microseconds_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_uUsing5Expecting5() {
        let expected = u16_to_us_u(5)
        let result = Microseconds_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_uUsingUInt16UInt16_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = u16_to_us_u(UInt16(UInt16.min))
        let result = Microseconds_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_uUsingUInt16UInt16_maxExpectingmicroseconds_uUInt16_max() {
        let expected = u16_to_us_u(UInt16(UInt16.max))
        let result = Microseconds_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint32_tUsing0Expecting0() {
        let expected = us_u_to_u32(0)
        let result = UInt32(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint32_tUsing5Expecting5() {
        let expected = us_u_to_u32(5)
        let result = UInt32(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint32_tUsingmicroseconds_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = us_u_to_u32(microseconds_u(CUnsignedInt.min))
        let result = UInt32(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint32_tUsingmicroseconds_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = us_u_to_u32(microseconds_u(CUnsignedInt.max))
        let result = UInt32(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_uUsing0Expecting0() {
        let expected = u32_to_us_u(0)
        let result = Microseconds_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_uUsing5Expecting5() {
        let expected = u32_to_us_u(5)
        let result = Microseconds_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_uUsingUInt32UInt32_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = u32_to_us_u(UInt32(UInt32.min))
        let result = Microseconds_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_uUsingUInt32UInt32_maxExpectingmicroseconds_uCUnsignedInt_max() {
        let expected = u32_to_us_u(UInt32(UInt32.max))
        let result = Microseconds_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint64_tUsing0Expecting0() {
        let expected = us_u_to_u64(0)
        let result = UInt64(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint64_tUsing5Expecting5() {
        let expected = us_u_to_u64(5)
        let result = UInt64(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint64_tUsingmicroseconds_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = us_u_to_u64(microseconds_u(CUnsignedInt.min))
        let result = UInt64(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTouint64_tUsingmicroseconds_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = us_u_to_u64(microseconds_u(CUnsignedInt.max))
        let result = UInt64(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_uUsing0Expecting0() {
        let expected = u64_to_us_u(0)
        let result = Microseconds_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_uUsing5Expecting5() {
        let expected = u64_to_us_u(5)
        let result = Microseconds_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_uUsingUInt64UInt64_minExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = u64_to_us_u(UInt64(UInt64.min))
        let result = Microseconds_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_uUsingUInt64UInt64_maxExpectingmicroseconds_uCUnsignedInt_max() {
        let expected = u64_to_us_u(UInt64(UInt64.max))
        let result = Microseconds_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTofloatUsing0Expecting0_0() {
        let expected = us_u_to_f(0)
        let result = Float(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTofloatUsing5Expecting5_0() {
        let expected = us_u_to_f(5)
        let result = Float(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTofloatUsingmicroseconds_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = us_u_to_f(microseconds_u(CUnsignedInt.min))
        let result = Float(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTofloatUsingmicroseconds_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = us_u_to_f(microseconds_u(CUnsignedInt.max))
        let result = Float(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_uUsing0_0Expecting0() {
        let expected = f_to_us_u(0.0)
        let result = Microseconds_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_uUsing5_0Expecting5() {
        let expected = f_to_us_u(5.0)
        let result = Microseconds_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = f_to_us_u(Float(-Float.greatestFiniteMagnitude))
        let result = Microseconds_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_uUsingFloatFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let expected = f_to_us_u(Float(Float.greatestFiniteMagnitude))
        let result = Microseconds_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTodoubleUsing0Expecting0_0() {
        let expected = us_u_to_d(0)
        let result = Double(Microseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTodoubleUsing5Expecting5_0() {
        let expected = us_u_to_d(5)
        let result = Double(Microseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTodoubleUsingmicroseconds_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = us_u_to_d(microseconds_u(CUnsignedInt.min))
        let result = Double(Microseconds_u(microseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_uTodoubleUsingmicroseconds_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = us_u_to_d(microseconds_u(CUnsignedInt.max))
        let result = Double(Microseconds_u(microseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_uUsing0_0Expecting0() {
        let expected = d_to_us_u(0.0)
        let result = Microseconds_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_uUsing5_0Expecting5() {
        let expected = d_to_us_u(5.0)
        let result = Microseconds_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let expected = d_to_us_u(Double(-Double.greatestFiniteMagnitude))
        let result = Microseconds_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let expected = d_to_us_u(Double(Double.greatestFiniteMagnitude))
        let result = Microseconds_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides microseconds_f unit tests.
final class Microseconds_fTests: XCTestCase {

    func testmicroseconds_fTomicroseconds_tUsing0_0Expecting0() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_us_t(0.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let unit = Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude))
        let expected = us_f_to_us_t(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let unit = Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude))
        let expected = us_f_to_us_t(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_tUsing5_0Expecting5() {
        let unit = Microseconds_f(5.0)
        let expected = us_f_to_us_t(5.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing15_0Expectingmilliseconds_t15_01000_0_rounded() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_ms_t(15.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing25_0Expectingmilliseconds_t25_01000_0_rounded() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_ms_t(25.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing250_0Expectingmilliseconds_t250_01000_0_rounded() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_ms_t(250.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing0_0Expectingmilliseconds_t0_01000_0_rounded() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_ms_t(0.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing2500_0Expectingmilliseconds_t2500_01000_0_rounded() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_ms_t(2500.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing25000_0Expectingmilliseconds_t25000_01000_0_rounded() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_ms_t(25000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing250000_0Expectingmilliseconds_t250000_01000_0_rounded() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_ms_t(250000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsing2500000_0Expectingmilliseconds_t2500000_01000_0_rounded() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_ms_t(2500000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsingNeg323_0Expectingmilliseconds_tNeg323_01000_0_rounded() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_ms_t(-323.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsingNeg10_0Expectingmilliseconds_tNeg10_01000_0_rounded() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_ms_t(-10.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsingNeg1000_0Expectingmilliseconds_tNeg1000_01000_0_rounded() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_ms_t(-1000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsingNeg5_0Expectingmilliseconds_tNeg5_01000_0_rounded() {
        let unit = Microseconds_f(-5.0)
        let expected = us_f_to_ms_t(-5.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_t(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_tUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_t(Float.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing15_0Expectingseconds_t15_01000000_0_rounded() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_s_t(15.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing25_0Expectingseconds_t25_01000000_0_rounded() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_s_t(25.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing250_0Expectingseconds_t250_01000000_0_rounded() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_s_t(250.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing0_0Expectingseconds_t0_01000000_0_rounded() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_s_t(0.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing2500_0Expectingseconds_t2500_01000000_0_rounded() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_s_t(2500.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing25000_0Expectingseconds_t25000_01000000_0_rounded() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_s_t(25000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing250000_0Expectingseconds_t250000_01000000_0_rounded() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_s_t(250000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsing2500000_0Expectingseconds_t2500000_01000000_0_rounded() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_s_t(2500000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsingNeg323_0Expectingseconds_tNeg323_01000000_0_rounded() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_s_t(-323.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsingNeg10_0Expectingseconds_tNeg10_01000000_0_rounded() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_s_t(-10.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsingNeg1000_0Expectingseconds_tNeg1000_01000000_0_rounded() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_s_t(-1000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsingNeg5_0Expectingseconds_tNeg5_01000000_0_rounded() {
        let unit = Microseconds_f(-5.0)
        let expected = us_f_to_s_t(-5.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_t(-Float.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_tUsingFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_t(Float.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_uUsing0_0Expecting0() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_us_u(0.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_uUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude))
        let expected = us_f_to_us_u(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_uUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude))
        let expected = us_f_to_us_u(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_uUsing5_0Expecting5() {
        let unit = Microseconds_f(5.0)
        let expected = us_f_to_us_u(5.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing15_0Expectingmilliseconds_u15_01000_0_rounded() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_ms_u(15.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing25_0Expectingmilliseconds_u25_01000_0_rounded() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_ms_u(25.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing250_0Expectingmilliseconds_u250_01000_0_rounded() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_ms_u(250.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing0_0Expectingmilliseconds_u0_01000_0_rounded() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_ms_u(0.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing2500_0Expectingmilliseconds_u2500_01000_0_rounded() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_ms_u(2500.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing25000_0Expectingmilliseconds_u25000_01000_0_rounded() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_ms_u(25000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing250000_0Expectingmilliseconds_u250000_01000_0_rounded() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_ms_u(250000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsing2500000_0Expectingmilliseconds_u2500000_01000_0_rounded() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_ms_u(2500000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsingNeg323_0Expecting0() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_ms_u(-323.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsingNeg10_0Expecting0() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_ms_u(-10.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsingNeg1000_0Expecting0() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_ms_u(-1000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsingNeg6_0Expecting0() {
        let unit = Microseconds_f(-6.0)
        let expected = us_f_to_ms_u(-6.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_u(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_uUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_u(Float.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing15_0Expectingseconds_u15_01000000_0_rounded() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_s_u(15.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing25_0Expectingseconds_u25_01000000_0_rounded() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_s_u(25.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing250_0Expectingseconds_u250_01000000_0_rounded() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_s_u(250.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing0_0Expectingseconds_u0_01000000_0_rounded() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_s_u(0.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing2500_0Expectingseconds_u2500_01000000_0_rounded() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_s_u(2500.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing25000_0Expectingseconds_u25000_01000000_0_rounded() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_s_u(25000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing250000_0Expectingseconds_u250000_01000000_0_rounded() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_s_u(250000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsing2500000_0Expectingseconds_u2500000_01000000_0_rounded() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_s_u(2500000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsingNeg323_0Expecting0() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_s_u(-323.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsingNeg10_0Expecting0() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_s_u(-10.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsingNeg1000_0Expecting0() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_s_u(-1000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsingNeg6_0Expecting0() {
        let unit = Microseconds_f(-6.0)
        let expected = us_f_to_s_u(-6.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_u(-Float.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_uUsingFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_u(Float.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing15_0Expectingmilliseconds_f15_01000_0() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_ms_f(15.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing25_0Expectingmilliseconds_f25_01000_0() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_ms_f(25.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing250_0Expectingmilliseconds_f250_01000_0() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_ms_f(250.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing0_0Expectingmilliseconds_f0_01000_0() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_ms_f(0.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing2500_0Expectingmilliseconds_f2500_01000_0() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_ms_f(2500.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing25000_0Expectingmilliseconds_f25000_01000_0() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_ms_f(25000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing250000_0Expectingmilliseconds_f250000_01000_0() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_ms_f(250000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsing2500000_0Expectingmilliseconds_f2500000_01000_0() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_ms_f(2500000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsingNeg323_0Expectingmilliseconds_fNeg323_01000_0() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_ms_f(-323.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsingNeg10_0Expectingmilliseconds_fNeg10_01000_0() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_ms_f(-10.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsingNeg1000_0Expectingmilliseconds_fNeg1000_01000_0() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_ms_f(-1000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsingNeg5_0Expectingmilliseconds_fNeg5_01000_0() {
        let unit = Microseconds_f(-5.0)
        let expected = us_f_to_ms_f(-5.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_fNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_f(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_fUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_fFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_f(Float.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing15_0Expectingseconds_f15_01000000_0() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_s_f(15.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing25_0Expectingseconds_f25_01000000_0() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_s_f(25.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing250_0Expectingseconds_f250_01000000_0() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_s_f(250.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing0_0Expectingseconds_f0_01000000_0() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_s_f(0.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing2500_0Expectingseconds_f2500_01000000_0() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_s_f(2500.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing25000_0Expectingseconds_f25000_01000000_0() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_s_f(25000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing250000_0Expectingseconds_f250000_01000000_0() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_s_f(250000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsing2500000_0Expectingseconds_f2500000_01000000_0() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_s_f(2500000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsingNeg323_0Expectingseconds_fNeg323_01000000_0() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_s_f(-323.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsingNeg10_0Expectingseconds_fNeg10_01000000_0() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_s_f(-10.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsingNeg1000_0Expectingseconds_fNeg1000_01000000_0() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_s_f(-1000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsingNeg5_0Expectingseconds_fNeg5_01000000_0() {
        let unit = Microseconds_f(-5.0)
        let expected = us_f_to_s_f(-5.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_fNegFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_f(-Float.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_fUsingFloat_greatestFiniteMagnitudeExpectingseconds_fFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_f(Float.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_dUsing0_0Expecting0_0() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_us_d(0.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_dUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_dNegFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude))
        let expected = us_f_to_us_d(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_dUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingmicroseconds_dFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude))
        let expected = us_f_to_us_d(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomicroseconds_dUsing5_0Expecting5_0() {
        let unit = Microseconds_f(5.0)
        let expected = us_f_to_us_d(5.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing15_0Expectingmilliseconds_d15_01000_0() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_ms_d(15.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing25_0Expectingmilliseconds_d25_01000_0() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_ms_d(25.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing250_0Expectingmilliseconds_d250_01000_0() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_ms_d(250.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing0_0Expectingmilliseconds_d0_01000_0() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_ms_d(0.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing2500_0Expectingmilliseconds_d2500_01000_0() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_ms_d(2500.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing25000_0Expectingmilliseconds_d25000_01000_0() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_ms_d(25000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing250000_0Expectingmilliseconds_d250000_01000_0() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_ms_d(250000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsing2500000_0Expectingmilliseconds_d2500000_01000_0() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_ms_d(2500000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsingNeg323_0Expectingmilliseconds_dNeg323_01000_0() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_ms_d(-323.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsingNeg10_0Expectingmilliseconds_dNeg10_01000_0() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_ms_d(-10.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsingNeg1000_0Expectingmilliseconds_dNeg1000_01000_0() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_ms_d(-1000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsingNeg5_0Expectingmilliseconds_dNeg5_01000_0() {
        let unit = Microseconds_f(-5.0)
        let expected = us_f_to_ms_d(-5.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_d(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTomilliseconds_dUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_ms_d(Float.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing15_0Expectingseconds_d15_01000000_0() {
        let unit = Microseconds_f(15.0)
        let expected = us_f_to_s_d(15.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing25_0Expectingseconds_d25_01000000_0() {
        let unit = Microseconds_f(25.0)
        let expected = us_f_to_s_d(25.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing250_0Expectingseconds_d250_01000000_0() {
        let unit = Microseconds_f(250.0)
        let expected = us_f_to_s_d(250.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing0_0Expectingseconds_d0_01000000_0() {
        let unit = Microseconds_f(0.0)
        let expected = us_f_to_s_d(0.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing2500_0Expectingseconds_d2500_01000000_0() {
        let unit = Microseconds_f(2500.0)
        let expected = us_f_to_s_d(2500.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing25000_0Expectingseconds_d25000_01000000_0() {
        let unit = Microseconds_f(25000.0)
        let expected = us_f_to_s_d(25000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing250000_0Expectingseconds_d250000_01000000_0() {
        let unit = Microseconds_f(250000.0)
        let expected = us_f_to_s_d(250000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsing2500000_0Expectingseconds_d2500000_01000000_0() {
        let unit = Microseconds_f(2500000.0)
        let expected = us_f_to_s_d(2500000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsingNeg323_0Expectingseconds_dNeg323_01000000_0() {
        let unit = Microseconds_f(-323.0)
        let expected = us_f_to_s_d(-323.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsingNeg10_0Expectingseconds_dNeg10_01000000_0() {
        let unit = Microseconds_f(-10.0)
        let expected = us_f_to_s_d(-10.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsingNeg1000_0Expectingseconds_dNeg1000_01000000_0() {
        let unit = Microseconds_f(-1000.0)
        let expected = us_f_to_s_d(-1000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsingNeg5_0Expectingseconds_dNeg5_01000000_0() {
        let unit = Microseconds_f(-5.0)
        let expected = us_f_to_s_d(-5.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_dNegFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microseconds_f(-Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_d(-Float.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fToseconds_dUsingFloat_greatestFiniteMagnitudeExpectingseconds_dFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Microseconds_f(Float.greatestFiniteMagnitude)
        let expected = us_f_to_s_d(Float.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_fTointUsing0_0Expecting0() {
        let expected = us_f_to_i(0.0)
        let result = CInt(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTointUsing5_0Expecting5() {
        let expected = us_f_to_i(5.0)
        let result = CInt(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTointUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = us_f_to_i(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTointUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = us_f_to_i(microseconds_f(Float.greatestFiniteMagnitude))
        let result = CInt(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_fUsing0Expecting0_0() {
        let expected = i_to_us_f(0)
        let result = Microseconds_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_fUsing5Expecting5_0() {
        let expected = i_to_us_f(5)
        let result = Microseconds_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_fUsingCIntCInt_minExpectingmicroseconds_fCInt_min() {
        let expected = i_to_us_f(CInt(CInt.min))
        let result = Microseconds_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_fUsingCIntCInt_maxExpectingmicroseconds_fCInt_max() {
        let expected = i_to_us_f(CInt(CInt.max))
        let result = Microseconds_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint8_tUsing0_0Expecting0() {
        let expected = us_f_to_i8(0.0)
        let result = Int8(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint8_tUsing5_0Expecting5() {
        let expected = us_f_to_i8(5.0)
        let result = Int8(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint8_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = us_f_to_i8(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint8_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = us_f_to_i8(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Int8(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = i8_to_us_f(0)
        let result = Microseconds_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = i8_to_us_f(5)
        let result = Microseconds_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_fUsingInt8Int8_minExpectingmicroseconds_fInt8_min() {
        let expected = i8_to_us_f(Int8(Int8.min))
        let result = Microseconds_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_fUsingInt8Int8_maxExpectingmicroseconds_fInt8_max() {
        let expected = i8_to_us_f(Int8(Int8.max))
        let result = Microseconds_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint16_tUsing0_0Expecting0() {
        let expected = us_f_to_i16(0.0)
        let result = Int16(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint16_tUsing5_0Expecting5() {
        let expected = us_f_to_i16(5.0)
        let result = Int16(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint16_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = us_f_to_i16(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint16_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = us_f_to_i16(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Int16(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = i16_to_us_f(0)
        let result = Microseconds_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = i16_to_us_f(5)
        let result = Microseconds_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_fUsingInt16Int16_minExpectingmicroseconds_fInt16_min() {
        let expected = i16_to_us_f(Int16(Int16.min))
        let result = Microseconds_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_fUsingInt16Int16_maxExpectingmicroseconds_fInt16_max() {
        let expected = i16_to_us_f(Int16(Int16.max))
        let result = Microseconds_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint32_tUsing0_0Expecting0() {
        let expected = us_f_to_i32(0.0)
        let result = Int32(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint32_tUsing5_0Expecting5() {
        let expected = us_f_to_i32(5.0)
        let result = Int32(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint32_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = us_f_to_i32(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint32_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = us_f_to_i32(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Int32(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = i32_to_us_f(0)
        let result = Microseconds_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = i32_to_us_f(5)
        let result = Microseconds_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_fUsingInt32Int32_minExpectingmicroseconds_fInt32_min() {
        let expected = i32_to_us_f(Int32(Int32.min))
        let result = Microseconds_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_fUsingInt32Int32_maxExpectingmicroseconds_fInt32_max() {
        let expected = i32_to_us_f(Int32(Int32.max))
        let result = Microseconds_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint64_tUsing0_0Expecting0() {
        let expected = us_f_to_i64(0.0)
        let result = Int64(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint64_tUsing5_0Expecting5() {
        let expected = us_f_to_i64(5.0)
        let result = Int64(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint64_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = us_f_to_i64(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fToint64_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = us_f_to_i64(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Int64(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = i64_to_us_f(0)
        let result = Microseconds_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = i64_to_us_f(5)
        let result = Microseconds_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_fUsingInt64Int64_minExpectingmicroseconds_fInt64_min() {
        let expected = i64_to_us_f(Int64(Int64.min))
        let result = Microseconds_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_fUsingInt64Int64_maxExpectingmicroseconds_fInt64_max() {
        let expected = i64_to_us_f(Int64(Int64.max))
        let result = Microseconds_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTounsignedintUsing0_0Expecting0() {
        let expected = us_f_to_u(0.0)
        let result = CUnsignedInt(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTounsignedintUsing5_0Expecting5() {
        let expected = us_f_to_u(5.0)
        let result = CUnsignedInt(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTounsignedintUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = us_f_to_u(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTounsignedintUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = us_f_to_u(microseconds_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_fUsing0Expecting0_0() {
        let expected = u_to_us_f(0)
        let result = Microseconds_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_fUsing5Expecting5_0() {
        let expected = u_to_us_f(5)
        let result = Microseconds_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_fUsingCUnsignedIntCUnsignedInt_minExpectingmicroseconds_fCUnsignedInt_min() {
        let expected = u_to_us_f(CUnsignedInt(CUnsignedInt.min))
        let result = Microseconds_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_fUsingCUnsignedIntCUnsignedInt_maxExpectingmicroseconds_fCUnsignedInt_max() {
        let expected = u_to_us_f(CUnsignedInt(CUnsignedInt.max))
        let result = Microseconds_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint8_tUsing0_0Expecting0() {
        let expected = us_f_to_u8(0.0)
        let result = UInt8(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint8_tUsing5_0Expecting5() {
        let expected = us_f_to_u8(5.0)
        let result = UInt8(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint8_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = us_f_to_u8(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint8_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = us_f_to_u8(microseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = u8_to_us_f(0)
        let result = Microseconds_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = u8_to_us_f(5)
        let result = Microseconds_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_fUsingUInt8UInt8_minExpectingmicroseconds_fUInt8_min() {
        let expected = u8_to_us_f(UInt8(UInt8.min))
        let result = Microseconds_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_fUsingUInt8UInt8_maxExpectingmicroseconds_fUInt8_max() {
        let expected = u8_to_us_f(UInt8(UInt8.max))
        let result = Microseconds_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint16_tUsing0_0Expecting0() {
        let expected = us_f_to_u16(0.0)
        let result = UInt16(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint16_tUsing5_0Expecting5() {
        let expected = us_f_to_u16(5.0)
        let result = UInt16(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint16_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = us_f_to_u16(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint16_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = us_f_to_u16(microseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = u16_to_us_f(0)
        let result = Microseconds_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = u16_to_us_f(5)
        let result = Microseconds_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_fUsingUInt16UInt16_minExpectingmicroseconds_fUInt16_min() {
        let expected = u16_to_us_f(UInt16(UInt16.min))
        let result = Microseconds_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_fUsingUInt16UInt16_maxExpectingmicroseconds_fUInt16_max() {
        let expected = u16_to_us_f(UInt16(UInt16.max))
        let result = Microseconds_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint32_tUsing0_0Expecting0() {
        let expected = us_f_to_u32(0.0)
        let result = UInt32(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint32_tUsing5_0Expecting5() {
        let expected = us_f_to_u32(5.0)
        let result = UInt32(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint32_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = us_f_to_u32(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint32_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = us_f_to_u32(microseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = u32_to_us_f(0)
        let result = Microseconds_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = u32_to_us_f(5)
        let result = Microseconds_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_fUsingUInt32UInt32_minExpectingmicroseconds_fUInt32_min() {
        let expected = u32_to_us_f(UInt32(UInt32.min))
        let result = Microseconds_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_fUsingUInt32UInt32_maxExpectingmicroseconds_fUInt32_max() {
        let expected = u32_to_us_f(UInt32(UInt32.max))
        let result = Microseconds_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint64_tUsing0_0Expecting0() {
        let expected = us_f_to_u64(0.0)
        let result = UInt64(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint64_tUsing5_0Expecting5() {
        let expected = us_f_to_u64(5.0)
        let result = UInt64(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint64_tUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = us_f_to_u64(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTouint64_tUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = us_f_to_u64(microseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_fUsing0Expecting0_0() {
        let expected = u64_to_us_f(0)
        let result = Microseconds_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_fUsing5Expecting5_0() {
        let expected = u64_to_us_f(5)
        let result = Microseconds_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_fUsingUInt64UInt64_minExpectingmicroseconds_fUInt64_min() {
        let expected = u64_to_us_f(UInt64(UInt64.min))
        let result = Microseconds_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_fUsingUInt64UInt64_maxExpectingmicroseconds_fUInt64_max() {
        let expected = u64_to_us_f(UInt64(UInt64.max))
        let result = Microseconds_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTofloatUsing0_0Expecting0_0() {
        let expected = us_f_to_f(0.0)
        let result = Float(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTofloatUsing5_0Expecting5_0() {
        let expected = us_f_to_f(5.0)
        let result = Float(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTofloatUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = us_f_to_f(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Float(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTofloatUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = us_f_to_f(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Float(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_fUsing0_0Expecting0_0() {
        let expected = f_to_us_f(0.0)
        let result = Microseconds_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_fUsing5_0Expecting5_0() {
        let expected = f_to_us_f(5.0)
        let result = Microseconds_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTodoubleUsing0_0Expecting0_0() {
        let expected = us_f_to_d(0.0)
        let result = Double(Microseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTodoubleUsing5_0Expecting5_0() {
        let expected = us_f_to_d(5.0)
        let result = Double(Microseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTodoubleUsingmicroseconds_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = us_f_to_d(microseconds_f(-Float.greatestFiniteMagnitude))
        let result = Double(Microseconds_f(microseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_fTodoubleUsingmicroseconds_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = us_f_to_d(microseconds_f(Float.greatestFiniteMagnitude))
        let result = Double(Microseconds_f(microseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_fUsing0_0Expecting0_0() {
        let expected = d_to_us_f(0.0)
        let result = Microseconds_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_fUsing5_0Expecting5_0() {
        let expected = d_to_us_f(5.0)
        let result = Microseconds_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_us_f(Double(-Double.greatestFiniteMagnitude))
        let result = Microseconds_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingmicroseconds_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_us_f(Double(Double.greatestFiniteMagnitude))
        let result = Microseconds_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides microseconds_d unit tests.
final class Microseconds_dTests: XCTestCase {

    func testmicroseconds_dTomicroseconds_tUsing0_0Expecting0() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_us_t(0.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let unit = Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude))
        let expected = us_d_to_us_t(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let unit = Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude))
        let expected = us_d_to_us_t(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_tUsing5_0Expecting5() {
        let unit = Microseconds_d(5.0)
        let expected = us_d_to_us_t(5.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing15_0Expectingmilliseconds_t15_01000_0_rounded() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_ms_t(15.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing25_0Expectingmilliseconds_t25_01000_0_rounded() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_ms_t(25.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing250_0Expectingmilliseconds_t250_01000_0_rounded() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_ms_t(250.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing0_0Expectingmilliseconds_t0_01000_0_rounded() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_ms_t(0.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing2500_0Expectingmilliseconds_t2500_01000_0_rounded() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_ms_t(2500.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing25000_0Expectingmilliseconds_t25000_01000_0_rounded() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_ms_t(25000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing250000_0Expectingmilliseconds_t250000_01000_0_rounded() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_ms_t(250000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsing2500000_0Expectingmilliseconds_t2500000_01000_0_rounded() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_ms_t(2500000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsingNeg323_0Expectingmilliseconds_tNeg323_01000_0_rounded() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_ms_t(-323.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsingNeg10_0Expectingmilliseconds_tNeg10_01000_0_rounded() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_ms_t(-10.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsingNeg1000_0Expectingmilliseconds_tNeg1000_01000_0_rounded() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_ms_t(-1000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsingNeg5_0Expectingmilliseconds_tNeg5_01000_0_rounded() {
        let unit = Microseconds_d(-5.0)
        let expected = us_d_to_ms_t(-5.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_tUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_t(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTomilliseconds_tUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_t(Double.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_tUsing15_0Expectingseconds_t15_01000000_0_rounded() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_s_t(15.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsing25_0Expectingseconds_t25_01000000_0_rounded() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_s_t(25.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsing250_0Expectingseconds_t250_01000000_0_rounded() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_s_t(250.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsing0_0Expectingseconds_t0_01000000_0_rounded() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_s_t(0.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsing2500_0Expectingseconds_t2500_01000000_0_rounded() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_s_t(2500.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsing25000_0Expectingseconds_t25000_01000000_0_rounded() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_s_t(25000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsing250000_0Expectingseconds_t250000_01000000_0_rounded() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_s_t(250000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsing2500000_0Expectingseconds_t2500000_01000000_0_rounded() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_s_t(2500000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsingNeg323_0Expectingseconds_tNeg323_01000000_0_rounded() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_s_t(-323.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsingNeg10_0Expectingseconds_tNeg10_01000000_0_rounded() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_s_t(-10.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsingNeg1000_0Expectingseconds_tNeg1000_01000000_0_rounded() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_s_t(-1000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsingNeg5_0Expectingseconds_tNeg5_01000000_0_rounded() {
        let unit = Microseconds_d(-5.0)
        let expected = us_d_to_s_t(-5.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_tUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_t(-Double.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_tUsingDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_t(Double.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTomicroseconds_uUsing0_0Expecting0() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_us_u(0.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_uUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude))
        let expected = us_d_to_us_u(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_uUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude))
        let expected = us_d_to_us_u(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_uUsing5_0Expecting5() {
        let unit = Microseconds_d(5.0)
        let expected = us_d_to_us_u(5.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing15_0Expectingmilliseconds_u15_01000_0_rounded() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_ms_u(15.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing25_0Expectingmilliseconds_u25_01000_0_rounded() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_ms_u(25.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing250_0Expectingmilliseconds_u250_01000_0_rounded() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_ms_u(250.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing0_0Expectingmilliseconds_u0_01000_0_rounded() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_ms_u(0.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing2500_0Expectingmilliseconds_u2500_01000_0_rounded() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_ms_u(2500.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing25000_0Expectingmilliseconds_u25000_01000_0_rounded() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_ms_u(25000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing250000_0Expectingmilliseconds_u250000_01000_0_rounded() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_ms_u(250000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsing2500000_0Expectingmilliseconds_u2500000_01000_0_rounded() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_ms_u(2500000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsingNeg323_0Expecting0() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_ms_u(-323.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsingNeg10_0Expecting0() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_ms_u(-10.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsingNeg1000_0Expecting0() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_ms_u(-1000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsingNeg6_0Expecting0() {
        let unit = Microseconds_d(-6.0)
        let expected = us_d_to_ms_u(-6.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_uUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_u(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTomilliseconds_uUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_u(Double.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_uUsing15_0Expectingseconds_u15_01000000_0_rounded() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_s_u(15.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsing25_0Expectingseconds_u25_01000000_0_rounded() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_s_u(25.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsing250_0Expectingseconds_u250_01000000_0_rounded() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_s_u(250.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsing0_0Expectingseconds_u0_01000000_0_rounded() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_s_u(0.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsing2500_0Expectingseconds_u2500_01000000_0_rounded() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_s_u(2500.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsing25000_0Expectingseconds_u25000_01000000_0_rounded() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_s_u(25000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsing250000_0Expectingseconds_u250000_01000000_0_rounded() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_s_u(250000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsing2500000_0Expectingseconds_u2500000_01000000_0_rounded() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_s_u(2500000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsingNeg323_0Expecting0() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_s_u(-323.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsingNeg10_0Expecting0() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_s_u(-10.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsingNeg1000_0Expecting0() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_s_u(-1000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsingNeg6_0Expecting0() {
        let unit = Microseconds_d(-6.0)
        let expected = us_d_to_s_u(-6.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_uUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_u(-Double.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_uUsingDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_u(Double.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTomicroseconds_fUsing0_0Expecting0_0() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_us_f(0.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_fUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude))
        let expected = us_d_to_us_f(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_fUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingmicroseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude))
        let expected = us_d_to_us_f(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomicroseconds_fUsing5_0Expecting5_0() {
        let unit = Microseconds_d(5.0)
        let expected = us_d_to_us_f(5.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing15_0Expectingmilliseconds_f15_01000_0() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_ms_f(15.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing25_0Expectingmilliseconds_f25_01000_0() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_ms_f(25.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing250_0Expectingmilliseconds_f250_01000_0() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_ms_f(250.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing0_0Expectingmilliseconds_f0_01000_0() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_ms_f(0.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing2500_0Expectingmilliseconds_f2500_01000_0() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_ms_f(2500.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing25000_0Expectingmilliseconds_f25000_01000_0() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_ms_f(25000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing250000_0Expectingmilliseconds_f250000_01000_0() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_ms_f(250000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsing2500000_0Expectingmilliseconds_f2500000_01000_0() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_ms_f(2500000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsingNeg323_0Expectingmilliseconds_fNeg323_01000_0() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_ms_f(-323.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsingNeg10_0Expectingmilliseconds_fNeg10_01000_0() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_ms_f(-10.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsingNeg1000_0Expectingmilliseconds_fNeg1000_01000_0() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_ms_f(-1000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsingNeg5_0Expectingmilliseconds_fNeg5_01000_0() {
        let unit = Microseconds_d(-5.0)
        let expected = us_d_to_ms_f(-5.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_fUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_f(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTomilliseconds_fUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_f(Double.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_fUsing15_0Expectingseconds_f15_01000000_0() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_s_f(15.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsing25_0Expectingseconds_f25_01000000_0() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_s_f(25.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsing250_0Expectingseconds_f250_01000000_0() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_s_f(250.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsing0_0Expectingseconds_f0_01000000_0() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_s_f(0.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsing2500_0Expectingseconds_f2500_01000000_0() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_s_f(2500.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsing25000_0Expectingseconds_f25000_01000000_0() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_s_f(25000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsing250000_0Expectingseconds_f250000_01000000_0() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_s_f(250000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsing2500000_0Expectingseconds_f2500000_01000000_0() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_s_f(2500000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsingNeg323_0Expectingseconds_fNeg323_01000000_0() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_s_f(-323.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsingNeg10_0Expectingseconds_fNeg10_01000000_0() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_s_f(-10.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsingNeg1000_0Expectingseconds_fNeg1000_01000000_0() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_s_f(-1000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsingNeg5_0Expectingseconds_fNeg5_01000000_0() {
        let unit = Microseconds_d(-5.0)
        let expected = us_d_to_s_f(-5.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_fUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_f(-Double.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_fUsingDouble_greatestFiniteMagnitudeExpectingseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_f(Double.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTomilliseconds_dUsing15_0Expectingmilliseconds_d15_01000_0() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_ms_d(15.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsing25_0Expectingmilliseconds_d25_01000_0() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_ms_d(25.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsing250_0Expectingmilliseconds_d250_01000_0() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_ms_d(250.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsing0_0Expectingmilliseconds_d0_01000_0() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_ms_d(0.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsing2500_0Expectingmilliseconds_d2500_01000_0() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_ms_d(2500.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsing25000_0Expectingmilliseconds_d25000_01000_0() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_ms_d(25000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsing250000_0Expectingmilliseconds_d250000_01000_0() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_ms_d(250000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsing2500000_0Expectingmilliseconds_d2500000_01000_0() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_ms_d(2500000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsingNeg323_0Expectingmilliseconds_dNeg323_01000_0() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_ms_d(-323.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsingNeg10_0Expectingmilliseconds_dNeg10_01000_0() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_ms_d(-10.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsingNeg1000_0Expectingmilliseconds_dNeg1000_01000_0() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_ms_d(-1000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsingNeg5_0Expectingmilliseconds_dNeg5_01000_0() {
        let unit = Microseconds_d(-5.0)
        let expected = us_d_to_ms_d(-5.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dTomilliseconds_dUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_dNegDouble_greatestFiniteMagnitude1000_0() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_d(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTomilliseconds_dUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_dDouble_greatestFiniteMagnitude1000_0() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_ms_d(Double.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_dUsing15_0Expectingseconds_d15_01000000_0() {
        let unit = Microseconds_d(15.0)
        let expected = us_d_to_s_d(15.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsing25_0Expectingseconds_d25_01000000_0() {
        let unit = Microseconds_d(25.0)
        let expected = us_d_to_s_d(25.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsing250_0Expectingseconds_d250_01000000_0() {
        let unit = Microseconds_d(250.0)
        let expected = us_d_to_s_d(250.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsing0_0Expectingseconds_d0_01000000_0() {
        let unit = Microseconds_d(0.0)
        let expected = us_d_to_s_d(0.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsing2500_0Expectingseconds_d2500_01000000_0() {
        let unit = Microseconds_d(2500.0)
        let expected = us_d_to_s_d(2500.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsing25000_0Expectingseconds_d25000_01000000_0() {
        let unit = Microseconds_d(25000.0)
        let expected = us_d_to_s_d(25000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsing250000_0Expectingseconds_d250000_01000000_0() {
        let unit = Microseconds_d(250000.0)
        let expected = us_d_to_s_d(250000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsing2500000_0Expectingseconds_d2500000_01000000_0() {
        let unit = Microseconds_d(2500000.0)
        let expected = us_d_to_s_d(2500000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsingNeg323_0Expectingseconds_dNeg323_01000000_0() {
        let unit = Microseconds_d(-323.0)
        let expected = us_d_to_s_d(-323.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsingNeg10_0Expectingseconds_dNeg10_01000000_0() {
        let unit = Microseconds_d(-10.0)
        let expected = us_d_to_s_d(-10.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsingNeg1000_0Expectingseconds_dNeg1000_01000000_0() {
        let unit = Microseconds_d(-1000.0)
        let expected = us_d_to_s_d(-1000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsingNeg5_0Expectingseconds_dNeg5_01000000_0() {
        let unit = Microseconds_d(-5.0)
        let expected = us_d_to_s_d(-5.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmicroseconds_dToseconds_dUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_dNegDouble_greatestFiniteMagnitude1000000_0() {
        let unit = Microseconds_d(-Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_d(-Double.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToseconds_dUsingDouble_greatestFiniteMagnitudeExpectingseconds_dDouble_greatestFiniteMagnitude1000000_0() {
        let unit = Microseconds_d(Double.greatestFiniteMagnitude)
        let expected = us_d_to_s_d(Double.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTointUsing0_0Expecting0() {
        let expected = us_d_to_i(0.0)
        let result = CInt(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTointUsing5_0Expecting5() {
        let expected = us_d_to_i(5.0)
        let result = CInt(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTointUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = us_d_to_i(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTointUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = us_d_to_i(microseconds_d(Double.greatestFiniteMagnitude))
        let result = CInt(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_dUsing0Expecting0_0() {
        let expected = i_to_us_d(0)
        let result = Microseconds_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_dUsing5Expecting5_0() {
        let expected = i_to_us_d(5)
        let result = Microseconds_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_dUsingCIntCInt_minExpectingmicroseconds_dCInt_min() {
        let expected = i_to_us_d(CInt(CInt.min))
        let result = Microseconds_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomicroseconds_dUsingCIntCInt_maxExpectingmicroseconds_dCInt_max() {
        let expected = i_to_us_d(CInt(CInt.max))
        let result = Microseconds_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint8_tUsing0_0Expecting0() {
        let expected = us_d_to_i8(0.0)
        let result = Int8(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint8_tUsing5_0Expecting5() {
        let expected = us_d_to_i8(5.0)
        let result = Int8(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint8_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = us_d_to_i8(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint8_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = us_d_to_i8(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Int8(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = i8_to_us_d(0)
        let result = Microseconds_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = i8_to_us_d(5)
        let result = Microseconds_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_dUsingInt8Int8_minExpectingmicroseconds_dInt8_min() {
        let expected = i8_to_us_d(Int8(Int8.min))
        let result = Microseconds_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomicroseconds_dUsingInt8Int8_maxExpectingmicroseconds_dInt8_max() {
        let expected = i8_to_us_d(Int8(Int8.max))
        let result = Microseconds_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint16_tUsing0_0Expecting0() {
        let expected = us_d_to_i16(0.0)
        let result = Int16(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint16_tUsing5_0Expecting5() {
        let expected = us_d_to_i16(5.0)
        let result = Int16(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint16_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = us_d_to_i16(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint16_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = us_d_to_i16(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Int16(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = i16_to_us_d(0)
        let result = Microseconds_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = i16_to_us_d(5)
        let result = Microseconds_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_dUsingInt16Int16_minExpectingmicroseconds_dInt16_min() {
        let expected = i16_to_us_d(Int16(Int16.min))
        let result = Microseconds_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomicroseconds_dUsingInt16Int16_maxExpectingmicroseconds_dInt16_max() {
        let expected = i16_to_us_d(Int16(Int16.max))
        let result = Microseconds_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint32_tUsing0_0Expecting0() {
        let expected = us_d_to_i32(0.0)
        let result = Int32(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint32_tUsing5_0Expecting5() {
        let expected = us_d_to_i32(5.0)
        let result = Int32(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint32_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = us_d_to_i32(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint32_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = us_d_to_i32(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Int32(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = i32_to_us_d(0)
        let result = Microseconds_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = i32_to_us_d(5)
        let result = Microseconds_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_dUsingInt32Int32_minExpectingmicroseconds_dInt32_min() {
        let expected = i32_to_us_d(Int32(Int32.min))
        let result = Microseconds_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomicroseconds_dUsingInt32Int32_maxExpectingmicroseconds_dInt32_max() {
        let expected = i32_to_us_d(Int32(Int32.max))
        let result = Microseconds_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint64_tUsing0_0Expecting0() {
        let expected = us_d_to_i64(0.0)
        let result = Int64(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint64_tUsing5_0Expecting5() {
        let expected = us_d_to_i64(5.0)
        let result = Int64(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint64_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = us_d_to_i64(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dToint64_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = us_d_to_i64(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Int64(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = i64_to_us_d(0)
        let result = Microseconds_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = i64_to_us_d(5)
        let result = Microseconds_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_dUsingInt64Int64_minExpectingmicroseconds_dInt64_min() {
        let expected = i64_to_us_d(Int64(Int64.min))
        let result = Microseconds_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomicroseconds_dUsingInt64Int64_maxExpectingmicroseconds_dInt64_max() {
        let expected = i64_to_us_d(Int64(Int64.max))
        let result = Microseconds_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTounsignedintUsing0_0Expecting0() {
        let expected = us_d_to_u(0.0)
        let result = CUnsignedInt(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTounsignedintUsing5_0Expecting5() {
        let expected = us_d_to_u(5.0)
        let result = CUnsignedInt(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTounsignedintUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = us_d_to_u(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTounsignedintUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = us_d_to_u(microseconds_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_dUsing0Expecting0_0() {
        let expected = u_to_us_d(0)
        let result = Microseconds_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_dUsing5Expecting5_0() {
        let expected = u_to_us_d(5)
        let result = Microseconds_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_dUsingCUnsignedIntCUnsignedInt_minExpectingmicroseconds_dCUnsignedInt_min() {
        let expected = u_to_us_d(CUnsignedInt(CUnsignedInt.min))
        let result = Microseconds_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomicroseconds_dUsingCUnsignedIntCUnsignedInt_maxExpectingmicroseconds_dCUnsignedInt_max() {
        let expected = u_to_us_d(CUnsignedInt(CUnsignedInt.max))
        let result = Microseconds_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint8_tUsing0_0Expecting0() {
        let expected = us_d_to_u8(0.0)
        let result = UInt8(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint8_tUsing5_0Expecting5() {
        let expected = us_d_to_u8(5.0)
        let result = UInt8(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint8_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = us_d_to_u8(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint8_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = us_d_to_u8(microseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = u8_to_us_d(0)
        let result = Microseconds_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = u8_to_us_d(5)
        let result = Microseconds_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_dUsingUInt8UInt8_minExpectingmicroseconds_dUInt8_min() {
        let expected = u8_to_us_d(UInt8(UInt8.min))
        let result = Microseconds_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomicroseconds_dUsingUInt8UInt8_maxExpectingmicroseconds_dUInt8_max() {
        let expected = u8_to_us_d(UInt8(UInt8.max))
        let result = Microseconds_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint16_tUsing0_0Expecting0() {
        let expected = us_d_to_u16(0.0)
        let result = UInt16(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint16_tUsing5_0Expecting5() {
        let expected = us_d_to_u16(5.0)
        let result = UInt16(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint16_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = us_d_to_u16(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint16_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = us_d_to_u16(microseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = u16_to_us_d(0)
        let result = Microseconds_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = u16_to_us_d(5)
        let result = Microseconds_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_dUsingUInt16UInt16_minExpectingmicroseconds_dUInt16_min() {
        let expected = u16_to_us_d(UInt16(UInt16.min))
        let result = Microseconds_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomicroseconds_dUsingUInt16UInt16_maxExpectingmicroseconds_dUInt16_max() {
        let expected = u16_to_us_d(UInt16(UInt16.max))
        let result = Microseconds_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint32_tUsing0_0Expecting0() {
        let expected = us_d_to_u32(0.0)
        let result = UInt32(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint32_tUsing5_0Expecting5() {
        let expected = us_d_to_u32(5.0)
        let result = UInt32(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint32_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = us_d_to_u32(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint32_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = us_d_to_u32(microseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = u32_to_us_d(0)
        let result = Microseconds_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = u32_to_us_d(5)
        let result = Microseconds_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_dUsingUInt32UInt32_minExpectingmicroseconds_dUInt32_min() {
        let expected = u32_to_us_d(UInt32(UInt32.min))
        let result = Microseconds_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomicroseconds_dUsingUInt32UInt32_maxExpectingmicroseconds_dUInt32_max() {
        let expected = u32_to_us_d(UInt32(UInt32.max))
        let result = Microseconds_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint64_tUsing0_0Expecting0() {
        let expected = us_d_to_u64(0.0)
        let result = UInt64(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint64_tUsing5_0Expecting5() {
        let expected = us_d_to_u64(5.0)
        let result = UInt64(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint64_tUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = us_d_to_u64(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTouint64_tUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = us_d_to_u64(microseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_dUsing0Expecting0_0() {
        let expected = u64_to_us_d(0)
        let result = Microseconds_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_dUsing5Expecting5_0() {
        let expected = u64_to_us_d(5)
        let result = Microseconds_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_dUsingUInt64UInt64_minExpectingmicroseconds_dUInt64_min() {
        let expected = u64_to_us_d(UInt64(UInt64.min))
        let result = Microseconds_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomicroseconds_dUsingUInt64UInt64_maxExpectingmicroseconds_dUInt64_max() {
        let expected = u64_to_us_d(UInt64(UInt64.max))
        let result = Microseconds_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTofloatUsing0_0Expecting0_0() {
        let expected = us_d_to_f(0.0)
        let result = Float(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTofloatUsing5_0Expecting5_0() {
        let expected = us_d_to_f(5.0)
        let result = Float(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTofloatUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = us_d_to_f(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Float(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTofloatUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = us_d_to_f(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Float(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_dUsing0_0Expecting0_0() {
        let expected = f_to_us_d(0.0)
        let result = Microseconds_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_dUsing5_0Expecting5_0() {
        let expected = f_to_us_d(5.0)
        let result = Microseconds_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_us_d(Float(-Float.greatestFiniteMagnitude))
        let result = Microseconds_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomicroseconds_dUsingFloatFloat_greatestFiniteMagnitudeExpectingmicroseconds_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_us_d(Float(Float.greatestFiniteMagnitude))
        let result = Microseconds_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTodoubleUsing0_0Expecting0_0() {
        let expected = us_d_to_d(0.0)
        let result = Double(Microseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTodoubleUsing5_0Expecting5_0() {
        let expected = us_d_to_d(5.0)
        let result = Double(Microseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTodoubleUsingmicroseconds_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = us_d_to_d(microseconds_d(-Double.greatestFiniteMagnitude))
        let result = Double(Microseconds_d(microseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmicroseconds_dTodoubleUsingmicroseconds_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = us_d_to_d(microseconds_d(Double.greatestFiniteMagnitude))
        let result = Double(Microseconds_d(microseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_dUsing0_0Expecting0_0() {
        let expected = d_to_us_d(0.0)
        let result = Microseconds_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomicroseconds_dUsing5_0Expecting5_0() {
        let expected = d_to_us_d(5.0)
        let result = Microseconds_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliseconds_t unit tests.
final class Milliseconds_tTests: XCTestCase {

    func testmilliseconds_tTomicroseconds_tUsing15Expectingmicroseconds_t151000() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_us_t(15)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsing25Expectingmicroseconds_t251000() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_us_t(25)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsing250Expectingmicroseconds_t2501000() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_us_t(250)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsing0Expectingmicroseconds_t01000() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_us_t(0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsing2500Expectingmicroseconds_t25001000() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_us_t(2500)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsing25000Expectingmicroseconds_t250001000() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_us_t(25000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsing250000Expectingmicroseconds_t2500001000() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_us_t(250000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsingNeg323Expectingmicroseconds_tNeg3231000() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_us_t(-323)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsingNeg10Expectingmicroseconds_tNeg101000() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_us_t(-10)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsingNeg1000Expectingmicroseconds_tNeg10001000() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_us_t(-1000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsingNeg5Expectingmicroseconds_tNeg51000() {
        let unit = Milliseconds_t(-5)
        let expected = ms_t_to_us_t(-5)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsingCInt_minExpectingmicroseconds_tCInt_min() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_us_t(CInt.min)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_tUsingCInt_maxExpectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_us_t(CInt.max)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing15Expectingseconds_t151000() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_s_t(15)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing25Expectingseconds_t251000() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_s_t(25)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing250Expectingseconds_t2501000() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_s_t(250)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing0Expectingseconds_t01000() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_s_t(0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing2500Expectingseconds_t25001000() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_s_t(2500)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing25000Expectingseconds_t250001000() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_s_t(25000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing250000Expectingseconds_t2500001000() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_s_t(250000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsing2500000Expectingseconds_t25000001000() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_s_t(2500000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsingNeg323Expectingseconds_tNeg3231000() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_s_t(-323)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsingNeg10Expectingseconds_tNeg101000() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_s_t(-10)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsingNeg1000Expectingseconds_tNeg10001000() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_s_t(-1000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsingNeg5Expectingseconds_tNeg51000() {
        let unit = Milliseconds_t(-5)
        let expected = ms_t_to_s_t(-5)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsingCInt_minExpectingseconds_tCInt_min1000() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_s_t(CInt.min)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_tUsingCInt_maxExpectingseconds_tCInt_max1000() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_s_t(CInt.max)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing15Expectingmicroseconds_u151000() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_us_u(15)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing25Expectingmicroseconds_u251000() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_us_u(25)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing250Expectingmicroseconds_u2501000() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_us_u(250)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing0Expectingmicroseconds_u01000() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_us_u(0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing2500Expectingmicroseconds_u25001000() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_us_u(2500)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing25000Expectingmicroseconds_u250001000() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_us_u(25000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing250000Expectingmicroseconds_u2500001000() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_us_u(250000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsing2500000Expectingmicroseconds_u25000001000() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_us_u(2500000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsingNeg323Expecting0() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_us_u(-323)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsingNeg10Expecting0() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_us_u(-10)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsingNeg1000Expecting0() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_us_u(-1000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsingNeg6Expecting0() {
        let unit = Milliseconds_t(-6)
        let expected = ms_t_to_us_u(-6)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsingCInt_minExpecting0() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_us_u(CInt.min)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_uUsingCInt_maxExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_us_u(CInt.max)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_uUsing0Expecting0() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_ms_u(0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_uUsingmilliseconds_tCInt_minExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_t(milliseconds_t(CInt.min))
        let expected = ms_t_to_ms_u(milliseconds_t(CInt.min))
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_uUsingmilliseconds_tCInt_maxExpectingmilliseconds_uCInt_max() {
        let unit = Milliseconds_t(milliseconds_t(CInt.max))
        let expected = ms_t_to_ms_u(milliseconds_t(CInt.max))
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_uUsing5Expecting5() {
        let unit = Milliseconds_t(5)
        let expected = ms_t_to_ms_u(5)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing15Expectingseconds_u151000() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_s_u(15)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing25Expectingseconds_u251000() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_s_u(25)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing250Expectingseconds_u2501000() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_s_u(250)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing0Expectingseconds_u01000() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_s_u(0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing2500Expectingseconds_u25001000() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_s_u(2500)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing25000Expectingseconds_u250001000() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_s_u(25000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing250000Expectingseconds_u2500001000() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_s_u(250000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsing2500000Expectingseconds_u25000001000() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_s_u(2500000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsingNeg323Expecting0() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_s_u(-323)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsingNeg10Expecting0() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_s_u(-10)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsingNeg1000Expecting0() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_s_u(-1000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsingNeg6Expecting0() {
        let unit = Milliseconds_t(-6)
        let expected = ms_t_to_s_u(-6)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsingCInt_minExpecting0() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_s_u(CInt.min)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_uUsingCInt_maxExpectingseconds_uCInt_max1000() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_s_u(CInt.max)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing15Expectingmicroseconds_f15_01000_0() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_us_f(15)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing25Expectingmicroseconds_f25_01000_0() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_us_f(25)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing250Expectingmicroseconds_f250_01000_0() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_us_f(250)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing0Expectingmicroseconds_f0_01000_0() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_us_f(0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing2500Expectingmicroseconds_f2500_01000_0() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_us_f(2500)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing25000Expectingmicroseconds_f25000_01000_0() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_us_f(25000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing250000Expectingmicroseconds_f250000_01000_0() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_us_f(250000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsing2500000Expectingmicroseconds_f2500000_01000_0() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_us_f(2500000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsingNeg323Expectingmicroseconds_fNeg323_01000_0() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_us_f(-323)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsingNeg10Expectingmicroseconds_fNeg10_01000_0() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_us_f(-10)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsingNeg1000Expectingmicroseconds_fNeg1000_01000_0() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_us_f(-1000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsingNeg5Expectingmicroseconds_fNeg5_01000_0() {
        let unit = Milliseconds_t(-5)
        let expected = ms_t_to_us_f(-5)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsingCInt_minExpectingmicroseconds_fCInt_min1000_0() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_us_f(CInt.min)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_fUsingCInt_maxExpectingmicroseconds_fCInt_max1000_0() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_us_f(CInt.max)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_fUsing0Expecting0_0() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_ms_f(0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_fUsingmilliseconds_tCInt_minExpectingmilliseconds_fCInt_min() {
        let unit = Milliseconds_t(milliseconds_t(CInt.min))
        let expected = ms_t_to_ms_f(milliseconds_t(CInt.min))
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_fUsingmilliseconds_tCInt_maxExpectingmilliseconds_fCInt_max() {
        let unit = Milliseconds_t(milliseconds_t(CInt.max))
        let expected = ms_t_to_ms_f(milliseconds_t(CInt.max))
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_fUsing5Expecting5_0() {
        let unit = Milliseconds_t(5)
        let expected = ms_t_to_ms_f(5)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing15Expectingseconds_f15_01000_0() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_s_f(15)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing25Expectingseconds_f25_01000_0() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_s_f(25)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing250Expectingseconds_f250_01000_0() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_s_f(250)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing0Expectingseconds_f0_01000_0() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_s_f(0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing2500Expectingseconds_f2500_01000_0() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_s_f(2500)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing25000Expectingseconds_f25000_01000_0() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_s_f(25000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing250000Expectingseconds_f250000_01000_0() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_s_f(250000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsing2500000Expectingseconds_f2500000_01000_0() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_s_f(2500000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsingNeg323Expectingseconds_fNeg323_01000_0() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_s_f(-323)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsingNeg10Expectingseconds_fNeg10_01000_0() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_s_f(-10)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsingNeg1000Expectingseconds_fNeg1000_01000_0() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_s_f(-1000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsingNeg5Expectingseconds_fNeg5_01000_0() {
        let unit = Milliseconds_t(-5)
        let expected = ms_t_to_s_f(-5)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsingCInt_minExpectingseconds_fCInt_min1000_0() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_s_f(CInt.min)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_fUsingCInt_maxExpectingseconds_fCInt_max1000_0() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_s_f(CInt.max)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing15Expectingmicroseconds_d15_01000_0() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_us_d(15)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing25Expectingmicroseconds_d25_01000_0() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_us_d(25)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing250Expectingmicroseconds_d250_01000_0() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_us_d(250)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing0Expectingmicroseconds_d0_01000_0() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_us_d(0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing2500Expectingmicroseconds_d2500_01000_0() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_us_d(2500)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing25000Expectingmicroseconds_d25000_01000_0() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_us_d(25000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing250000Expectingmicroseconds_d250000_01000_0() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_us_d(250000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsing2500000Expectingmicroseconds_d2500000_01000_0() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_us_d(2500000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsingNeg323Expectingmicroseconds_dNeg323_01000_0() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_us_d(-323)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsingNeg10Expectingmicroseconds_dNeg10_01000_0() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_us_d(-10)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsingNeg1000Expectingmicroseconds_dNeg1000_01000_0() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_us_d(-1000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsingNeg5Expectingmicroseconds_dNeg5_01000_0() {
        let unit = Milliseconds_t(-5)
        let expected = ms_t_to_us_d(-5)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsingCInt_minExpectingmicroseconds_dCInt_min1000_0() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_us_d(CInt.min)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomicroseconds_dUsingCInt_maxExpectingmicroseconds_dCInt_max1000_0() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_us_d(CInt.max)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_dUsing0Expecting0_0() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_ms_d(0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_dUsingmilliseconds_tCInt_minExpectingmilliseconds_dCInt_min() {
        let unit = Milliseconds_t(milliseconds_t(CInt.min))
        let expected = ms_t_to_ms_d(milliseconds_t(CInt.min))
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_dUsingmilliseconds_tCInt_maxExpectingmilliseconds_dCInt_max() {
        let unit = Milliseconds_t(milliseconds_t(CInt.max))
        let expected = ms_t_to_ms_d(milliseconds_t(CInt.max))
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTomilliseconds_dUsing5Expecting5_0() {
        let unit = Milliseconds_t(5)
        let expected = ms_t_to_ms_d(5)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing15Expectingseconds_d15_01000_0() {
        let unit = Milliseconds_t(15)
        let expected = ms_t_to_s_d(15)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing25Expectingseconds_d25_01000_0() {
        let unit = Milliseconds_t(25)
        let expected = ms_t_to_s_d(25)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing250Expectingseconds_d250_01000_0() {
        let unit = Milliseconds_t(250)
        let expected = ms_t_to_s_d(250)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing0Expectingseconds_d0_01000_0() {
        let unit = Milliseconds_t(0)
        let expected = ms_t_to_s_d(0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing2500Expectingseconds_d2500_01000_0() {
        let unit = Milliseconds_t(2500)
        let expected = ms_t_to_s_d(2500)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing25000Expectingseconds_d25000_01000_0() {
        let unit = Milliseconds_t(25000)
        let expected = ms_t_to_s_d(25000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing250000Expectingseconds_d250000_01000_0() {
        let unit = Milliseconds_t(250000)
        let expected = ms_t_to_s_d(250000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsing2500000Expectingseconds_d2500000_01000_0() {
        let unit = Milliseconds_t(2500000)
        let expected = ms_t_to_s_d(2500000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsingNeg323Expectingseconds_dNeg323_01000_0() {
        let unit = Milliseconds_t(-323)
        let expected = ms_t_to_s_d(-323)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsingNeg10Expectingseconds_dNeg10_01000_0() {
        let unit = Milliseconds_t(-10)
        let expected = ms_t_to_s_d(-10)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsingNeg1000Expectingseconds_dNeg1000_01000_0() {
        let unit = Milliseconds_t(-1000)
        let expected = ms_t_to_s_d(-1000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsingNeg5Expectingseconds_dNeg5_01000_0() {
        let unit = Milliseconds_t(-5)
        let expected = ms_t_to_s_d(-5)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsingCInt_minExpectingseconds_dCInt_min1000_0() {
        let unit = Milliseconds_t(CInt.min)
        let expected = ms_t_to_s_d(CInt.min)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tToseconds_dUsingCInt_maxExpectingseconds_dCInt_max1000_0() {
        let unit = Milliseconds_t(CInt.max)
        let expected = ms_t_to_s_d(CInt.max)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_tTointUsing0Expecting0() {
        let expected = ms_t_to_i(0)
        let result = CInt(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTointUsing5Expecting5() {
        let expected = ms_t_to_i(5)
        let result = CInt(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTointUsingmilliseconds_tCInt_minExpectingCIntCInt_min() {
        let expected = ms_t_to_i(milliseconds_t(CInt.min))
        let result = CInt(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTointUsingmilliseconds_tCInt_maxExpectingCIntCInt_max() {
        let expected = ms_t_to_i(milliseconds_t(CInt.max))
        let result = CInt(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_tUsing0Expecting0() {
        let expected = i_to_ms_t(0)
        let result = Milliseconds_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_tUsing5Expecting5() {
        let expected = i_to_ms_t(5)
        let result = Milliseconds_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint8_tUsing0Expecting0() {
        let expected = ms_t_to_i8(0)
        let result = Int8(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint8_tUsing5Expecting5() {
        let expected = ms_t_to_i8(5)
        let result = Int8(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint8_tUsingmilliseconds_tCInt_minExpectingInt8Int8_min() {
        let expected = ms_t_to_i8(milliseconds_t(CInt.min))
        let result = Int8(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint8_tUsingmilliseconds_tCInt_maxExpectingInt8Int8_max() {
        let expected = ms_t_to_i8(milliseconds_t(CInt.max))
        let result = Int8(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_tUsing0Expecting0() {
        let expected = i8_to_ms_t(0)
        let result = Milliseconds_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_tUsing5Expecting5() {
        let expected = i8_to_ms_t(5)
        let result = Milliseconds_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_tUsingInt8Int8_minExpectingmilliseconds_tInt8_min() {
        let expected = i8_to_ms_t(Int8(Int8.min))
        let result = Milliseconds_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_tUsingInt8Int8_maxExpectingmilliseconds_tInt8_max() {
        let expected = i8_to_ms_t(Int8(Int8.max))
        let result = Milliseconds_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint16_tUsing0Expecting0() {
        let expected = ms_t_to_i16(0)
        let result = Int16(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint16_tUsing5Expecting5() {
        let expected = ms_t_to_i16(5)
        let result = Int16(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint16_tUsingmilliseconds_tCInt_minExpectingInt16Int16_min() {
        let expected = ms_t_to_i16(milliseconds_t(CInt.min))
        let result = Int16(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint16_tUsingmilliseconds_tCInt_maxExpectingInt16Int16_max() {
        let expected = ms_t_to_i16(milliseconds_t(CInt.max))
        let result = Int16(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_tUsing0Expecting0() {
        let expected = i16_to_ms_t(0)
        let result = Milliseconds_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_tUsing5Expecting5() {
        let expected = i16_to_ms_t(5)
        let result = Milliseconds_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_tUsingInt16Int16_minExpectingmilliseconds_tInt16_min() {
        let expected = i16_to_ms_t(Int16(Int16.min))
        let result = Milliseconds_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_tUsingInt16Int16_maxExpectingmilliseconds_tInt16_max() {
        let expected = i16_to_ms_t(Int16(Int16.max))
        let result = Milliseconds_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint32_tUsing0Expecting0() {
        let expected = ms_t_to_i32(0)
        let result = Int32(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint32_tUsing5Expecting5() {
        let expected = ms_t_to_i32(5)
        let result = Int32(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint32_tUsingmilliseconds_tCInt_minExpectingInt32CInt_min() {
        let expected = ms_t_to_i32(milliseconds_t(CInt.min))
        let result = Int32(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint32_tUsingmilliseconds_tCInt_maxExpectingInt32CInt_max() {
        let expected = ms_t_to_i32(milliseconds_t(CInt.max))
        let result = Int32(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_tUsing0Expecting0() {
        let expected = i32_to_ms_t(0)
        let result = Milliseconds_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_tUsing5Expecting5() {
        let expected = i32_to_ms_t(5)
        let result = Milliseconds_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_tUsingInt32Int32_minExpectingmilliseconds_tCInt_min() {
        let expected = i32_to_ms_t(Int32(Int32.min))
        let result = Milliseconds_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_tUsingInt32Int32_maxExpectingmilliseconds_tCInt_max() {
        let expected = i32_to_ms_t(Int32(Int32.max))
        let result = Milliseconds_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint64_tUsing0Expecting0() {
        let expected = ms_t_to_i64(0)
        let result = Int64(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint64_tUsing5Expecting5() {
        let expected = ms_t_to_i64(5)
        let result = Int64(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint64_tUsingmilliseconds_tCInt_minExpectingInt64CInt_min() {
        let expected = ms_t_to_i64(milliseconds_t(CInt.min))
        let result = Int64(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tToint64_tUsingmilliseconds_tCInt_maxExpectingInt64CInt_max() {
        let expected = ms_t_to_i64(milliseconds_t(CInt.max))
        let result = Int64(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_tUsing0Expecting0() {
        let expected = i64_to_ms_t(0)
        let result = Milliseconds_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_tUsing5Expecting5() {
        let expected = i64_to_ms_t(5)
        let result = Milliseconds_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_tUsingInt64Int64_minExpectingmilliseconds_tCInt_min() {
        let expected = i64_to_ms_t(Int64(Int64.min))
        let result = Milliseconds_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_tUsingInt64Int64_maxExpectingmilliseconds_tCInt_max() {
        let expected = i64_to_ms_t(Int64(Int64.max))
        let result = Milliseconds_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTounsignedintUsing0Expecting0() {
        let expected = ms_t_to_u(0)
        let result = CUnsignedInt(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTounsignedintUsing5Expecting5() {
        let expected = ms_t_to_u(5)
        let result = CUnsignedInt(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTounsignedintUsingmilliseconds_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = ms_t_to_u(milliseconds_t(CInt.min))
        let result = CUnsignedInt(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTounsignedintUsingmilliseconds_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = ms_t_to_u(milliseconds_t(CInt.max))
        let result = CUnsignedInt(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_tUsing0Expecting0() {
        let expected = u_to_ms_t(0)
        let result = Milliseconds_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_tUsing5Expecting5() {
        let expected = u_to_ms_t(5)
        let result = Milliseconds_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_tUsingCUnsignedIntCUnsignedInt_minExpectingmilliseconds_tCUnsignedInt_min() {
        let expected = u_to_ms_t(CUnsignedInt(CUnsignedInt.min))
        let result = Milliseconds_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_tUsingCUnsignedIntCUnsignedInt_maxExpectingmilliseconds_tCInt_max() {
        let expected = u_to_ms_t(CUnsignedInt(CUnsignedInt.max))
        let result = Milliseconds_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint8_tUsing0Expecting0() {
        let expected = ms_t_to_u8(0)
        let result = UInt8(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint8_tUsing5Expecting5() {
        let expected = ms_t_to_u8(5)
        let result = UInt8(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint8_tUsingmilliseconds_tCInt_minExpectingUInt8UInt8_min() {
        let expected = ms_t_to_u8(milliseconds_t(CInt.min))
        let result = UInt8(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint8_tUsingmilliseconds_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = ms_t_to_u8(milliseconds_t(CInt.max))
        let result = UInt8(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_tUsing0Expecting0() {
        let expected = u8_to_ms_t(0)
        let result = Milliseconds_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_tUsing5Expecting5() {
        let expected = u8_to_ms_t(5)
        let result = Milliseconds_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_tUsingUInt8UInt8_minExpectingmilliseconds_tUInt8_min() {
        let expected = u8_to_ms_t(UInt8(UInt8.min))
        let result = Milliseconds_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_tUsingUInt8UInt8_maxExpectingmilliseconds_tUInt8_max() {
        let expected = u8_to_ms_t(UInt8(UInt8.max))
        let result = Milliseconds_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint16_tUsing0Expecting0() {
        let expected = ms_t_to_u16(0)
        let result = UInt16(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint16_tUsing5Expecting5() {
        let expected = ms_t_to_u16(5)
        let result = UInt16(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint16_tUsingmilliseconds_tCInt_minExpectingUInt16UInt16_min() {
        let expected = ms_t_to_u16(milliseconds_t(CInt.min))
        let result = UInt16(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint16_tUsingmilliseconds_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = ms_t_to_u16(milliseconds_t(CInt.max))
        let result = UInt16(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_tUsing0Expecting0() {
        let expected = u16_to_ms_t(0)
        let result = Milliseconds_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_tUsing5Expecting5() {
        let expected = u16_to_ms_t(5)
        let result = Milliseconds_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_tUsingUInt16UInt16_minExpectingmilliseconds_tUInt16_min() {
        let expected = u16_to_ms_t(UInt16(UInt16.min))
        let result = Milliseconds_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_tUsingUInt16UInt16_maxExpectingmilliseconds_tUInt16_max() {
        let expected = u16_to_ms_t(UInt16(UInt16.max))
        let result = Milliseconds_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint32_tUsing0Expecting0() {
        let expected = ms_t_to_u32(0)
        let result = UInt32(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint32_tUsing5Expecting5() {
        let expected = ms_t_to_u32(5)
        let result = UInt32(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint32_tUsingmilliseconds_tCInt_minExpectingUInt32UInt32_min() {
        let expected = ms_t_to_u32(milliseconds_t(CInt.min))
        let result = UInt32(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint32_tUsingmilliseconds_tCInt_maxExpectingUInt32CInt_max() {
        let expected = ms_t_to_u32(milliseconds_t(CInt.max))
        let result = UInt32(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_tUsing0Expecting0() {
        let expected = u32_to_ms_t(0)
        let result = Milliseconds_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_tUsing5Expecting5() {
        let expected = u32_to_ms_t(5)
        let result = Milliseconds_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_tUsingUInt32UInt32_minExpectingmilliseconds_tUInt32_min() {
        let expected = u32_to_ms_t(UInt32(UInt32.min))
        let result = Milliseconds_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_tUsingUInt32UInt32_maxExpectingmilliseconds_tCInt_max() {
        let expected = u32_to_ms_t(UInt32(UInt32.max))
        let result = Milliseconds_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint64_tUsing0Expecting0() {
        let expected = ms_t_to_u64(0)
        let result = UInt64(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint64_tUsing5Expecting5() {
        let expected = ms_t_to_u64(5)
        let result = UInt64(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint64_tUsingmilliseconds_tCInt_minExpectingUInt64UInt64_min() {
        let expected = ms_t_to_u64(milliseconds_t(CInt.min))
        let result = UInt64(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTouint64_tUsingmilliseconds_tCInt_maxExpectingUInt64CInt_max() {
        let expected = ms_t_to_u64(milliseconds_t(CInt.max))
        let result = UInt64(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_tUsing0Expecting0() {
        let expected = u64_to_ms_t(0)
        let result = Milliseconds_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_tUsing5Expecting5() {
        let expected = u64_to_ms_t(5)
        let result = Milliseconds_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_tUsingUInt64UInt64_minExpectingmilliseconds_tUInt64_min() {
        let expected = u64_to_ms_t(UInt64(UInt64.min))
        let result = Milliseconds_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_tUsingUInt64UInt64_maxExpectingmilliseconds_tCInt_max() {
        let expected = u64_to_ms_t(UInt64(UInt64.max))
        let result = Milliseconds_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTofloatUsing0Expecting0_0() {
        let expected = ms_t_to_f(0)
        let result = Float(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTofloatUsing5Expecting5_0() {
        let expected = ms_t_to_f(5)
        let result = Float(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTofloatUsingmilliseconds_tCInt_minExpectingFloatCInt_min() {
        let expected = ms_t_to_f(milliseconds_t(CInt.min))
        let result = Float(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTofloatUsingmilliseconds_tCInt_maxExpectingFloatCInt_max() {
        let expected = ms_t_to_f(milliseconds_t(CInt.max))
        let result = Float(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_tUsing0_0Expecting0() {
        let expected = f_to_ms_t(0.0)
        let result = Milliseconds_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_tUsing5_0Expecting5() {
        let expected = f_to_ms_t(5.0)
        let result = Milliseconds_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let expected = f_to_ms_t(Float(-Float.greatestFiniteMagnitude))
        let result = Milliseconds_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_tUsingFloatFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let expected = f_to_ms_t(Float(Float.greatestFiniteMagnitude))
        let result = Milliseconds_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTodoubleUsing0Expecting0_0() {
        let expected = ms_t_to_d(0)
        let result = Double(Milliseconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTodoubleUsing5Expecting5_0() {
        let expected = ms_t_to_d(5)
        let result = Double(Milliseconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTodoubleUsingmilliseconds_tCInt_minExpectingDoubleCInt_min() {
        let expected = ms_t_to_d(milliseconds_t(CInt.min))
        let result = Double(Milliseconds_t(milliseconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_tTodoubleUsingmilliseconds_tCInt_maxExpectingDoubleCInt_max() {
        let expected = ms_t_to_d(milliseconds_t(CInt.max))
        let result = Double(Milliseconds_t(milliseconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_tUsing0_0Expecting0() {
        let expected = d_to_ms_t(0.0)
        let result = Milliseconds_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_tUsing5_0Expecting5() {
        let expected = d_to_ms_t(5.0)
        let result = Milliseconds_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let expected = d_to_ms_t(Double(-Double.greatestFiniteMagnitude))
        let result = Milliseconds_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let expected = d_to_ms_t(Double(Double.greatestFiniteMagnitude))
        let result = Milliseconds_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliseconds_u unit tests.
final class Milliseconds_uTests: XCTestCase {

    func testmilliseconds_uTomicroseconds_tUsing15Expectingmicroseconds_t151000() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_us_t(15)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsing25Expectingmicroseconds_t251000() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_us_t(25)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsing250Expectingmicroseconds_t2501000() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_us_t(250)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsing0Expectingmicroseconds_t01000() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_us_t(0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsing2500Expectingmicroseconds_t25001000() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_us_t(2500)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsing25000Expectingmicroseconds_t250001000() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_us_t(25000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsing250000Expectingmicroseconds_t2500001000() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_us_t(250000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsingCUnsignedInt_minExpectingmicroseconds_tCUnsignedInt_min1000() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_us_t(CUnsignedInt.min)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_tUsingCUnsignedInt_maxExpectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_us_t(CUnsignedInt.max)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_tUsing0Expecting0() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_ms_t(0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_tUsingmilliseconds_uCUnsignedInt_minExpectingmilliseconds_tCUnsignedInt_min() {
        let unit = Milliseconds_u(milliseconds_u(CUnsignedInt.min))
        let expected = ms_u_to_ms_t(milliseconds_u(CUnsignedInt.min))
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_tUsingmilliseconds_uCUnsignedInt_maxExpectingmilliseconds_tCInt_max() {
        let unit = Milliseconds_u(milliseconds_u(CUnsignedInt.max))
        let expected = ms_u_to_ms_t(milliseconds_u(CUnsignedInt.max))
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_tUsing5Expecting5() {
        let unit = Milliseconds_u(5)
        let expected = ms_u_to_ms_t(5)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing15Expectingseconds_t151000() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_s_t(15)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing25Expectingseconds_t251000() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_s_t(25)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing250Expectingseconds_t2501000() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_s_t(250)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing0Expectingseconds_t01000() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_s_t(0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing2500Expectingseconds_t25001000() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_s_t(2500)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing25000Expectingseconds_t250001000() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_s_t(25000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing250000Expectingseconds_t2500001000() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_s_t(250000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsing2500000Expectingseconds_t25000001000() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_s_t(2500000)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsingCUnsignedInt_minExpectingseconds_tCUnsignedInt_min1000() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_s_t(CUnsignedInt.min)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_tUsingCUnsignedInt_maxExpectingseconds_tCUnsignedInt_max1000() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_s_t(CUnsignedInt.max)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing15Expectingmicroseconds_u151000() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_us_u(15)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing25Expectingmicroseconds_u251000() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_us_u(25)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing250Expectingmicroseconds_u2501000() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_us_u(250)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing0Expectingmicroseconds_u01000() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_us_u(0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing2500Expectingmicroseconds_u25001000() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_us_u(2500)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing25000Expectingmicroseconds_u250001000() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_us_u(25000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing250000Expectingmicroseconds_u2500001000() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_us_u(250000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsing2500000Expectingmicroseconds_u25000001000() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_us_u(2500000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsingCUnsignedInt_minExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_us_u(CUnsignedInt.min)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_uUsingCUnsignedInt_maxExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_us_u(CUnsignedInt.max)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing15Expectingseconds_u151000() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_s_u(15)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing25Expectingseconds_u251000() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_s_u(25)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing250Expectingseconds_u2501000() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_s_u(250)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing0Expectingseconds_u01000() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_s_u(0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing2500Expectingseconds_u25001000() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_s_u(2500)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing25000Expectingseconds_u250001000() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_s_u(25000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing250000Expectingseconds_u2500001000() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_s_u(250000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsing2500000Expectingseconds_u25000001000() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_s_u(2500000)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsingCUnsignedInt_minExpectingseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_s_u(CUnsignedInt.min)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_uUsingCUnsignedInt_maxExpectingseconds_uCUnsignedInt_max1000() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_s_u(CUnsignedInt.max)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing15Expectingmicroseconds_f15_01000_0() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_us_f(15)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing25Expectingmicroseconds_f25_01000_0() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_us_f(25)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing250Expectingmicroseconds_f250_01000_0() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_us_f(250)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing0Expectingmicroseconds_f0_01000_0() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_us_f(0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing2500Expectingmicroseconds_f2500_01000_0() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_us_f(2500)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing25000Expectingmicroseconds_f25000_01000_0() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_us_f(25000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing250000Expectingmicroseconds_f250000_01000_0() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_us_f(250000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsing2500000Expectingmicroseconds_f2500000_01000_0() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_us_f(2500000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsingCUnsignedInt_minExpectingmicroseconds_fCUnsignedInt_min1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_us_f(CUnsignedInt.min)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_fUsingCUnsignedInt_maxExpectingmicroseconds_fCUnsignedInt_max1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_us_f(CUnsignedInt.max)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_fUsing0Expecting0_0() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_ms_f(0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_fUsingmilliseconds_uCUnsignedInt_minExpectingmilliseconds_fCUnsignedInt_min() {
        let unit = Milliseconds_u(milliseconds_u(CUnsignedInt.min))
        let expected = ms_u_to_ms_f(milliseconds_u(CUnsignedInt.min))
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_fUsingmilliseconds_uCUnsignedInt_maxExpectingmilliseconds_fCUnsignedInt_max() {
        let unit = Milliseconds_u(milliseconds_u(CUnsignedInt.max))
        let expected = ms_u_to_ms_f(milliseconds_u(CUnsignedInt.max))
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_fUsing5Expecting5_0() {
        let unit = Milliseconds_u(5)
        let expected = ms_u_to_ms_f(5)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing15Expectingseconds_f15_01000_0() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_s_f(15)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing25Expectingseconds_f25_01000_0() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_s_f(25)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing250Expectingseconds_f250_01000_0() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_s_f(250)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing0Expectingseconds_f0_01000_0() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_s_f(0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing2500Expectingseconds_f2500_01000_0() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_s_f(2500)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing25000Expectingseconds_f25000_01000_0() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_s_f(25000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing250000Expectingseconds_f250000_01000_0() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_s_f(250000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsing2500000Expectingseconds_f2500000_01000_0() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_s_f(2500000)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsingCUnsignedInt_minExpectingseconds_fCUnsignedInt_min1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_s_f(CUnsignedInt.min)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_fUsingCUnsignedInt_maxExpectingseconds_fCUnsignedInt_max1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_s_f(CUnsignedInt.max)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing15Expectingmicroseconds_d15_01000_0() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_us_d(15)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing25Expectingmicroseconds_d25_01000_0() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_us_d(25)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing250Expectingmicroseconds_d250_01000_0() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_us_d(250)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing0Expectingmicroseconds_d0_01000_0() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_us_d(0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing2500Expectingmicroseconds_d2500_01000_0() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_us_d(2500)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing25000Expectingmicroseconds_d25000_01000_0() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_us_d(25000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing250000Expectingmicroseconds_d250000_01000_0() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_us_d(250000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsing2500000Expectingmicroseconds_d2500000_01000_0() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_us_d(2500000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsingCUnsignedInt_minExpectingmicroseconds_dCUnsignedInt_min1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_us_d(CUnsignedInt.min)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomicroseconds_dUsingCUnsignedInt_maxExpectingmicroseconds_dCUnsignedInt_max1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_us_d(CUnsignedInt.max)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_dUsing0Expecting0_0() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_ms_d(0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_dUsingmilliseconds_uCUnsignedInt_minExpectingmilliseconds_dCUnsignedInt_min() {
        let unit = Milliseconds_u(milliseconds_u(CUnsignedInt.min))
        let expected = ms_u_to_ms_d(milliseconds_u(CUnsignedInt.min))
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_dUsingmilliseconds_uCUnsignedInt_maxExpectingmilliseconds_dCUnsignedInt_max() {
        let unit = Milliseconds_u(milliseconds_u(CUnsignedInt.max))
        let expected = ms_u_to_ms_d(milliseconds_u(CUnsignedInt.max))
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTomilliseconds_dUsing5Expecting5_0() {
        let unit = Milliseconds_u(5)
        let expected = ms_u_to_ms_d(5)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing15Expectingseconds_d15_01000_0() {
        let unit = Milliseconds_u(15)
        let expected = ms_u_to_s_d(15)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing25Expectingseconds_d25_01000_0() {
        let unit = Milliseconds_u(25)
        let expected = ms_u_to_s_d(25)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing250Expectingseconds_d250_01000_0() {
        let unit = Milliseconds_u(250)
        let expected = ms_u_to_s_d(250)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing0Expectingseconds_d0_01000_0() {
        let unit = Milliseconds_u(0)
        let expected = ms_u_to_s_d(0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing2500Expectingseconds_d2500_01000_0() {
        let unit = Milliseconds_u(2500)
        let expected = ms_u_to_s_d(2500)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing25000Expectingseconds_d25000_01000_0() {
        let unit = Milliseconds_u(25000)
        let expected = ms_u_to_s_d(25000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing250000Expectingseconds_d250000_01000_0() {
        let unit = Milliseconds_u(250000)
        let expected = ms_u_to_s_d(250000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsing2500000Expectingseconds_d2500000_01000_0() {
        let unit = Milliseconds_u(2500000)
        let expected = ms_u_to_s_d(2500000)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsingCUnsignedInt_minExpectingseconds_dCUnsignedInt_min1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.min)
        let expected = ms_u_to_s_d(CUnsignedInt.min)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uToseconds_dUsingCUnsignedInt_maxExpectingseconds_dCUnsignedInt_max1000_0() {
        let unit = Milliseconds_u(CUnsignedInt.max)
        let expected = ms_u_to_s_d(CUnsignedInt.max)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_uTointUsing0Expecting0() {
        let expected = ms_u_to_i(0)
        let result = CInt(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTointUsing5Expecting5() {
        let expected = ms_u_to_i(5)
        let result = CInt(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTointUsingmilliseconds_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = ms_u_to_i(milliseconds_u(CUnsignedInt.min))
        let result = CInt(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTointUsingmilliseconds_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = ms_u_to_i(milliseconds_u(CUnsignedInt.max))
        let result = CInt(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_uUsing0Expecting0() {
        let expected = i_to_ms_u(0)
        let result = Milliseconds_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_uUsing5Expecting5() {
        let expected = i_to_ms_u(5)
        let result = Milliseconds_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_uUsingCIntCInt_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = i_to_ms_u(CInt(CInt.min))
        let result = Milliseconds_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_uUsingCIntCInt_maxExpectingmilliseconds_uCInt_max() {
        let expected = i_to_ms_u(CInt(CInt.max))
        let result = Milliseconds_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint8_tUsing0Expecting0() {
        let expected = ms_u_to_i8(0)
        let result = Int8(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint8_tUsing5Expecting5() {
        let expected = ms_u_to_i8(5)
        let result = Int8(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint8_tUsingmilliseconds_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = ms_u_to_i8(milliseconds_u(CUnsignedInt.min))
        let result = Int8(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint8_tUsingmilliseconds_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = ms_u_to_i8(milliseconds_u(CUnsignedInt.max))
        let result = Int8(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_uUsing0Expecting0() {
        let expected = i8_to_ms_u(0)
        let result = Milliseconds_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_uUsing5Expecting5() {
        let expected = i8_to_ms_u(5)
        let result = Milliseconds_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_uUsingInt8Int8_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = i8_to_ms_u(Int8(Int8.min))
        let result = Milliseconds_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_uUsingInt8Int8_maxExpectingmilliseconds_uInt8_max() {
        let expected = i8_to_ms_u(Int8(Int8.max))
        let result = Milliseconds_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint16_tUsing0Expecting0() {
        let expected = ms_u_to_i16(0)
        let result = Int16(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint16_tUsing5Expecting5() {
        let expected = ms_u_to_i16(5)
        let result = Int16(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint16_tUsingmilliseconds_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = ms_u_to_i16(milliseconds_u(CUnsignedInt.min))
        let result = Int16(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint16_tUsingmilliseconds_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = ms_u_to_i16(milliseconds_u(CUnsignedInt.max))
        let result = Int16(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_uUsing0Expecting0() {
        let expected = i16_to_ms_u(0)
        let result = Milliseconds_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_uUsing5Expecting5() {
        let expected = i16_to_ms_u(5)
        let result = Milliseconds_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_uUsingInt16Int16_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = i16_to_ms_u(Int16(Int16.min))
        let result = Milliseconds_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_uUsingInt16Int16_maxExpectingmilliseconds_uInt16_max() {
        let expected = i16_to_ms_u(Int16(Int16.max))
        let result = Milliseconds_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint32_tUsing0Expecting0() {
        let expected = ms_u_to_i32(0)
        let result = Int32(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint32_tUsing5Expecting5() {
        let expected = ms_u_to_i32(5)
        let result = Int32(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint32_tUsingmilliseconds_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = ms_u_to_i32(milliseconds_u(CUnsignedInt.min))
        let result = Int32(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint32_tUsingmilliseconds_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = ms_u_to_i32(milliseconds_u(CUnsignedInt.max))
        let result = Int32(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_uUsing0Expecting0() {
        let expected = i32_to_ms_u(0)
        let result = Milliseconds_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_uUsing5Expecting5() {
        let expected = i32_to_ms_u(5)
        let result = Milliseconds_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_uUsingInt32Int32_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = i32_to_ms_u(Int32(Int32.min))
        let result = Milliseconds_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_uUsingInt32Int32_maxExpectingmilliseconds_uInt32_max() {
        let expected = i32_to_ms_u(Int32(Int32.max))
        let result = Milliseconds_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint64_tUsing0Expecting0() {
        let expected = ms_u_to_i64(0)
        let result = Int64(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint64_tUsing5Expecting5() {
        let expected = ms_u_to_i64(5)
        let result = Int64(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint64_tUsingmilliseconds_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = ms_u_to_i64(milliseconds_u(CUnsignedInt.min))
        let result = Int64(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uToint64_tUsingmilliseconds_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = ms_u_to_i64(milliseconds_u(CUnsignedInt.max))
        let result = Int64(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_uUsing0Expecting0() {
        let expected = i64_to_ms_u(0)
        let result = Milliseconds_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_uUsing5Expecting5() {
        let expected = i64_to_ms_u(5)
        let result = Milliseconds_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_uUsingInt64Int64_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = i64_to_ms_u(Int64(Int64.min))
        let result = Milliseconds_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_uUsingInt64Int64_maxExpectingmilliseconds_uCUnsignedInt_max() {
        let expected = i64_to_ms_u(Int64(Int64.max))
        let result = Milliseconds_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTounsignedintUsing0Expecting0() {
        let expected = ms_u_to_u(0)
        let result = CUnsignedInt(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTounsignedintUsing5Expecting5() {
        let expected = ms_u_to_u(5)
        let result = CUnsignedInt(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTounsignedintUsingmilliseconds_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = ms_u_to_u(milliseconds_u(CUnsignedInt.min))
        let result = CUnsignedInt(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTounsignedintUsingmilliseconds_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = ms_u_to_u(milliseconds_u(CUnsignedInt.max))
        let result = CUnsignedInt(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_uUsing0Expecting0() {
        let expected = u_to_ms_u(0)
        let result = Milliseconds_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_uUsing5Expecting5() {
        let expected = u_to_ms_u(5)
        let result = Milliseconds_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint8_tUsing0Expecting0() {
        let expected = ms_u_to_u8(0)
        let result = UInt8(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint8_tUsing5Expecting5() {
        let expected = ms_u_to_u8(5)
        let result = UInt8(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint8_tUsingmilliseconds_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = ms_u_to_u8(milliseconds_u(CUnsignedInt.min))
        let result = UInt8(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint8_tUsingmilliseconds_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = ms_u_to_u8(milliseconds_u(CUnsignedInt.max))
        let result = UInt8(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_uUsing0Expecting0() {
        let expected = u8_to_ms_u(0)
        let result = Milliseconds_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_uUsing5Expecting5() {
        let expected = u8_to_ms_u(5)
        let result = Milliseconds_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_uUsingUInt8UInt8_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = u8_to_ms_u(UInt8(UInt8.min))
        let result = Milliseconds_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_uUsingUInt8UInt8_maxExpectingmilliseconds_uUInt8_max() {
        let expected = u8_to_ms_u(UInt8(UInt8.max))
        let result = Milliseconds_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint16_tUsing0Expecting0() {
        let expected = ms_u_to_u16(0)
        let result = UInt16(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint16_tUsing5Expecting5() {
        let expected = ms_u_to_u16(5)
        let result = UInt16(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint16_tUsingmilliseconds_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = ms_u_to_u16(milliseconds_u(CUnsignedInt.min))
        let result = UInt16(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint16_tUsingmilliseconds_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = ms_u_to_u16(milliseconds_u(CUnsignedInt.max))
        let result = UInt16(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_uUsing0Expecting0() {
        let expected = u16_to_ms_u(0)
        let result = Milliseconds_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_uUsing5Expecting5() {
        let expected = u16_to_ms_u(5)
        let result = Milliseconds_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_uUsingUInt16UInt16_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = u16_to_ms_u(UInt16(UInt16.min))
        let result = Milliseconds_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_uUsingUInt16UInt16_maxExpectingmilliseconds_uUInt16_max() {
        let expected = u16_to_ms_u(UInt16(UInt16.max))
        let result = Milliseconds_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint32_tUsing0Expecting0() {
        let expected = ms_u_to_u32(0)
        let result = UInt32(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint32_tUsing5Expecting5() {
        let expected = ms_u_to_u32(5)
        let result = UInt32(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint32_tUsingmilliseconds_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = ms_u_to_u32(milliseconds_u(CUnsignedInt.min))
        let result = UInt32(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint32_tUsingmilliseconds_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = ms_u_to_u32(milliseconds_u(CUnsignedInt.max))
        let result = UInt32(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_uUsing0Expecting0() {
        let expected = u32_to_ms_u(0)
        let result = Milliseconds_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_uUsing5Expecting5() {
        let expected = u32_to_ms_u(5)
        let result = Milliseconds_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_uUsingUInt32UInt32_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = u32_to_ms_u(UInt32(UInt32.min))
        let result = Milliseconds_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_uUsingUInt32UInt32_maxExpectingmilliseconds_uCUnsignedInt_max() {
        let expected = u32_to_ms_u(UInt32(UInt32.max))
        let result = Milliseconds_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint64_tUsing0Expecting0() {
        let expected = ms_u_to_u64(0)
        let result = UInt64(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint64_tUsing5Expecting5() {
        let expected = ms_u_to_u64(5)
        let result = UInt64(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint64_tUsingmilliseconds_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = ms_u_to_u64(milliseconds_u(CUnsignedInt.min))
        let result = UInt64(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTouint64_tUsingmilliseconds_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = ms_u_to_u64(milliseconds_u(CUnsignedInt.max))
        let result = UInt64(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_uUsing0Expecting0() {
        let expected = u64_to_ms_u(0)
        let result = Milliseconds_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_uUsing5Expecting5() {
        let expected = u64_to_ms_u(5)
        let result = Milliseconds_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_uUsingUInt64UInt64_minExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = u64_to_ms_u(UInt64(UInt64.min))
        let result = Milliseconds_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_uUsingUInt64UInt64_maxExpectingmilliseconds_uCUnsignedInt_max() {
        let expected = u64_to_ms_u(UInt64(UInt64.max))
        let result = Milliseconds_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTofloatUsing0Expecting0_0() {
        let expected = ms_u_to_f(0)
        let result = Float(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTofloatUsing5Expecting5_0() {
        let expected = ms_u_to_f(5)
        let result = Float(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTofloatUsingmilliseconds_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = ms_u_to_f(milliseconds_u(CUnsignedInt.min))
        let result = Float(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTofloatUsingmilliseconds_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = ms_u_to_f(milliseconds_u(CUnsignedInt.max))
        let result = Float(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_uUsing0_0Expecting0() {
        let expected = f_to_ms_u(0.0)
        let result = Milliseconds_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_uUsing5_0Expecting5() {
        let expected = f_to_ms_u(5.0)
        let result = Milliseconds_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = f_to_ms_u(Float(-Float.greatestFiniteMagnitude))
        let result = Milliseconds_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_uUsingFloatFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let expected = f_to_ms_u(Float(Float.greatestFiniteMagnitude))
        let result = Milliseconds_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTodoubleUsing0Expecting0_0() {
        let expected = ms_u_to_d(0)
        let result = Double(Milliseconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTodoubleUsing5Expecting5_0() {
        let expected = ms_u_to_d(5)
        let result = Double(Milliseconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTodoubleUsingmilliseconds_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = ms_u_to_d(milliseconds_u(CUnsignedInt.min))
        let result = Double(Milliseconds_u(milliseconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_uTodoubleUsingmilliseconds_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = ms_u_to_d(milliseconds_u(CUnsignedInt.max))
        let result = Double(Milliseconds_u(milliseconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_uUsing0_0Expecting0() {
        let expected = d_to_ms_u(0.0)
        let result = Milliseconds_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_uUsing5_0Expecting5() {
        let expected = d_to_ms_u(5.0)
        let result = Milliseconds_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let expected = d_to_ms_u(Double(-Double.greatestFiniteMagnitude))
        let result = Milliseconds_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let expected = d_to_ms_u(Double(Double.greatestFiniteMagnitude))
        let result = Milliseconds_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliseconds_f unit tests.
final class Milliseconds_fTests: XCTestCase {

    func testmilliseconds_fTomicroseconds_tUsing15_0Expectingmicroseconds_t15_01000_0_rounded() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_us_t(15.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsing25_0Expectingmicroseconds_t25_01000_0_rounded() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_us_t(25.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsing250_0Expectingmicroseconds_t250_01000_0_rounded() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_us_t(250.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsing0_0Expectingmicroseconds_t0_01000_0_rounded() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_us_t(0.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsing2500_0Expectingmicroseconds_t2500_01000_0_rounded() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_us_t(2500.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsing25000_0Expectingmicroseconds_t25000_01000_0_rounded() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_us_t(25000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsing250000_0Expectingmicroseconds_t250000_01000_0_rounded() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_us_t(250000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_f(2500000)
        let expected = ms_f_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsingNeg323_0Expectingmicroseconds_tNeg323_01000_0_rounded() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_us_t(-323.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsingNeg10_0Expectingmicroseconds_tNeg10_01000_0_rounded() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_us_t(-10.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsingNeg1000_0Expectingmicroseconds_tNeg1000_01000_0_rounded() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_us_t(-1000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsingNeg5_0Expectingmicroseconds_tNeg5_01000_0_rounded() {
        let unit = Milliseconds_f(-5.0)
        let expected = ms_f_to_us_t(-5.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_t(-Float.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_tUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_t(Float.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_tUsing0_0Expecting0() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_ms_t(0.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let unit = Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude))
        let expected = ms_f_to_ms_t(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let unit = Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude))
        let expected = ms_f_to_ms_t(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_tUsing5_0Expecting5() {
        let unit = Milliseconds_f(5.0)
        let expected = ms_f_to_ms_t(5.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing15_0Expectingseconds_t15_01000_0_rounded() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_s_t(15.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing25_0Expectingseconds_t25_01000_0_rounded() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_s_t(25.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing250_0Expectingseconds_t250_01000_0_rounded() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_s_t(250.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing0_0Expectingseconds_t0_01000_0_rounded() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_s_t(0.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing2500_0Expectingseconds_t2500_01000_0_rounded() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_s_t(2500.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing25000_0Expectingseconds_t25000_01000_0_rounded() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_s_t(25000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing250000_0Expectingseconds_t250000_01000_0_rounded() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_s_t(250000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsing2500000_0Expectingseconds_t2500000_01000_0_rounded() {
        let unit = Milliseconds_f(2500000.0)
        let expected = ms_f_to_s_t(2500000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsingNeg323_0Expectingseconds_tNeg323_01000_0_rounded() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_s_t(-323.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsingNeg10_0Expectingseconds_tNeg10_01000_0_rounded() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_s_t(-10.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsingNeg1000_0Expectingseconds_tNeg1000_01000_0_rounded() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_s_t(-1000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsingNeg5_0Expectingseconds_tNeg5_01000_0_rounded() {
        let unit = Milliseconds_f(-5.0)
        let expected = ms_f_to_s_t(-5.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_t(-Float.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_tUsingFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_t(Float.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing15_0Expectingmicroseconds_u15_01000_0_rounded() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_us_u(15.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing25_0Expectingmicroseconds_u25_01000_0_rounded() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_us_u(25.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing250_0Expectingmicroseconds_u250_01000_0_rounded() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_us_u(250.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing0_0Expectingmicroseconds_u0_01000_0_rounded() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_us_u(0.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing2500_0Expectingmicroseconds_u2500_01000_0_rounded() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_us_u(2500.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing25000_0Expectingmicroseconds_u25000_01000_0_rounded() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_us_u(25000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing250000_0Expectingmicroseconds_u250000_01000_0_rounded() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_us_u(250000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsing2500000_0Expectingmicroseconds_u2500000_01000_0_rounded() {
        let unit = Milliseconds_f(2500000.0)
        let expected = ms_f_to_us_u(2500000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsingNeg323_0Expecting0() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_us_u(-323.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsingNeg10_0Expecting0() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_us_u(-10.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsingNeg1000_0Expecting0() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_us_u(-1000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsingNeg6_0Expecting0() {
        let unit = Milliseconds_f(-6.0)
        let expected = ms_f_to_us_u(-6.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_u(-Float.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_uUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_u(Float.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_uUsing0_0Expecting0() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_ms_u(0.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_uUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude))
        let expected = ms_f_to_ms_u(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_uUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude))
        let expected = ms_f_to_ms_u(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_uUsing5_0Expecting5() {
        let unit = Milliseconds_f(5.0)
        let expected = ms_f_to_ms_u(5.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing15_0Expectingseconds_u15_01000_0_rounded() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_s_u(15.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing25_0Expectingseconds_u25_01000_0_rounded() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_s_u(25.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing250_0Expectingseconds_u250_01000_0_rounded() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_s_u(250.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing0_0Expectingseconds_u0_01000_0_rounded() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_s_u(0.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing2500_0Expectingseconds_u2500_01000_0_rounded() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_s_u(2500.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing25000_0Expectingseconds_u25000_01000_0_rounded() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_s_u(25000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing250000_0Expectingseconds_u250000_01000_0_rounded() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_s_u(250000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsing2500000_0Expectingseconds_u2500000_01000_0_rounded() {
        let unit = Milliseconds_f(2500000.0)
        let expected = ms_f_to_s_u(2500000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsingNeg323_0Expecting0() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_s_u(-323.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsingNeg10_0Expecting0() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_s_u(-10.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsingNeg1000_0Expecting0() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_s_u(-1000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsingNeg6_0Expecting0() {
        let unit = Milliseconds_f(-6.0)
        let expected = ms_f_to_s_u(-6.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_u(-Float.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_uUsingFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_u(Float.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing15_0Expectingmicroseconds_f15_01000_0() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_us_f(15.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing25_0Expectingmicroseconds_f25_01000_0() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_us_f(25.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing250_0Expectingmicroseconds_f250_01000_0() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_us_f(250.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing0_0Expectingmicroseconds_f0_01000_0() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_us_f(0.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing2500_0Expectingmicroseconds_f2500_01000_0() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_us_f(2500.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing25000_0Expectingmicroseconds_f25000_01000_0() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_us_f(25000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing250000_0Expectingmicroseconds_f250000_01000_0() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_us_f(250000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsing2500000_0Expectingmicroseconds_f2500000_01000_0() {
        let unit = Milliseconds_f(2500000.0)
        let expected = ms_f_to_us_f(2500000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsingNeg323_0Expectingmicroseconds_fNeg323_01000_0() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_us_f(-323.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsingNeg10_0Expectingmicroseconds_fNeg10_01000_0() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_us_f(-10.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsingNeg1000_0Expectingmicroseconds_fNeg1000_01000_0() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_us_f(-1000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsingNeg5_0Expectingmicroseconds_fNeg5_01000_0() {
        let unit = Milliseconds_f(-5.0)
        let expected = ms_f_to_us_f(-5.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_f(-Float.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_fUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_f(Float.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing15_0Expectingseconds_f15_01000_0() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_s_f(15.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing25_0Expectingseconds_f25_01000_0() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_s_f(25.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing250_0Expectingseconds_f250_01000_0() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_s_f(250.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing0_0Expectingseconds_f0_01000_0() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_s_f(0.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing2500_0Expectingseconds_f2500_01000_0() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_s_f(2500.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing25000_0Expectingseconds_f25000_01000_0() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_s_f(25000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing250000_0Expectingseconds_f250000_01000_0() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_s_f(250000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsing2500000_0Expectingseconds_f2500000_01000_0() {
        let unit = Milliseconds_f(2500000.0)
        let expected = ms_f_to_s_f(2500000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsingNeg323_0Expectingseconds_fNeg323_01000_0() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_s_f(-323.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsingNeg10_0Expectingseconds_fNeg10_01000_0() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_s_f(-10.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsingNeg1000_0Expectingseconds_fNeg1000_01000_0() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_s_f(-1000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsingNeg5_0Expectingseconds_fNeg5_01000_0() {
        let unit = Milliseconds_f(-5.0)
        let expected = ms_f_to_s_f(-5.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_fNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_f(-Float.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_fUsingFloat_greatestFiniteMagnitudeExpectingseconds_fFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_f(Float.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing15_0Expectingmicroseconds_d15_01000_0() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_us_d(15.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing25_0Expectingmicroseconds_d25_01000_0() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_us_d(25.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing250_0Expectingmicroseconds_d250_01000_0() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_us_d(250.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing0_0Expectingmicroseconds_d0_01000_0() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_us_d(0.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing2500_0Expectingmicroseconds_d2500_01000_0() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_us_d(2500.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing25000_0Expectingmicroseconds_d25000_01000_0() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_us_d(25000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing250000_0Expectingmicroseconds_d250000_01000_0() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_us_d(250000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsing2500000_0Expectingmicroseconds_d2500000_01000_0() {
        let unit = Milliseconds_f(2500000.0)
        let expected = ms_f_to_us_d(2500000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsingNeg323_0Expectingmicroseconds_dNeg323_01000_0() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_us_d(-323.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsingNeg10_0Expectingmicroseconds_dNeg10_01000_0() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_us_d(-10.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsingNeg1000_0Expectingmicroseconds_dNeg1000_01000_0() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_us_d(-1000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsingNeg5_0Expectingmicroseconds_dNeg5_01000_0() {
        let unit = Milliseconds_f(-5.0)
        let expected = ms_f_to_us_d(-5.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_d(-Float.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomicroseconds_dUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_us_d(Float.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_dUsing0_0Expecting0_0() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_ms_d(0.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_dUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_dNegFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude))
        let expected = ms_f_to_ms_d(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_dUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingmilliseconds_dFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude))
        let expected = ms_f_to_ms_d(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTomilliseconds_dUsing5_0Expecting5_0() {
        let unit = Milliseconds_f(5.0)
        let expected = ms_f_to_ms_d(5.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing15_0Expectingseconds_d15_01000_0() {
        let unit = Milliseconds_f(15.0)
        let expected = ms_f_to_s_d(15.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing25_0Expectingseconds_d25_01000_0() {
        let unit = Milliseconds_f(25.0)
        let expected = ms_f_to_s_d(25.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing250_0Expectingseconds_d250_01000_0() {
        let unit = Milliseconds_f(250.0)
        let expected = ms_f_to_s_d(250.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing0_0Expectingseconds_d0_01000_0() {
        let unit = Milliseconds_f(0.0)
        let expected = ms_f_to_s_d(0.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing2500_0Expectingseconds_d2500_01000_0() {
        let unit = Milliseconds_f(2500.0)
        let expected = ms_f_to_s_d(2500.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing25000_0Expectingseconds_d25000_01000_0() {
        let unit = Milliseconds_f(25000.0)
        let expected = ms_f_to_s_d(25000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing250000_0Expectingseconds_d250000_01000_0() {
        let unit = Milliseconds_f(250000.0)
        let expected = ms_f_to_s_d(250000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsing2500000_0Expectingseconds_d2500000_01000_0() {
        let unit = Milliseconds_f(2500000.0)
        let expected = ms_f_to_s_d(2500000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsingNeg323_0Expectingseconds_dNeg323_01000_0() {
        let unit = Milliseconds_f(-323.0)
        let expected = ms_f_to_s_d(-323.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsingNeg10_0Expectingseconds_dNeg10_01000_0() {
        let unit = Milliseconds_f(-10.0)
        let expected = ms_f_to_s_d(-10.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsingNeg1000_0Expectingseconds_dNeg1000_01000_0() {
        let unit = Milliseconds_f(-1000.0)
        let expected = ms_f_to_s_d(-1000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsingNeg5_0Expectingseconds_dNeg5_01000_0() {
        let unit = Milliseconds_f(-5.0)
        let expected = ms_f_to_s_d(-5.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsingNegFloat_greatestFiniteMagnitudeExpectingseconds_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_f(-Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_d(-Float.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fToseconds_dUsingFloat_greatestFiniteMagnitudeExpectingseconds_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_f(Float.greatestFiniteMagnitude)
        let expected = ms_f_to_s_d(Float.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_fTointUsing0_0Expecting0() {
        let expected = ms_f_to_i(0.0)
        let result = CInt(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTointUsing5_0Expecting5() {
        let expected = ms_f_to_i(5.0)
        let result = CInt(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTointUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = ms_f_to_i(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTointUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = ms_f_to_i(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = CInt(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_fUsing0Expecting0_0() {
        let expected = i_to_ms_f(0)
        let result = Milliseconds_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_fUsing5Expecting5_0() {
        let expected = i_to_ms_f(5)
        let result = Milliseconds_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_fUsingCIntCInt_minExpectingmilliseconds_fCInt_min() {
        let expected = i_to_ms_f(CInt(CInt.min))
        let result = Milliseconds_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_fUsingCIntCInt_maxExpectingmilliseconds_fCInt_max() {
        let expected = i_to_ms_f(CInt(CInt.max))
        let result = Milliseconds_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint8_tUsing0_0Expecting0() {
        let expected = ms_f_to_i8(0.0)
        let result = Int8(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint8_tUsing5_0Expecting5() {
        let expected = ms_f_to_i8(5.0)
        let result = Int8(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint8_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = ms_f_to_i8(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint8_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = ms_f_to_i8(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Int8(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = i8_to_ms_f(0)
        let result = Milliseconds_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = i8_to_ms_f(5)
        let result = Milliseconds_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_fUsingInt8Int8_minExpectingmilliseconds_fInt8_min() {
        let expected = i8_to_ms_f(Int8(Int8.min))
        let result = Milliseconds_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_fUsingInt8Int8_maxExpectingmilliseconds_fInt8_max() {
        let expected = i8_to_ms_f(Int8(Int8.max))
        let result = Milliseconds_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint16_tUsing0_0Expecting0() {
        let expected = ms_f_to_i16(0.0)
        let result = Int16(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint16_tUsing5_0Expecting5() {
        let expected = ms_f_to_i16(5.0)
        let result = Int16(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint16_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = ms_f_to_i16(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint16_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = ms_f_to_i16(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Int16(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = i16_to_ms_f(0)
        let result = Milliseconds_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = i16_to_ms_f(5)
        let result = Milliseconds_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_fUsingInt16Int16_minExpectingmilliseconds_fInt16_min() {
        let expected = i16_to_ms_f(Int16(Int16.min))
        let result = Milliseconds_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_fUsingInt16Int16_maxExpectingmilliseconds_fInt16_max() {
        let expected = i16_to_ms_f(Int16(Int16.max))
        let result = Milliseconds_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint32_tUsing0_0Expecting0() {
        let expected = ms_f_to_i32(0.0)
        let result = Int32(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint32_tUsing5_0Expecting5() {
        let expected = ms_f_to_i32(5.0)
        let result = Int32(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint32_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = ms_f_to_i32(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint32_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = ms_f_to_i32(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Int32(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = i32_to_ms_f(0)
        let result = Milliseconds_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = i32_to_ms_f(5)
        let result = Milliseconds_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_fUsingInt32Int32_minExpectingmilliseconds_fInt32_min() {
        let expected = i32_to_ms_f(Int32(Int32.min))
        let result = Milliseconds_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_fUsingInt32Int32_maxExpectingmilliseconds_fInt32_max() {
        let expected = i32_to_ms_f(Int32(Int32.max))
        let result = Milliseconds_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint64_tUsing0_0Expecting0() {
        let expected = ms_f_to_i64(0.0)
        let result = Int64(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint64_tUsing5_0Expecting5() {
        let expected = ms_f_to_i64(5.0)
        let result = Int64(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint64_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = ms_f_to_i64(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fToint64_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = ms_f_to_i64(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Int64(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = i64_to_ms_f(0)
        let result = Milliseconds_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = i64_to_ms_f(5)
        let result = Milliseconds_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_fUsingInt64Int64_minExpectingmilliseconds_fInt64_min() {
        let expected = i64_to_ms_f(Int64(Int64.min))
        let result = Milliseconds_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_fUsingInt64Int64_maxExpectingmilliseconds_fInt64_max() {
        let expected = i64_to_ms_f(Int64(Int64.max))
        let result = Milliseconds_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTounsignedintUsing0_0Expecting0() {
        let expected = ms_f_to_u(0.0)
        let result = CUnsignedInt(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTounsignedintUsing5_0Expecting5() {
        let expected = ms_f_to_u(5.0)
        let result = CUnsignedInt(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTounsignedintUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = ms_f_to_u(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTounsignedintUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = ms_f_to_u(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_fUsing0Expecting0_0() {
        let expected = u_to_ms_f(0)
        let result = Milliseconds_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_fUsing5Expecting5_0() {
        let expected = u_to_ms_f(5)
        let result = Milliseconds_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_fUsingCUnsignedIntCUnsignedInt_minExpectingmilliseconds_fCUnsignedInt_min() {
        let expected = u_to_ms_f(CUnsignedInt(CUnsignedInt.min))
        let result = Milliseconds_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_fUsingCUnsignedIntCUnsignedInt_maxExpectingmilliseconds_fCUnsignedInt_max() {
        let expected = u_to_ms_f(CUnsignedInt(CUnsignedInt.max))
        let result = Milliseconds_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint8_tUsing0_0Expecting0() {
        let expected = ms_f_to_u8(0.0)
        let result = UInt8(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint8_tUsing5_0Expecting5() {
        let expected = ms_f_to_u8(5.0)
        let result = UInt8(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint8_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = ms_f_to_u8(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint8_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = ms_f_to_u8(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = u8_to_ms_f(0)
        let result = Milliseconds_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = u8_to_ms_f(5)
        let result = Milliseconds_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_fUsingUInt8UInt8_minExpectingmilliseconds_fUInt8_min() {
        let expected = u8_to_ms_f(UInt8(UInt8.min))
        let result = Milliseconds_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_fUsingUInt8UInt8_maxExpectingmilliseconds_fUInt8_max() {
        let expected = u8_to_ms_f(UInt8(UInt8.max))
        let result = Milliseconds_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint16_tUsing0_0Expecting0() {
        let expected = ms_f_to_u16(0.0)
        let result = UInt16(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint16_tUsing5_0Expecting5() {
        let expected = ms_f_to_u16(5.0)
        let result = UInt16(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint16_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = ms_f_to_u16(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint16_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = ms_f_to_u16(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = u16_to_ms_f(0)
        let result = Milliseconds_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = u16_to_ms_f(5)
        let result = Milliseconds_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_fUsingUInt16UInt16_minExpectingmilliseconds_fUInt16_min() {
        let expected = u16_to_ms_f(UInt16(UInt16.min))
        let result = Milliseconds_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_fUsingUInt16UInt16_maxExpectingmilliseconds_fUInt16_max() {
        let expected = u16_to_ms_f(UInt16(UInt16.max))
        let result = Milliseconds_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint32_tUsing0_0Expecting0() {
        let expected = ms_f_to_u32(0.0)
        let result = UInt32(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint32_tUsing5_0Expecting5() {
        let expected = ms_f_to_u32(5.0)
        let result = UInt32(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint32_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = ms_f_to_u32(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint32_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = ms_f_to_u32(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = u32_to_ms_f(0)
        let result = Milliseconds_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = u32_to_ms_f(5)
        let result = Milliseconds_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_fUsingUInt32UInt32_minExpectingmilliseconds_fUInt32_min() {
        let expected = u32_to_ms_f(UInt32(UInt32.min))
        let result = Milliseconds_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_fUsingUInt32UInt32_maxExpectingmilliseconds_fUInt32_max() {
        let expected = u32_to_ms_f(UInt32(UInt32.max))
        let result = Milliseconds_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint64_tUsing0_0Expecting0() {
        let expected = ms_f_to_u64(0.0)
        let result = UInt64(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint64_tUsing5_0Expecting5() {
        let expected = ms_f_to_u64(5.0)
        let result = UInt64(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint64_tUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = ms_f_to_u64(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTouint64_tUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = ms_f_to_u64(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_fUsing0Expecting0_0() {
        let expected = u64_to_ms_f(0)
        let result = Milliseconds_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_fUsing5Expecting5_0() {
        let expected = u64_to_ms_f(5)
        let result = Milliseconds_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_fUsingUInt64UInt64_minExpectingmilliseconds_fUInt64_min() {
        let expected = u64_to_ms_f(UInt64(UInt64.min))
        let result = Milliseconds_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_fUsingUInt64UInt64_maxExpectingmilliseconds_fUInt64_max() {
        let expected = u64_to_ms_f(UInt64(UInt64.max))
        let result = Milliseconds_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTofloatUsing0_0Expecting0_0() {
        let expected = ms_f_to_f(0.0)
        let result = Float(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTofloatUsing5_0Expecting5_0() {
        let expected = ms_f_to_f(5.0)
        let result = Float(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTofloatUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = ms_f_to_f(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Float(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTofloatUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = ms_f_to_f(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Float(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_fUsing0_0Expecting0_0() {
        let expected = f_to_ms_f(0.0)
        let result = Milliseconds_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_fUsing5_0Expecting5_0() {
        let expected = f_to_ms_f(5.0)
        let result = Milliseconds_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTodoubleUsing0_0Expecting0_0() {
        let expected = ms_f_to_d(0.0)
        let result = Double(Milliseconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTodoubleUsing5_0Expecting5_0() {
        let expected = ms_f_to_d(5.0)
        let result = Double(Milliseconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTodoubleUsingmilliseconds_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = ms_f_to_d(milliseconds_f(-Float.greatestFiniteMagnitude))
        let result = Double(Milliseconds_f(milliseconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_fTodoubleUsingmilliseconds_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = ms_f_to_d(milliseconds_f(Float.greatestFiniteMagnitude))
        let result = Double(Milliseconds_f(milliseconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_fUsing0_0Expecting0_0() {
        let expected = d_to_ms_f(0.0)
        let result = Milliseconds_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_fUsing5_0Expecting5_0() {
        let expected = d_to_ms_f(5.0)
        let result = Milliseconds_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_ms_f(Double(-Double.greatestFiniteMagnitude))
        let result = Milliseconds_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingmilliseconds_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_ms_f(Double(Double.greatestFiniteMagnitude))
        let result = Milliseconds_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides milliseconds_d unit tests.
final class Milliseconds_dTests: XCTestCase {

    func testmilliseconds_dTomicroseconds_tUsing15_0Expectingmicroseconds_t15_01000_0_rounded() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_us_t(15.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsing25_0Expectingmicroseconds_t25_01000_0_rounded() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_us_t(25.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsing250_0Expectingmicroseconds_t250_01000_0_rounded() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_us_t(250.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsing0_0Expectingmicroseconds_t0_01000_0_rounded() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_us_t(0.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsing2500_0Expectingmicroseconds_t2500_01000_0_rounded() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_us_t(2500.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsing25000_0Expectingmicroseconds_t25000_01000_0_rounded() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_us_t(25000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsing250000_0Expectingmicroseconds_t250000_01000_0_rounded() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_us_t(250000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_d(2500000)
        let expected = ms_d_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsingNeg323_0Expectingmicroseconds_tNeg323_01000_0_rounded() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_us_t(-323.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsingNeg10_0Expectingmicroseconds_tNeg10_01000_0_rounded() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_us_t(-10.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsingNeg1000_0Expectingmicroseconds_tNeg1000_01000_0_rounded() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_us_t(-1000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsingNeg5_0Expectingmicroseconds_tNeg5_01000_0_rounded() {
        let unit = Milliseconds_d(-5.0)
        let expected = ms_d_to_us_t(-5.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_tUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_t(-Double.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomicroseconds_tUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_t(Double.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomilliseconds_tUsing0_0Expecting0() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_ms_t(0.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let unit = Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude))
        let expected = ms_d_to_ms_t(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let unit = Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude))
        let expected = ms_d_to_ms_t(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_tUsing5_0Expecting5() {
        let unit = Milliseconds_d(5.0)
        let expected = ms_d_to_ms_t(5.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing15_0Expectingseconds_t15_01000_0_rounded() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_s_t(15.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing25_0Expectingseconds_t25_01000_0_rounded() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_s_t(25.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing250_0Expectingseconds_t250_01000_0_rounded() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_s_t(250.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing0_0Expectingseconds_t0_01000_0_rounded() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_s_t(0.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing2500_0Expectingseconds_t2500_01000_0_rounded() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_s_t(2500.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing25000_0Expectingseconds_t25000_01000_0_rounded() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_s_t(25000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing250000_0Expectingseconds_t250000_01000_0_rounded() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_s_t(250000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsing2500000_0Expectingseconds_t2500000_01000_0_rounded() {
        let unit = Milliseconds_d(2500000.0)
        let expected = ms_d_to_s_t(2500000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsingNeg323_0Expectingseconds_tNeg323_01000_0_rounded() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_s_t(-323.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsingNeg10_0Expectingseconds_tNeg10_01000_0_rounded() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_s_t(-10.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsingNeg1000_0Expectingseconds_tNeg1000_01000_0_rounded() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_s_t(-1000.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsingNeg5_0Expectingseconds_tNeg5_01000_0_rounded() {
        let unit = Milliseconds_d(-5.0)
        let expected = ms_d_to_s_t(-5.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_tUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_t(-Double.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToseconds_tUsingDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_t(Double.greatestFiniteMagnitude)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomicroseconds_uUsing15_0Expectingmicroseconds_u15_01000_0_rounded() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_us_u(15.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsing25_0Expectingmicroseconds_u25_01000_0_rounded() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_us_u(25.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsing250_0Expectingmicroseconds_u250_01000_0_rounded() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_us_u(250.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsing0_0Expectingmicroseconds_u0_01000_0_rounded() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_us_u(0.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsing2500_0Expectingmicroseconds_u2500_01000_0_rounded() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_us_u(2500.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsing25000_0Expectingmicroseconds_u25000_01000_0_rounded() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_us_u(25000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsing250000_0Expectingmicroseconds_u250000_01000_0_rounded() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_us_u(250000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsing2500000_0Expectingmicroseconds_u2500000_01000_0_rounded() {
        let unit = Milliseconds_d(2500000.0)
        let expected = ms_d_to_us_u(2500000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsingNeg323_0Expecting0() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_us_u(-323.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsingNeg10_0Expecting0() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_us_u(-10.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsingNeg1000_0Expecting0() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_us_u(-1000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsingNeg6_0Expecting0() {
        let unit = Milliseconds_d(-6.0)
        let expected = ms_d_to_us_u(-6.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_uUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_u(-Double.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomicroseconds_uUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_u(Double.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomilliseconds_uUsing0_0Expecting0() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_ms_u(0.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_uUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude))
        let expected = ms_d_to_ms_u(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_uUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude))
        let expected = ms_d_to_ms_u(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_uUsing5_0Expecting5() {
        let unit = Milliseconds_d(5.0)
        let expected = ms_d_to_ms_u(5.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing15_0Expectingseconds_u15_01000_0_rounded() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_s_u(15.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing25_0Expectingseconds_u25_01000_0_rounded() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_s_u(25.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing250_0Expectingseconds_u250_01000_0_rounded() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_s_u(250.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing0_0Expectingseconds_u0_01000_0_rounded() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_s_u(0.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing2500_0Expectingseconds_u2500_01000_0_rounded() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_s_u(2500.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing25000_0Expectingseconds_u25000_01000_0_rounded() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_s_u(25000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing250000_0Expectingseconds_u250000_01000_0_rounded() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_s_u(250000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsing2500000_0Expectingseconds_u2500000_01000_0_rounded() {
        let unit = Milliseconds_d(2500000.0)
        let expected = ms_d_to_s_u(2500000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsingNeg323_0Expecting0() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_s_u(-323.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsingNeg10_0Expecting0() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_s_u(-10.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsingNeg1000_0Expecting0() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_s_u(-1000.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsingNeg6_0Expecting0() {
        let unit = Milliseconds_d(-6.0)
        let expected = ms_d_to_s_u(-6.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_uUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_u(-Double.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToseconds_uUsingDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_u(Double.greatestFiniteMagnitude)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomicroseconds_fUsing15_0Expectingmicroseconds_f15_01000_0() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_us_f(15.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsing25_0Expectingmicroseconds_f25_01000_0() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_us_f(25.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsing250_0Expectingmicroseconds_f250_01000_0() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_us_f(250.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsing0_0Expectingmicroseconds_f0_01000_0() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_us_f(0.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsing2500_0Expectingmicroseconds_f2500_01000_0() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_us_f(2500.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsing25000_0Expectingmicroseconds_f25000_01000_0() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_us_f(25000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsing250000_0Expectingmicroseconds_f250000_01000_0() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_us_f(250000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsing2500000_0Expectingmicroseconds_f2500000_01000_0() {
        let unit = Milliseconds_d(2500000.0)
        let expected = ms_d_to_us_f(2500000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsingNeg323_0Expectingmicroseconds_fNeg323_01000_0() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_us_f(-323.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsingNeg10_0Expectingmicroseconds_fNeg10_01000_0() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_us_f(-10.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsingNeg1000_0Expectingmicroseconds_fNeg1000_01000_0() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_us_f(-1000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsingNeg5_0Expectingmicroseconds_fNeg5_01000_0() {
        let unit = Milliseconds_d(-5.0)
        let expected = ms_d_to_us_f(-5.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_fUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_f(-Double.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomicroseconds_fUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_f(Double.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomilliseconds_fUsing0_0Expecting0_0() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_ms_f(0.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_fUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude))
        let expected = ms_d_to_ms_f(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_fUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingmilliseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude))
        let expected = ms_d_to_ms_f(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomilliseconds_fUsing5_0Expecting5_0() {
        let unit = Milliseconds_d(5.0)
        let expected = ms_d_to_ms_f(5.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing15_0Expectingseconds_f15_01000_0() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_s_f(15.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing25_0Expectingseconds_f25_01000_0() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_s_f(25.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing250_0Expectingseconds_f250_01000_0() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_s_f(250.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing0_0Expectingseconds_f0_01000_0() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_s_f(0.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing2500_0Expectingseconds_f2500_01000_0() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_s_f(2500.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing25000_0Expectingseconds_f25000_01000_0() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_s_f(25000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing250000_0Expectingseconds_f250000_01000_0() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_s_f(250000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsing2500000_0Expectingseconds_f2500000_01000_0() {
        let unit = Milliseconds_d(2500000.0)
        let expected = ms_d_to_s_f(2500000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsingNeg323_0Expectingseconds_fNeg323_01000_0() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_s_f(-323.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsingNeg10_0Expectingseconds_fNeg10_01000_0() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_s_f(-10.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsingNeg1000_0Expectingseconds_fNeg1000_01000_0() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_s_f(-1000.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsingNeg5_0Expectingseconds_fNeg5_01000_0() {
        let unit = Milliseconds_d(-5.0)
        let expected = ms_d_to_s_f(-5.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_fUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_f(-Double.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToseconds_fUsingDouble_greatestFiniteMagnitudeExpectingseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_f(Double.greatestFiniteMagnitude)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomicroseconds_dUsing15_0Expectingmicroseconds_d15_01000_0() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_us_d(15.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsing25_0Expectingmicroseconds_d25_01000_0() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_us_d(25.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsing250_0Expectingmicroseconds_d250_01000_0() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_us_d(250.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsing0_0Expectingmicroseconds_d0_01000_0() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_us_d(0.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsing2500_0Expectingmicroseconds_d2500_01000_0() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_us_d(2500.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsing25000_0Expectingmicroseconds_d25000_01000_0() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_us_d(25000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsing250000_0Expectingmicroseconds_d250000_01000_0() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_us_d(250000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsing2500000_0Expectingmicroseconds_d2500000_01000_0() {
        let unit = Milliseconds_d(2500000.0)
        let expected = ms_d_to_us_d(2500000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsingNeg323_0Expectingmicroseconds_dNeg323_01000_0() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_us_d(-323.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsingNeg10_0Expectingmicroseconds_dNeg10_01000_0() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_us_d(-10.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsingNeg1000_0Expectingmicroseconds_dNeg1000_01000_0() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_us_d(-1000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsingNeg5_0Expectingmicroseconds_dNeg5_01000_0() {
        let unit = Milliseconds_d(-5.0)
        let expected = ms_d_to_us_d(-5.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dTomicroseconds_dUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_dNegDouble_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_d(-Double.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTomicroseconds_dUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_dDouble_greatestFiniteMagnitude() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_us_d(Double.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToseconds_dUsing15_0Expectingseconds_d15_01000_0() {
        let unit = Milliseconds_d(15.0)
        let expected = ms_d_to_s_d(15.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsing25_0Expectingseconds_d25_01000_0() {
        let unit = Milliseconds_d(25.0)
        let expected = ms_d_to_s_d(25.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsing250_0Expectingseconds_d250_01000_0() {
        let unit = Milliseconds_d(250.0)
        let expected = ms_d_to_s_d(250.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsing0_0Expectingseconds_d0_01000_0() {
        let unit = Milliseconds_d(0.0)
        let expected = ms_d_to_s_d(0.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsing2500_0Expectingseconds_d2500_01000_0() {
        let unit = Milliseconds_d(2500.0)
        let expected = ms_d_to_s_d(2500.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsing25000_0Expectingseconds_d25000_01000_0() {
        let unit = Milliseconds_d(25000.0)
        let expected = ms_d_to_s_d(25000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsing250000_0Expectingseconds_d250000_01000_0() {
        let unit = Milliseconds_d(250000.0)
        let expected = ms_d_to_s_d(250000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsing2500000_0Expectingseconds_d2500000_01000_0() {
        let unit = Milliseconds_d(2500000.0)
        let expected = ms_d_to_s_d(2500000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsingNeg323_0Expectingseconds_dNeg323_01000_0() {
        let unit = Milliseconds_d(-323.0)
        let expected = ms_d_to_s_d(-323.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsingNeg10_0Expectingseconds_dNeg10_01000_0() {
        let unit = Milliseconds_d(-10.0)
        let expected = ms_d_to_s_d(-10.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsingNeg1000_0Expectingseconds_dNeg1000_01000_0() {
        let unit = Milliseconds_d(-1000.0)
        let expected = ms_d_to_s_d(-1000.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsingNeg5_0Expectingseconds_dNeg5_01000_0() {
        let unit = Milliseconds_d(-5.0)
        let expected = ms_d_to_s_d(-5.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testmilliseconds_dToseconds_dUsingNegDouble_greatestFiniteMagnitudeExpectingseconds_dNegDouble_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_d(-Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_d(-Double.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToseconds_dUsingDouble_greatestFiniteMagnitudeExpectingseconds_dDouble_greatestFiniteMagnitude1000_0() {
        let unit = Milliseconds_d(Double.greatestFiniteMagnitude)
        let expected = ms_d_to_s_d(Double.greatestFiniteMagnitude)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTointUsing0_0Expecting0() {
        let expected = ms_d_to_i(0.0)
        let result = CInt(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTointUsing5_0Expecting5() {
        let expected = ms_d_to_i(5.0)
        let result = CInt(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTointUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = ms_d_to_i(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTointUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = ms_d_to_i(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = CInt(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_dUsing0Expecting0_0() {
        let expected = i_to_ms_d(0)
        let result = Milliseconds_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_dUsing5Expecting5_0() {
        let expected = i_to_ms_d(5)
        let result = Milliseconds_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_dUsingCIntCInt_minExpectingmilliseconds_dCInt_min() {
        let expected = i_to_ms_d(CInt(CInt.min))
        let result = Milliseconds_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintTomilliseconds_dUsingCIntCInt_maxExpectingmilliseconds_dCInt_max() {
        let expected = i_to_ms_d(CInt(CInt.max))
        let result = Milliseconds_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint8_tUsing0_0Expecting0() {
        let expected = ms_d_to_i8(0.0)
        let result = Int8(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint8_tUsing5_0Expecting5() {
        let expected = ms_d_to_i8(5.0)
        let result = Int8(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint8_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = ms_d_to_i8(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint8_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = ms_d_to_i8(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Int8(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = i8_to_ms_d(0)
        let result = Milliseconds_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = i8_to_ms_d(5)
        let result = Milliseconds_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_dUsingInt8Int8_minExpectingmilliseconds_dInt8_min() {
        let expected = i8_to_ms_d(Int8(Int8.min))
        let result = Milliseconds_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tTomilliseconds_dUsingInt8Int8_maxExpectingmilliseconds_dInt8_max() {
        let expected = i8_to_ms_d(Int8(Int8.max))
        let result = Milliseconds_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint16_tUsing0_0Expecting0() {
        let expected = ms_d_to_i16(0.0)
        let result = Int16(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint16_tUsing5_0Expecting5() {
        let expected = ms_d_to_i16(5.0)
        let result = Int16(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint16_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = ms_d_to_i16(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint16_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = ms_d_to_i16(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Int16(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = i16_to_ms_d(0)
        let result = Milliseconds_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = i16_to_ms_d(5)
        let result = Milliseconds_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_dUsingInt16Int16_minExpectingmilliseconds_dInt16_min() {
        let expected = i16_to_ms_d(Int16(Int16.min))
        let result = Milliseconds_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tTomilliseconds_dUsingInt16Int16_maxExpectingmilliseconds_dInt16_max() {
        let expected = i16_to_ms_d(Int16(Int16.max))
        let result = Milliseconds_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint32_tUsing0_0Expecting0() {
        let expected = ms_d_to_i32(0.0)
        let result = Int32(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint32_tUsing5_0Expecting5() {
        let expected = ms_d_to_i32(5.0)
        let result = Int32(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint32_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = ms_d_to_i32(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint32_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = ms_d_to_i32(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Int32(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = i32_to_ms_d(0)
        let result = Milliseconds_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = i32_to_ms_d(5)
        let result = Milliseconds_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_dUsingInt32Int32_minExpectingmilliseconds_dInt32_min() {
        let expected = i32_to_ms_d(Int32(Int32.min))
        let result = Milliseconds_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tTomilliseconds_dUsingInt32Int32_maxExpectingmilliseconds_dInt32_max() {
        let expected = i32_to_ms_d(Int32(Int32.max))
        let result = Milliseconds_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint64_tUsing0_0Expecting0() {
        let expected = ms_d_to_i64(0.0)
        let result = Int64(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint64_tUsing5_0Expecting5() {
        let expected = ms_d_to_i64(5.0)
        let result = Int64(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint64_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = ms_d_to_i64(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dToint64_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = ms_d_to_i64(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Int64(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = i64_to_ms_d(0)
        let result = Milliseconds_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = i64_to_ms_d(5)
        let result = Milliseconds_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_dUsingInt64Int64_minExpectingmilliseconds_dInt64_min() {
        let expected = i64_to_ms_d(Int64(Int64.min))
        let result = Milliseconds_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tTomilliseconds_dUsingInt64Int64_maxExpectingmilliseconds_dInt64_max() {
        let expected = i64_to_ms_d(Int64(Int64.max))
        let result = Milliseconds_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTounsignedintUsing0_0Expecting0() {
        let expected = ms_d_to_u(0.0)
        let result = CUnsignedInt(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTounsignedintUsing5_0Expecting5() {
        let expected = ms_d_to_u(5.0)
        let result = CUnsignedInt(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTounsignedintUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = ms_d_to_u(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTounsignedintUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = ms_d_to_u(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_dUsing0Expecting0_0() {
        let expected = u_to_ms_d(0)
        let result = Milliseconds_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_dUsing5Expecting5_0() {
        let expected = u_to_ms_d(5)
        let result = Milliseconds_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_dUsingCUnsignedIntCUnsignedInt_minExpectingmilliseconds_dCUnsignedInt_min() {
        let expected = u_to_ms_d(CUnsignedInt(CUnsignedInt.min))
        let result = Milliseconds_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintTomilliseconds_dUsingCUnsignedIntCUnsignedInt_maxExpectingmilliseconds_dCUnsignedInt_max() {
        let expected = u_to_ms_d(CUnsignedInt(CUnsignedInt.max))
        let result = Milliseconds_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint8_tUsing0_0Expecting0() {
        let expected = ms_d_to_u8(0.0)
        let result = UInt8(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint8_tUsing5_0Expecting5() {
        let expected = ms_d_to_u8(5.0)
        let result = UInt8(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint8_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = ms_d_to_u8(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint8_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = ms_d_to_u8(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = u8_to_ms_d(0)
        let result = Milliseconds_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = u8_to_ms_d(5)
        let result = Milliseconds_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_dUsingUInt8UInt8_minExpectingmilliseconds_dUInt8_min() {
        let expected = u8_to_ms_d(UInt8(UInt8.min))
        let result = Milliseconds_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tTomilliseconds_dUsingUInt8UInt8_maxExpectingmilliseconds_dUInt8_max() {
        let expected = u8_to_ms_d(UInt8(UInt8.max))
        let result = Milliseconds_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint16_tUsing0_0Expecting0() {
        let expected = ms_d_to_u16(0.0)
        let result = UInt16(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint16_tUsing5_0Expecting5() {
        let expected = ms_d_to_u16(5.0)
        let result = UInt16(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint16_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = ms_d_to_u16(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint16_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = ms_d_to_u16(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = u16_to_ms_d(0)
        let result = Milliseconds_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = u16_to_ms_d(5)
        let result = Milliseconds_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_dUsingUInt16UInt16_minExpectingmilliseconds_dUInt16_min() {
        let expected = u16_to_ms_d(UInt16(UInt16.min))
        let result = Milliseconds_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tTomilliseconds_dUsingUInt16UInt16_maxExpectingmilliseconds_dUInt16_max() {
        let expected = u16_to_ms_d(UInt16(UInt16.max))
        let result = Milliseconds_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint32_tUsing0_0Expecting0() {
        let expected = ms_d_to_u32(0.0)
        let result = UInt32(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint32_tUsing5_0Expecting5() {
        let expected = ms_d_to_u32(5.0)
        let result = UInt32(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint32_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = ms_d_to_u32(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint32_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = ms_d_to_u32(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = u32_to_ms_d(0)
        let result = Milliseconds_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = u32_to_ms_d(5)
        let result = Milliseconds_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_dUsingUInt32UInt32_minExpectingmilliseconds_dUInt32_min() {
        let expected = u32_to_ms_d(UInt32(UInt32.min))
        let result = Milliseconds_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tTomilliseconds_dUsingUInt32UInt32_maxExpectingmilliseconds_dUInt32_max() {
        let expected = u32_to_ms_d(UInt32(UInt32.max))
        let result = Milliseconds_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint64_tUsing0_0Expecting0() {
        let expected = ms_d_to_u64(0.0)
        let result = UInt64(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint64_tUsing5_0Expecting5() {
        let expected = ms_d_to_u64(5.0)
        let result = UInt64(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint64_tUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = ms_d_to_u64(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTouint64_tUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = ms_d_to_u64(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_dUsing0Expecting0_0() {
        let expected = u64_to_ms_d(0)
        let result = Milliseconds_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_dUsing5Expecting5_0() {
        let expected = u64_to_ms_d(5)
        let result = Milliseconds_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_dUsingUInt64UInt64_minExpectingmilliseconds_dUInt64_min() {
        let expected = u64_to_ms_d(UInt64(UInt64.min))
        let result = Milliseconds_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tTomilliseconds_dUsingUInt64UInt64_maxExpectingmilliseconds_dUInt64_max() {
        let expected = u64_to_ms_d(UInt64(UInt64.max))
        let result = Milliseconds_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTofloatUsing0_0Expecting0_0() {
        let expected = ms_d_to_f(0.0)
        let result = Float(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTofloatUsing5_0Expecting5_0() {
        let expected = ms_d_to_f(5.0)
        let result = Float(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTofloatUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = ms_d_to_f(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Float(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTofloatUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = ms_d_to_f(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Float(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_dUsing0_0Expecting0_0() {
        let expected = f_to_ms_d(0.0)
        let result = Milliseconds_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_dUsing5_0Expecting5_0() {
        let expected = f_to_ms_d(5.0)
        let result = Milliseconds_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_ms_d(Float(-Float.greatestFiniteMagnitude))
        let result = Milliseconds_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatTomilliseconds_dUsingFloatFloat_greatestFiniteMagnitudeExpectingmilliseconds_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_ms_d(Float(Float.greatestFiniteMagnitude))
        let result = Milliseconds_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTodoubleUsing0_0Expecting0_0() {
        let expected = ms_d_to_d(0.0)
        let result = Double(Milliseconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTodoubleUsing5_0Expecting5_0() {
        let expected = ms_d_to_d(5.0)
        let result = Double(Milliseconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTodoubleUsingmilliseconds_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = ms_d_to_d(milliseconds_d(-Double.greatestFiniteMagnitude))
        let result = Double(Milliseconds_d(milliseconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testmilliseconds_dTodoubleUsingmilliseconds_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = ms_d_to_d(milliseconds_d(Double.greatestFiniteMagnitude))
        let result = Double(Milliseconds_d(milliseconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_dUsing0_0Expecting0_0() {
        let expected = d_to_ms_d(0.0)
        let result = Milliseconds_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleTomilliseconds_dUsing5_0Expecting5_0() {
        let expected = d_to_ms_d(5.0)
        let result = Milliseconds_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides seconds_t unit tests.
final class Seconds_tTests: XCTestCase {

    func testseconds_tTomicroseconds_tUsing15Expectingmicroseconds_t151000000() {
        let unit = Seconds_t(15)
        let expected = s_t_to_us_t(15)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsing25Expectingmicroseconds_t251000000() {
        let unit = Seconds_t(25)
        let expected = s_t_to_us_t(25)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsing250Expectingmicroseconds_t2501000000() {
        let unit = Seconds_t(250)
        let expected = s_t_to_us_t(250)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsing0Expectingmicroseconds_t01000000() {
        let unit = Seconds_t(0)
        let expected = s_t_to_us_t(0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsing2500Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_us_t(2500)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsing25000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_us_t(25000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsing250000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_us_t(250000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsingNeg323Expectingmicroseconds_tNeg3231000000() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_us_t(-323)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsingNeg10Expectingmicroseconds_tNeg101000000() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_us_t(-10)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsingNeg1000Expectingmicroseconds_tNeg10001000000() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_us_t(-1000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsingNeg5Expectingmicroseconds_tNeg51000000() {
        let unit = Seconds_t(-5)
        let expected = s_t_to_us_t(-5)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsingCInt_minExpectingmicroseconds_tCInt_min() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_us_t(CInt.min)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_tUsingCInt_maxExpectingmicroseconds_tCInt_max() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_us_t(CInt.max)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing15Expectingmilliseconds_t151000() {
        let unit = Seconds_t(15)
        let expected = s_t_to_ms_t(15)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing25Expectingmilliseconds_t251000() {
        let unit = Seconds_t(25)
        let expected = s_t_to_ms_t(25)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing250Expectingmilliseconds_t2501000() {
        let unit = Seconds_t(250)
        let expected = s_t_to_ms_t(250)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing0Expectingmilliseconds_t01000() {
        let unit = Seconds_t(0)
        let expected = s_t_to_ms_t(0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing2500Expectingmilliseconds_t25001000() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_ms_t(2500)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing25000Expectingmilliseconds_t250001000() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_ms_t(25000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing250000Expectingmilliseconds_t2500001000() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_ms_t(250000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsing2500000Expectingmilliseconds_tCInt_max() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_ms_t(2500000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsingNeg323Expectingmilliseconds_tNeg3231000() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_ms_t(-323)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsingNeg10Expectingmilliseconds_tNeg101000() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_ms_t(-10)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsingNeg1000Expectingmilliseconds_tNeg10001000() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_ms_t(-1000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsingNeg5Expectingmilliseconds_tNeg51000() {
        let unit = Seconds_t(-5)
        let expected = s_t_to_ms_t(-5)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsingCInt_minExpectingmilliseconds_tCInt_min() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_ms_t(CInt.min)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_tUsingCInt_maxExpectingmilliseconds_tCInt_max() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_ms_t(CInt.max)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing15Expectingmicroseconds_u151000000() {
        let unit = Seconds_t(15)
        let expected = s_t_to_us_u(15)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing25Expectingmicroseconds_u251000000() {
        let unit = Seconds_t(25)
        let expected = s_t_to_us_u(25)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing250Expectingmicroseconds_u2501000000() {
        let unit = Seconds_t(250)
        let expected = s_t_to_us_u(250)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing0Expectingmicroseconds_u01000000() {
        let unit = Seconds_t(0)
        let expected = s_t_to_us_u(0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing2500Expectingmicroseconds_u25001000000() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_us_u(2500)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing25000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_us_u(25000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing250000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_us_u(250000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsing2500000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_us_u(2500000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsingNeg323Expecting0() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_us_u(-323)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsingNeg10Expecting0() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_us_u(-10)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsingNeg1000Expecting0() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_us_u(-1000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsingNeg6Expecting0() {
        let unit = Seconds_t(-6)
        let expected = s_t_to_us_u(-6)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsingCInt_minExpecting0() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_us_u(CInt.min)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_uUsingCInt_maxExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_us_u(CInt.max)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing15Expectingmilliseconds_u151000() {
        let unit = Seconds_t(15)
        let expected = s_t_to_ms_u(15)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing25Expectingmilliseconds_u251000() {
        let unit = Seconds_t(25)
        let expected = s_t_to_ms_u(25)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing250Expectingmilliseconds_u2501000() {
        let unit = Seconds_t(250)
        let expected = s_t_to_ms_u(250)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing0Expectingmilliseconds_u01000() {
        let unit = Seconds_t(0)
        let expected = s_t_to_ms_u(0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing2500Expectingmilliseconds_u25001000() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_ms_u(2500)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing25000Expectingmilliseconds_u250001000() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_ms_u(25000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing250000Expectingmilliseconds_u2500001000() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_ms_u(250000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsing2500000Expectingmilliseconds_u25000001000() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_ms_u(2500000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsingNeg323Expecting0() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_ms_u(-323)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsingNeg10Expecting0() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_ms_u(-10)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsingNeg1000Expecting0() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_ms_u(-1000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsingNeg6Expecting0() {
        let unit = Seconds_t(-6)
        let expected = s_t_to_ms_u(-6)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsingCInt_minExpecting0() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_ms_u(CInt.min)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_uUsingCInt_maxExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_ms_u(CInt.max)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_uUsing0Expecting0() {
        let unit = Seconds_t(0)
        let expected = s_t_to_s_u(0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_uUsingseconds_tCInt_minExpectingseconds_uCUnsignedInt_min() {
        let unit = Seconds_t(seconds_t(CInt.min))
        let expected = s_t_to_s_u(seconds_t(CInt.min))
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_uUsingseconds_tCInt_maxExpectingseconds_uCInt_max() {
        let unit = Seconds_t(seconds_t(CInt.max))
        let expected = s_t_to_s_u(seconds_t(CInt.max))
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_uUsing5Expecting5() {
        let unit = Seconds_t(5)
        let expected = s_t_to_s_u(5)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing15Expectingmicroseconds_f15_01000000_0() {
        let unit = Seconds_t(15)
        let expected = s_t_to_us_f(15)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing25Expectingmicroseconds_f25_01000000_0() {
        let unit = Seconds_t(25)
        let expected = s_t_to_us_f(25)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing250Expectingmicroseconds_f250_01000000_0() {
        let unit = Seconds_t(250)
        let expected = s_t_to_us_f(250)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing0Expectingmicroseconds_f0_01000000_0() {
        let unit = Seconds_t(0)
        let expected = s_t_to_us_f(0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing2500Expectingmicroseconds_f2500_01000000_0() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_us_f(2500)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing25000Expectingmicroseconds_f25000_01000000_0() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_us_f(25000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing250000Expectingmicroseconds_f250000_01000000_0() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_us_f(250000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsing2500000Expectingmicroseconds_f2500000_01000000_0() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_us_f(2500000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsingNeg323Expectingmicroseconds_fNeg323_01000000_0() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_us_f(-323)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsingNeg10Expectingmicroseconds_fNeg10_01000000_0() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_us_f(-10)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsingNeg1000Expectingmicroseconds_fNeg1000_01000000_0() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_us_f(-1000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsingNeg5Expectingmicroseconds_fNeg5_01000000_0() {
        let unit = Seconds_t(-5)
        let expected = s_t_to_us_f(-5)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsingCInt_minExpectingmicroseconds_fCInt_min1000000_0() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_us_f(CInt.min)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_fUsingCInt_maxExpectingmicroseconds_fCInt_max1000000_0() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_us_f(CInt.max)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing15Expectingmilliseconds_f15_01000_0() {
        let unit = Seconds_t(15)
        let expected = s_t_to_ms_f(15)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing25Expectingmilliseconds_f25_01000_0() {
        let unit = Seconds_t(25)
        let expected = s_t_to_ms_f(25)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing250Expectingmilliseconds_f250_01000_0() {
        let unit = Seconds_t(250)
        let expected = s_t_to_ms_f(250)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing0Expectingmilliseconds_f0_01000_0() {
        let unit = Seconds_t(0)
        let expected = s_t_to_ms_f(0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing2500Expectingmilliseconds_f2500_01000_0() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_ms_f(2500)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing25000Expectingmilliseconds_f25000_01000_0() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_ms_f(25000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing250000Expectingmilliseconds_f250000_01000_0() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_ms_f(250000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsing2500000Expectingmilliseconds_f2500000_01000_0() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_ms_f(2500000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsingNeg323Expectingmilliseconds_fNeg323_01000_0() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_ms_f(-323)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsingNeg10Expectingmilliseconds_fNeg10_01000_0() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_ms_f(-10)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsingNeg1000Expectingmilliseconds_fNeg1000_01000_0() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_ms_f(-1000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsingNeg5Expectingmilliseconds_fNeg5_01000_0() {
        let unit = Seconds_t(-5)
        let expected = s_t_to_ms_f(-5)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsingCInt_minExpectingmilliseconds_fCInt_min1000_0() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_ms_f(CInt.min)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_fUsingCInt_maxExpectingmilliseconds_fCInt_max1000_0() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_ms_f(CInt.max)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_fUsing0Expecting0_0() {
        let unit = Seconds_t(0)
        let expected = s_t_to_s_f(0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_fUsingseconds_tCInt_minExpectingseconds_fCInt_min() {
        let unit = Seconds_t(seconds_t(CInt.min))
        let expected = s_t_to_s_f(seconds_t(CInt.min))
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_fUsingseconds_tCInt_maxExpectingseconds_fCInt_max() {
        let unit = Seconds_t(seconds_t(CInt.max))
        let expected = s_t_to_s_f(seconds_t(CInt.max))
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_fUsing5Expecting5_0() {
        let unit = Seconds_t(5)
        let expected = s_t_to_s_f(5)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing15Expectingmicroseconds_d15_01000000_0() {
        let unit = Seconds_t(15)
        let expected = s_t_to_us_d(15)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing25Expectingmicroseconds_d25_01000000_0() {
        let unit = Seconds_t(25)
        let expected = s_t_to_us_d(25)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing250Expectingmicroseconds_d250_01000000_0() {
        let unit = Seconds_t(250)
        let expected = s_t_to_us_d(250)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing0Expectingmicroseconds_d0_01000000_0() {
        let unit = Seconds_t(0)
        let expected = s_t_to_us_d(0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing2500Expectingmicroseconds_d2500_01000000_0() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_us_d(2500)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing25000Expectingmicroseconds_d25000_01000000_0() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_us_d(25000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing250000Expectingmicroseconds_d250000_01000000_0() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_us_d(250000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsing2500000Expectingmicroseconds_d2500000_01000000_0() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_us_d(2500000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsingNeg323Expectingmicroseconds_dNeg323_01000000_0() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_us_d(-323)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsingNeg10Expectingmicroseconds_dNeg10_01000000_0() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_us_d(-10)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsingNeg1000Expectingmicroseconds_dNeg1000_01000000_0() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_us_d(-1000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsingNeg5Expectingmicroseconds_dNeg5_01000000_0() {
        let unit = Seconds_t(-5)
        let expected = s_t_to_us_d(-5)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsingCInt_minExpectingmicroseconds_dCInt_min1000000_0() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_us_d(CInt.min)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomicroseconds_dUsingCInt_maxExpectingmicroseconds_dCInt_max1000000_0() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_us_d(CInt.max)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing15Expectingmilliseconds_d15_01000_0() {
        let unit = Seconds_t(15)
        let expected = s_t_to_ms_d(15)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing25Expectingmilliseconds_d25_01000_0() {
        let unit = Seconds_t(25)
        let expected = s_t_to_ms_d(25)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing250Expectingmilliseconds_d250_01000_0() {
        let unit = Seconds_t(250)
        let expected = s_t_to_ms_d(250)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing0Expectingmilliseconds_d0_01000_0() {
        let unit = Seconds_t(0)
        let expected = s_t_to_ms_d(0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing2500Expectingmilliseconds_d2500_01000_0() {
        let unit = Seconds_t(2500)
        let expected = s_t_to_ms_d(2500)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing25000Expectingmilliseconds_d25000_01000_0() {
        let unit = Seconds_t(25000)
        let expected = s_t_to_ms_d(25000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing250000Expectingmilliseconds_d250000_01000_0() {
        let unit = Seconds_t(250000)
        let expected = s_t_to_ms_d(250000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsing2500000Expectingmilliseconds_d2500000_01000_0() {
        let unit = Seconds_t(2500000)
        let expected = s_t_to_ms_d(2500000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsingNeg323Expectingmilliseconds_dNeg323_01000_0() {
        let unit = Seconds_t(-323)
        let expected = s_t_to_ms_d(-323)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsingNeg10Expectingmilliseconds_dNeg10_01000_0() {
        let unit = Seconds_t(-10)
        let expected = s_t_to_ms_d(-10)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsingNeg1000Expectingmilliseconds_dNeg1000_01000_0() {
        let unit = Seconds_t(-1000)
        let expected = s_t_to_ms_d(-1000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsingNeg5Expectingmilliseconds_dNeg5_01000_0() {
        let unit = Seconds_t(-5)
        let expected = s_t_to_ms_d(-5)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsingCInt_minExpectingmilliseconds_dCInt_min1000_0() {
        let unit = Seconds_t(CInt.min)
        let expected = s_t_to_ms_d(CInt.min)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTomilliseconds_dUsingCInt_maxExpectingmilliseconds_dCInt_max1000_0() {
        let unit = Seconds_t(CInt.max)
        let expected = s_t_to_ms_d(CInt.max)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_dUsing0Expecting0_0() {
        let unit = Seconds_t(0)
        let expected = s_t_to_s_d(0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_dUsingseconds_tCInt_minExpectingseconds_dCInt_min() {
        let unit = Seconds_t(seconds_t(CInt.min))
        let expected = s_t_to_s_d(seconds_t(CInt.min))
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_dUsingseconds_tCInt_maxExpectingseconds_dCInt_max() {
        let unit = Seconds_t(seconds_t(CInt.max))
        let expected = s_t_to_s_d(seconds_t(CInt.max))
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tToseconds_dUsing5Expecting5_0() {
        let unit = Seconds_t(5)
        let expected = s_t_to_s_d(5)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_tTointUsing0Expecting0() {
        let expected = s_t_to_i(0)
        let result = CInt(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTointUsing5Expecting5() {
        let expected = s_t_to_i(5)
        let result = CInt(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTointUsingseconds_tCInt_minExpectingCIntCInt_min() {
        let expected = s_t_to_i(seconds_t(CInt.min))
        let result = CInt(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTointUsingseconds_tCInt_maxExpectingCIntCInt_max() {
        let expected = s_t_to_i(seconds_t(CInt.max))
        let result = CInt(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_tUsing0Expecting0() {
        let expected = i_to_s_t(0)
        let result = Seconds_t(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_tUsing5Expecting5() {
        let expected = i_to_s_t(5)
        let result = Seconds_t(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint8_tUsing0Expecting0() {
        let expected = s_t_to_i8(0)
        let result = Int8(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint8_tUsing5Expecting5() {
        let expected = s_t_to_i8(5)
        let result = Int8(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint8_tUsingseconds_tCInt_minExpectingInt8Int8_min() {
        let expected = s_t_to_i8(seconds_t(CInt.min))
        let result = Int8(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint8_tUsingseconds_tCInt_maxExpectingInt8Int8_max() {
        let expected = s_t_to_i8(seconds_t(CInt.max))
        let result = Int8(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_tUsing0Expecting0() {
        let expected = i8_to_s_t(0)
        let result = Seconds_t(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_tUsing5Expecting5() {
        let expected = i8_to_s_t(5)
        let result = Seconds_t(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_tUsingInt8Int8_minExpectingseconds_tInt8_min() {
        let expected = i8_to_s_t(Int8(Int8.min))
        let result = Seconds_t(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_tUsingInt8Int8_maxExpectingseconds_tInt8_max() {
        let expected = i8_to_s_t(Int8(Int8.max))
        let result = Seconds_t(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint16_tUsing0Expecting0() {
        let expected = s_t_to_i16(0)
        let result = Int16(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint16_tUsing5Expecting5() {
        let expected = s_t_to_i16(5)
        let result = Int16(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint16_tUsingseconds_tCInt_minExpectingInt16Int16_min() {
        let expected = s_t_to_i16(seconds_t(CInt.min))
        let result = Int16(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint16_tUsingseconds_tCInt_maxExpectingInt16Int16_max() {
        let expected = s_t_to_i16(seconds_t(CInt.max))
        let result = Int16(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_tUsing0Expecting0() {
        let expected = i16_to_s_t(0)
        let result = Seconds_t(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_tUsing5Expecting5() {
        let expected = i16_to_s_t(5)
        let result = Seconds_t(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_tUsingInt16Int16_minExpectingseconds_tInt16_min() {
        let expected = i16_to_s_t(Int16(Int16.min))
        let result = Seconds_t(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_tUsingInt16Int16_maxExpectingseconds_tInt16_max() {
        let expected = i16_to_s_t(Int16(Int16.max))
        let result = Seconds_t(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint32_tUsing0Expecting0() {
        let expected = s_t_to_i32(0)
        let result = Int32(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint32_tUsing5Expecting5() {
        let expected = s_t_to_i32(5)
        let result = Int32(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint32_tUsingseconds_tCInt_minExpectingInt32CInt_min() {
        let expected = s_t_to_i32(seconds_t(CInt.min))
        let result = Int32(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint32_tUsingseconds_tCInt_maxExpectingInt32CInt_max() {
        let expected = s_t_to_i32(seconds_t(CInt.max))
        let result = Int32(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_tUsing0Expecting0() {
        let expected = i32_to_s_t(0)
        let result = Seconds_t(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_tUsing5Expecting5() {
        let expected = i32_to_s_t(5)
        let result = Seconds_t(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_tUsingInt32Int32_minExpectingseconds_tCInt_min() {
        let expected = i32_to_s_t(Int32(Int32.min))
        let result = Seconds_t(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_tUsingInt32Int32_maxExpectingseconds_tCInt_max() {
        let expected = i32_to_s_t(Int32(Int32.max))
        let result = Seconds_t(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint64_tUsing0Expecting0() {
        let expected = s_t_to_i64(0)
        let result = Int64(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint64_tUsing5Expecting5() {
        let expected = s_t_to_i64(5)
        let result = Int64(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint64_tUsingseconds_tCInt_minExpectingInt64CInt_min() {
        let expected = s_t_to_i64(seconds_t(CInt.min))
        let result = Int64(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tToint64_tUsingseconds_tCInt_maxExpectingInt64CInt_max() {
        let expected = s_t_to_i64(seconds_t(CInt.max))
        let result = Int64(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_tUsing0Expecting0() {
        let expected = i64_to_s_t(0)
        let result = Seconds_t(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_tUsing5Expecting5() {
        let expected = i64_to_s_t(5)
        let result = Seconds_t(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_tUsingInt64Int64_minExpectingseconds_tCInt_min() {
        let expected = i64_to_s_t(Int64(Int64.min))
        let result = Seconds_t(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_tUsingInt64Int64_maxExpectingseconds_tCInt_max() {
        let expected = i64_to_s_t(Int64(Int64.max))
        let result = Seconds_t(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTounsignedintUsing0Expecting0() {
        let expected = s_t_to_u(0)
        let result = CUnsignedInt(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTounsignedintUsing5Expecting5() {
        let expected = s_t_to_u(5)
        let result = CUnsignedInt(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTounsignedintUsingseconds_tCInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = s_t_to_u(seconds_t(CInt.min))
        let result = CUnsignedInt(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTounsignedintUsingseconds_tCInt_maxExpectingCUnsignedIntCInt_max() {
        let expected = s_t_to_u(seconds_t(CInt.max))
        let result = CUnsignedInt(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_tUsing0Expecting0() {
        let expected = u_to_s_t(0)
        let result = Seconds_t(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_tUsing5Expecting5() {
        let expected = u_to_s_t(5)
        let result = Seconds_t(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_tUsingCUnsignedIntCUnsignedInt_minExpectingseconds_tCUnsignedInt_min() {
        let expected = u_to_s_t(CUnsignedInt(CUnsignedInt.min))
        let result = Seconds_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_tUsingCUnsignedIntCUnsignedInt_maxExpectingseconds_tCInt_max() {
        let expected = u_to_s_t(CUnsignedInt(CUnsignedInt.max))
        let result = Seconds_t(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint8_tUsing0Expecting0() {
        let expected = s_t_to_u8(0)
        let result = UInt8(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint8_tUsing5Expecting5() {
        let expected = s_t_to_u8(5)
        let result = UInt8(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint8_tUsingseconds_tCInt_minExpectingUInt8UInt8_min() {
        let expected = s_t_to_u8(seconds_t(CInt.min))
        let result = UInt8(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint8_tUsingseconds_tCInt_maxExpectingUInt8UInt8_max() {
        let expected = s_t_to_u8(seconds_t(CInt.max))
        let result = UInt8(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_tUsing0Expecting0() {
        let expected = u8_to_s_t(0)
        let result = Seconds_t(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_tUsing5Expecting5() {
        let expected = u8_to_s_t(5)
        let result = Seconds_t(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_tUsingUInt8UInt8_minExpectingseconds_tUInt8_min() {
        let expected = u8_to_s_t(UInt8(UInt8.min))
        let result = Seconds_t(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_tUsingUInt8UInt8_maxExpectingseconds_tUInt8_max() {
        let expected = u8_to_s_t(UInt8(UInt8.max))
        let result = Seconds_t(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint16_tUsing0Expecting0() {
        let expected = s_t_to_u16(0)
        let result = UInt16(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint16_tUsing5Expecting5() {
        let expected = s_t_to_u16(5)
        let result = UInt16(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint16_tUsingseconds_tCInt_minExpectingUInt16UInt16_min() {
        let expected = s_t_to_u16(seconds_t(CInt.min))
        let result = UInt16(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint16_tUsingseconds_tCInt_maxExpectingUInt16UInt16_max() {
        let expected = s_t_to_u16(seconds_t(CInt.max))
        let result = UInt16(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_tUsing0Expecting0() {
        let expected = u16_to_s_t(0)
        let result = Seconds_t(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_tUsing5Expecting5() {
        let expected = u16_to_s_t(5)
        let result = Seconds_t(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_tUsingUInt16UInt16_minExpectingseconds_tUInt16_min() {
        let expected = u16_to_s_t(UInt16(UInt16.min))
        let result = Seconds_t(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_tUsingUInt16UInt16_maxExpectingseconds_tUInt16_max() {
        let expected = u16_to_s_t(UInt16(UInt16.max))
        let result = Seconds_t(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint32_tUsing0Expecting0() {
        let expected = s_t_to_u32(0)
        let result = UInt32(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint32_tUsing5Expecting5() {
        let expected = s_t_to_u32(5)
        let result = UInt32(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint32_tUsingseconds_tCInt_minExpectingUInt32UInt32_min() {
        let expected = s_t_to_u32(seconds_t(CInt.min))
        let result = UInt32(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint32_tUsingseconds_tCInt_maxExpectingUInt32CInt_max() {
        let expected = s_t_to_u32(seconds_t(CInt.max))
        let result = UInt32(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_tUsing0Expecting0() {
        let expected = u32_to_s_t(0)
        let result = Seconds_t(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_tUsing5Expecting5() {
        let expected = u32_to_s_t(5)
        let result = Seconds_t(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_tUsingUInt32UInt32_minExpectingseconds_tUInt32_min() {
        let expected = u32_to_s_t(UInt32(UInt32.min))
        let result = Seconds_t(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_tUsingUInt32UInt32_maxExpectingseconds_tCInt_max() {
        let expected = u32_to_s_t(UInt32(UInt32.max))
        let result = Seconds_t(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint64_tUsing0Expecting0() {
        let expected = s_t_to_u64(0)
        let result = UInt64(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint64_tUsing5Expecting5() {
        let expected = s_t_to_u64(5)
        let result = UInt64(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint64_tUsingseconds_tCInt_minExpectingUInt64UInt64_min() {
        let expected = s_t_to_u64(seconds_t(CInt.min))
        let result = UInt64(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTouint64_tUsingseconds_tCInt_maxExpectingUInt64CInt_max() {
        let expected = s_t_to_u64(seconds_t(CInt.max))
        let result = UInt64(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_tUsing0Expecting0() {
        let expected = u64_to_s_t(0)
        let result = Seconds_t(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_tUsing5Expecting5() {
        let expected = u64_to_s_t(5)
        let result = Seconds_t(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_tUsingUInt64UInt64_minExpectingseconds_tUInt64_min() {
        let expected = u64_to_s_t(UInt64(UInt64.min))
        let result = Seconds_t(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_tUsingUInt64UInt64_maxExpectingseconds_tCInt_max() {
        let expected = u64_to_s_t(UInt64(UInt64.max))
        let result = Seconds_t(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTofloatUsing0Expecting0_0() {
        let expected = s_t_to_f(0)
        let result = Float(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTofloatUsing5Expecting5_0() {
        let expected = s_t_to_f(5)
        let result = Float(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTofloatUsingseconds_tCInt_minExpectingFloatCInt_min() {
        let expected = s_t_to_f(seconds_t(CInt.min))
        let result = Float(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTofloatUsingseconds_tCInt_maxExpectingFloatCInt_max() {
        let expected = s_t_to_f(seconds_t(CInt.max))
        let result = Float(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_tUsing0_0Expecting0() {
        let expected = f_to_s_t(0.0)
        let result = Seconds_t(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_tUsing5_0Expecting5() {
        let expected = f_to_s_t(5.0)
        let result = Seconds_t(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_tUsingFloatNegFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let expected = f_to_s_t(Float(-Float.greatestFiniteMagnitude))
        let result = Seconds_t(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_tUsingFloatFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let expected = f_to_s_t(Float(Float.greatestFiniteMagnitude))
        let result = Seconds_t(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTodoubleUsing0Expecting0_0() {
        let expected = s_t_to_d(0)
        let result = Double(Seconds_t(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTodoubleUsing5Expecting5_0() {
        let expected = s_t_to_d(5)
        let result = Double(Seconds_t(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTodoubleUsingseconds_tCInt_minExpectingDoubleCInt_min() {
        let expected = s_t_to_d(seconds_t(CInt.min))
        let result = Double(Seconds_t(seconds_t(CInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_tTodoubleUsingseconds_tCInt_maxExpectingDoubleCInt_max() {
        let expected = s_t_to_d(seconds_t(CInt.max))
        let result = Double(Seconds_t(seconds_t(CInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_tUsing0_0Expecting0() {
        let expected = d_to_s_t(0.0)
        let result = Seconds_t(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_tUsing5_0Expecting5() {
        let expected = d_to_s_t(5.0)
        let result = Seconds_t(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_tUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let expected = d_to_s_t(Double(-Double.greatestFiniteMagnitude))
        let result = Seconds_t(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_tUsingDoubleDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let expected = d_to_s_t(Double(Double.greatestFiniteMagnitude))
        let result = Seconds_t(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides seconds_u unit tests.
final class Seconds_uTests: XCTestCase {

    func testseconds_uTomicroseconds_tUsing15Expectingmicroseconds_t151000000() {
        let unit = Seconds_u(15)
        let expected = s_u_to_us_t(15)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsing25Expectingmicroseconds_t251000000() {
        let unit = Seconds_u(25)
        let expected = s_u_to_us_t(25)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsing250Expectingmicroseconds_t2501000000() {
        let unit = Seconds_u(250)
        let expected = s_u_to_us_t(250)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsing0Expectingmicroseconds_t01000000() {
        let unit = Seconds_u(0)
        let expected = s_u_to_us_t(0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsing2500Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_us_t(2500)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsing25000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_us_t(25000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsing250000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_us_t(250000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsingCUnsignedInt_minExpectingmicroseconds_tCUnsignedInt_min1000000() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_us_t(CUnsignedInt.min)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_tUsingCUnsignedInt_maxExpectingmicroseconds_tCInt_max() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_us_t(CUnsignedInt.max)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing15Expectingmilliseconds_t151000() {
        let unit = Seconds_u(15)
        let expected = s_u_to_ms_t(15)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing25Expectingmilliseconds_t251000() {
        let unit = Seconds_u(25)
        let expected = s_u_to_ms_t(25)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing250Expectingmilliseconds_t2501000() {
        let unit = Seconds_u(250)
        let expected = s_u_to_ms_t(250)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing0Expectingmilliseconds_t01000() {
        let unit = Seconds_u(0)
        let expected = s_u_to_ms_t(0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing2500Expectingmilliseconds_t25001000() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_ms_t(2500)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing25000Expectingmilliseconds_t250001000() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_ms_t(25000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing250000Expectingmilliseconds_t2500001000() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_ms_t(250000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsing2500000Expectingmilliseconds_tCInt_max() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_ms_t(2500000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsingCUnsignedInt_minExpectingmilliseconds_tCUnsignedInt_min1000() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_ms_t(CUnsignedInt.min)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_tUsingCUnsignedInt_maxExpectingmilliseconds_tCInt_max() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_ms_t(CUnsignedInt.max)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_tUsing0Expecting0() {
        let unit = Seconds_u(0)
        let expected = s_u_to_s_t(0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_tUsingseconds_uCUnsignedInt_minExpectingseconds_tCUnsignedInt_min() {
        let unit = Seconds_u(seconds_u(CUnsignedInt.min))
        let expected = s_u_to_s_t(seconds_u(CUnsignedInt.min))
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_tUsingseconds_uCUnsignedInt_maxExpectingseconds_tCInt_max() {
        let unit = Seconds_u(seconds_u(CUnsignedInt.max))
        let expected = s_u_to_s_t(seconds_u(CUnsignedInt.max))
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_tUsing5Expecting5() {
        let unit = Seconds_u(5)
        let expected = s_u_to_s_t(5)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing15Expectingmicroseconds_u151000000() {
        let unit = Seconds_u(15)
        let expected = s_u_to_us_u(15)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing25Expectingmicroseconds_u251000000() {
        let unit = Seconds_u(25)
        let expected = s_u_to_us_u(25)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing250Expectingmicroseconds_u2501000000() {
        let unit = Seconds_u(250)
        let expected = s_u_to_us_u(250)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing0Expectingmicroseconds_u01000000() {
        let unit = Seconds_u(0)
        let expected = s_u_to_us_u(0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing2500Expectingmicroseconds_u25001000000() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_us_u(2500)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing25000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_us_u(25000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing250000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_us_u(250000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsing2500000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_us_u(2500000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsingCUnsignedInt_minExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_us_u(CUnsignedInt.min)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_uUsingCUnsignedInt_maxExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_us_u(CUnsignedInt.max)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing15Expectingmilliseconds_u151000() {
        let unit = Seconds_u(15)
        let expected = s_u_to_ms_u(15)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing25Expectingmilliseconds_u251000() {
        let unit = Seconds_u(25)
        let expected = s_u_to_ms_u(25)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing250Expectingmilliseconds_u2501000() {
        let unit = Seconds_u(250)
        let expected = s_u_to_ms_u(250)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing0Expectingmilliseconds_u01000() {
        let unit = Seconds_u(0)
        let expected = s_u_to_ms_u(0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing2500Expectingmilliseconds_u25001000() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_ms_u(2500)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing25000Expectingmilliseconds_u250001000() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_ms_u(25000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing250000Expectingmilliseconds_u2500001000() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_ms_u(250000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsing2500000Expectingmilliseconds_u25000001000() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_ms_u(2500000)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsingCUnsignedInt_minExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_ms_u(CUnsignedInt.min)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_uUsingCUnsignedInt_maxExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_ms_u(CUnsignedInt.max)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing15Expectingmicroseconds_f15_01000000_0() {
        let unit = Seconds_u(15)
        let expected = s_u_to_us_f(15)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing25Expectingmicroseconds_f25_01000000_0() {
        let unit = Seconds_u(25)
        let expected = s_u_to_us_f(25)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing250Expectingmicroseconds_f250_01000000_0() {
        let unit = Seconds_u(250)
        let expected = s_u_to_us_f(250)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing0Expectingmicroseconds_f0_01000000_0() {
        let unit = Seconds_u(0)
        let expected = s_u_to_us_f(0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing2500Expectingmicroseconds_f2500_01000000_0() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_us_f(2500)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing25000Expectingmicroseconds_f25000_01000000_0() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_us_f(25000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing250000Expectingmicroseconds_f250000_01000000_0() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_us_f(250000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsing2500000Expectingmicroseconds_f2500000_01000000_0() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_us_f(2500000)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsingCUnsignedInt_minExpectingmicroseconds_fCUnsignedInt_min1000000_0() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_us_f(CUnsignedInt.min)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_fUsingCUnsignedInt_maxExpectingmicroseconds_fCUnsignedInt_max1000000_0() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_us_f(CUnsignedInt.max)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing15Expectingmilliseconds_f15_01000_0() {
        let unit = Seconds_u(15)
        let expected = s_u_to_ms_f(15)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing25Expectingmilliseconds_f25_01000_0() {
        let unit = Seconds_u(25)
        let expected = s_u_to_ms_f(25)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing250Expectingmilliseconds_f250_01000_0() {
        let unit = Seconds_u(250)
        let expected = s_u_to_ms_f(250)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing0Expectingmilliseconds_f0_01000_0() {
        let unit = Seconds_u(0)
        let expected = s_u_to_ms_f(0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing2500Expectingmilliseconds_f2500_01000_0() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_ms_f(2500)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing25000Expectingmilliseconds_f25000_01000_0() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_ms_f(25000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing250000Expectingmilliseconds_f250000_01000_0() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_ms_f(250000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsing2500000Expectingmilliseconds_f2500000_01000_0() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_ms_f(2500000)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsingCUnsignedInt_minExpectingmilliseconds_fCUnsignedInt_min1000_0() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_ms_f(CUnsignedInt.min)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_fUsingCUnsignedInt_maxExpectingmilliseconds_fCUnsignedInt_max1000_0() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_ms_f(CUnsignedInt.max)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_fUsing0Expecting0_0() {
        let unit = Seconds_u(0)
        let expected = s_u_to_s_f(0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_fUsingseconds_uCUnsignedInt_minExpectingseconds_fCUnsignedInt_min() {
        let unit = Seconds_u(seconds_u(CUnsignedInt.min))
        let expected = s_u_to_s_f(seconds_u(CUnsignedInt.min))
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_fUsingseconds_uCUnsignedInt_maxExpectingseconds_fCUnsignedInt_max() {
        let unit = Seconds_u(seconds_u(CUnsignedInt.max))
        let expected = s_u_to_s_f(seconds_u(CUnsignedInt.max))
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_fUsing5Expecting5_0() {
        let unit = Seconds_u(5)
        let expected = s_u_to_s_f(5)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing15Expectingmicroseconds_d15_01000000_0() {
        let unit = Seconds_u(15)
        let expected = s_u_to_us_d(15)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing25Expectingmicroseconds_d25_01000000_0() {
        let unit = Seconds_u(25)
        let expected = s_u_to_us_d(25)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing250Expectingmicroseconds_d250_01000000_0() {
        let unit = Seconds_u(250)
        let expected = s_u_to_us_d(250)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing0Expectingmicroseconds_d0_01000000_0() {
        let unit = Seconds_u(0)
        let expected = s_u_to_us_d(0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing2500Expectingmicroseconds_d2500_01000000_0() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_us_d(2500)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing25000Expectingmicroseconds_d25000_01000000_0() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_us_d(25000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing250000Expectingmicroseconds_d250000_01000000_0() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_us_d(250000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsing2500000Expectingmicroseconds_d2500000_01000000_0() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_us_d(2500000)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsingCUnsignedInt_minExpectingmicroseconds_dCUnsignedInt_min1000000_0() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_us_d(CUnsignedInt.min)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomicroseconds_dUsingCUnsignedInt_maxExpectingmicroseconds_dCUnsignedInt_max1000000_0() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_us_d(CUnsignedInt.max)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing15Expectingmilliseconds_d15_01000_0() {
        let unit = Seconds_u(15)
        let expected = s_u_to_ms_d(15)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing25Expectingmilliseconds_d25_01000_0() {
        let unit = Seconds_u(25)
        let expected = s_u_to_ms_d(25)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing250Expectingmilliseconds_d250_01000_0() {
        let unit = Seconds_u(250)
        let expected = s_u_to_ms_d(250)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing0Expectingmilliseconds_d0_01000_0() {
        let unit = Seconds_u(0)
        let expected = s_u_to_ms_d(0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing2500Expectingmilliseconds_d2500_01000_0() {
        let unit = Seconds_u(2500)
        let expected = s_u_to_ms_d(2500)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing25000Expectingmilliseconds_d25000_01000_0() {
        let unit = Seconds_u(25000)
        let expected = s_u_to_ms_d(25000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing250000Expectingmilliseconds_d250000_01000_0() {
        let unit = Seconds_u(250000)
        let expected = s_u_to_ms_d(250000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsing2500000Expectingmilliseconds_d2500000_01000_0() {
        let unit = Seconds_u(2500000)
        let expected = s_u_to_ms_d(2500000)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsingCUnsignedInt_minExpectingmilliseconds_dCUnsignedInt_min1000_0() {
        let unit = Seconds_u(CUnsignedInt.min)
        let expected = s_u_to_ms_d(CUnsignedInt.min)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTomilliseconds_dUsingCUnsignedInt_maxExpectingmilliseconds_dCUnsignedInt_max1000_0() {
        let unit = Seconds_u(CUnsignedInt.max)
        let expected = s_u_to_ms_d(CUnsignedInt.max)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_dUsing0Expecting0_0() {
        let unit = Seconds_u(0)
        let expected = s_u_to_s_d(0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_dUsingseconds_uCUnsignedInt_minExpectingseconds_dCUnsignedInt_min() {
        let unit = Seconds_u(seconds_u(CUnsignedInt.min))
        let expected = s_u_to_s_d(seconds_u(CUnsignedInt.min))
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_dUsingseconds_uCUnsignedInt_maxExpectingseconds_dCUnsignedInt_max() {
        let unit = Seconds_u(seconds_u(CUnsignedInt.max))
        let expected = s_u_to_s_d(seconds_u(CUnsignedInt.max))
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uToseconds_dUsing5Expecting5_0() {
        let unit = Seconds_u(5)
        let expected = s_u_to_s_d(5)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_uTointUsing0Expecting0() {
        let expected = s_u_to_i(0)
        let result = CInt(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTointUsing5Expecting5() {
        let expected = s_u_to_i(5)
        let result = CInt(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTointUsingseconds_uCUnsignedInt_minExpectingCIntCUnsignedInt_min() {
        let expected = s_u_to_i(seconds_u(CUnsignedInt.min))
        let result = CInt(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTointUsingseconds_uCUnsignedInt_maxExpectingCIntCInt_max() {
        let expected = s_u_to_i(seconds_u(CUnsignedInt.max))
        let result = CInt(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_uUsing0Expecting0() {
        let expected = i_to_s_u(0)
        let result = Seconds_u(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_uUsing5Expecting5() {
        let expected = i_to_s_u(5)
        let result = Seconds_u(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_uUsingCIntCInt_minExpectingseconds_uCUnsignedInt_min() {
        let expected = i_to_s_u(CInt(CInt.min))
        let result = Seconds_u(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_uUsingCIntCInt_maxExpectingseconds_uCInt_max() {
        let expected = i_to_s_u(CInt(CInt.max))
        let result = Seconds_u(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint8_tUsing0Expecting0() {
        let expected = s_u_to_i8(0)
        let result = Int8(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint8_tUsing5Expecting5() {
        let expected = s_u_to_i8(5)
        let result = Int8(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint8_tUsingseconds_uCUnsignedInt_minExpectingInt8CUnsignedInt_min() {
        let expected = s_u_to_i8(seconds_u(CUnsignedInt.min))
        let result = Int8(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint8_tUsingseconds_uCUnsignedInt_maxExpectingInt8Int8_max() {
        let expected = s_u_to_i8(seconds_u(CUnsignedInt.max))
        let result = Int8(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_uUsing0Expecting0() {
        let expected = i8_to_s_u(0)
        let result = Seconds_u(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_uUsing5Expecting5() {
        let expected = i8_to_s_u(5)
        let result = Seconds_u(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_uUsingInt8Int8_minExpectingseconds_uCUnsignedInt_min() {
        let expected = i8_to_s_u(Int8(Int8.min))
        let result = Seconds_u(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_uUsingInt8Int8_maxExpectingseconds_uInt8_max() {
        let expected = i8_to_s_u(Int8(Int8.max))
        let result = Seconds_u(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint16_tUsing0Expecting0() {
        let expected = s_u_to_i16(0)
        let result = Int16(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint16_tUsing5Expecting5() {
        let expected = s_u_to_i16(5)
        let result = Int16(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint16_tUsingseconds_uCUnsignedInt_minExpectingInt16CUnsignedInt_min() {
        let expected = s_u_to_i16(seconds_u(CUnsignedInt.min))
        let result = Int16(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint16_tUsingseconds_uCUnsignedInt_maxExpectingInt16Int16_max() {
        let expected = s_u_to_i16(seconds_u(CUnsignedInt.max))
        let result = Int16(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_uUsing0Expecting0() {
        let expected = i16_to_s_u(0)
        let result = Seconds_u(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_uUsing5Expecting5() {
        let expected = i16_to_s_u(5)
        let result = Seconds_u(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_uUsingInt16Int16_minExpectingseconds_uCUnsignedInt_min() {
        let expected = i16_to_s_u(Int16(Int16.min))
        let result = Seconds_u(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_uUsingInt16Int16_maxExpectingseconds_uInt16_max() {
        let expected = i16_to_s_u(Int16(Int16.max))
        let result = Seconds_u(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint32_tUsing0Expecting0() {
        let expected = s_u_to_i32(0)
        let result = Int32(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint32_tUsing5Expecting5() {
        let expected = s_u_to_i32(5)
        let result = Int32(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint32_tUsingseconds_uCUnsignedInt_minExpectingInt32CUnsignedInt_min() {
        let expected = s_u_to_i32(seconds_u(CUnsignedInt.min))
        let result = Int32(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint32_tUsingseconds_uCUnsignedInt_maxExpectingInt32Int32_max() {
        let expected = s_u_to_i32(seconds_u(CUnsignedInt.max))
        let result = Int32(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_uUsing0Expecting0() {
        let expected = i32_to_s_u(0)
        let result = Seconds_u(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_uUsing5Expecting5() {
        let expected = i32_to_s_u(5)
        let result = Seconds_u(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_uUsingInt32Int32_minExpectingseconds_uCUnsignedInt_min() {
        let expected = i32_to_s_u(Int32(Int32.min))
        let result = Seconds_u(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_uUsingInt32Int32_maxExpectingseconds_uInt32_max() {
        let expected = i32_to_s_u(Int32(Int32.max))
        let result = Seconds_u(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint64_tUsing0Expecting0() {
        let expected = s_u_to_i64(0)
        let result = Int64(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint64_tUsing5Expecting5() {
        let expected = s_u_to_i64(5)
        let result = Int64(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint64_tUsingseconds_uCUnsignedInt_minExpectingInt64CUnsignedInt_min() {
        let expected = s_u_to_i64(seconds_u(CUnsignedInt.min))
        let result = Int64(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uToint64_tUsingseconds_uCUnsignedInt_maxExpectingInt64CUnsignedInt_max() {
        let expected = s_u_to_i64(seconds_u(CUnsignedInt.max))
        let result = Int64(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_uUsing0Expecting0() {
        let expected = i64_to_s_u(0)
        let result = Seconds_u(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_uUsing5Expecting5() {
        let expected = i64_to_s_u(5)
        let result = Seconds_u(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_uUsingInt64Int64_minExpectingseconds_uCUnsignedInt_min() {
        let expected = i64_to_s_u(Int64(Int64.min))
        let result = Seconds_u(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_uUsingInt64Int64_maxExpectingseconds_uCUnsignedInt_max() {
        let expected = i64_to_s_u(Int64(Int64.max))
        let result = Seconds_u(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTounsignedintUsing0Expecting0() {
        let expected = s_u_to_u(0)
        let result = CUnsignedInt(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTounsignedintUsing5Expecting5() {
        let expected = s_u_to_u(5)
        let result = CUnsignedInt(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTounsignedintUsingseconds_uCUnsignedInt_minExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = s_u_to_u(seconds_u(CUnsignedInt.min))
        let result = CUnsignedInt(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTounsignedintUsingseconds_uCUnsignedInt_maxExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = s_u_to_u(seconds_u(CUnsignedInt.max))
        let result = CUnsignedInt(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_uUsing0Expecting0() {
        let expected = u_to_s_u(0)
        let result = Seconds_u(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_uUsing5Expecting5() {
        let expected = u_to_s_u(5)
        let result = Seconds_u(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint8_tUsing0Expecting0() {
        let expected = s_u_to_u8(0)
        let result = UInt8(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint8_tUsing5Expecting5() {
        let expected = s_u_to_u8(5)
        let result = UInt8(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint8_tUsingseconds_uCUnsignedInt_minExpectingUInt8CUnsignedInt_min() {
        let expected = s_u_to_u8(seconds_u(CUnsignedInt.min))
        let result = UInt8(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint8_tUsingseconds_uCUnsignedInt_maxExpectingUInt8UInt8_max() {
        let expected = s_u_to_u8(seconds_u(CUnsignedInt.max))
        let result = UInt8(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_uUsing0Expecting0() {
        let expected = u8_to_s_u(0)
        let result = Seconds_u(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_uUsing5Expecting5() {
        let expected = u8_to_s_u(5)
        let result = Seconds_u(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_uUsingUInt8UInt8_minExpectingseconds_uCUnsignedInt_min() {
        let expected = u8_to_s_u(UInt8(UInt8.min))
        let result = Seconds_u(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_uUsingUInt8UInt8_maxExpectingseconds_uUInt8_max() {
        let expected = u8_to_s_u(UInt8(UInt8.max))
        let result = Seconds_u(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint16_tUsing0Expecting0() {
        let expected = s_u_to_u16(0)
        let result = UInt16(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint16_tUsing5Expecting5() {
        let expected = s_u_to_u16(5)
        let result = UInt16(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint16_tUsingseconds_uCUnsignedInt_minExpectingUInt16CUnsignedInt_min() {
        let expected = s_u_to_u16(seconds_u(CUnsignedInt.min))
        let result = UInt16(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint16_tUsingseconds_uCUnsignedInt_maxExpectingUInt16UInt16_max() {
        let expected = s_u_to_u16(seconds_u(CUnsignedInt.max))
        let result = UInt16(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_uUsing0Expecting0() {
        let expected = u16_to_s_u(0)
        let result = Seconds_u(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_uUsing5Expecting5() {
        let expected = u16_to_s_u(5)
        let result = Seconds_u(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_uUsingUInt16UInt16_minExpectingseconds_uCUnsignedInt_min() {
        let expected = u16_to_s_u(UInt16(UInt16.min))
        let result = Seconds_u(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_uUsingUInt16UInt16_maxExpectingseconds_uUInt16_max() {
        let expected = u16_to_s_u(UInt16(UInt16.max))
        let result = Seconds_u(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint32_tUsing0Expecting0() {
        let expected = s_u_to_u32(0)
        let result = UInt32(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint32_tUsing5Expecting5() {
        let expected = s_u_to_u32(5)
        let result = UInt32(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint32_tUsingseconds_uCUnsignedInt_minExpectingUInt32CUnsignedInt_min() {
        let expected = s_u_to_u32(seconds_u(CUnsignedInt.min))
        let result = UInt32(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint32_tUsingseconds_uCUnsignedInt_maxExpectingUInt32UInt32_max() {
        let expected = s_u_to_u32(seconds_u(CUnsignedInt.max))
        let result = UInt32(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_uUsing0Expecting0() {
        let expected = u32_to_s_u(0)
        let result = Seconds_u(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_uUsing5Expecting5() {
        let expected = u32_to_s_u(5)
        let result = Seconds_u(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_uUsingUInt32UInt32_minExpectingseconds_uCUnsignedInt_min() {
        let expected = u32_to_s_u(UInt32(UInt32.min))
        let result = Seconds_u(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_uUsingUInt32UInt32_maxExpectingseconds_uCUnsignedInt_max() {
        let expected = u32_to_s_u(UInt32(UInt32.max))
        let result = Seconds_u(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint64_tUsing0Expecting0() {
        let expected = s_u_to_u64(0)
        let result = UInt64(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint64_tUsing5Expecting5() {
        let expected = s_u_to_u64(5)
        let result = UInt64(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint64_tUsingseconds_uCUnsignedInt_minExpectingUInt64CUnsignedInt_min() {
        let expected = s_u_to_u64(seconds_u(CUnsignedInt.min))
        let result = UInt64(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTouint64_tUsingseconds_uCUnsignedInt_maxExpectingUInt64CUnsignedInt_max() {
        let expected = s_u_to_u64(seconds_u(CUnsignedInt.max))
        let result = UInt64(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_uUsing0Expecting0() {
        let expected = u64_to_s_u(0)
        let result = Seconds_u(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_uUsing5Expecting5() {
        let expected = u64_to_s_u(5)
        let result = Seconds_u(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_uUsingUInt64UInt64_minExpectingseconds_uCUnsignedInt_min() {
        let expected = u64_to_s_u(UInt64(UInt64.min))
        let result = Seconds_u(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_uUsingUInt64UInt64_maxExpectingseconds_uCUnsignedInt_max() {
        let expected = u64_to_s_u(UInt64(UInt64.max))
        let result = Seconds_u(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTofloatUsing0Expecting0_0() {
        let expected = s_u_to_f(0)
        let result = Float(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTofloatUsing5Expecting5_0() {
        let expected = s_u_to_f(5)
        let result = Float(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTofloatUsingseconds_uCUnsignedInt_minExpectingFloatCUnsignedInt_min() {
        let expected = s_u_to_f(seconds_u(CUnsignedInt.min))
        let result = Float(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTofloatUsingseconds_uCUnsignedInt_maxExpectingFloatCUnsignedInt_max() {
        let expected = s_u_to_f(seconds_u(CUnsignedInt.max))
        let result = Float(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_uUsing0_0Expecting0() {
        let expected = f_to_s_u(0.0)
        let result = Seconds_u(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_uUsing5_0Expecting5() {
        let expected = f_to_s_u(5.0)
        let result = Seconds_u(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_uUsingFloatNegFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let expected = f_to_s_u(Float(-Float.greatestFiniteMagnitude))
        let result = Seconds_u(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_uUsingFloatFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let expected = f_to_s_u(Float(Float.greatestFiniteMagnitude))
        let result = Seconds_u(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTodoubleUsing0Expecting0_0() {
        let expected = s_u_to_d(0)
        let result = Double(Seconds_u(0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTodoubleUsing5Expecting5_0() {
        let expected = s_u_to_d(5)
        let result = Double(Seconds_u(5))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTodoubleUsingseconds_uCUnsignedInt_minExpectingDoubleCUnsignedInt_min() {
        let expected = s_u_to_d(seconds_u(CUnsignedInt.min))
        let result = Double(Seconds_u(seconds_u(CUnsignedInt.min)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_uTodoubleUsingseconds_uCUnsignedInt_maxExpectingDoubleCUnsignedInt_max() {
        let expected = s_u_to_d(seconds_u(CUnsignedInt.max))
        let result = Double(Seconds_u(seconds_u(CUnsignedInt.max)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_uUsing0_0Expecting0() {
        let expected = d_to_s_u(0.0)
        let result = Seconds_u(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_uUsing5_0Expecting5() {
        let expected = d_to_s_u(5.0)
        let result = Seconds_u(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_uUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let expected = d_to_s_u(Double(-Double.greatestFiniteMagnitude))
        let result = Seconds_u(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_uUsingDoubleDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let expected = d_to_s_u(Double(Double.greatestFiniteMagnitude))
        let result = Seconds_u(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides seconds_f unit tests.
final class Seconds_fTests: XCTestCase {

    func testseconds_fTomicroseconds_tUsing15_0Expectingmicroseconds_t15_01000000_0_rounded() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_us_t(15.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsing25_0Expectingmicroseconds_t25_01000000_0_rounded() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_us_t(25.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsing250_0Expectingmicroseconds_t250_01000000_0_rounded() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_us_t(250.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsing0_0Expectingmicroseconds_t0_01000000_0_rounded() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_us_t(0.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsing2500Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_f(2500)
        let expected = s_f_to_us_t(2500)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsing25000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_f(25000)
        let expected = s_f_to_us_t(25000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsing250000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_f(250000)
        let expected = s_f_to_us_t(250000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_f(2500000)
        let expected = s_f_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsingNeg323_0Expectingmicroseconds_tNeg323_01000000_0_rounded() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_us_t(-323.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsingNeg10_0Expectingmicroseconds_tNeg10_01000000_0_rounded() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_us_t(-10.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsingNeg1000_0Expectingmicroseconds_tNeg1000_01000000_0_rounded() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_us_t(-1000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsingNeg5_0Expectingmicroseconds_tNeg5_01000000_0_rounded() {
        let unit = Seconds_f(-5.0)
        let expected = s_f_to_us_t(-5.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_t(-Float.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_tUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_t(Float.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing15_0Expectingmilliseconds_t15_01000_0_rounded() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_ms_t(15.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing25_0Expectingmilliseconds_t25_01000_0_rounded() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_ms_t(25.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing250_0Expectingmilliseconds_t250_01000_0_rounded() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_ms_t(250.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing0_0Expectingmilliseconds_t0_01000_0_rounded() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_ms_t(0.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing2500_0Expectingmilliseconds_t2500_01000_0_rounded() {
        let unit = Seconds_f(2500.0)
        let expected = s_f_to_ms_t(2500.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing25000_0Expectingmilliseconds_t25000_01000_0_rounded() {
        let unit = Seconds_f(25000.0)
        let expected = s_f_to_ms_t(25000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing250000_0Expectingmilliseconds_t250000_01000_0_rounded() {
        let unit = Seconds_f(250000.0)
        let expected = s_f_to_ms_t(250000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsing2500000Expectingmilliseconds_tCInt_max() {
        let unit = Seconds_f(2500000)
        let expected = s_f_to_ms_t(2500000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsingNeg323_0Expectingmilliseconds_tNeg323_01000_0_rounded() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_ms_t(-323.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsingNeg10_0Expectingmilliseconds_tNeg10_01000_0_rounded() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_ms_t(-10.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsingNeg1000_0Expectingmilliseconds_tNeg1000_01000_0_rounded() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_ms_t(-1000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsingNeg5_0Expectingmilliseconds_tNeg5_01000_0_rounded() {
        let unit = Seconds_f(-5.0)
        let expected = s_f_to_ms_t(-5.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_t(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_tUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_t(Float.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_tUsing0_0Expecting0() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_s_t(0.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let unit = Seconds_f(seconds_f(-Float.greatestFiniteMagnitude))
        let expected = s_f_to_s_t(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let unit = Seconds_f(seconds_f(Float.greatestFiniteMagnitude))
        let expected = s_f_to_s_t(seconds_f(Float.greatestFiniteMagnitude))
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_tUsing5_0Expecting5() {
        let unit = Seconds_f(5.0)
        let expected = s_f_to_s_t(5.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing15_0Expectingmicroseconds_u15_01000000_0_rounded() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_us_u(15.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing25_0Expectingmicroseconds_u25_01000000_0_rounded() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_us_u(25.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing250_0Expectingmicroseconds_u250_01000000_0_rounded() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_us_u(250.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing0_0Expectingmicroseconds_u0_01000000_0_rounded() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_us_u(0.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing2500_0Expectingmicroseconds_u2500_01000000_0_rounded() {
        let unit = Seconds_f(2500.0)
        let expected = s_f_to_us_u(2500.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing25000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_f(25000)
        let expected = s_f_to_us_u(25000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing250000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_f(250000)
        let expected = s_f_to_us_u(250000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsing2500000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_f(2500000)
        let expected = s_f_to_us_u(2500000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsingNeg323_0Expecting0() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_us_u(-323.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsingNeg10_0Expecting0() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_us_u(-10.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsingNeg1000_0Expecting0() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_us_u(-1000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsingNeg6_0Expecting0() {
        let unit = Seconds_f(-6.0)
        let expected = s_f_to_us_u(-6.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_u(-Float.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_uUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_u(Float.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing15_0Expectingmilliseconds_u15_01000_0_rounded() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_ms_u(15.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing25_0Expectingmilliseconds_u25_01000_0_rounded() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_ms_u(25.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing250_0Expectingmilliseconds_u250_01000_0_rounded() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_ms_u(250.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing0_0Expectingmilliseconds_u0_01000_0_rounded() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_ms_u(0.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing2500_0Expectingmilliseconds_u2500_01000_0_rounded() {
        let unit = Seconds_f(2500.0)
        let expected = s_f_to_ms_u(2500.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing25000_0Expectingmilliseconds_u25000_01000_0_rounded() {
        let unit = Seconds_f(25000.0)
        let expected = s_f_to_ms_u(25000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing250000_0Expectingmilliseconds_u250000_01000_0_rounded() {
        let unit = Seconds_f(250000.0)
        let expected = s_f_to_ms_u(250000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsing2500000_0Expectingmilliseconds_u2500000_01000_0_rounded() {
        let unit = Seconds_f(2500000.0)
        let expected = s_f_to_ms_u(2500000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsingNeg323_0Expecting0() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_ms_u(-323.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsingNeg10_0Expecting0() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_ms_u(-10.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsingNeg1000_0Expecting0() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_ms_u(-1000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsingNeg6_0Expecting0() {
        let unit = Seconds_f(-6.0)
        let expected = s_f_to_ms_u(-6.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_u(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_uUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_u(Float.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_uUsing0_0Expecting0() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_s_u(0.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_uUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let unit = Seconds_f(seconds_f(-Float.greatestFiniteMagnitude))
        let expected = s_f_to_s_u(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_uUsingseconds_fFloat_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let unit = Seconds_f(seconds_f(Float.greatestFiniteMagnitude))
        let expected = s_f_to_s_u(seconds_f(Float.greatestFiniteMagnitude))
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_uUsing5_0Expecting5() {
        let unit = Seconds_f(5.0)
        let expected = s_f_to_s_u(5.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing15_0Expectingmicroseconds_f15_01000000_0() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_us_f(15.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing25_0Expectingmicroseconds_f25_01000000_0() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_us_f(25.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing250_0Expectingmicroseconds_f250_01000000_0() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_us_f(250.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing0_0Expectingmicroseconds_f0_01000000_0() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_us_f(0.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing2500_0Expectingmicroseconds_f2500_01000000_0() {
        let unit = Seconds_f(2500.0)
        let expected = s_f_to_us_f(2500.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing25000_0Expectingmicroseconds_f25000_01000000_0() {
        let unit = Seconds_f(25000.0)
        let expected = s_f_to_us_f(25000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing250000_0Expectingmicroseconds_f250000_01000000_0() {
        let unit = Seconds_f(250000.0)
        let expected = s_f_to_us_f(250000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsing2500000_0Expectingmicroseconds_f2500000_01000000_0() {
        let unit = Seconds_f(2500000.0)
        let expected = s_f_to_us_f(2500000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsingNeg323_0Expectingmicroseconds_fNeg323_01000000_0() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_us_f(-323.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsingNeg10_0Expectingmicroseconds_fNeg10_01000000_0() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_us_f(-10.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsingNeg1000_0Expectingmicroseconds_fNeg1000_01000000_0() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_us_f(-1000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsingNeg5_0Expectingmicroseconds_fNeg5_01000000_0() {
        let unit = Seconds_f(-5.0)
        let expected = s_f_to_us_f(-5.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_f(-Float.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_fUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_f(Float.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing15_0Expectingmilliseconds_f15_01000_0() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_ms_f(15.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing25_0Expectingmilliseconds_f25_01000_0() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_ms_f(25.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing250_0Expectingmilliseconds_f250_01000_0() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_ms_f(250.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing0_0Expectingmilliseconds_f0_01000_0() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_ms_f(0.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing2500_0Expectingmilliseconds_f2500_01000_0() {
        let unit = Seconds_f(2500.0)
        let expected = s_f_to_ms_f(2500.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing25000_0Expectingmilliseconds_f25000_01000_0() {
        let unit = Seconds_f(25000.0)
        let expected = s_f_to_ms_f(25000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing250000_0Expectingmilliseconds_f250000_01000_0() {
        let unit = Seconds_f(250000.0)
        let expected = s_f_to_ms_f(250000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsing2500000_0Expectingmilliseconds_f2500000_01000_0() {
        let unit = Seconds_f(2500000.0)
        let expected = s_f_to_ms_f(2500000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsingNeg323_0Expectingmilliseconds_fNeg323_01000_0() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_ms_f(-323.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsingNeg10_0Expectingmilliseconds_fNeg10_01000_0() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_ms_f(-10.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsingNeg1000_0Expectingmilliseconds_fNeg1000_01000_0() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_ms_f(-1000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsingNeg5_0Expectingmilliseconds_fNeg5_01000_0() {
        let unit = Seconds_f(-5.0)
        let expected = s_f_to_ms_f(-5.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_f(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_fUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_f(Float.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing15_0Expectingmicroseconds_d15_01000000_0() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_us_d(15.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing25_0Expectingmicroseconds_d25_01000000_0() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_us_d(25.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing250_0Expectingmicroseconds_d250_01000000_0() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_us_d(250.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing0_0Expectingmicroseconds_d0_01000000_0() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_us_d(0.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing2500_0Expectingmicroseconds_d2500_01000000_0() {
        let unit = Seconds_f(2500.0)
        let expected = s_f_to_us_d(2500.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing25000_0Expectingmicroseconds_d25000_01000000_0() {
        let unit = Seconds_f(25000.0)
        let expected = s_f_to_us_d(25000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing250000_0Expectingmicroseconds_d250000_01000000_0() {
        let unit = Seconds_f(250000.0)
        let expected = s_f_to_us_d(250000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsing2500000_0Expectingmicroseconds_d2500000_01000000_0() {
        let unit = Seconds_f(2500000.0)
        let expected = s_f_to_us_d(2500000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsingNeg323_0Expectingmicroseconds_dNeg323_01000000_0() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_us_d(-323.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsingNeg10_0Expectingmicroseconds_dNeg10_01000000_0() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_us_d(-10.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsingNeg1000_0Expectingmicroseconds_dNeg1000_01000000_0() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_us_d(-1000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsingNeg5_0Expectingmicroseconds_dNeg5_01000000_0() {
        let unit = Seconds_f(-5.0)
        let expected = s_f_to_us_d(-5.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsingNegFloat_greatestFiniteMagnitudeExpectingmicroseconds_dNegFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_d(-Float.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomicroseconds_dUsingFloat_greatestFiniteMagnitudeExpectingmicroseconds_dFloat_greatestFiniteMagnitude1000000_0() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_us_d(Float.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing15_0Expectingmilliseconds_d15_01000_0() {
        let unit = Seconds_f(15.0)
        let expected = s_f_to_ms_d(15.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing25_0Expectingmilliseconds_d25_01000_0() {
        let unit = Seconds_f(25.0)
        let expected = s_f_to_ms_d(25.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing250_0Expectingmilliseconds_d250_01000_0() {
        let unit = Seconds_f(250.0)
        let expected = s_f_to_ms_d(250.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing0_0Expectingmilliseconds_d0_01000_0() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_ms_d(0.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing2500_0Expectingmilliseconds_d2500_01000_0() {
        let unit = Seconds_f(2500.0)
        let expected = s_f_to_ms_d(2500.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing25000_0Expectingmilliseconds_d25000_01000_0() {
        let unit = Seconds_f(25000.0)
        let expected = s_f_to_ms_d(25000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing250000_0Expectingmilliseconds_d250000_01000_0() {
        let unit = Seconds_f(250000.0)
        let expected = s_f_to_ms_d(250000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsing2500000_0Expectingmilliseconds_d2500000_01000_0() {
        let unit = Seconds_f(2500000.0)
        let expected = s_f_to_ms_d(2500000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsingNeg323_0Expectingmilliseconds_dNeg323_01000_0() {
        let unit = Seconds_f(-323.0)
        let expected = s_f_to_ms_d(-323.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsingNeg10_0Expectingmilliseconds_dNeg10_01000_0() {
        let unit = Seconds_f(-10.0)
        let expected = s_f_to_ms_d(-10.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsingNeg1000_0Expectingmilliseconds_dNeg1000_01000_0() {
        let unit = Seconds_f(-1000.0)
        let expected = s_f_to_ms_d(-1000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsingNeg5_0Expectingmilliseconds_dNeg5_01000_0() {
        let unit = Seconds_f(-5.0)
        let expected = s_f_to_ms_d(-5.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsingNegFloat_greatestFiniteMagnitudeExpectingmilliseconds_dNegFloat_greatestFiniteMagnitude1000_0() {
        let unit = Seconds_f(-Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_d(-Float.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTomilliseconds_dUsingFloat_greatestFiniteMagnitudeExpectingmilliseconds_dFloat_greatestFiniteMagnitude1000_0() {
        let unit = Seconds_f(Float.greatestFiniteMagnitude)
        let expected = s_f_to_ms_d(Float.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_dUsing0_0Expecting0_0() {
        let unit = Seconds_f(0.0)
        let expected = s_f_to_s_d(0.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_dUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingseconds_dNegFloat_greatestFiniteMagnitude() {
        let unit = Seconds_f(seconds_f(-Float.greatestFiniteMagnitude))
        let expected = s_f_to_s_d(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_dUsingseconds_fFloat_greatestFiniteMagnitudeExpectingseconds_dFloat_greatestFiniteMagnitude() {
        let unit = Seconds_f(seconds_f(Float.greatestFiniteMagnitude))
        let expected = s_f_to_s_d(seconds_f(Float.greatestFiniteMagnitude))
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fToseconds_dUsing5_0Expecting5_0() {
        let unit = Seconds_f(5.0)
        let expected = s_f_to_s_d(5.0)
        let result = Seconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_d = 1.0
        let categoryResult = Time(unit).seconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_fTointUsing0_0Expecting0() {
        let expected = s_f_to_i(0.0)
        let result = CInt(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTointUsing5_0Expecting5() {
        let expected = s_f_to_i(5.0)
        let result = CInt(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTointUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = s_f_to_i(seconds_f(-Float.greatestFiniteMagnitude))
        let result = CInt(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTointUsingseconds_fFloat_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = s_f_to_i(seconds_f(Float.greatestFiniteMagnitude))
        let result = CInt(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_fUsing0Expecting0_0() {
        let expected = i_to_s_f(0)
        let result = Seconds_f(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_fUsing5Expecting5_0() {
        let expected = i_to_s_f(5)
        let result = Seconds_f(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_fUsingCIntCInt_minExpectingseconds_fCInt_min() {
        let expected = i_to_s_f(CInt(CInt.min))
        let result = Seconds_f(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_fUsingCIntCInt_maxExpectingseconds_fCInt_max() {
        let expected = i_to_s_f(CInt(CInt.max))
        let result = Seconds_f(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint8_tUsing0_0Expecting0() {
        let expected = s_f_to_i8(0.0)
        let result = Int8(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint8_tUsing5_0Expecting5() {
        let expected = s_f_to_i8(5.0)
        let result = Int8(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint8_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = s_f_to_i8(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Int8(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint8_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = s_f_to_i8(seconds_f(Float.greatestFiniteMagnitude))
        let result = Int8(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_fUsing0Expecting0_0() {
        let expected = i8_to_s_f(0)
        let result = Seconds_f(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_fUsing5Expecting5_0() {
        let expected = i8_to_s_f(5)
        let result = Seconds_f(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_fUsingInt8Int8_minExpectingseconds_fInt8_min() {
        let expected = i8_to_s_f(Int8(Int8.min))
        let result = Seconds_f(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_fUsingInt8Int8_maxExpectingseconds_fInt8_max() {
        let expected = i8_to_s_f(Int8(Int8.max))
        let result = Seconds_f(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint16_tUsing0_0Expecting0() {
        let expected = s_f_to_i16(0.0)
        let result = Int16(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint16_tUsing5_0Expecting5() {
        let expected = s_f_to_i16(5.0)
        let result = Int16(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint16_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = s_f_to_i16(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Int16(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint16_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = s_f_to_i16(seconds_f(Float.greatestFiniteMagnitude))
        let result = Int16(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_fUsing0Expecting0_0() {
        let expected = i16_to_s_f(0)
        let result = Seconds_f(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_fUsing5Expecting5_0() {
        let expected = i16_to_s_f(5)
        let result = Seconds_f(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_fUsingInt16Int16_minExpectingseconds_fInt16_min() {
        let expected = i16_to_s_f(Int16(Int16.min))
        let result = Seconds_f(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_fUsingInt16Int16_maxExpectingseconds_fInt16_max() {
        let expected = i16_to_s_f(Int16(Int16.max))
        let result = Seconds_f(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint32_tUsing0_0Expecting0() {
        let expected = s_f_to_i32(0.0)
        let result = Int32(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint32_tUsing5_0Expecting5() {
        let expected = s_f_to_i32(5.0)
        let result = Int32(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint32_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = s_f_to_i32(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Int32(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint32_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = s_f_to_i32(seconds_f(Float.greatestFiniteMagnitude))
        let result = Int32(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_fUsing0Expecting0_0() {
        let expected = i32_to_s_f(0)
        let result = Seconds_f(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_fUsing5Expecting5_0() {
        let expected = i32_to_s_f(5)
        let result = Seconds_f(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_fUsingInt32Int32_minExpectingseconds_fInt32_min() {
        let expected = i32_to_s_f(Int32(Int32.min))
        let result = Seconds_f(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_fUsingInt32Int32_maxExpectingseconds_fInt32_max() {
        let expected = i32_to_s_f(Int32(Int32.max))
        let result = Seconds_f(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint64_tUsing0_0Expecting0() {
        let expected = s_f_to_i64(0.0)
        let result = Int64(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint64_tUsing5_0Expecting5() {
        let expected = s_f_to_i64(5.0)
        let result = Int64(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint64_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = s_f_to_i64(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Int64(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fToint64_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = s_f_to_i64(seconds_f(Float.greatestFiniteMagnitude))
        let result = Int64(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_fUsing0Expecting0_0() {
        let expected = i64_to_s_f(0)
        let result = Seconds_f(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_fUsing5Expecting5_0() {
        let expected = i64_to_s_f(5)
        let result = Seconds_f(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_fUsingInt64Int64_minExpectingseconds_fInt64_min() {
        let expected = i64_to_s_f(Int64(Int64.min))
        let result = Seconds_f(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_fUsingInt64Int64_maxExpectingseconds_fInt64_max() {
        let expected = i64_to_s_f(Int64(Int64.max))
        let result = Seconds_f(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTounsignedintUsing0_0Expecting0() {
        let expected = s_f_to_u(0.0)
        let result = CUnsignedInt(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTounsignedintUsing5_0Expecting5() {
        let expected = s_f_to_u(5.0)
        let result = CUnsignedInt(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTounsignedintUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = s_f_to_u(seconds_f(-Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTounsignedintUsingseconds_fFloat_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = s_f_to_u(seconds_f(Float.greatestFiniteMagnitude))
        let result = CUnsignedInt(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_fUsing0Expecting0_0() {
        let expected = u_to_s_f(0)
        let result = Seconds_f(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_fUsing5Expecting5_0() {
        let expected = u_to_s_f(5)
        let result = Seconds_f(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_fUsingCUnsignedIntCUnsignedInt_minExpectingseconds_fCUnsignedInt_min() {
        let expected = u_to_s_f(CUnsignedInt(CUnsignedInt.min))
        let result = Seconds_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_fUsingCUnsignedIntCUnsignedInt_maxExpectingseconds_fCUnsignedInt_max() {
        let expected = u_to_s_f(CUnsignedInt(CUnsignedInt.max))
        let result = Seconds_f(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint8_tUsing0_0Expecting0() {
        let expected = s_f_to_u8(0.0)
        let result = UInt8(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint8_tUsing5_0Expecting5() {
        let expected = s_f_to_u8(5.0)
        let result = UInt8(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint8_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = s_f_to_u8(seconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt8(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint8_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = s_f_to_u8(seconds_f(Float.greatestFiniteMagnitude))
        let result = UInt8(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_fUsing0Expecting0_0() {
        let expected = u8_to_s_f(0)
        let result = Seconds_f(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_fUsing5Expecting5_0() {
        let expected = u8_to_s_f(5)
        let result = Seconds_f(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_fUsingUInt8UInt8_minExpectingseconds_fUInt8_min() {
        let expected = u8_to_s_f(UInt8(UInt8.min))
        let result = Seconds_f(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_fUsingUInt8UInt8_maxExpectingseconds_fUInt8_max() {
        let expected = u8_to_s_f(UInt8(UInt8.max))
        let result = Seconds_f(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint16_tUsing0_0Expecting0() {
        let expected = s_f_to_u16(0.0)
        let result = UInt16(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint16_tUsing5_0Expecting5() {
        let expected = s_f_to_u16(5.0)
        let result = UInt16(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint16_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = s_f_to_u16(seconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt16(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint16_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = s_f_to_u16(seconds_f(Float.greatestFiniteMagnitude))
        let result = UInt16(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_fUsing0Expecting0_0() {
        let expected = u16_to_s_f(0)
        let result = Seconds_f(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_fUsing5Expecting5_0() {
        let expected = u16_to_s_f(5)
        let result = Seconds_f(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_fUsingUInt16UInt16_minExpectingseconds_fUInt16_min() {
        let expected = u16_to_s_f(UInt16(UInt16.min))
        let result = Seconds_f(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_fUsingUInt16UInt16_maxExpectingseconds_fUInt16_max() {
        let expected = u16_to_s_f(UInt16(UInt16.max))
        let result = Seconds_f(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint32_tUsing0_0Expecting0() {
        let expected = s_f_to_u32(0.0)
        let result = UInt32(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint32_tUsing5_0Expecting5() {
        let expected = s_f_to_u32(5.0)
        let result = UInt32(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint32_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = s_f_to_u32(seconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt32(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint32_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = s_f_to_u32(seconds_f(Float.greatestFiniteMagnitude))
        let result = UInt32(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_fUsing0Expecting0_0() {
        let expected = u32_to_s_f(0)
        let result = Seconds_f(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_fUsing5Expecting5_0() {
        let expected = u32_to_s_f(5)
        let result = Seconds_f(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_fUsingUInt32UInt32_minExpectingseconds_fUInt32_min() {
        let expected = u32_to_s_f(UInt32(UInt32.min))
        let result = Seconds_f(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_fUsingUInt32UInt32_maxExpectingseconds_fUInt32_max() {
        let expected = u32_to_s_f(UInt32(UInt32.max))
        let result = Seconds_f(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint64_tUsing0_0Expecting0() {
        let expected = s_f_to_u64(0.0)
        let result = UInt64(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint64_tUsing5_0Expecting5() {
        let expected = s_f_to_u64(5.0)
        let result = UInt64(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint64_tUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = s_f_to_u64(seconds_f(-Float.greatestFiniteMagnitude))
        let result = UInt64(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTouint64_tUsingseconds_fFloat_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = s_f_to_u64(seconds_f(Float.greatestFiniteMagnitude))
        let result = UInt64(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_fUsing0Expecting0_0() {
        let expected = u64_to_s_f(0)
        let result = Seconds_f(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_fUsing5Expecting5_0() {
        let expected = u64_to_s_f(5)
        let result = Seconds_f(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_fUsingUInt64UInt64_minExpectingseconds_fUInt64_min() {
        let expected = u64_to_s_f(UInt64(UInt64.min))
        let result = Seconds_f(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_fUsingUInt64UInt64_maxExpectingseconds_fUInt64_max() {
        let expected = u64_to_s_f(UInt64(UInt64.max))
        let result = Seconds_f(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTofloatUsing0_0Expecting0_0() {
        let expected = s_f_to_f(0.0)
        let result = Float(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTofloatUsing5_0Expecting5_0() {
        let expected = s_f_to_f(5.0)
        let result = Float(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTofloatUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = s_f_to_f(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Float(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTofloatUsingseconds_fFloat_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = s_f_to_f(seconds_f(Float.greatestFiniteMagnitude))
        let result = Float(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_fUsing0_0Expecting0_0() {
        let expected = f_to_s_f(0.0)
        let result = Seconds_f(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_fUsing5_0Expecting5_0() {
        let expected = f_to_s_f(5.0)
        let result = Seconds_f(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTodoubleUsing0_0Expecting0_0() {
        let expected = s_f_to_d(0.0)
        let result = Double(Seconds_f(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTodoubleUsing5_0Expecting5_0() {
        let expected = s_f_to_d(5.0)
        let result = Double(Seconds_f(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTodoubleUsingseconds_fNegFloat_greatestFiniteMagnitudeExpectingDoubleNegFloat_greatestFiniteMagnitude() {
        let expected = s_f_to_d(seconds_f(-Float.greatestFiniteMagnitude))
        let result = Double(Seconds_f(seconds_f(-Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_fTodoubleUsingseconds_fFloat_greatestFiniteMagnitudeExpectingDoubleFloat_greatestFiniteMagnitude() {
        let expected = s_f_to_d(seconds_f(Float.greatestFiniteMagnitude))
        let result = Double(Seconds_f(seconds_f(Float.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_fUsing0_0Expecting0_0() {
        let expected = d_to_s_f(0.0)
        let result = Seconds_f(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_fUsing5_0Expecting5_0() {
        let expected = d_to_s_f(5.0)
        let result = Seconds_f(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_fUsingDoubleNegDouble_greatestFiniteMagnitudeExpectingseconds_fNegFloat_greatestFiniteMagnitude() {
        let expected = d_to_s_f(Double(-Double.greatestFiniteMagnitude))
        let result = Seconds_f(Double(Double(-Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_fUsingDoubleDouble_greatestFiniteMagnitudeExpectingseconds_fFloat_greatestFiniteMagnitude() {
        let expected = d_to_s_f(Double(Double.greatestFiniteMagnitude))
        let result = Seconds_f(Double(Double(Double.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

}

/// Provides seconds_d unit tests.
final class Seconds_dTests: XCTestCase {

    func testseconds_dTomicroseconds_tUsing15_0Expectingmicroseconds_t15_01000000_0_rounded() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_us_t(15.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsing25_0Expectingmicroseconds_t25_01000000_0_rounded() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_us_t(25.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsing250_0Expectingmicroseconds_t250_01000000_0_rounded() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_us_t(250.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsing0_0Expectingmicroseconds_t0_01000000_0_rounded() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_us_t(0.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsing2500Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_d(2500)
        let expected = s_d_to_us_t(2500)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsing25000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_d(25000)
        let expected = s_d_to_us_t(25000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsing250000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_d(250000)
        let expected = s_d_to_us_t(250000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsing2500000Expectingmicroseconds_tCInt_max() {
        let unit = Seconds_d(2500000)
        let expected = s_d_to_us_t(2500000)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsingNeg323_0Expectingmicroseconds_tNeg323_01000000_0_rounded() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_us_t(-323.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsingNeg10_0Expectingmicroseconds_tNeg10_01000000_0_rounded() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_us_t(-10.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsingNeg1000_0Expectingmicroseconds_tNeg1000_01000000_0_rounded() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_us_t(-1000.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsingNeg5_0Expectingmicroseconds_tNeg5_01000000_0_rounded() {
        let unit = Seconds_d(-5.0)
        let expected = s_d_to_us_t(-5.0)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_t = 1
        let categoryResult = Time(unit).microseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_tUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_min() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_t(-Double.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomicroseconds_tUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_tCInt_max() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_t(Double.greatestFiniteMagnitude)
        let result = Microseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_tUsing15_0Expectingmilliseconds_t15_01000_0_rounded() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_ms_t(15.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsing25_0Expectingmilliseconds_t25_01000_0_rounded() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_ms_t(25.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsing250_0Expectingmilliseconds_t250_01000_0_rounded() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_ms_t(250.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsing0_0Expectingmilliseconds_t0_01000_0_rounded() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_ms_t(0.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsing2500_0Expectingmilliseconds_t2500_01000_0_rounded() {
        let unit = Seconds_d(2500.0)
        let expected = s_d_to_ms_t(2500.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsing25000_0Expectingmilliseconds_t25000_01000_0_rounded() {
        let unit = Seconds_d(25000.0)
        let expected = s_d_to_ms_t(25000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsing250000_0Expectingmilliseconds_t250000_01000_0_rounded() {
        let unit = Seconds_d(250000.0)
        let expected = s_d_to_ms_t(250000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsing2500000Expectingmilliseconds_tCInt_max() {
        let unit = Seconds_d(2500000)
        let expected = s_d_to_ms_t(2500000)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsingNeg323_0Expectingmilliseconds_tNeg323_01000_0_rounded() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_ms_t(-323.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsingNeg10_0Expectingmilliseconds_tNeg10_01000_0_rounded() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_ms_t(-10.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsingNeg1000_0Expectingmilliseconds_tNeg1000_01000_0_rounded() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_ms_t(-1000.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsingNeg5_0Expectingmilliseconds_tNeg5_01000_0_rounded() {
        let unit = Seconds_d(-5.0)
        let expected = s_d_to_ms_t(-5.0)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_t = 1
        let categoryResult = Time(unit).milliseconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_tUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_min() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_t(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_tUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_tCInt_max() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_t(Double.greatestFiniteMagnitude)
        let result = Milliseconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToseconds_tUsing0_0Expecting0() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_s_t(0.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_min() {
        let unit = Seconds_d(seconds_d(-Double.greatestFiniteMagnitude))
        let expected = s_d_to_s_t(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingseconds_tCInt_max() {
        let unit = Seconds_d(seconds_d(Double.greatestFiniteMagnitude))
        let expected = s_d_to_s_t(seconds_d(Double.greatestFiniteMagnitude))
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_tUsing5_0Expecting5() {
        let unit = Seconds_d(5.0)
        let expected = s_d_to_s_t(5.0)
        let result = Seconds_t(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_t = 1
        let categoryResult = Time(unit).seconds_t.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing15_0Expectingmicroseconds_u15_01000000_0_rounded() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_us_u(15.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing25_0Expectingmicroseconds_u25_01000000_0_rounded() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_us_u(25.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing250_0Expectingmicroseconds_u250_01000000_0_rounded() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_us_u(250.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing0_0Expectingmicroseconds_u0_01000000_0_rounded() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_us_u(0.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing2500_0Expectingmicroseconds_u2500_01000000_0_rounded() {
        let unit = Seconds_d(2500.0)
        let expected = s_d_to_us_u(2500.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing25000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_d(25000)
        let expected = s_d_to_us_u(25000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing250000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_d(250000)
        let expected = s_d_to_us_u(250000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsing2500000Expectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_d(2500000)
        let expected = s_d_to_us_u(2500000)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsingNeg323_0Expecting0() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_us_u(-323.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsingNeg10_0Expecting0() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_us_u(-10.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsingNeg1000_0Expecting0() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_us_u(-1000.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsingNeg6_0Expecting0() {
        let unit = Seconds_d(-6.0)
        let expected = s_d_to_us_u(-6.0)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_u = 1
        let categoryResult = Time(unit).microseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_uUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_min() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_u(-Double.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomicroseconds_uUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_uCUnsignedInt_max() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_u(Double.greatestFiniteMagnitude)
        let result = Microseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_uUsing15_0Expectingmilliseconds_u15_01000_0_rounded() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_ms_u(15.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsing25_0Expectingmilliseconds_u25_01000_0_rounded() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_ms_u(25.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsing250_0Expectingmilliseconds_u250_01000_0_rounded() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_ms_u(250.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsing0_0Expectingmilliseconds_u0_01000_0_rounded() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_ms_u(0.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsing2500_0Expectingmilliseconds_u2500_01000_0_rounded() {
        let unit = Seconds_d(2500.0)
        let expected = s_d_to_ms_u(2500.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsing25000_0Expectingmilliseconds_u25000_01000_0_rounded() {
        let unit = Seconds_d(25000.0)
        let expected = s_d_to_ms_u(25000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsing250000_0Expectingmilliseconds_u250000_01000_0_rounded() {
        let unit = Seconds_d(250000.0)
        let expected = s_d_to_ms_u(250000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsing2500000_0Expectingmilliseconds_u2500000_01000_0_rounded() {
        let unit = Seconds_d(2500000.0)
        let expected = s_d_to_ms_u(2500000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsingNeg323_0Expecting0() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_ms_u(-323.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsingNeg10_0Expecting0() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_ms_u(-10.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsingNeg1000_0Expecting0() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_ms_u(-1000.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsingNeg6_0Expecting0() {
        let unit = Seconds_d(-6.0)
        let expected = s_d_to_ms_u(-6.0)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_u = 1
        let categoryResult = Time(unit).milliseconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_uUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_min() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_u(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_uUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_uCUnsignedInt_max() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_u(Double.greatestFiniteMagnitude)
        let result = Milliseconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToseconds_uUsing0_0Expecting0() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_s_u(0.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_uUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_min() {
        let unit = Seconds_d(seconds_d(-Double.greatestFiniteMagnitude))
        let expected = s_d_to_s_u(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_uUsingseconds_dDouble_greatestFiniteMagnitudeExpectingseconds_uCUnsignedInt_max() {
        let unit = Seconds_d(seconds_d(Double.greatestFiniteMagnitude))
        let expected = s_d_to_s_u(seconds_d(Double.greatestFiniteMagnitude))
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_uUsing5_0Expecting5() {
        let unit = Seconds_d(5.0)
        let expected = s_d_to_s_u(5.0)
        let result = Seconds_u(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_u = 1
        let categoryResult = Time(unit).seconds_u.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing15_0Expectingmicroseconds_f15_01000000_0() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_us_f(15.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing25_0Expectingmicroseconds_f25_01000000_0() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_us_f(25.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing250_0Expectingmicroseconds_f250_01000000_0() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_us_f(250.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing0_0Expectingmicroseconds_f0_01000000_0() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_us_f(0.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing2500_0Expectingmicroseconds_f2500_01000000_0() {
        let unit = Seconds_d(2500.0)
        let expected = s_d_to_us_f(2500.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing25000_0Expectingmicroseconds_f25000_01000000_0() {
        let unit = Seconds_d(25000.0)
        let expected = s_d_to_us_f(25000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing250000_0Expectingmicroseconds_f250000_01000000_0() {
        let unit = Seconds_d(250000.0)
        let expected = s_d_to_us_f(250000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsing2500000_0Expectingmicroseconds_f2500000_01000000_0() {
        let unit = Seconds_d(2500000.0)
        let expected = s_d_to_us_f(2500000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsingNeg323_0Expectingmicroseconds_fNeg323_01000000_0() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_us_f(-323.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsingNeg10_0Expectingmicroseconds_fNeg10_01000000_0() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_us_f(-10.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsingNeg1000_0Expectingmicroseconds_fNeg1000_01000000_0() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_us_f(-1000.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsingNeg5_0Expectingmicroseconds_fNeg5_01000000_0() {
        let unit = Seconds_d(-5.0)
        let expected = s_d_to_us_f(-5.0)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_f = 1.0
        let categoryResult = Time(unit).microseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_fUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_f(-Double.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomicroseconds_fUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_f(Double.greatestFiniteMagnitude)
        let result = Microseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_fUsing15_0Expectingmilliseconds_f15_01000_0() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_ms_f(15.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsing25_0Expectingmilliseconds_f25_01000_0() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_ms_f(25.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsing250_0Expectingmilliseconds_f250_01000_0() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_ms_f(250.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsing0_0Expectingmilliseconds_f0_01000_0() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_ms_f(0.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsing2500_0Expectingmilliseconds_f2500_01000_0() {
        let unit = Seconds_d(2500.0)
        let expected = s_d_to_ms_f(2500.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsing25000_0Expectingmilliseconds_f25000_01000_0() {
        let unit = Seconds_d(25000.0)
        let expected = s_d_to_ms_f(25000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsing250000_0Expectingmilliseconds_f250000_01000_0() {
        let unit = Seconds_d(250000.0)
        let expected = s_d_to_ms_f(250000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsing2500000_0Expectingmilliseconds_f2500000_01000_0() {
        let unit = Seconds_d(2500000.0)
        let expected = s_d_to_ms_f(2500000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsingNeg323_0Expectingmilliseconds_fNeg323_01000_0() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_ms_f(-323.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsingNeg10_0Expectingmilliseconds_fNeg10_01000_0() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_ms_f(-10.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsingNeg1000_0Expectingmilliseconds_fNeg1000_01000_0() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_ms_f(-1000.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsingNeg5_0Expectingmilliseconds_fNeg5_01000_0() {
        let unit = Seconds_d(-5.0)
        let expected = s_d_to_ms_f(-5.0)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_f = 1.0
        let categoryResult = Time(unit).milliseconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_fUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_f(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_fUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_f(Double.greatestFiniteMagnitude)
        let result = Milliseconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToseconds_fUsing0_0Expecting0_0() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_s_f(0.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_fUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingseconds_fNegFloat_greatestFiniteMagnitude() {
        let unit = Seconds_d(seconds_d(-Double.greatestFiniteMagnitude))
        let expected = s_d_to_s_f(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_fUsingseconds_dDouble_greatestFiniteMagnitudeExpectingseconds_fFloat_greatestFiniteMagnitude() {
        let unit = Seconds_d(seconds_d(Double.greatestFiniteMagnitude))
        let expected = s_d_to_s_f(seconds_d(Double.greatestFiniteMagnitude))
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dToseconds_fUsing5_0Expecting5_0() {
        let unit = Seconds_d(5.0)
        let expected = s_d_to_s_f(5.0)
        let result = Seconds_f(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: seconds_f = 1.0
        let categoryResult = Time(unit).seconds_f.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing15_0Expectingmicroseconds_d15_01000000_0() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_us_d(15.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing25_0Expectingmicroseconds_d25_01000000_0() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_us_d(25.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing250_0Expectingmicroseconds_d250_01000000_0() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_us_d(250.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing0_0Expectingmicroseconds_d0_01000000_0() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_us_d(0.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing2500_0Expectingmicroseconds_d2500_01000000_0() {
        let unit = Seconds_d(2500.0)
        let expected = s_d_to_us_d(2500.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing25000_0Expectingmicroseconds_d25000_01000000_0() {
        let unit = Seconds_d(25000.0)
        let expected = s_d_to_us_d(25000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing250000_0Expectingmicroseconds_d250000_01000000_0() {
        let unit = Seconds_d(250000.0)
        let expected = s_d_to_us_d(250000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsing2500000_0Expectingmicroseconds_d2500000_01000000_0() {
        let unit = Seconds_d(2500000.0)
        let expected = s_d_to_us_d(2500000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsingNeg323_0Expectingmicroseconds_dNeg323_01000000_0() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_us_d(-323.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsingNeg10_0Expectingmicroseconds_dNeg10_01000000_0() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_us_d(-10.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsingNeg1000_0Expectingmicroseconds_dNeg1000_01000000_0() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_us_d(-1000.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsingNeg5_0Expectingmicroseconds_dNeg5_01000000_0() {
        let unit = Seconds_d(-5.0)
        let expected = s_d_to_us_d(-5.0)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: microseconds_d = 1.0
        let categoryResult = Time(unit).microseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomicroseconds_dUsingNegDouble_greatestFiniteMagnitudeExpectingmicroseconds_dNegDouble_greatestFiniteMagnitude() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_d(-Double.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomicroseconds_dUsingDouble_greatestFiniteMagnitudeExpectingmicroseconds_dDouble_greatestFiniteMagnitude() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_us_d(Double.greatestFiniteMagnitude)
        let result = Microseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_dUsing15_0Expectingmilliseconds_d15_01000_0() {
        let unit = Seconds_d(15.0)
        let expected = s_d_to_ms_d(15.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsing25_0Expectingmilliseconds_d25_01000_0() {
        let unit = Seconds_d(25.0)
        let expected = s_d_to_ms_d(25.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsing250_0Expectingmilliseconds_d250_01000_0() {
        let unit = Seconds_d(250.0)
        let expected = s_d_to_ms_d(250.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsing0_0Expectingmilliseconds_d0_01000_0() {
        let unit = Seconds_d(0.0)
        let expected = s_d_to_ms_d(0.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsing2500_0Expectingmilliseconds_d2500_01000_0() {
        let unit = Seconds_d(2500.0)
        let expected = s_d_to_ms_d(2500.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsing25000_0Expectingmilliseconds_d25000_01000_0() {
        let unit = Seconds_d(25000.0)
        let expected = s_d_to_ms_d(25000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsing250000_0Expectingmilliseconds_d250000_01000_0() {
        let unit = Seconds_d(250000.0)
        let expected = s_d_to_ms_d(250000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsing2500000_0Expectingmilliseconds_d2500000_01000_0() {
        let unit = Seconds_d(2500000.0)
        let expected = s_d_to_ms_d(2500000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsingNeg323_0Expectingmilliseconds_dNeg323_01000_0() {
        let unit = Seconds_d(-323.0)
        let expected = s_d_to_ms_d(-323.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsingNeg10_0Expectingmilliseconds_dNeg10_01000_0() {
        let unit = Seconds_d(-10.0)
        let expected = s_d_to_ms_d(-10.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsingNeg1000_0Expectingmilliseconds_dNeg1000_01000_0() {
        let unit = Seconds_d(-1000.0)
        let expected = s_d_to_ms_d(-1000.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsingNeg5_0Expectingmilliseconds_dNeg5_01000_0() {
        let unit = Seconds_d(-5.0)
        let expected = s_d_to_ms_d(-5.0)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
        let tolerance: milliseconds_d = 1.0
        let categoryResult = Time(unit).milliseconds_d.rawValue
        if categoryResult > expected {
            XCTAssertLessThanOrEqual(categoryResult - expected, tolerance)
        } else {
            XCTAssertLessThanOrEqual(expected - categoryResult, tolerance)
        }
    }

    func testseconds_dTomilliseconds_dUsingNegDouble_greatestFiniteMagnitudeExpectingmilliseconds_dNegDouble_greatestFiniteMagnitude() {
        let unit = Seconds_d(-Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_d(-Double.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTomilliseconds_dUsingDouble_greatestFiniteMagnitudeExpectingmilliseconds_dDouble_greatestFiniteMagnitude() {
        let unit = Seconds_d(Double.greatestFiniteMagnitude)
        let expected = s_d_to_ms_d(Double.greatestFiniteMagnitude)
        let result = Milliseconds_d(unit).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTointUsing0_0Expecting0() {
        let expected = s_d_to_i(0.0)
        let result = CInt(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTointUsing5_0Expecting5() {
        let expected = s_d_to_i(5.0)
        let result = CInt(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTointUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingCIntCInt_min() {
        let expected = s_d_to_i(seconds_d(-Double.greatestFiniteMagnitude))
        let result = CInt(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTointUsingseconds_dDouble_greatestFiniteMagnitudeExpectingCIntCInt_max() {
        let expected = s_d_to_i(seconds_d(Double.greatestFiniteMagnitude))
        let result = CInt(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_dUsing0Expecting0_0() {
        let expected = i_to_s_d(0)
        let result = Seconds_d(CInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_dUsing5Expecting5_0() {
        let expected = i_to_s_d(5)
        let result = Seconds_d(CInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_dUsingCIntCInt_minExpectingseconds_dCInt_min() {
        let expected = i_to_s_d(CInt(CInt.min))
        let result = Seconds_d(CInt(CInt(CInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testintToseconds_dUsingCIntCInt_maxExpectingseconds_dCInt_max() {
        let expected = i_to_s_d(CInt(CInt.max))
        let result = Seconds_d(CInt(CInt(CInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint8_tUsing0_0Expecting0() {
        let expected = s_d_to_i8(0.0)
        let result = Int8(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint8_tUsing5_0Expecting5() {
        let expected = s_d_to_i8(5.0)
        let result = Int8(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint8_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt8Int8_min() {
        let expected = s_d_to_i8(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Int8(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint8_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingInt8Int8_max() {
        let expected = s_d_to_i8(seconds_d(Double.greatestFiniteMagnitude))
        let result = Int8(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_dUsing0Expecting0_0() {
        let expected = i8_to_s_d(0)
        let result = Seconds_d(Int8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_dUsing5Expecting5_0() {
        let expected = i8_to_s_d(5)
        let result = Seconds_d(Int8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_dUsingInt8Int8_minExpectingseconds_dInt8_min() {
        let expected = i8_to_s_d(Int8(Int8.min))
        let result = Seconds_d(Int8(Int8(Int8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint8_tToseconds_dUsingInt8Int8_maxExpectingseconds_dInt8_max() {
        let expected = i8_to_s_d(Int8(Int8.max))
        let result = Seconds_d(Int8(Int8(Int8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint16_tUsing0_0Expecting0() {
        let expected = s_d_to_i16(0.0)
        let result = Int16(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint16_tUsing5_0Expecting5() {
        let expected = s_d_to_i16(5.0)
        let result = Int16(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint16_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt16Int16_min() {
        let expected = s_d_to_i16(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Int16(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint16_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingInt16Int16_max() {
        let expected = s_d_to_i16(seconds_d(Double.greatestFiniteMagnitude))
        let result = Int16(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_dUsing0Expecting0_0() {
        let expected = i16_to_s_d(0)
        let result = Seconds_d(Int16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_dUsing5Expecting5_0() {
        let expected = i16_to_s_d(5)
        let result = Seconds_d(Int16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_dUsingInt16Int16_minExpectingseconds_dInt16_min() {
        let expected = i16_to_s_d(Int16(Int16.min))
        let result = Seconds_d(Int16(Int16(Int16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint16_tToseconds_dUsingInt16Int16_maxExpectingseconds_dInt16_max() {
        let expected = i16_to_s_d(Int16(Int16.max))
        let result = Seconds_d(Int16(Int16(Int16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint32_tUsing0_0Expecting0() {
        let expected = s_d_to_i32(0.0)
        let result = Int32(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint32_tUsing5_0Expecting5() {
        let expected = s_d_to_i32(5.0)
        let result = Int32(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint32_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt32Int32_min() {
        let expected = s_d_to_i32(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Int32(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint32_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingInt32Int32_max() {
        let expected = s_d_to_i32(seconds_d(Double.greatestFiniteMagnitude))
        let result = Int32(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_dUsing0Expecting0_0() {
        let expected = i32_to_s_d(0)
        let result = Seconds_d(Int32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_dUsing5Expecting5_0() {
        let expected = i32_to_s_d(5)
        let result = Seconds_d(Int32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_dUsingInt32Int32_minExpectingseconds_dInt32_min() {
        let expected = i32_to_s_d(Int32(Int32.min))
        let result = Seconds_d(Int32(Int32(Int32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint32_tToseconds_dUsingInt32Int32_maxExpectingseconds_dInt32_max() {
        let expected = i32_to_s_d(Int32(Int32.max))
        let result = Seconds_d(Int32(Int32(Int32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint64_tUsing0_0Expecting0() {
        let expected = s_d_to_i64(0.0)
        let result = Int64(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint64_tUsing5_0Expecting5() {
        let expected = s_d_to_i64(5.0)
        let result = Int64(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint64_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingInt64Int64_min() {
        let expected = s_d_to_i64(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Int64(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dToint64_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingInt64Int64_max() {
        let expected = s_d_to_i64(seconds_d(Double.greatestFiniteMagnitude))
        let result = Int64(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_dUsing0Expecting0_0() {
        let expected = i64_to_s_d(0)
        let result = Seconds_d(Int64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_dUsing5Expecting5_0() {
        let expected = i64_to_s_d(5)
        let result = Seconds_d(Int64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_dUsingInt64Int64_minExpectingseconds_dInt64_min() {
        let expected = i64_to_s_d(Int64(Int64.min))
        let result = Seconds_d(Int64(Int64(Int64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testint64_tToseconds_dUsingInt64Int64_maxExpectingseconds_dInt64_max() {
        let expected = i64_to_s_d(Int64(Int64.max))
        let result = Seconds_d(Int64(Int64(Int64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTounsignedintUsing0_0Expecting0() {
        let expected = s_d_to_u(0.0)
        let result = CUnsignedInt(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTounsignedintUsing5_0Expecting5() {
        let expected = s_d_to_u(5.0)
        let result = CUnsignedInt(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTounsignedintUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_min() {
        let expected = s_d_to_u(seconds_d(-Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTounsignedintUsingseconds_dDouble_greatestFiniteMagnitudeExpectingCUnsignedIntCUnsignedInt_max() {
        let expected = s_d_to_u(seconds_d(Double.greatestFiniteMagnitude))
        let result = CUnsignedInt(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_dUsing0Expecting0_0() {
        let expected = u_to_s_d(0)
        let result = Seconds_d(CUnsignedInt(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_dUsing5Expecting5_0() {
        let expected = u_to_s_d(5)
        let result = Seconds_d(CUnsignedInt(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_dUsingCUnsignedIntCUnsignedInt_minExpectingseconds_dCUnsignedInt_min() {
        let expected = u_to_s_d(CUnsignedInt(CUnsignedInt.min))
        let result = Seconds_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testunsignedintToseconds_dUsingCUnsignedIntCUnsignedInt_maxExpectingseconds_dCUnsignedInt_max() {
        let expected = u_to_s_d(CUnsignedInt(CUnsignedInt.max))
        let result = Seconds_d(CUnsignedInt(CUnsignedInt(CUnsignedInt.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint8_tUsing0_0Expecting0() {
        let expected = s_d_to_u8(0.0)
        let result = UInt8(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint8_tUsing5_0Expecting5() {
        let expected = s_d_to_u8(5.0)
        let result = UInt8(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint8_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_min() {
        let expected = s_d_to_u8(seconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt8(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint8_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingUInt8UInt8_max() {
        let expected = s_d_to_u8(seconds_d(Double.greatestFiniteMagnitude))
        let result = UInt8(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_dUsing0Expecting0_0() {
        let expected = u8_to_s_d(0)
        let result = Seconds_d(UInt8(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_dUsing5Expecting5_0() {
        let expected = u8_to_s_d(5)
        let result = Seconds_d(UInt8(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_dUsingUInt8UInt8_minExpectingseconds_dUInt8_min() {
        let expected = u8_to_s_d(UInt8(UInt8.min))
        let result = Seconds_d(UInt8(UInt8(UInt8.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint8_tToseconds_dUsingUInt8UInt8_maxExpectingseconds_dUInt8_max() {
        let expected = u8_to_s_d(UInt8(UInt8.max))
        let result = Seconds_d(UInt8(UInt8(UInt8.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint16_tUsing0_0Expecting0() {
        let expected = s_d_to_u16(0.0)
        let result = UInt16(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint16_tUsing5_0Expecting5() {
        let expected = s_d_to_u16(5.0)
        let result = UInt16(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint16_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_min() {
        let expected = s_d_to_u16(seconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt16(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint16_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingUInt16UInt16_max() {
        let expected = s_d_to_u16(seconds_d(Double.greatestFiniteMagnitude))
        let result = UInt16(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_dUsing0Expecting0_0() {
        let expected = u16_to_s_d(0)
        let result = Seconds_d(UInt16(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_dUsing5Expecting5_0() {
        let expected = u16_to_s_d(5)
        let result = Seconds_d(UInt16(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_dUsingUInt16UInt16_minExpectingseconds_dUInt16_min() {
        let expected = u16_to_s_d(UInt16(UInt16.min))
        let result = Seconds_d(UInt16(UInt16(UInt16.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint16_tToseconds_dUsingUInt16UInt16_maxExpectingseconds_dUInt16_max() {
        let expected = u16_to_s_d(UInt16(UInt16.max))
        let result = Seconds_d(UInt16(UInt16(UInt16.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint32_tUsing0_0Expecting0() {
        let expected = s_d_to_u32(0.0)
        let result = UInt32(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint32_tUsing5_0Expecting5() {
        let expected = s_d_to_u32(5.0)
        let result = UInt32(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint32_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_min() {
        let expected = s_d_to_u32(seconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt32(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint32_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingUInt32UInt32_max() {
        let expected = s_d_to_u32(seconds_d(Double.greatestFiniteMagnitude))
        let result = UInt32(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_dUsing0Expecting0_0() {
        let expected = u32_to_s_d(0)
        let result = Seconds_d(UInt32(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_dUsing5Expecting5_0() {
        let expected = u32_to_s_d(5)
        let result = Seconds_d(UInt32(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_dUsingUInt32UInt32_minExpectingseconds_dUInt32_min() {
        let expected = u32_to_s_d(UInt32(UInt32.min))
        let result = Seconds_d(UInt32(UInt32(UInt32.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint32_tToseconds_dUsingUInt32UInt32_maxExpectingseconds_dUInt32_max() {
        let expected = u32_to_s_d(UInt32(UInt32.max))
        let result = Seconds_d(UInt32(UInt32(UInt32.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint64_tUsing0_0Expecting0() {
        let expected = s_d_to_u64(0.0)
        let result = UInt64(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint64_tUsing5_0Expecting5() {
        let expected = s_d_to_u64(5.0)
        let result = UInt64(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint64_tUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_min() {
        let expected = s_d_to_u64(seconds_d(-Double.greatestFiniteMagnitude))
        let result = UInt64(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTouint64_tUsingseconds_dDouble_greatestFiniteMagnitudeExpectingUInt64UInt64_max() {
        let expected = s_d_to_u64(seconds_d(Double.greatestFiniteMagnitude))
        let result = UInt64(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_dUsing0Expecting0_0() {
        let expected = u64_to_s_d(0)
        let result = Seconds_d(UInt64(0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_dUsing5Expecting5_0() {
        let expected = u64_to_s_d(5)
        let result = Seconds_d(UInt64(5)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_dUsingUInt64UInt64_minExpectingseconds_dUInt64_min() {
        let expected = u64_to_s_d(UInt64(UInt64.min))
        let result = Seconds_d(UInt64(UInt64(UInt64.min))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testuint64_tToseconds_dUsingUInt64UInt64_maxExpectingseconds_dUInt64_max() {
        let expected = u64_to_s_d(UInt64(UInt64.max))
        let result = Seconds_d(UInt64(UInt64(UInt64.max))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTofloatUsing0_0Expecting0_0() {
        let expected = s_d_to_f(0.0)
        let result = Float(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTofloatUsing5_0Expecting5_0() {
        let expected = s_d_to_f(5.0)
        let result = Float(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTofloatUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingFloatNegFloat_greatestFiniteMagnitude() {
        let expected = s_d_to_f(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Float(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTofloatUsingseconds_dDouble_greatestFiniteMagnitudeExpectingFloatFloat_greatestFiniteMagnitude() {
        let expected = s_d_to_f(seconds_d(Double.greatestFiniteMagnitude))
        let result = Float(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_dUsing0_0Expecting0_0() {
        let expected = f_to_s_d(0.0)
        let result = Seconds_d(Float(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_dUsing5_0Expecting5_0() {
        let expected = f_to_s_d(5.0)
        let result = Seconds_d(Float(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_dUsingFloatNegFloat_greatestFiniteMagnitudeExpectingseconds_dNegFloat_greatestFiniteMagnitude() {
        let expected = f_to_s_d(Float(-Float.greatestFiniteMagnitude))
        let result = Seconds_d(Float(Float(-Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testfloatToseconds_dUsingFloatFloat_greatestFiniteMagnitudeExpectingseconds_dFloat_greatestFiniteMagnitude() {
        let expected = f_to_s_d(Float(Float.greatestFiniteMagnitude))
        let result = Seconds_d(Float(Float(Float.greatestFiniteMagnitude))).rawValue
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTodoubleUsing0_0Expecting0_0() {
        let expected = s_d_to_d(0.0)
        let result = Double(Seconds_d(0.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTodoubleUsing5_0Expecting5_0() {
        let expected = s_d_to_d(5.0)
        let result = Double(Seconds_d(5.0))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTodoubleUsingseconds_dNegDouble_greatestFiniteMagnitudeExpectingDoubleNegDouble_greatestFiniteMagnitude() {
        let expected = s_d_to_d(seconds_d(-Double.greatestFiniteMagnitude))
        let result = Double(Seconds_d(seconds_d(-Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testseconds_dTodoubleUsingseconds_dDouble_greatestFiniteMagnitudeExpectingDoubleDouble_greatestFiniteMagnitude() {
        let expected = s_d_to_d(seconds_d(Double.greatestFiniteMagnitude))
        let result = Double(Seconds_d(seconds_d(Double.greatestFiniteMagnitude)))
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_dUsing0_0Expecting0_0() {
        let expected = d_to_s_d(0.0)
        let result = Seconds_d(Double(0.0)).rawValue
        XCTAssertEqual(expected, result)
    }

    func testdoubleToseconds_dUsing5_0Expecting5_0() {
        let expected = d_to_s_d(5.0)
        let result = Seconds_d(Double(5.0)).rawValue
        XCTAssertEqual(expected, result)
    }

}
